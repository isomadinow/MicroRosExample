
MicroRosExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015584  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d3c  08015788  08015788  00016788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080164c4  080164c4  00018234  2**0
                  CONTENTS
  4 .ARM          00000008  080164c4  080164c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164cc  080164cc  00018234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080164cc  080164cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080164d0  080164d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080164d4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010a48  20000238  08016708  00018238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010c80  08016708  00018c80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00018234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7ad  00000000  00000000  00018262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004271  00000000  00000000  00034a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  00038c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ae  00000000  00000000  0003a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d369  00000000  00000000  0003b50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce00  00000000  00000000  00068877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ee5a  00000000  00000000  00085677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  001944d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074fc  00000000  00000000  00194570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0019ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000238 	.word	0x20000238
 800021c:	00000000 	.word	0x00000000
 8000220:	0801576c 	.word	0x0801576c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000023c 	.word	0x2000023c
 800023c:	0801576c 	.word	0x0801576c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80006a6:	f000 b9ed 	b.w	8000a84 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800073c:	f000 b9a2 	b.w	8000a84 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	460c      	mov	r4, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d14e      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d4:	4694      	mov	ip, r2
 80007d6:	458c      	cmp	ip, r1
 80007d8:	4686      	mov	lr, r0
 80007da:	fab2 f282 	clz	r2, r2
 80007de:	d962      	bls.n	80008a6 <__udivmoddi4+0xde>
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	4091      	lsls	r1, r2
 80007e8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	4319      	orrs	r1, r3
 80007f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fa:	fa1f f68c 	uxth.w	r6, ip
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000806:	fb07 1114 	mls	r1, r7, r4, r1
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb04 f106 	mul.w	r1, r4, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800081e:	f080 8112 	bcs.w	8000a46 <__udivmoddi4+0x27e>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 810f 	bls.w	8000a46 <__udivmoddi4+0x27e>
 8000828:	3c02      	subs	r4, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb00 f606 	mul.w	r6, r0, r6
 8000842:	429e      	cmp	r6, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800084e:	f080 80fc 	bcs.w	8000a4a <__udivmoddi4+0x282>
 8000852:	429e      	cmp	r6, r3
 8000854:	f240 80f9 	bls.w	8000a4a <__udivmoddi4+0x282>
 8000858:	4463      	add	r3, ip
 800085a:	3802      	subs	r0, #2
 800085c:	1b9b      	subs	r3, r3, r6
 800085e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000862:	2100      	movs	r1, #0
 8000864:	b11d      	cbz	r5, 800086e <__udivmoddi4+0xa6>
 8000866:	40d3      	lsrs	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e9c5 3200 	strd	r3, r2, [r5]
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d905      	bls.n	8000882 <__udivmoddi4+0xba>
 8000876:	b10d      	cbz	r5, 800087c <__udivmoddi4+0xb4>
 8000878:	e9c5 0100 	strd	r0, r1, [r5]
 800087c:	2100      	movs	r1, #0
 800087e:	4608      	mov	r0, r1
 8000880:	e7f5      	b.n	800086e <__udivmoddi4+0xa6>
 8000882:	fab3 f183 	clz	r1, r3
 8000886:	2900      	cmp	r1, #0
 8000888:	d146      	bne.n	8000918 <__udivmoddi4+0x150>
 800088a:	42a3      	cmp	r3, r4
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xcc>
 800088e:	4290      	cmp	r0, r2
 8000890:	f0c0 80f0 	bcc.w	8000a74 <__udivmoddi4+0x2ac>
 8000894:	1a86      	subs	r6, r0, r2
 8000896:	eb64 0303 	sbc.w	r3, r4, r3
 800089a:	2001      	movs	r0, #1
 800089c:	2d00      	cmp	r5, #0
 800089e:	d0e6      	beq.n	800086e <__udivmoddi4+0xa6>
 80008a0:	e9c5 6300 	strd	r6, r3, [r5]
 80008a4:	e7e3      	b.n	800086e <__udivmoddi4+0xa6>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8090 	bne.w	80009cc <__udivmoddi4+0x204>
 80008ac:	eba1 040c 	sub.w	r4, r1, ip
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa1f f78c 	uxth.w	r7, ip
 80008b8:	2101      	movs	r1, #1
 80008ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80008be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ca:	fb07 f006 	mul.w	r0, r7, r6
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x11c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x11a>
 80008dc:	4298      	cmp	r0, r3
 80008de:	f200 80cd 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008e2:	4626      	mov	r6, r4
 80008e4:	1a1c      	subs	r4, r3, r0
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f6:	fb00 f707 	mul.w	r7, r0, r7
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0x148>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x146>
 8000908:	429f      	cmp	r7, r3
 800090a:	f200 80b0 	bhi.w	8000a6e <__udivmoddi4+0x2a6>
 800090e:	4620      	mov	r0, r4
 8000910:	1bdb      	subs	r3, r3, r7
 8000912:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000916:	e7a5      	b.n	8000864 <__udivmoddi4+0x9c>
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 f706 	lsr.w	r7, r2, r6
 8000922:	431f      	orrs	r7, r3
 8000924:	fa20 fc06 	lsr.w	ip, r0, r6
 8000928:	fa04 f301 	lsl.w	r3, r4, r1
 800092c:	ea43 030c 	orr.w	r3, r3, ip
 8000930:	40f4      	lsrs	r4, r6
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	0c38      	lsrs	r0, r7, #16
 8000938:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800093c:	fbb4 fef0 	udiv	lr, r4, r0
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fb00 441e 	mls	r4, r0, lr, r4
 8000948:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800094c:	fb0e f90c 	mul.w	r9, lr, ip
 8000950:	45a1      	cmp	r9, r4
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x1a6>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800095e:	f080 8084 	bcs.w	8000a6a <__udivmoddi4+0x2a2>
 8000962:	45a1      	cmp	r9, r4
 8000964:	f240 8081 	bls.w	8000a6a <__udivmoddi4+0x2a2>
 8000968:	f1ae 0e02 	sub.w	lr, lr, #2
 800096c:	443c      	add	r4, r7
 800096e:	eba4 0409 	sub.w	r4, r4, r9
 8000972:	fa1f f983 	uxth.w	r9, r3
 8000976:	fbb4 f3f0 	udiv	r3, r4, r0
 800097a:	fb00 4413 	mls	r4, r0, r3, r4
 800097e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000982:	fb03 fc0c 	mul.w	ip, r3, ip
 8000986:	45a4      	cmp	ip, r4
 8000988:	d907      	bls.n	800099a <__udivmoddi4+0x1d2>
 800098a:	193c      	adds	r4, r7, r4
 800098c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000990:	d267      	bcs.n	8000a62 <__udivmoddi4+0x29a>
 8000992:	45a4      	cmp	ip, r4
 8000994:	d965      	bls.n	8000a62 <__udivmoddi4+0x29a>
 8000996:	3b02      	subs	r3, #2
 8000998:	443c      	add	r4, r7
 800099a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800099e:	fba0 9302 	umull	r9, r3, r0, r2
 80009a2:	eba4 040c 	sub.w	r4, r4, ip
 80009a6:	429c      	cmp	r4, r3
 80009a8:	46ce      	mov	lr, r9
 80009aa:	469c      	mov	ip, r3
 80009ac:	d351      	bcc.n	8000a52 <__udivmoddi4+0x28a>
 80009ae:	d04e      	beq.n	8000a4e <__udivmoddi4+0x286>
 80009b0:	b155      	cbz	r5, 80009c8 <__udivmoddi4+0x200>
 80009b2:	ebb8 030e 	subs.w	r3, r8, lr
 80009b6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ba:	fa04 f606 	lsl.w	r6, r4, r6
 80009be:	40cb      	lsrs	r3, r1
 80009c0:	431e      	orrs	r6, r3
 80009c2:	40cc      	lsrs	r4, r1
 80009c4:	e9c5 6400 	strd	r6, r4, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	e750      	b.n	800086e <__udivmoddi4+0xa6>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f103 	lsr.w	r1, r0, r3
 80009d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d8:	fa24 f303 	lsr.w	r3, r4, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	430c      	orrs	r4, r1
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3110 	mls	r1, r8, r0, r3
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x24c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29e>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29e>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x276>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x296>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x296>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e739      	b.n	80008ba <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f0      	b.n	800082c <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e706      	b.n	800085c <__udivmoddi4+0x94>
 8000a4e:	45c8      	cmp	r8, r9
 8000a50:	d2ae      	bcs.n	80009b0 <__udivmoddi4+0x1e8>
 8000a52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a8      	b.n	80009b0 <__udivmoddi4+0x1e8>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x276>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e799      	b.n	800099a <__udivmoddi4+0x1d2>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x24c>
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	e77f      	b.n	800096e <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74d      	b.n	8000910 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e70f      	b.n	800089c <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e730      	b.n	80008e4 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000a94:	f005 ff60 	bl	8006958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a98:	4b5d      	ldr	r3, [pc, #372]	@ (8000c10 <pvPortMallocMicroROS+0x188>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d101      	bne.n	8000aa4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000aa0:	f000 f990 	bl	8000dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8000c14 <pvPortMallocMicroROS+0x18c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f040 8094 	bne.w	8000bda <pvPortMallocMicroROS+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d020      	beq.n	8000afa <pvPortMallocMicroROS+0x72>
			{
				xWantedSize += xHeapStructSize;
 8000ab8:	2208      	movs	r2, #8
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d017      	beq.n	8000afa <pvPortMallocMicroROS+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f023 0307 	bic.w	r3, r3, #7
 8000ad0:	3308      	adds	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00d      	beq.n	8000afa <pvPortMallocMicroROS+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae2:	b672      	cpsid	i
 8000ae4:	f383 8811 	msr	BASEPRI, r3
 8000ae8:	f3bf 8f6f 	isb	sy
 8000aec:	f3bf 8f4f 	dsb	sy
 8000af0:	b662      	cpsie	i
 8000af2:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	e7fd      	b.n	8000af6 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d06c      	beq.n	8000bda <pvPortMallocMicroROS+0x152>
 8000b00:	4b45      	ldr	r3, [pc, #276]	@ (8000c18 <pvPortMallocMicroROS+0x190>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d867      	bhi.n	8000bda <pvPortMallocMicroROS+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b0a:	4b44      	ldr	r3, [pc, #272]	@ (8000c1c <pvPortMallocMicroROS+0x194>)
 8000b0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b0e:	4b43      	ldr	r3, [pc, #268]	@ (8000c1c <pvPortMallocMicroROS+0x194>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b14:	e004      	b.n	8000b20 <pvPortMallocMicroROS+0x98>
				{
					pxPreviousBlock = pxBlock;
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d903      	bls.n	8000b32 <pvPortMallocMicroROS+0xaa>
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f1      	bne.n	8000b16 <pvPortMallocMicroROS+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b32:	4b37      	ldr	r3, [pc, #220]	@ (8000c10 <pvPortMallocMicroROS+0x188>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d04e      	beq.n	8000bda <pvPortMallocMicroROS+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2208      	movs	r2, #8
 8000b42:	4413      	add	r3, r2
 8000b44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	1ad2      	subs	r2, r2, r3
 8000b56:	2308      	movs	r3, #8
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d922      	bls.n	8000ba4 <pvPortMallocMicroROS+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00d      	beq.n	8000b8c <pvPortMallocMicroROS+0x104>
	__asm volatile
 8000b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b74:	b672      	cpsid	i
 8000b76:	f383 8811 	msr	BASEPRI, r3
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	b662      	cpsie	i
 8000b84:	613b      	str	r3, [r7, #16]
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <pvPortMallocMicroROS+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b9e:	69b8      	ldr	r0, [r7, #24]
 8000ba0:	f000 f972 	bl	8000e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <pvPortMallocMicroROS+0x190>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	4a1a      	ldr	r2, [pc, #104]	@ (8000c18 <pvPortMallocMicroROS+0x190>)
 8000bb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <pvPortMallocMicroROS+0x190>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <pvPortMallocMicroROS+0x198>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d203      	bcs.n	8000bc6 <pvPortMallocMicroROS+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <pvPortMallocMicroROS+0x190>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <pvPortMallocMicroROS+0x198>)
 8000bc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <pvPortMallocMicroROS+0x18c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000bda:	f005 fecb 	bl	8006974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00d      	beq.n	8000c04 <pvPortMallocMicroROS+0x17c>
	__asm volatile
 8000be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bec:	b672      	cpsid	i
 8000bee:	f383 8811 	msr	BASEPRI, r3
 8000bf2:	f3bf 8f6f 	isb	sy
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	b662      	cpsie	i
 8000bfc:	60fb      	str	r3, [r7, #12]
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <pvPortMallocMicroROS+0x178>
	return pvReturn;
 8000c04:	69fb      	ldr	r3, [r7, #28]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20003e5c 	.word	0x20003e5c
 8000c14:	20003e68 	.word	0x20003e68
 8000c18:	20003e60 	.word	0x20003e60
 8000c1c:	20003e54 	.word	0x20003e54
 8000c20:	20003e64 	.word	0x20003e64

08000c24 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d04e      	beq.n	8000cd4 <vPortFreeMicroROS+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000c36:	2308      	movs	r3, #8
 8000c38:	425b      	negs	r3, r3
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <vPortFreeMicroROS+0xb8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10d      	bne.n	8000c6e <vPortFreeMicroROS+0x4a>
	__asm volatile
 8000c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c56:	b672      	cpsid	i
 8000c58:	f383 8811 	msr	BASEPRI, r3
 8000c5c:	f3bf 8f6f 	isb	sy
 8000c60:	f3bf 8f4f 	dsb	sy
 8000c64:	b662      	cpsie	i
 8000c66:	60fb      	str	r3, [r7, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	e7fd      	b.n	8000c6a <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00d      	beq.n	8000c92 <vPortFreeMicroROS+0x6e>
	__asm volatile
 8000c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c7a:	b672      	cpsid	i
 8000c7c:	f383 8811 	msr	BASEPRI, r3
 8000c80:	f3bf 8f6f 	isb	sy
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	b662      	cpsie	i
 8000c8a:	60bb      	str	r3, [r7, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	e7fd      	b.n	8000c8e <vPortFreeMicroROS+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <vPortFreeMicroROS+0xb8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d019      	beq.n	8000cd4 <vPortFreeMicroROS+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d115      	bne.n	8000cd4 <vPortFreeMicroROS+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <vPortFreeMicroROS+0xb8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000cb8:	f005 fe4e 	bl	8006958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <vPortFreeMicroROS+0xbc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a06      	ldr	r2, [pc, #24]	@ (8000ce0 <vPortFreeMicroROS+0xbc>)
 8000cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000cca:	6938      	ldr	r0, [r7, #16]
 8000ccc:	f000 f8dc 	bl	8000e88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000cd0:	f005 fe50 	bl	8006974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20003e68 	.word	0x20003e68
 8000ce0:	20003e60 	.word	0x20003e60

08000ce4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <getBlockSize+0x38>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

	return count;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20003e68 	.word	0x20003e68

08000d20 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d2a:	f005 fe15 	bl	8006958 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000d2e:	6838      	ldr	r0, [r7, #0]
 8000d30:	f7ff feaa 	bl	8000a88 <pvPortMallocMicroROS>
 8000d34:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d017      	beq.n	8000d6c <pvPortReallocMicroROS+0x4c>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d014      	beq.n	8000d6c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffce 	bl	8000ce4 <getBlockSize>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d201      	bcs.n	8000d5c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	68b8      	ldr	r0, [r7, #8]
 8000d62:	f011 fb7a 	bl	801245a <memcpy>

		vPortFreeMicroROS(pv);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff5c 	bl	8000c24 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000d6c:	f005 fe02 	bl	8006974 <xTaskResumeAll>

	return newmem;
 8000d70:	68bb      	ldr	r3, [r7, #8]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d84:	f005 fde8 	bl	8006958 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff fe78 	bl	8000a88 <pvPortMallocMicroROS>
 8000d98:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000d9e:	e004      	b.n	8000daa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	613a      	str	r2, [r7, #16]
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	617a      	str	r2, [r7, #20]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f5      	bne.n	8000da0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000db4:	f005 fdde 	bl	8006974 <xTaskResumeAll>
  	return mem;
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000dca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000dd0:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <prvHeapInit+0xac>)
 8000dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00c      	beq.n	8000df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3307      	adds	r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e70 <prvHeapInit+0xac>)
 8000df4:	4413      	add	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e74 <prvHeapInit+0xb0>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <prvHeapInit+0xb0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000e10:	2208      	movs	r2, #8
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f023 0307 	bic.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4a15      	ldr	r2, [pc, #84]	@ (8000e78 <prvHeapInit+0xb4>)
 8000e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <prvHeapInit+0xb4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <prvHeapInit+0xb4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	1ad2      	subs	r2, r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <prvHeapInit+0xb4>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <prvHeapInit+0xb8>)
 8000e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <prvHeapInit+0xbc>)
 8000e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <prvHeapInit+0xc0>)
 8000e5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000254 	.word	0x20000254
 8000e74:	20003e54 	.word	0x20003e54
 8000e78:	20003e5c 	.word	0x20003e5c
 8000e7c:	20003e64 	.word	0x20003e64
 8000e80:	20003e60 	.word	0x20003e60
 8000e84:	20003e68 	.word	0x20003e68

08000e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000e90:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <prvInsertBlockIntoFreeList+0xac>)
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e002      	b.n	8000e9c <prvInsertBlockIntoFreeList+0x14>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d8f7      	bhi.n	8000e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d108      	bne.n	8000eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	441a      	add	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	441a      	add	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d118      	bne.n	8000f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <prvInsertBlockIntoFreeList+0xb0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d00d      	beq.n	8000f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	441a      	add	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e008      	b.n	8000f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <prvInsertBlockIntoFreeList+0xb0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e003      	b.n	8000f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d002      	beq.n	8000f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20003e54 	.word	0x20003e54
 8000f38:	20003e5c 	.word	0x20003e5c

08000f3c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <MX_FREERTOS_Init+0x18>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_FREERTOS_Init+0x1c>)
 8000f46:	f004 fbdf 	bl	8005708 <osThreadNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a03      	ldr	r2, [pc, #12]	@ (8000f5c <MX_FREERTOS_Init+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08015820 	.word	0x08015820
 8000f58:	08000f61 	.word	0x08000f61
 8000f5c:	20003e6c 	.word	0x20003e6c

08000f60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b0a8      	sub	sp, #160	@ 0xa0
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000f68:	4b34      	ldr	r3, [pc, #208]	@ (800103c <StartDefaultTask+0xdc>)
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <StartDefaultTask+0xe0>)
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4b34      	ldr	r3, [pc, #208]	@ (8001044 <StartDefaultTask+0xe4>)
 8000f72:	4a35      	ldr	r2, [pc, #212]	@ (8001048 <StartDefaultTask+0xe8>)
 8000f74:	4935      	ldr	r1, [pc, #212]	@ (800104c <StartDefaultTask+0xec>)
 8000f76:	2001      	movs	r0, #1
 8000f78:	f007 fdd2 	bl	8008b20 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000f7c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 fb99 	bl	80086b8 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000f86:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <StartDefaultTask+0xf0>)
 8000f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000f8c:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <StartDefaultTask+0xf4>)
 8000f8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000f92:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <StartDefaultTask+0xf8>)
 8000f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <StartDefaultTask+0xfc>)
 8000f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f9e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f007 fb96 	bl	80086d4 <rcutils_set_default_allocator>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f083 0301 	eor.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <StartDefaultTask+0x5c>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000fb4:	21a1      	movs	r1, #161	@ 0xa1
 8000fb6:	482a      	ldr	r0, [pc, #168]	@ (8001060 <StartDefaultTask+0x100>)
 8000fb8:	f011 f8a0 	bl	80120fc <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f007 fba8 	bl	8008714 <rcutils_get_default_allocator>
 8000fc4:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000fc8:	463d      	mov	r5, r7
 8000fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fce:	682b      	ldr	r3, [r5, #0]
 8000fd0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f007 fa9f 	bl	8008520 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000fe2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fe6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000fea:	4a1e      	ldr	r2, [pc, #120]	@ (8001064 <StartDefaultTask+0x104>)
 8000fec:	491e      	ldr	r1, [pc, #120]	@ (8001068 <StartDefaultTask+0x108>)
 8000fee:	f007 fae5 	bl	80085bc <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8000ff2:	f008 f9ef 	bl	80093d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000ffc:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8001000:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <StartDefaultTask+0x10c>)
 8001002:	f007 fb1b 	bl	800863c <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	67bb      	str	r3, [r7, #120]	@ 0x78

	  for(;;)
	  {
	    rcl_ret_t ret;

		ret = rcl_publish(&publisher, &msg, NULL);
 800100a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800100e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001012:	2200      	movs	r2, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f007 fa5f 	bl	80084d8 <rcl_publish>
 800101a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (ret != RCL_RET_OK)
 800101e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <StartDefaultTask+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001026:	21c4      	movs	r1, #196	@ 0xc4
 8001028:	4811      	ldr	r0, [pc, #68]	@ (8001070 <StartDefaultTask+0x110>)
 800102a:	f011 f867 	bl	80120fc <iprintf>
	    }

	    msg.data++;
 800102e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001030:	3301      	adds	r3, #1
 8001032:	67bb      	str	r3, [r7, #120]	@ 0x78
	    osDelay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f004 fc0d 	bl	8005854 <osDelay>
	  {
 800103a:	e7e6      	b.n	800100a <StartDefaultTask+0xaa>
 800103c:	08001775 	.word	0x08001775
 8001040:	08001715 	.word	0x08001715
 8001044:	080016f5 	.word	0x080016f5
 8001048:	080016cd 	.word	0x080016cd
 800104c:	20007614 	.word	0x20007614
 8001050:	08001261 	.word	0x08001261
 8001054:	080012a5 	.word	0x080012a5
 8001058:	080012dd 	.word	0x080012dd
 800105c:	08001349 	.word	0x08001349
 8001060:	08015794 	.word	0x08015794
 8001064:	080157bc 	.word	0x080157bc
 8001068:	080157c0 	.word	0x080157c0
 800106c:	080157cc 	.word	0x080157cc
 8001070:	080157e0 	.word	0x080157e0

08001074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 8001080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_GPIO_Init+0x5c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010d8:	f000 f87e 	bl	80011d8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f000 fd3d 	bl	8001b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f80c 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f7ff ffc6 	bl	8001074 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010e8:	f000 fc76 	bl	80019d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ec:	f004 faa2 	bl	8005634 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010f0:	f7ff ff24 	bl	8000f3c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010f4:	f004 fad2 	bl	800569c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <main+0x24>

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2234      	movs	r2, #52	@ 0x34
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f011 f8d8 	bl	80122c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <SystemClock_Config+0xd4>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a2a      	ldr	r2, [pc, #168]	@ (80011d0 <SystemClock_Config+0xd4>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <SystemClock_Config+0xd4>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <SystemClock_Config+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a25      	ldr	r2, [pc, #148]	@ (80011d4 <SystemClock_Config+0xd8>)
 800113e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <SystemClock_Config+0xd8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	2310      	movs	r3, #16
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115c:	2302      	movs	r3, #2
 800115e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001164:	2308      	movs	r3, #8
 8001166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001168:	23d8      	movs	r3, #216	@ 0xd8
 800116a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4618      	mov	r0, r3
 800117e:	f001 f901 	bl	8002384 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001188:	f000 f864 	bl	8001254 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800118c:	f001 f8aa 	bl	80022e4 <HAL_PWREx_EnableOverDrive>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001196:	f000 f85d 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	230f      	movs	r3, #15
 800119c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	2302      	movs	r3, #2
 80011a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2107      	movs	r1, #7
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fb91 	bl	80028e0 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80011c4:	f000 f846 	bl	8001254 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3750      	adds	r7, #80	@ 0x50
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011ea:	f000 fdc5 	bl	8001d78 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011fa:	231f      	movs	r3, #31
 80011fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011fe:	2387      	movs	r3, #135	@ 0x87
 8001200:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001202:	2300      	movs	r3, #0
 8001204:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001206:	2300      	movs	r3, #0
 8001208:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800120a:	2301      	movs	r3, #1
 800120c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800120e:	2301      	movs	r3, #1
 8001210:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800121a:	463b      	mov	r3, r7
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fde3 	bl	8001de8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001222:	2004      	movs	r0, #4
 8001224:	f000 fdc0 	bl	8001da8 <HAL_MPU_Enable>

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001242:	f000 fc97 	bl	8001b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40002000 	.word	0x40002000

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <Error_Handler+0x8>

08001260 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <microros_allocate+0x3c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <microros_allocate+0x3c>)
 8001278:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <microros_allocate+0x40>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <microros_allocate+0x40>)
 8001288:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fbfc 	bl	8000a88 <pvPortMallocMicroROS>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20006dac 	.word	0x20006dac
 80012a0:	20006db0 	.word	0x20006db0

080012a4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00c      	beq.n	80012ce <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fd15 	bl	8000ce4 <getBlockSize>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <microros_deallocate+0x34>)
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <microros_deallocate+0x34>)
 80012c6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fcab 	bl	8000c24 <vPortFreeMicroROS>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20006db0 	.word	0x20006db0

080012dc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <microros_reallocate+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <microros_reallocate+0x64>)
 80012f6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <microros_reallocate+0x68>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <microros_reallocate+0x68>)
 8001306:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d104      	bne.n	8001318 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f7ff fbba 	bl	8000a88 <pvPortMallocMicroROS>
 8001314:	4603      	mov	r3, r0
 8001316:	e00e      	b.n	8001336 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f7ff fce3 	bl	8000ce4 <getBlockSize>
 800131e:	4603      	mov	r3, r0
 8001320:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <microros_reallocate+0x68>)
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	461a      	mov	r2, r3
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <microros_reallocate+0x68>)
 800132a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff fcf6 	bl	8000d20 <pvPortReallocMicroROS>
 8001334:	4603      	mov	r3, r0
  }
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20006dac 	.word	0x20006dac
 8001344:	20006db0 	.word	0x20006db0

08001348 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <microros_zero_allocate+0x48>)
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	4413      	add	r3, r2
 8001362:	461a      	mov	r2, r3
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <microros_zero_allocate+0x48>)
 8001366:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <microros_zero_allocate+0x4c>)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	4413      	add	r3, r2
 8001376:	461a      	mov	r2, r3
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <microros_zero_allocate+0x4c>)
 800137a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff fcfb 	bl	8000d7a <pvPortCallocMicroROS>
 8001384:	4603      	mov	r3, r0
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20006dac 	.word	0x20006dac
 8001394:	20006db0 	.word	0x20006db0

08001398 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80013aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ae:	a320      	add	r3, pc, #128	@ (adr r3, 8001430 <UTILS_NanosecondsToTimespec+0x98>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f968 	bl	8000688 <__aeabi_ldivmod>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80013c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001430 <UTILS_NanosecondsToTimespec+0x98>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff f95c 	bl	8000688 <__aeabi_ldivmod>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da20      	bge.n	800141e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <UTILS_NanosecondsToTimespec+0x90>)
 80013e2:	fb82 1203 	smull	r1, r2, r2, r3
 80013e6:	1712      	asrs	r2, r2, #28
 80013e8:	17db      	asrs	r3, r3, #31
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	17c8      	asrs	r0, r1, #31
 80013fa:	460c      	mov	r4, r1
 80013fc:	4605      	mov	r5, r0
 80013fe:	ebb2 0804 	subs.w	r8, r2, r4
 8001402:	eb63 0905 	sbc.w	r9, r3, r5
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4906      	ldr	r1, [pc, #24]	@ (800142c <UTILS_NanosecondsToTimespec+0x94>)
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	441a      	add	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	609a      	str	r2, [r3, #8]
    }
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	44b82fa1 	.word	0x44b82fa1
 800142c:	3b9aca00 	.word	0x3b9aca00
 8001430:	3b9aca00 	.word	0x3b9aca00
 8001434:	00000000 	.word	0x00000000

08001438 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b08e      	sub	sp, #56	@ 0x38
 800143e:	af00      	add	r7, sp, #0
 8001440:	6278      	str	r0, [r7, #36]	@ 0x24
 8001442:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001444:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001448:	2300      	movs	r3, #0
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4618      	mov	r0, r3
 8001460:	f005 fd10 	bl	8006e84 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001466:	17da      	asrs	r2, r3, #31
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	61fa      	str	r2, [r7, #28]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	69b9      	ldr	r1, [r7, #24]
 8001476:	000b      	movs	r3, r1
 8001478:	2200      	movs	r2, #0
 800147a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800147e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001480:	2200      	movs	r2, #0
 8001482:	461c      	mov	r4, r3
 8001484:	4615      	mov	r5, r2
 8001486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800148a:	1911      	adds	r1, r2, r4
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	416b      	adcs	r3, r5
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001496:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800149a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	f04f 0400 	mov.w	r4, #0
 80014a6:	f04f 0500 	mov.w	r5, #0
 80014aa:	015d      	lsls	r5, r3, #5
 80014ac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80014b0:	0154      	lsls	r4, r2, #5
 80014b2:	4622      	mov	r2, r4
 80014b4:	462b      	mov	r3, r5
 80014b6:	ebb2 0800 	subs.w	r8, r2, r0
 80014ba:	eb63 0901 	sbc.w	r9, r3, r1
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80014ca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80014ce:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80014d2:	4690      	mov	r8, r2
 80014d4:	4699      	mov	r9, r3
 80014d6:	eb18 0a00 	adds.w	sl, r8, r0
 80014da:	eb49 0b01 	adc.w	fp, r9, r1
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014f2:	ebb2 040a 	subs.w	r4, r2, sl
 80014f6:	603c      	str	r4, [r7, #0]
 80014f8:	eb63 030b 	sbc.w	r3, r3, fp
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001502:	4623      	mov	r3, r4
 8001504:	181b      	adds	r3, r3, r0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	462b      	mov	r3, r5
 800150a:	eb41 0303 	adc.w	r3, r1, r3
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	6a3a      	ldr	r2, [r7, #32]
 8001512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001516:	f7ff ff3f 	bl	8001398 <UTILS_NanosecondsToTimespec>

    return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	4618      	mov	r0, r3
 800151e:	3738      	adds	r7, #56	@ 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a10      	ldr	r2, [pc, #64]	@ (8001574 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001550:	6453      	str	r3, [r2, #68]	@ 0x44
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	210f      	movs	r1, #15
 8001562:	f06f 0001 	mvn.w	r0, #1
 8001566:	f000 fbdd 	bl	8001d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	@ 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001588:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <HAL_InitTick+0xe0>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	4a32      	ldr	r2, [pc, #200]	@ (8001658 <HAL_InitTick+0xe0>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40
 8001594:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <HAL_InitTick+0xe0>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a0:	f107 0210 	add.w	r2, r7, #16
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 fb7e 	bl	8002cac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ba:	f001 fb4f 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80015be:	6378      	str	r0, [r7, #52]	@ 0x34
 80015c0:	e004      	b.n	80015cc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015c2:	f001 fb4b 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80015c6:	4603      	mov	r3, r0
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ce:	4a23      	ldr	r2, [pc, #140]	@ (800165c <HAL_InitTick+0xe4>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	0c9b      	lsrs	r3, r3, #18
 80015d6:	3b01      	subs	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <HAL_InitTick+0xe8>)
 80015dc:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_InitTick+0xec>)
 80015de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <HAL_InitTick+0xe8>)
 80015e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015e6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80015e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <HAL_InitTick+0xe8>)
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_InitTick+0xe8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_InitTick+0xe8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_InitTick+0xe8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001600:	4817      	ldr	r0, [pc, #92]	@ (8001660 <HAL_InitTick+0xe8>)
 8001602:	f001 ffad 	bl	8003560 <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800160c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001610:	2b00      	cmp	r3, #0
 8001612:	d11b      	bne.n	800164c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001614:	4812      	ldr	r0, [pc, #72]	@ (8001660 <HAL_InitTick+0xe8>)
 8001616:	f002 f805 	bl	8003624 <HAL_TIM_Base_Start_IT>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001620:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001624:	2b00      	cmp	r3, #0
 8001626:	d111      	bne.n	800164c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001628:	202d      	movs	r0, #45	@ 0x2d
 800162a:	f000 fb97 	bl	8001d5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d808      	bhi.n	8001646 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	202d      	movs	r0, #45	@ 0x2d
 800163a:	f000 fb73 	bl	8001d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_InitTick+0xf0>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e002      	b.n	800164c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800164c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001650:	4618      	mov	r0, r3
 8001652:	3738      	adds	r7, #56	@ 0x38
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	431bde83 	.word	0x431bde83
 8001660:	20006db4 	.word	0x20006db4
 8001664:	40002000 	.word	0x40002000
 8001668:	20000008 	.word	0x20000008

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <NMI_Handler+0x4>

08001674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <MemManage_Handler+0x4>

08001684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <UsageFault_Handler+0x4>

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <USART3_IRQHandler+0x10>)
 80016aa:	f002 fc43 	bl	8003f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20007614 	.word	0x20007614

080016b8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80016be:	f002 f829 	bl	8003714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20006db4 	.word	0x20006db4

080016cc <cubemx_transport_open>:
static uint8_t it_buffer[UART_IT_BUFFER_SIZE];
static uint8_t it_data;
static size_t it_head = 0, it_tail = 0;


bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80016da:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_IT(uart, &it_data, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	4904      	ldr	r1, [pc, #16]	@ (80016f0 <cubemx_transport_open+0x24>)
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f002 fabd 	bl	8003c60 <HAL_UART_Receive_IT>
    return true;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20007600 	.word	0x20007600

080016f4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001702:	60fb      	str	r3, [r7, #12]
    HAL_UART_Abort_IT(uart);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f002 faef 	bl	8003ce8 <HAL_UART_Abort_IT>
    return true;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001728:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800172e:	2b20      	cmp	r3, #32
 8001730:	d11a      	bne.n	8001768 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_IT(uart, buf, len);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	b29b      	uxth	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f002 fa32 	bl	8003ba4 <HAL_UART_Transmit_IT>
 8001740:	4603      	mov	r3, r0
 8001742:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001744:	e002      	b.n	800174c <cubemx_transport_write+0x38>
            osDelay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f004 f884 	bl	8005854 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800174c:	7cfb      	ldrb	r3, [r7, #19]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <cubemx_transport_write+0x46>
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001756:	2b20      	cmp	r3, #32
 8001758:	d1f5      	bne.n	8001746 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <cubemx_transport_write+0x50>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	e002      	b.n	800176a <cubemx_transport_write+0x56>
 8001764:	2300      	movs	r3, #0
 8001766:	e000      	b.n	800176a <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001768:	2300      	movs	r3, #0
    }
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
    size_t wrote = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 8001786:	e011      	b.n	80017ac <cubemx_transport_read+0x38>
        buf[wrote] = it_buffer[it_head];
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <cubemx_transport_read+0x5c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	440b      	add	r3, r1
 8001792:	4910      	ldr	r1, [pc, #64]	@ (80017d4 <cubemx_transport_read+0x60>)
 8001794:	5c8a      	ldrb	r2, [r1, r2]
 8001796:	701a      	strb	r2, [r3, #0]
        it_head = (it_head + 1) % UART_IT_BUFFER_SIZE;
 8001798:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <cubemx_transport_read+0x5c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <cubemx_transport_read+0x5c>)
 80017a4:	6013      	str	r3, [r2, #0]
        wrote++;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <cubemx_transport_read+0x5c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <cubemx_transport_read+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d003      	beq.n	80017c0 <cubemx_transport_read+0x4c>
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3e3      	bcc.n	8001788 <cubemx_transport_read+0x14>
    }

    return wrote;
 80017c0:	697b      	ldr	r3, [r7, #20]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20007604 	.word	0x20007604
 80017d4:	20006e00 	.word	0x20006e00
 80017d8:	20007608 	.word	0x20007608

080017dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    if(it_tail == UART_IT_BUFFER_SIZE)
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_UART_RxCpltCallback+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017ec:	d102      	bne.n	80017f4 <HAL_UART_RxCpltCallback+0x18>
        it_tail = 0;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_UART_RxCpltCallback+0x40>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

    it_buffer[it_tail] = it_data;
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_UART_RxCpltCallback+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <HAL_UART_RxCpltCallback+0x44>)
 80017fa:	7811      	ldrb	r1, [r2, #0]
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <HAL_UART_RxCpltCallback+0x48>)
 80017fe:	54d1      	strb	r1, [r2, r3]
    it_tail++;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_UART_RxCpltCallback+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <HAL_UART_RxCpltCallback+0x40>)
 8001808:	6013      	str	r3, [r2, #0]

    HAL_UART_Receive_IT(huart, &it_data, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	4904      	ldr	r1, [pc, #16]	@ (8001820 <HAL_UART_RxCpltCallback+0x44>)
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f002 fa26 	bl	8003c60 <HAL_UART_Receive_IT>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20007608 	.word	0x20007608
 8001820:	20007600 	.word	0x20007600
 8001824:	20006e00 	.word	0x20006e00

08001828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_kill>:

int _kill(int pid, int sig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001842:	f010 fdd5 	bl	80123f0 <__errno>
 8001846:	4603      	mov	r3, r0
 8001848:	2216      	movs	r2, #22
 800184a:	601a      	str	r2, [r3, #0]
  return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_exit>:

void _exit (int status)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001860:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffe7 	bl	8001838 <_kill>
  while (1) {}    /* Make sure we hang here */
 800186a:	bf00      	nop
 800186c:	e7fd      	b.n	800186a <_exit+0x12>

0800186e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00a      	b.n	8001896 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001880:	f3af 8000 	nop.w
 8001884:	4601      	mov	r1, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	60ba      	str	r2, [r7, #8]
 800188c:	b2ca      	uxtb	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbf0      	blt.n	8001880 <_read+0x12>
  }

  return len;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e009      	b.n	80018ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf1      	blt.n	80018ba <_write+0x12>
  }
  return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_close>:

int _close(int file)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001908:	605a      	str	r2, [r3, #4]
  return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_isatty>:

int _isatty(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f010 fd3a 	bl	80123f0 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20080000 	.word	0x20080000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20007610 	.word	0x20007610
 80019b0:	20010c80 	.word	0x20010c80

080019b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019de:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <MX_USART3_UART_Init+0x5c>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a1c:	f002 f874 	bl	8003b08 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a26:	f7ff fc15 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20007614 	.word	0x20007614
 8001a34:	40004800 	.word	0x40004800

08001a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0ae      	sub	sp, #184	@ 0xb8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2290      	movs	r2, #144	@ 0x90
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f010 fc31 	bl	80122c0 <memset>
  if(uartHandle->Instance==USART3)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a26      	ldr	r2, [pc, #152]	@ (8001afc <HAL_UART_MspInit+0xc4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d144      	bne.n	8001af2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 f94a 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a82:	f7ff fbe7 	bl	8001254 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <HAL_UART_MspInit+0xc8>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b00 <HAL_UART_MspInit+0xc8>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_UART_MspInit+0xc8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_UART_MspInit+0xc8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_UART_MspInit+0xc8>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_UART_MspInit+0xc8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ab6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <HAL_UART_MspInit+0xcc>)
 8001ade:	f000 fa55 	bl	8001f8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2027      	movs	r0, #39	@ 0x27
 8001ae8:	f000 f91c 	bl	8001d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001aec:	2027      	movs	r0, #39	@ 0x27
 8001aee:	f000 f935 	bl	8001d5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	37b8      	adds	r7, #184	@ 0xb8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40004800 	.word	0x40004800
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020400 	.word	0x40020400

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b0c:	f7ff ff52 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f010 fc61 	bl	80123fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff facb 	bl	80010d4 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001b4c:	080164d4 	.word	0x080164d4
  ldr r2, =_sbss
 8001b50:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001b54:	20010c80 	.word	0x20010c80

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>

08001b5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5e:	2003      	movs	r0, #3
 8001b60:	f000 f8d5 	bl	8001d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b64:	200f      	movs	r0, #15
 8001b66:	f7ff fd07 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6a:	f7ff fcdd 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	2000769c 	.word	0x2000769c

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000769c 	.word	0x2000769c

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	05fa0000 	.word	0x05fa0000

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	@ (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	@ (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	@ (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff4c 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d36:	f7ff ff61 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	6978      	ldr	r0, [r7, #20]
 8001d42:	f7ff ffb1 	bl	8001ca8 <NVIC_EncodePriority>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff80 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff54 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d7c:	f3bf 8f5f 	dmb	sy
}
 8001d80:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <HAL_MPU_Disable+0x28>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_MPU_Disable+0x28>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_MPU_Disable+0x2c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	e000ed90 	.word	0xe000ed90

08001da8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001db0:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <HAL_MPU_Enable+0x38>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_MPU_Enable+0x3c>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	4a09      	ldr	r2, [pc, #36]	@ (8001de4 <HAL_MPU_Enable+0x3c>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001dc6:	f3bf 8f4f 	dsb	sy
}
 8001dca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dcc:	f3bf 8f6f 	isb	sy
}
 8001dd0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed90 	.word	0xe000ed90
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	785a      	ldrb	r2, [r3, #1]
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001df6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001df8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b1b      	ldrb	r3, [r3, #12]
 8001e10:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7adb      	ldrb	r3, [r3, #11]
 8001e16:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7a9b      	ldrb	r3, [r3, #10]
 8001e1e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7b5b      	ldrb	r3, [r3, #13]
 8001e26:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7b9b      	ldrb	r3, [r3, #14]
 8001e2e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7bdb      	ldrb	r3, [r3, #15]
 8001e36:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7a5b      	ldrb	r3, [r3, #9]
 8001e3e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7a1b      	ldrb	r3, [r3, #8]
 8001e46:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e48:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e52:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e54:	6113      	str	r3, [r2, #16]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed90 	.word	0xe000ed90

08001e68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e76:	f7ff fe91 	bl	8001b9c <HAL_GetTick>
 8001e7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d008      	beq.n	8001e9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2280      	movs	r2, #128	@ 0x80
 8001e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e052      	b.n	8001f40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0216 	bic.w	r2, r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_DMA_Abort+0x62>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0208 	bic.w	r2, r2, #8
 8001ed8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eea:	e013      	b.n	8001f14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eec:	f7ff fe56 	bl	8001b9c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d90c      	bls.n	8001f14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2203      	movs	r2, #3
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e015      	b.n	8001f40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1e4      	bne.n	8001eec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	223f      	movs	r2, #63	@ 0x3f
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d004      	beq.n	8001f66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00c      	b.n	8001f80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2205      	movs	r2, #5
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e175      	b.n	8002298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8164 	bne.w	8002292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x56>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80be 	beq.w	8002292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b66      	ldr	r3, [pc, #408]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	4a65      	ldr	r2, [pc, #404]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002120:	6453      	str	r3, [r2, #68]	@ 0x44
 8002122:	4b63      	ldr	r3, [pc, #396]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800212e:	4a61      	ldr	r2, [pc, #388]	@ (80022b4 <HAL_GPIO_Init+0x328>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a58      	ldr	r2, [pc, #352]	@ (80022b8 <HAL_GPIO_Init+0x32c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d037      	beq.n	80021ca <HAL_GPIO_Init+0x23e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_GPIO_Init+0x330>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_GPIO_Init+0x23a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a56      	ldr	r2, [pc, #344]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x236>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a55      	ldr	r2, [pc, #340]	@ (80022c4 <HAL_GPIO_Init+0x338>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x232>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a54      	ldr	r2, [pc, #336]	@ (80022c8 <HAL_GPIO_Init+0x33c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a53      	ldr	r2, [pc, #332]	@ (80022cc <HAL_GPIO_Init+0x340>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x22a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_GPIO_Init+0x344>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	@ (80022d4 <HAL_GPIO_Init+0x348>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	@ (80022d8 <HAL_GPIO_Init+0x34c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	@ (80022dc <HAL_GPIO_Init+0x350>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x21a>
 80021a2:	2309      	movs	r3, #9
 80021a4:	e012      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e010      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	@ (80022b4 <HAL_GPIO_Init+0x328>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a34      	ldr	r2, [pc, #208]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223e:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002262:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800228c:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae86 	bls.w	8001fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	@ 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022400 	.word	0x40022400
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_PWREx_EnableOverDrive+0x98>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	4a22      	ldr	r2, [pc, #136]	@ (800237c <HAL_PWREx_EnableOverDrive+0x98>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_PWREx_EnableOverDrive+0x98>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002306:	4b1e      	ldr	r3, [pc, #120]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1d      	ldr	r2, [pc, #116]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002310:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002312:	f7ff fc43 	bl	8001b9c <HAL_GetTick>
 8002316:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002318:	e009      	b.n	800232e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800231a:	f7ff fc3f 	bl	8001b9c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002328:	d901      	bls.n	800232e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e022      	b.n	8002374 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800232e:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800233a:	d1ee      	bne.n	800231a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800233c:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002346:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002348:	f7ff fc28 	bl	8001b9c <HAL_GetTick>
 800234c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800234e:	e009      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002350:	f7ff fc24 	bl	8001b9c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800235e:	d901      	bls.n	8002364 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e007      	b.n	8002374 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002370:	d1ee      	bne.n	8002350 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e29b      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8087 	beq.w	80024b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a8:	4b96      	ldr	r3, [pc, #600]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d00c      	beq.n	80023ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b4:	4b93      	ldr	r3, [pc, #588]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d112      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62>
 80023c0:	4b90      	ldr	r3, [pc, #576]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023cc:	d10b      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d06c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x130>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d168      	bne.n	80024b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e275      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x7a>
 80023f0:	4b84      	ldr	r3, [pc, #528]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a83      	ldr	r2, [pc, #524]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	e02e      	b.n	800245c <HAL_RCC_OscConfig+0xd8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x9c>
 8002406:	4b7f      	ldr	r3, [pc, #508]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7e      	ldr	r2, [pc, #504]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800240c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b7c      	ldr	r3, [pc, #496]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7b      	ldr	r2, [pc, #492]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e01d      	b.n	800245c <HAL_RCC_OscConfig+0xd8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0xc0>
 800242a:	4b76      	ldr	r3, [pc, #472]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a75      	ldr	r2, [pc, #468]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b73      	ldr	r3, [pc, #460]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a72      	ldr	r2, [pc, #456]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0xd8>
 8002444:	4b6f      	ldr	r3, [pc, #444]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6e      	ldr	r2, [pc, #440]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b6c      	ldr	r3, [pc, #432]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a6b      	ldr	r2, [pc, #428]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff fb9a 	bl	8001b9c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fb96 	bl	8001b9c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	@ 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e229      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b61      	ldr	r3, [pc, #388]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0xe8>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff fb86 	bl	8001b9c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff fb82 	bl	8001b9c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e215      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	4b57      	ldr	r3, [pc, #348]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x110>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d069      	beq.n	8002596 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c2:	4b50      	ldr	r3, [pc, #320]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11c      	bne.n	8002514 <HAL_RCC_OscConfig+0x190>
 80024da:	4b4a      	ldr	r3, [pc, #296]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d116      	bne.n	8002514 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_RCC_OscConfig+0x17a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1e9      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	493d      	ldr	r1, [pc, #244]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	e040      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d023      	beq.n	8002564 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251c:	4b39      	ldr	r3, [pc, #228]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a38      	ldr	r2, [pc, #224]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7ff fb38 	bl	8001b9c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7ff fb34 	bl	8001b9c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1c7      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b30      	ldr	r3, [pc, #192]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4929      	ldr	r1, [pc, #164]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002564:	4b27      	ldr	r3, [pc, #156]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a26      	ldr	r2, [pc, #152]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff fb14 	bl	8001b9c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002578:	f7ff fb10 	bl	8001b9c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1a3      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d038      	beq.n	8002614 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d019      	beq.n	80025de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ae:	4a15      	ldr	r2, [pc, #84]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7ff faf1 	bl	8001b9c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025be:	f7ff faed 	bl	8001b9c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e180      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x23a>
 80025dc:	e01a      	b.n	8002614 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e2:	4a08      	ldr	r2, [pc, #32]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7ff fad7 	bl	8001b9c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff fad3 	bl	8001b9c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d903      	bls.n	8002608 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e166      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
 8002604:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b92      	ldr	r3, [pc, #584]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a4 	beq.w	800276a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b8c      	ldr	r3, [pc, #560]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b89      	ldr	r3, [pc, #548]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a88      	ldr	r2, [pc, #544]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b86      	ldr	r3, [pc, #536]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	4b83      	ldr	r3, [pc, #524]	@ (8002858 <HAL_RCC_OscConfig+0x4d4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002656:	4b80      	ldr	r3, [pc, #512]	@ (8002858 <HAL_RCC_OscConfig+0x4d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7f      	ldr	r2, [pc, #508]	@ (8002858 <HAL_RCC_OscConfig+0x4d4>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7ff fa9b 	bl	8001b9c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff fa97 	bl	8001b9c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	@ 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e12a      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267c:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_RCC_OscConfig+0x4d4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x31a>
 8002690:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	4a6f      	ldr	r2, [pc, #444]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70
 800269c:	e02d      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x33c>
 80026a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b2:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	4a67      	ldr	r2, [pc, #412]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026be:	e01c      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x35e>
 80026c8:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a61      	ldr	r2, [pc, #388]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
 80026e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a58      	ldr	r2, [pc, #352]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7ff fa4b 	bl	8001b9c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff fa47 	bl	8001b9c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0d8      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4b4c      	ldr	r3, [pc, #304]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <HAL_RCC_OscConfig+0x386>
 800272c:	e014      	b.n	8002758 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7ff fa35 	bl	8001b9c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff fa31 	bl	8001b9c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0c2      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	4a3c      	ldr	r2, [pc, #240]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80ae 	beq.w	80028d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b37      	ldr	r3, [pc, #220]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d06d      	beq.n	800285c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d14b      	bne.n	8002820 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a31      	ldr	r2, [pc, #196]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800278e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff fa02 	bl	8001b9c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff f9fe 	bl	8001b9c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e091      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	491b      	ldr	r1, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff f9d0 	bl	8001b9c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff f9cc 	bl	8001b9c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e05f      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x47c>
 800281e:	e057      	b.n	80028d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0b      	ldr	r2, [pc, #44]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7ff f9b6 	bl	8001b9c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff f9b2 	bl	8001b9c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e045      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x4b0>
 8002852:	e03d      	b.n	80028d0 <HAL_RCC_OscConfig+0x54c>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800285c:	4b1f      	ldr	r3, [pc, #124]	@ (80028dc <HAL_RCC_OscConfig+0x558>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d030      	beq.n	80028cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d129      	bne.n	80028cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d122      	bne.n	80028cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002892:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002894:	4293      	cmp	r3, r2
 8002896:	d119      	bne.n	80028cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d10f      	bne.n	80028cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800

080028e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d0      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b67      	ldr	r3, [pc, #412]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	4965      	ldr	r1, [pc, #404]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a58      	ldr	r2, [pc, #352]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800294a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a52      	ldr	r2, [pc, #328]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002962:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d040      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e073      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e06b      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b39      	ldr	r3, [pc, #228]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4936      	ldr	r1, [pc, #216]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7ff f8e2 	bl	8001b9c <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7ff f8de 	bl	8001b9c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e053      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d210      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 020f 	bic.w	r2, r3, #15
 8002a1a:	4922      	ldr	r1, [pc, #136]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	@ (8002aac <HAL_RCC_ClockConfig+0x1cc>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1d4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fd70 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	08015844 	.word	0x08015844
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002abc:	b090      	sub	sp, #64	@ 0x40
 8002abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad0:	4b59      	ldr	r3, [pc, #356]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x40>
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	f200 80a1 	bhi.w	8002c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x34>
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aea:	e09b      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b53      	ldr	r3, [pc, #332]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002aee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002af0:	e09b      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af2:	4b53      	ldr	r3, [pc, #332]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002af6:	e098      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b02:	4b4d      	ldr	r3, [pc, #308]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	2200      	movs	r2, #0
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b20:	2100      	movs	r1, #0
 8002b22:	4b47      	ldr	r3, [pc, #284]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b24:	fb03 f201 	mul.w	r2, r3, r1
 8002b28:	2300      	movs	r3, #0
 8002b2a:	fb00 f303 	mul.w	r3, r0, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a43      	ldr	r2, [pc, #268]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b32:	fba0 1202 	umull	r1, r2, r0, r2
 8002b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b38:	460a      	mov	r2, r1
 8002b3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3e:	4413      	add	r3, r2
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b44:	2200      	movs	r2, #0
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	61fa      	str	r2, [r7, #28]
 8002b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b52:	f7fd fde9 	bl	8000728 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b5e:	e053      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b60:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	2200      	movs	r2, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	617a      	str	r2, [r7, #20]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b72:	f04f 0b00 	mov.w	fp, #0
 8002b76:	4652      	mov	r2, sl
 8002b78:	465b      	mov	r3, fp
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	0159      	lsls	r1, r3, #5
 8002b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b88:	0150      	lsls	r0, r2, #5
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b92:	eb63 090b 	sbc.w	r9, r3, fp
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002baa:	ebb2 0408 	subs.w	r4, r2, r8
 8002bae:	eb63 0509 	sbc.w	r5, r3, r9
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	00eb      	lsls	r3, r5, #3
 8002bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc0:	00e2      	lsls	r2, r4, #3
 8002bc2:	4614      	mov	r4, r2
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	eb14 030a 	adds.w	r3, r4, sl
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	eb45 030b 	adc.w	r3, r5, fp
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bde:	4629      	mov	r1, r5
 8002be0:	028b      	lsls	r3, r1, #10
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be8:	4621      	mov	r1, r4
 8002bea:	028a      	lsls	r2, r1, #10
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	60fa      	str	r2, [r7, #12]
 8002bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfc:	f7fd fd94 	bl	8000728 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3740      	adds	r7, #64	@ 0x40
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	017d7840 	.word	0x017d7840

08002c44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c60:	f7ff fff0 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	@ (8002c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08015854 	.word	0x08015854

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c88:	f7ff ffdc 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0b5b      	lsrs	r3, r3, #13
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	@ (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08015854 	.word	0x08015854

08002cac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	220f      	movs	r2, #15
 8002cba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_RCC_GetClockConfig+0x5c>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <HAL_RCC_GetClockConfig+0x5c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <HAL_RCC_GetClockConfig+0x5c>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_GetClockConfig+0x5c>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cee:	4b07      	ldr	r3, [pc, #28]	@ (8002d0c <HAL_RCC_GetClockConfig+0x60>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 020f 	and.w	r2, r3, #15
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	601a      	str	r2, [r3, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40023c00 	.word	0x40023c00

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d012      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d38:	4b69      	ldr	r3, [pc, #420]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d42:	6093      	str	r3, [r2, #8]
 8002d44:	4b66      	ldr	r3, [pc, #408]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4c:	4964      	ldr	r1, [pc, #400]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	4959      	ldr	r1, [pc, #356]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002da6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	494a      	ldr	r1, [pc, #296]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc4:	d101      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 808b 	beq.w	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	4a39      	ldr	r2, [pc, #228]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e00:	4b37      	ldr	r3, [pc, #220]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a34      	ldr	r2, [pc, #208]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fe fec0 	bl	8001b9c <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7fe febc 	bl	8001b9c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	@ 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e38f      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e32:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d035      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d02e      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e70:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e84:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d114      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fe84 	bl	8001b9c <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe fe80 	bl	8001b9c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e351      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ec6:	d111      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	4901      	ldr	r1, [pc, #4]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	0ffffcff 	.word	0x0ffffcff
 8002eec:	4bac      	ldr	r3, [pc, #688]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4aab      	ldr	r2, [pc, #684]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ef6:	6093      	str	r3, [r2, #8]
 8002ef8:	4ba9      	ldr	r3, [pc, #676]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	49a6      	ldr	r1, [pc, #664]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f16:	4ba2      	ldr	r3, [pc, #648]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f1c:	4aa0      	ldr	r2, [pc, #640]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f26:	4b9e      	ldr	r3, [pc, #632]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f28:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	499b      	ldr	r1, [pc, #620]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f44:	4b96      	ldr	r3, [pc, #600]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f52:	4993      	ldr	r1, [pc, #588]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f66:	4b8e      	ldr	r3, [pc, #568]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f74:	498a      	ldr	r1, [pc, #552]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f88:	4b85      	ldr	r3, [pc, #532]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f96:	4982      	ldr	r1, [pc, #520]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002faa:	4b7d      	ldr	r3, [pc, #500]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4979      	ldr	r1, [pc, #484]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fcc:	4b74      	ldr	r3, [pc, #464]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	4971      	ldr	r1, [pc, #452]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fee:	4b6c      	ldr	r3, [pc, #432]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	f023 020c 	bic.w	r2, r3, #12
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffc:	4968      	ldr	r1, [pc, #416]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003010:	4b63      	ldr	r3, [pc, #396]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003016:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	4960      	ldr	r1, [pc, #384]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003032:	4b5b      	ldr	r3, [pc, #364]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003038:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003040:	4957      	ldr	r1, [pc, #348]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003054:	4b52      	ldr	r3, [pc, #328]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	494f      	ldr	r1, [pc, #316]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003076:	4b4a      	ldr	r3, [pc, #296]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	4946      	ldr	r1, [pc, #280]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003098:	4b41      	ldr	r3, [pc, #260]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	493e      	ldr	r1, [pc, #248]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030ba:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c8:	4935      	ldr	r1, [pc, #212]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030dc:	4b30      	ldr	r3, [pc, #192]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030ea:	492d      	ldr	r1, [pc, #180]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030fe:	4b28      	ldr	r3, [pc, #160]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800310c:	4924      	ldr	r1, [pc, #144]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800311c:	d101      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800312e:	2301      	movs	r3, #1
 8003130:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800313e:	4b18      	ldr	r3, [pc, #96]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003144:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314c:	4914      	ldr	r1, [pc, #80]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003166:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003170:	490b      	ldr	r1, [pc, #44]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003194:	4902      	ldr	r1, [pc, #8]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800319c:	e002      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031b0:	4b8a      	ldr	r3, [pc, #552]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	4986      	ldr	r1, [pc, #536]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031d4:	4b81      	ldr	r3, [pc, #516]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e4:	497d      	ldr	r1, [pc, #500]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d006      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80d6 	beq.w	80033ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003200:	4b76      	ldr	r3, [pc, #472]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a75      	ldr	r2, [pc, #468]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800320a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320c:	f7fe fcc6 	bl	8001b9c <HAL_GetTick>
 8003210:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003214:	f7fe fcc2 	bl	8001b9c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e195      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003226:	4b6d      	ldr	r3, [pc, #436]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d021      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11d      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003246:	4b65      	ldr	r3, [pc, #404]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003254:	4b61      	ldr	r3, [pc, #388]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800325a:	0e1b      	lsrs	r3, r3, #24
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	019a      	lsls	r2, r3, #6
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	071b      	lsls	r3, r3, #28
 800327a:	4958      	ldr	r1, [pc, #352]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d02e      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ac:	d129      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ae:	4b4b      	ldr	r3, [pc, #300]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032bc:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032c2:	0f1b      	lsrs	r3, r3, #28
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	019a      	lsls	r2, r3, #6
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	061b      	lsls	r3, r3, #24
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	071b      	lsls	r3, r3, #28
 80032e2:	493e      	ldr	r1, [pc, #248]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032ea:	4b3c      	ldr	r3, [pc, #240]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032f0:	f023 021f 	bic.w	r2, r3, #31
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	3b01      	subs	r3, #1
 80032fa:	4938      	ldr	r1, [pc, #224]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01d      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800330e:	4b33      	ldr	r3, [pc, #204]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003314:	0e1b      	lsrs	r3, r3, #24
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800331c:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003322:	0f1b      	lsrs	r3, r3, #28
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	019a      	lsls	r2, r3, #6
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	071b      	lsls	r3, r3, #28
 8003342:	4926      	ldr	r1, [pc, #152]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	019a      	lsls	r2, r3, #6
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	071b      	lsls	r3, r3, #28
 8003372:	491a      	ldr	r1, [pc, #104]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800337a:	4b18      	ldr	r3, [pc, #96]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003380:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003386:	f7fe fc09 	bl	8001b9c <HAL_GetTick>
 800338a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800338e:	f7fe fc05 	bl	8001b9c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b64      	cmp	r3, #100	@ 0x64
 800339a:	d901      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0d8      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033a0:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	f040 80ce 	bne.w	8003550 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a08      	ldr	r2, [pc, #32]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c0:	f7fe fbec 	bl	8001b9c <HAL_GetTick>
 80033c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033c6:	e00b      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033c8:	f7fe fbe8 	bl	8001b9c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	@ 0x64
 80033d4:	d904      	bls.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0bb      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033e0:	4b5e      	ldr	r3, [pc, #376]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ec:	d0ec      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02e      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d12a      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003416:	4b51      	ldr	r3, [pc, #324]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003424:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	0f1b      	lsrs	r3, r3, #28
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	019a      	lsls	r2, r3, #6
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	061b      	lsls	r3, r3, #24
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	4944      	ldr	r1, [pc, #272]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003452:	4b42      	ldr	r3, [pc, #264]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003458:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	493d      	ldr	r1, [pc, #244]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d022      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003480:	d11d      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	0e1b      	lsrs	r3, r3, #24
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003490:	4b32      	ldr	r3, [pc, #200]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	0f1b      	lsrs	r3, r3, #28
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	019a      	lsls	r2, r3, #6
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	4929      	ldr	r1, [pc, #164]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d028      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ca:	4b24      	ldr	r3, [pc, #144]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	0e1b      	lsrs	r3, r3, #24
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034d8:	4b20      	ldr	r3, [pc, #128]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	019a      	lsls	r2, r3, #6
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	431a      	orrs	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	071b      	lsls	r3, r3, #28
 80034fe:	4917      	ldr	r1, [pc, #92]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800350c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	4911      	ldr	r1, [pc, #68]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800351c:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0e      	ldr	r2, [pc, #56]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003528:	f7fe fb38 	bl	8001b9c <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003530:	f7fe fb34 	bl	8001b9c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	@ 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e007      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800354a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800354e:	d1ef      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e049      	b.n	8003606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f841 	bl	800360e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 f9e8 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d001      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e054      	b.n	80036e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a26      	ldr	r2, [pc, #152]	@ (80036f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d022      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d01d      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d018      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_TIM_Base_Start_IT+0xdc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	@ (8003704 <HAL_TIM_Base_Start_IT+0xe0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_TIM_Base_Start_IT+0xe4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x80>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	@ (800370c <HAL_TIM_Base_Start_IT+0xe8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d115      	bne.n	80036d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_TIM_Base_Start_IT+0xec>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d015      	beq.n	80036e2 <HAL_TIM_Base_Start_IT+0xbe>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036bc:	d011      	beq.n	80036e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	e008      	b.n	80036e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e000      	b.n	80036e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40010400 	.word	0x40010400
 8003708:	40014000 	.word	0x40014000
 800370c:	40001800 	.word	0x40001800
 8003710:	00010007 	.word	0x00010007

08003714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0202 	mvn.w	r2, #2
 8003748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8e9 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8db 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f8ec 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0204 	mvn.w	r2, #4
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8c3 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8b5 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8c6 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0208 	mvn.w	r2, #8
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f89d 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f88f 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8a0 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d020      	beq.n	800385c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01b      	beq.n	800385c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2208      	movs	r2, #8
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f877 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f869 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f87a 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0201 	mvn.w	r2, #1
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fcd8 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00c      	beq.n	80038ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f919 	bl	8003ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f911 	bl	8003af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f834 	bl	800395e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f06f 0220 	mvn.w	r2, #32
 8003912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f8d9 	bl	8003acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a46      	ldr	r2, [pc, #280]	@ (8003aa0 <TIM_Base_SetConfig+0x12c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a43      	ldr	r2, [pc, #268]	@ (8003aa4 <TIM_Base_SetConfig+0x130>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a42      	ldr	r2, [pc, #264]	@ (8003aa8 <TIM_Base_SetConfig+0x134>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a41      	ldr	r2, [pc, #260]	@ (8003aac <TIM_Base_SetConfig+0x138>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a40      	ldr	r2, [pc, #256]	@ (8003ab0 <TIM_Base_SetConfig+0x13c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a35      	ldr	r2, [pc, #212]	@ (8003aa0 <TIM_Base_SetConfig+0x12c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d4:	d027      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a32      	ldr	r2, [pc, #200]	@ (8003aa4 <TIM_Base_SetConfig+0x130>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d023      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <TIM_Base_SetConfig+0x134>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a30      	ldr	r2, [pc, #192]	@ (8003aac <TIM_Base_SetConfig+0x138>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab0 <TIM_Base_SetConfig+0x13c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d017      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab4 <TIM_Base_SetConfig+0x140>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab8 <TIM_Base_SetConfig+0x144>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	@ (8003abc <TIM_Base_SetConfig+0x148>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac0 <TIM_Base_SetConfig+0x14c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac4 <TIM_Base_SetConfig+0x150>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a29      	ldr	r2, [pc, #164]	@ (8003ac8 <TIM_Base_SetConfig+0x154>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <TIM_Base_SetConfig+0x12c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0xf8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <TIM_Base_SetConfig+0x13c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]
  }
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40010400 	.word	0x40010400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800
 8003ac0:	40001800 	.word	0x40001800
 8003ac4:	40001c00 	.word	0x40001c00
 8003ac8:	40002000 	.word	0x40002000

08003acc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e040      	b.n	8003b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd ff84 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	@ 0x24
 8003b34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 ff70 	bl	8004a34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fd09 	bl	800456c <UART_SetConfig>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e01b      	b.n	8003b9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 ffef 	bl	8004b78 <UART_CheckIdleState>
 8003b9a:	4603      	mov	r3, r0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b08b      	sub	sp, #44	@ 0x2c
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d147      	bne.n	8003c4a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_UART_Transmit_IT+0x22>
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e040      	b.n	8003c4c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2221      	movs	r2, #33	@ 0x21
 8003bf2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfc:	d107      	bne.n	8003c0e <HAL_UART_Transmit_IT+0x6a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <HAL_UART_Transmit_IT+0xb4>)
 8003c0a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003c0c:	e002      	b.n	8003c14 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a12      	ldr	r2, [pc, #72]	@ (8003c5c <HAL_UART_Transmit_IT+0xb8>)
 8003c12:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	613b      	str	r3, [r7, #16]
   return(result);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	69f9      	ldr	r1, [r7, #28]
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e6      	bne.n	8003c14 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	372c      	adds	r7, #44	@ 0x2c
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	080051c3 	.word	0x080051c3
 8003c5c:	0800510d 	.word	0x0800510d

08003c60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d132      	bne.n	8003cde <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_UART_Receive_IT+0x24>
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e02b      	b.n	8003ce0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d018      	beq.n	8003cce <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	69f9      	ldr	r1, [r7, #28]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e6      	bne.n	8003c9c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f001 f865 	bl	8004da4 <UART_Start_Receive_IT>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	e000      	b.n	8003ce0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3728      	adds	r7, #40	@ 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b0a2      	sub	sp, #136	@ 0x88
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d06:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8003d0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d1a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e4      	bne.n	8003cf6 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d118      	bne.n	8003d9a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d78:	f023 0310 	bic.w	r3, r3, #16
 8003d7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d88:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e6      	bne.n	8003d68 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00f      	beq.n	8003dc2 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dac:	2b80      	cmp	r3, #128	@ 0x80
 8003dae:	d104      	bne.n	8003dba <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f2c <HAL_UART_Abort_IT+0x244>)
 8003db6:	651a      	str	r2, [r3, #80]	@ 0x50
 8003db8:	e003      	b.n	8003dc2 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00f      	beq.n	8003dea <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d104      	bne.n	8003de2 <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ddc:	4a54      	ldr	r2, [pc, #336]	@ (8003f30 <HAL_UART_Abort_IT+0x248>)
 8003dde:	651a      	str	r2, [r3, #80]	@ 0x50
 8003de0:	e003      	b.n	8003dea <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de6:	2200      	movs	r2, #0
 8003de8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df4:	2b80      	cmp	r3, #128	@ 0x80
 8003df6:	d12d      	bne.n	8003e54 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	623b      	str	r3, [r7, #32]
   return(result);
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e18:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00f      	beq.n	8003e54 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe f885 	bl	8001f48 <HAL_DMA_Abort_IT>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	2200      	movs	r2, #0
 8003e4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e4c:	e002      	b.n	8003e54 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d130      	bne.n	8003ec4 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e78:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e82:	61fa      	str	r2, [r7, #28]
 8003e84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f850 	bl	8001f48 <HAL_DMA_Abort_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ebc:	e002      	b.n	8003ec4 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8003ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d12a      	bne.n	8003f22 <HAL_UART_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->RxXferCount = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	669a      	str	r2, [r3, #104]	@ 0x68
    huart->TxISR = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0208 	orr.w	r2, r2, #8
 8003f06:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb05 	bl	800452c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3788      	adds	r7, #136	@ 0x88
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	08005025 	.word	0x08005025
 8003f30:	08005091 	.word	0x08005091

08003f34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0ba      	sub	sp, #232	@ 0xe8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f62:	4013      	ands	r3, r2
 8003f64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d115      	bne.n	8003f9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00f      	beq.n	8003f9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 82ac 	beq.w	80044ea <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
      }
      return;
 8003f9a:	e2a6      	b.n	80044ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8117 	beq.w	80041d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003fb6:	4b85      	ldr	r3, [pc, #532]	@ (80041cc <HAL_UART_IRQHandler+0x298>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 810a 	beq.w	80041d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xbc>
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d011      	beq.n	8004020 <HAL_UART_IRQHandler+0xec>
 8003ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2202      	movs	r2, #2
 800400e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d011      	beq.n	8004050 <HAL_UART_IRQHandler+0x11c>
 800402c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2204      	movs	r2, #4
 800403e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004046:	f043 0202 	orr.w	r2, r3, #2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d017      	beq.n	800408c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2208      	movs	r2, #8
 800407a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	f043 0208 	orr.w	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <HAL_UART_IRQHandler+0x18a>
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8212 	beq.w	80044ee <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d005      	beq.n	8004116 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800410e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04f      	beq.n	80041b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 ff0a 	bl	8004f30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004126:	2b40      	cmp	r3, #64	@ 0x40
 8004128:	d141      	bne.n	80041ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3308      	adds	r3, #8
 8004130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004140:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3308      	adds	r3, #8
 8004152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004156:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800415a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800416e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1d9      	bne.n	800412a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417a:	2b00      	cmp	r3, #0
 800417c:	d013      	beq.n	80041a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004182:	4a13      	ldr	r2, [pc, #76]	@ (80041d0 <HAL_UART_IRQHandler+0x29c>)
 8004184:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd fedc 	bl	8001f48 <HAL_DMA_Abort_IT>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d017      	beq.n	80041c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041a0:	4610      	mov	r0, r2
 80041a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	e00f      	b.n	80041c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9b6 	bl	8004518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	e00b      	b.n	80041c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f9b2 	bl	8004518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	e007      	b.n	80041c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9ae 	bl	8004518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80041c4:	e193      	b.n	80044ee <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c6:	bf00      	nop
    return;
 80041c8:	e191      	b.n	80044ee <HAL_UART_IRQHandler+0x5ba>
 80041ca:	bf00      	nop
 80041cc:	04000120 	.word	0x04000120
 80041d0:	08004ff9 	.word	0x08004ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d8:	2b01      	cmp	r3, #1
 80041da:	f040 814c 	bne.w	8004476 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8145 	beq.w	8004476 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 813e 	beq.w	8004476 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2210      	movs	r2, #16
 8004200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	f040 80b6 	bne.w	800437e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800421e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8165 	beq.w	80044f2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800422e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004232:	429a      	cmp	r2, r3
 8004234:	f080 815d 	bcs.w	80044f2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800423e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800424c:	f000 8086 	beq.w	800435c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800426c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800427a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800427e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004286:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1da      	bne.n	8004250 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e1      	bne.n	800429a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3308      	adds	r3, #8
 80042f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e3      	bne.n	80042d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800432a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800432c:	f023 0310 	bic.w	r3, r3, #16
 8004330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800433e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004340:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800434c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e4      	bne.n	800431c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd fd86 	bl	8001e68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800436e:	b29b      	uxth	r3, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	b29b      	uxth	r3, r3
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8e2 	bl	8004540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800437c:	e0b9      	b.n	80044f2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800438a:	b29b      	uxth	r3, r3
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80ab 	beq.w	80044f6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80043a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80a6 	beq.w	80044f6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e4      	bne.n	80043aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	623b      	str	r3, [r7, #32]
   return(result);
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3308      	adds	r3, #8
 8004400:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004404:	633a      	str	r2, [r7, #48]	@ 0x30
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800440a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e3      	bne.n	80043e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	60fb      	str	r3, [r7, #12]
   return(result);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f023 0310 	bic.w	r3, r3, #16
 8004440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	69b9      	ldr	r1, [r7, #24]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	617b      	str	r3, [r7, #20]
   return(result);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e4      	bne.n	800442c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f866 	bl	8004540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004474:	e03f      	b.n	80044f6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00e      	beq.n	80044a0 <HAL_UART_IRQHandler+0x56c>
 8004482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f85d 	bl	8004558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800449e:	e02d      	b.n	80044fc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01c      	beq.n	80044fa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
    }
    return;
 80044c8:	e017      	b.n	80044fa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <HAL_UART_IRQHandler+0x5c8>
 80044d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fecd 	bl	8005282 <UART_EndTransmit_IT>
    return;
 80044e8:	e008      	b.n	80044fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80044ea:	bf00      	nop
 80044ec:	e006      	b.n	80044fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80044ee:	bf00      	nop
 80044f0:	e004      	b.n	80044fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80044f2:	bf00      	nop
 80044f4:	e002      	b.n	80044fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80044fa:	bf00      	nop
  }

}
 80044fc:	37e8      	adds	r7, #232	@ 0xe8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop

08004504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4ba6      	ldr	r3, [pc, #664]	@ (8004830 <UART_SetConfig+0x2c4>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a94      	ldr	r2, [pc, #592]	@ (8004834 <UART_SetConfig+0x2c8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d120      	bne.n	800462a <UART_SetConfig+0xbe>
 80045e8:	4b93      	ldr	r3, [pc, #588]	@ (8004838 <UART_SetConfig+0x2cc>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d816      	bhi.n	8004624 <UART_SetConfig+0xb8>
 80045f6:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <UART_SetConfig+0x90>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	08004619 	.word	0x08004619
 8004604:	08004613 	.word	0x08004613
 8004608:	0800461f 	.word	0x0800461f
 800460c:	2301      	movs	r3, #1
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e150      	b.n	80048b4 <UART_SetConfig+0x348>
 8004612:	2302      	movs	r3, #2
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e14d      	b.n	80048b4 <UART_SetConfig+0x348>
 8004618:	2304      	movs	r3, #4
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e14a      	b.n	80048b4 <UART_SetConfig+0x348>
 800461e:	2308      	movs	r3, #8
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e147      	b.n	80048b4 <UART_SetConfig+0x348>
 8004624:	2310      	movs	r3, #16
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e144      	b.n	80048b4 <UART_SetConfig+0x348>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a83      	ldr	r2, [pc, #524]	@ (800483c <UART_SetConfig+0x2d0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d132      	bne.n	800469a <UART_SetConfig+0x12e>
 8004634:	4b80      	ldr	r3, [pc, #512]	@ (8004838 <UART_SetConfig+0x2cc>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d828      	bhi.n	8004694 <UART_SetConfig+0x128>
 8004642:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <UART_SetConfig+0xdc>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800467d 	.word	0x0800467d
 800464c:	08004695 	.word	0x08004695
 8004650:	08004695 	.word	0x08004695
 8004654:	08004695 	.word	0x08004695
 8004658:	08004689 	.word	0x08004689
 800465c:	08004695 	.word	0x08004695
 8004660:	08004695 	.word	0x08004695
 8004664:	08004695 	.word	0x08004695
 8004668:	08004683 	.word	0x08004683
 800466c:	08004695 	.word	0x08004695
 8004670:	08004695 	.word	0x08004695
 8004674:	08004695 	.word	0x08004695
 8004678:	0800468f 	.word	0x0800468f
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e118      	b.n	80048b4 <UART_SetConfig+0x348>
 8004682:	2302      	movs	r3, #2
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e115      	b.n	80048b4 <UART_SetConfig+0x348>
 8004688:	2304      	movs	r3, #4
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e112      	b.n	80048b4 <UART_SetConfig+0x348>
 800468e:	2308      	movs	r3, #8
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e10f      	b.n	80048b4 <UART_SetConfig+0x348>
 8004694:	2310      	movs	r3, #16
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e10c      	b.n	80048b4 <UART_SetConfig+0x348>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a68      	ldr	r2, [pc, #416]	@ (8004840 <UART_SetConfig+0x2d4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d120      	bne.n	80046e6 <UART_SetConfig+0x17a>
 80046a4:	4b64      	ldr	r3, [pc, #400]	@ (8004838 <UART_SetConfig+0x2cc>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046ae:	2b30      	cmp	r3, #48	@ 0x30
 80046b0:	d013      	beq.n	80046da <UART_SetConfig+0x16e>
 80046b2:	2b30      	cmp	r3, #48	@ 0x30
 80046b4:	d814      	bhi.n	80046e0 <UART_SetConfig+0x174>
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d009      	beq.n	80046ce <UART_SetConfig+0x162>
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d810      	bhi.n	80046e0 <UART_SetConfig+0x174>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <UART_SetConfig+0x15c>
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d006      	beq.n	80046d4 <UART_SetConfig+0x168>
 80046c6:	e00b      	b.n	80046e0 <UART_SetConfig+0x174>
 80046c8:	2300      	movs	r3, #0
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e0f2      	b.n	80048b4 <UART_SetConfig+0x348>
 80046ce:	2302      	movs	r3, #2
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e0ef      	b.n	80048b4 <UART_SetConfig+0x348>
 80046d4:	2304      	movs	r3, #4
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e0ec      	b.n	80048b4 <UART_SetConfig+0x348>
 80046da:	2308      	movs	r3, #8
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e0e9      	b.n	80048b4 <UART_SetConfig+0x348>
 80046e0:	2310      	movs	r3, #16
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e0e6      	b.n	80048b4 <UART_SetConfig+0x348>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a56      	ldr	r2, [pc, #344]	@ (8004844 <UART_SetConfig+0x2d8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d120      	bne.n	8004732 <UART_SetConfig+0x1c6>
 80046f0:	4b51      	ldr	r3, [pc, #324]	@ (8004838 <UART_SetConfig+0x2cc>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80046fc:	d013      	beq.n	8004726 <UART_SetConfig+0x1ba>
 80046fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004700:	d814      	bhi.n	800472c <UART_SetConfig+0x1c0>
 8004702:	2b80      	cmp	r3, #128	@ 0x80
 8004704:	d009      	beq.n	800471a <UART_SetConfig+0x1ae>
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d810      	bhi.n	800472c <UART_SetConfig+0x1c0>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <UART_SetConfig+0x1a8>
 800470e:	2b40      	cmp	r3, #64	@ 0x40
 8004710:	d006      	beq.n	8004720 <UART_SetConfig+0x1b4>
 8004712:	e00b      	b.n	800472c <UART_SetConfig+0x1c0>
 8004714:	2300      	movs	r3, #0
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e0cc      	b.n	80048b4 <UART_SetConfig+0x348>
 800471a:	2302      	movs	r3, #2
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e0c9      	b.n	80048b4 <UART_SetConfig+0x348>
 8004720:	2304      	movs	r3, #4
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e0c6      	b.n	80048b4 <UART_SetConfig+0x348>
 8004726:	2308      	movs	r3, #8
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e0c3      	b.n	80048b4 <UART_SetConfig+0x348>
 800472c:	2310      	movs	r3, #16
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e0c0      	b.n	80048b4 <UART_SetConfig+0x348>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a44      	ldr	r2, [pc, #272]	@ (8004848 <UART_SetConfig+0x2dc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d125      	bne.n	8004788 <UART_SetConfig+0x21c>
 800473c:	4b3e      	ldr	r3, [pc, #248]	@ (8004838 <UART_SetConfig+0x2cc>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004746:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800474a:	d017      	beq.n	800477c <UART_SetConfig+0x210>
 800474c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004750:	d817      	bhi.n	8004782 <UART_SetConfig+0x216>
 8004752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004756:	d00b      	beq.n	8004770 <UART_SetConfig+0x204>
 8004758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800475c:	d811      	bhi.n	8004782 <UART_SetConfig+0x216>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <UART_SetConfig+0x1fe>
 8004762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004766:	d006      	beq.n	8004776 <UART_SetConfig+0x20a>
 8004768:	e00b      	b.n	8004782 <UART_SetConfig+0x216>
 800476a:	2300      	movs	r3, #0
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e0a1      	b.n	80048b4 <UART_SetConfig+0x348>
 8004770:	2302      	movs	r3, #2
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e09e      	b.n	80048b4 <UART_SetConfig+0x348>
 8004776:	2304      	movs	r3, #4
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e09b      	b.n	80048b4 <UART_SetConfig+0x348>
 800477c:	2308      	movs	r3, #8
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e098      	b.n	80048b4 <UART_SetConfig+0x348>
 8004782:	2310      	movs	r3, #16
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e095      	b.n	80048b4 <UART_SetConfig+0x348>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2f      	ldr	r2, [pc, #188]	@ (800484c <UART_SetConfig+0x2e0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d125      	bne.n	80047de <UART_SetConfig+0x272>
 8004792:	4b29      	ldr	r3, [pc, #164]	@ (8004838 <UART_SetConfig+0x2cc>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004798:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800479c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047a0:	d017      	beq.n	80047d2 <UART_SetConfig+0x266>
 80047a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047a6:	d817      	bhi.n	80047d8 <UART_SetConfig+0x26c>
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ac:	d00b      	beq.n	80047c6 <UART_SetConfig+0x25a>
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b2:	d811      	bhi.n	80047d8 <UART_SetConfig+0x26c>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <UART_SetConfig+0x254>
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047bc:	d006      	beq.n	80047cc <UART_SetConfig+0x260>
 80047be:	e00b      	b.n	80047d8 <UART_SetConfig+0x26c>
 80047c0:	2301      	movs	r3, #1
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e076      	b.n	80048b4 <UART_SetConfig+0x348>
 80047c6:	2302      	movs	r3, #2
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	e073      	b.n	80048b4 <UART_SetConfig+0x348>
 80047cc:	2304      	movs	r3, #4
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e070      	b.n	80048b4 <UART_SetConfig+0x348>
 80047d2:	2308      	movs	r3, #8
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e06d      	b.n	80048b4 <UART_SetConfig+0x348>
 80047d8:	2310      	movs	r3, #16
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e06a      	b.n	80048b4 <UART_SetConfig+0x348>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004850 <UART_SetConfig+0x2e4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d138      	bne.n	800485a <UART_SetConfig+0x2ee>
 80047e8:	4b13      	ldr	r3, [pc, #76]	@ (8004838 <UART_SetConfig+0x2cc>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80047f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047f6:	d017      	beq.n	8004828 <UART_SetConfig+0x2bc>
 80047f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047fc:	d82a      	bhi.n	8004854 <UART_SetConfig+0x2e8>
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004802:	d00b      	beq.n	800481c <UART_SetConfig+0x2b0>
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004808:	d824      	bhi.n	8004854 <UART_SetConfig+0x2e8>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <UART_SetConfig+0x2aa>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004812:	d006      	beq.n	8004822 <UART_SetConfig+0x2b6>
 8004814:	e01e      	b.n	8004854 <UART_SetConfig+0x2e8>
 8004816:	2300      	movs	r3, #0
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e04b      	b.n	80048b4 <UART_SetConfig+0x348>
 800481c:	2302      	movs	r3, #2
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e048      	b.n	80048b4 <UART_SetConfig+0x348>
 8004822:	2304      	movs	r3, #4
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	e045      	b.n	80048b4 <UART_SetConfig+0x348>
 8004828:	2308      	movs	r3, #8
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e042      	b.n	80048b4 <UART_SetConfig+0x348>
 800482e:	bf00      	nop
 8004830:	efff69f3 	.word	0xefff69f3
 8004834:	40011000 	.word	0x40011000
 8004838:	40023800 	.word	0x40023800
 800483c:	40004400 	.word	0x40004400
 8004840:	40004800 	.word	0x40004800
 8004844:	40004c00 	.word	0x40004c00
 8004848:	40005000 	.word	0x40005000
 800484c:	40011400 	.word	0x40011400
 8004850:	40007800 	.word	0x40007800
 8004854:	2310      	movs	r3, #16
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e02c      	b.n	80048b4 <UART_SetConfig+0x348>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a72      	ldr	r2, [pc, #456]	@ (8004a28 <UART_SetConfig+0x4bc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d125      	bne.n	80048b0 <UART_SetConfig+0x344>
 8004864:	4b71      	ldr	r3, [pc, #452]	@ (8004a2c <UART_SetConfig+0x4c0>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800486e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004872:	d017      	beq.n	80048a4 <UART_SetConfig+0x338>
 8004874:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004878:	d817      	bhi.n	80048aa <UART_SetConfig+0x33e>
 800487a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487e:	d00b      	beq.n	8004898 <UART_SetConfig+0x32c>
 8004880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004884:	d811      	bhi.n	80048aa <UART_SetConfig+0x33e>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <UART_SetConfig+0x326>
 800488a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800488e:	d006      	beq.n	800489e <UART_SetConfig+0x332>
 8004890:	e00b      	b.n	80048aa <UART_SetConfig+0x33e>
 8004892:	2300      	movs	r3, #0
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e00d      	b.n	80048b4 <UART_SetConfig+0x348>
 8004898:	2302      	movs	r3, #2
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e00a      	b.n	80048b4 <UART_SetConfig+0x348>
 800489e:	2304      	movs	r3, #4
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e007      	b.n	80048b4 <UART_SetConfig+0x348>
 80048a4:	2308      	movs	r3, #8
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e004      	b.n	80048b4 <UART_SetConfig+0x348>
 80048aa:	2310      	movs	r3, #16
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e001      	b.n	80048b4 <UART_SetConfig+0x348>
 80048b0:	2310      	movs	r3, #16
 80048b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048bc:	d15b      	bne.n	8004976 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80048be:	7ffb      	ldrb	r3, [r7, #31]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d828      	bhi.n	8004916 <UART_SetConfig+0x3aa>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <UART_SetConfig+0x360>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004917 	.word	0x08004917
 80048e8:	08004917 	.word	0x08004917
 80048ec:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7fe f9b4 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80048f4:	61b8      	str	r0, [r7, #24]
        break;
 80048f6:	e013      	b.n	8004920 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7fe f9c4 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80048fc:	61b8      	str	r0, [r7, #24]
        break;
 80048fe:	e00f      	b.n	8004920 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b4b      	ldr	r3, [pc, #300]	@ (8004a30 <UART_SetConfig+0x4c4>)
 8004902:	61bb      	str	r3, [r7, #24]
        break;
 8004904:	e00c      	b.n	8004920 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe f8d7 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 800490a:	61b8      	str	r0, [r7, #24]
        break;
 800490c:	e008      	b.n	8004920 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004912:	61bb      	str	r3, [r7, #24]
        break;
 8004914:	e004      	b.n	8004920 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	77bb      	strb	r3, [r7, #30]
        break;
 800491e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d074      	beq.n	8004a10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	005a      	lsls	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	d916      	bls.n	8004970 <UART_SetConfig+0x404>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004948:	d212      	bcs.n	8004970 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f023 030f 	bic.w	r3, r3, #15
 8004952:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	b29b      	uxth	r3, r3
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	b29a      	uxth	r2, r3
 8004960:	89fb      	ldrh	r3, [r7, #14]
 8004962:	4313      	orrs	r3, r2
 8004964:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	89fa      	ldrh	r2, [r7, #14]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	e04f      	b.n	8004a10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	77bb      	strb	r3, [r7, #30]
 8004974:	e04c      	b.n	8004a10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d828      	bhi.n	80049ce <UART_SetConfig+0x462>
 800497c:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <UART_SetConfig+0x418>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe f958 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80049ac:	61b8      	str	r0, [r7, #24]
        break;
 80049ae:	e013      	b.n	80049d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fe f968 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80049b4:	61b8      	str	r0, [r7, #24]
        break;
 80049b6:	e00f      	b.n	80049d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <UART_SetConfig+0x4c4>)
 80049ba:	61bb      	str	r3, [r7, #24]
        break;
 80049bc:	e00c      	b.n	80049d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7fe f87b 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 80049c2:	61b8      	str	r0, [r7, #24]
        break;
 80049c4:	e008      	b.n	80049d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ca:	61bb      	str	r3, [r7, #24]
        break;
 80049cc:	e004      	b.n	80049d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	77bb      	strb	r3, [r7, #30]
        break;
 80049d6:	bf00      	nop
    }

    if (pclk != 0U)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	085a      	lsrs	r2, r3, #1
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	441a      	add	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b0f      	cmp	r3, #15
 80049f6:	d909      	bls.n	8004a0c <UART_SetConfig+0x4a0>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fe:	d205      	bcs.n	8004a0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	e001      	b.n	8004a10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40007c00 	.word	0x40007c00
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	00f42400 	.word	0x00f42400

08004a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01a      	beq.n	8004b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b32:	d10a      	bne.n	8004b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b098      	sub	sp, #96	@ 0x60
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b88:	f7fd f808 	bl	8001b9c <HAL_GetTick>
 8004b8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d12e      	bne.n	8004bfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f88c 	bl	8004cc8 <UART_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d021      	beq.n	8004bfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e062      	b.n	8004cc0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d149      	bne.n	8004c9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c10:	2200      	movs	r2, #0
 8004c12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f856 	bl	8004cc8 <UART_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d03c      	beq.n	8004c9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e6      	bne.n	8004c22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3308      	adds	r3, #8
 8004c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c74:	61fa      	str	r2, [r7, #28]
 8004c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	69b9      	ldr	r1, [r7, #24]
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	617b      	str	r3, [r7, #20]
   return(result);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e5      	bne.n	8004c54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e011      	b.n	8004cc0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3758      	adds	r7, #88	@ 0x58
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd8:	e04f      	b.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ce0:	d04b      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fc ff5b 	bl	8001b9c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e04e      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d037      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b80      	cmp	r3, #128	@ 0x80
 8004d0e:	d034      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b40      	cmp	r3, #64	@ 0x40
 8004d14:	d031      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d110      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f8ff 	bl	8004f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2208      	movs	r2, #8
 8004d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e029      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d54:	d111      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f8e5 	bl	8004f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e00f      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d0a0      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b097      	sub	sp, #92	@ 0x5c
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd6:	d10e      	bne.n	8004df6 <UART_Start_Receive_IT+0x52>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d105      	bne.n	8004dec <UART_Start_Receive_IT+0x48>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004de6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dea:	e02d      	b.n	8004e48 <UART_Start_Receive_IT+0xa4>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	22ff      	movs	r2, #255	@ 0xff
 8004df0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004df4:	e028      	b.n	8004e48 <UART_Start_Receive_IT+0xa4>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <UART_Start_Receive_IT+0x76>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <UART_Start_Receive_IT+0x6c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	22ff      	movs	r2, #255	@ 0xff
 8004e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e0e:	e01b      	b.n	8004e48 <UART_Start_Receive_IT+0xa4>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	227f      	movs	r2, #127	@ 0x7f
 8004e14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e18:	e016      	b.n	8004e48 <UART_Start_Receive_IT+0xa4>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e22:	d10d      	bne.n	8004e40 <UART_Start_Receive_IT+0x9c>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <UART_Start_Receive_IT+0x92>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	227f      	movs	r2, #127	@ 0x7f
 8004e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e34:	e008      	b.n	8004e48 <UART_Start_Receive_IT+0xa4>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	223f      	movs	r2, #63	@ 0x3f
 8004e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e3e:	e003      	b.n	8004e48 <UART_Start_Receive_IT+0xa4>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2222      	movs	r2, #34	@ 0x22
 8004e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3308      	adds	r3, #8
 8004e76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e78:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e7a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e5      	bne.n	8004e58 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e94:	d107      	bne.n	8004ea6 <UART_Start_Receive_IT+0x102>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a21      	ldr	r2, [pc, #132]	@ (8004f28 <UART_Start_Receive_IT+0x184>)
 8004ea2:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ea4:	e002      	b.n	8004eac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a20      	ldr	r2, [pc, #128]	@ (8004f2c <UART_Start_Receive_IT+0x188>)
 8004eaa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d019      	beq.n	8004ee8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e6      	bne.n	8004eb4 <UART_Start_Receive_IT+0x110>
 8004ee6:	e018      	b.n	8004f1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f043 0320 	orr.w	r3, r3, #32
 8004efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	69f9      	ldr	r1, [r7, #28]
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e6      	bne.n	8004ee8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	375c      	adds	r7, #92	@ 0x5c
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	0800547f 	.word	0x0800547f
 8004f2c:	080052d7 	.word	0x080052d7

08004f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b095      	sub	sp, #84	@ 0x54
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e6      	bne.n	8004f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
 8004f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d118      	bne.n	8004fd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e6      	bne.n	8004fa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fec:	bf00      	nop
 8004fee:	3754      	adds	r7, #84	@ 0x54
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fa7e 	bl	8004518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	2200      	movs	r2, #0
 8005038:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005048:	2b00      	cmp	r3, #0
 800504a:	d11d      	bne.n	8005088 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	220f      	movs	r2, #15
 800506a:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff fa53 	bl	800452c <HAL_UART_AbortCpltCallback>
 8005086:	e000      	b.n	800508a <UART_DMATxAbortCallback+0x66>
      return;
 8005088:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a2:	2200      	movs	r2, #0
 80050a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d125      	bne.n	8005104 <UART_DMARxAbortCallback+0x74>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	220f      	movs	r2, #15
 80050d6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fa15 	bl	800452c <HAL_UART_AbortCpltCallback>
 8005102:	e000      	b.n	8005106 <UART_DMARxAbortCallback+0x76>
      return;
 8005104:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b08f      	sub	sp, #60	@ 0x3c
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005118:	2b21      	cmp	r3, #33	@ 0x21
 800511a:	d14c      	bne.n	80051b6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d132      	bne.n	800518e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	61fb      	str	r3, [r7, #28]
   return(result);
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005148:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e6      	bne.n	8005128 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	60bb      	str	r3, [r7, #8]
   return(result);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6979      	ldr	r1, [r7, #20]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	613b      	str	r3, [r7, #16]
   return(result);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800518c:	e013      	b.n	80051b6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80051b6:	bf00      	nop
 80051b8:	373c      	adds	r7, #60	@ 0x3c
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b091      	sub	sp, #68	@ 0x44
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ce:	2b21      	cmp	r3, #33	@ 0x21
 80051d0:	d151      	bne.n	8005276 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d132      	bne.n	8005244 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	623b      	str	r3, [r7, #32]
   return(result);
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	60fb      	str	r3, [r7, #12]
   return(result);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005224:	637b      	str	r3, [r7, #52]	@ 0x34
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	69b9      	ldr	r1, [r7, #24]
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	617b      	str	r3, [r7, #20]
   return(result);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e6      	bne.n	8005210 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005242:	e018      	b.n	8005276 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005248:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800524a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005258:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525e:	1c9a      	adds	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005276:	bf00      	nop
 8005278:	3744      	adds	r7, #68	@ 0x44
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b088      	sub	sp, #32
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	60bb      	str	r3, [r7, #8]
   return(result);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	613b      	str	r3, [r7, #16]
   return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e6      	bne.n	800528a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff f91b 	bl	8004504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ce:	bf00      	nop
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b09c      	sub	sp, #112	@ 0x70
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052e4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ee:	2b22      	cmp	r3, #34	@ 0x22
 80052f0:	f040 80b9 	bne.w	8005466 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005302:	b2d9      	uxtb	r1, r3
 8005304:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005308:	b2da      	uxtb	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530e:	400a      	ands	r2, r1
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 809c 	bne.w	8005476 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800534c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800534e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005352:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800535c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800535e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005362:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800536a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	667b      	str	r3, [r7, #100]	@ 0x64
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005390:	647a      	str	r2, [r7, #68]	@ 0x44
 8005392:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800539e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	623b      	str	r3, [r7, #32]
   return(result);
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053da:	663b      	str	r3, [r7, #96]	@ 0x60
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e6      	bne.n	80053c6 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d12e      	bne.n	800545e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60fb      	str	r3, [r7, #12]
   return(result);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0310 	bic.w	r3, r3, #16
 800541a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	617b      	str	r3, [r7, #20]
   return(result);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d103      	bne.n	800544e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff f872 	bl	8004540 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800545c:	e00b      	b.n	8005476 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc f9bc 	bl	80017dc <HAL_UART_RxCpltCallback>
}
 8005464:	e007      	b.n	8005476 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0208 	orr.w	r2, r2, #8
 8005474:	619a      	str	r2, [r3, #24]
}
 8005476:	bf00      	nop
 8005478:	3770      	adds	r7, #112	@ 0x70
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b09c      	sub	sp, #112	@ 0x70
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800548c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005496:	2b22      	cmp	r3, #34	@ 0x22
 8005498:	f040 80b9 	bne.w	800560e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80054ac:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80054b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054b4:	4013      	ands	r3, r2
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f040 809c 	bne.w	800561e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80054f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005504:	657b      	str	r3, [r7, #84]	@ 0x54
 8005506:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800550a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e6      	bne.n	80054e6 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005538:	643a      	str	r2, [r7, #64]	@ 0x40
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800553e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e5      	bne.n	8005518 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	61fb      	str	r3, [r7, #28]
   return(result);
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800558e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d12e      	bne.n	8005606 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6979      	ldr	r1, [r7, #20]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	613b      	str	r3, [r7, #16]
   return(result);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d103      	bne.n	80055f6 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2210      	movs	r2, #16
 80055f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fe ff9e 	bl	8004540 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005604:	e00b      	b.n	800561e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fc f8e8 	bl	80017dc <HAL_UART_RxCpltCallback>
}
 800560c:	e007      	b.n	800561e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0208 	orr.w	r2, r2, #8
 800561c:	619a      	str	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	3770      	adds	r7, #112	@ 0x70
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563a:	f3ef 8305 	mrs	r3, IPSR
 800563e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005640:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10f      	bne.n	8005666 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005646:	f3ef 8310 	mrs	r3, PRIMASK
 800564a:	607b      	str	r3, [r7, #4]
  return(result);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d105      	bne.n	800565e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005652:	f3ef 8311 	mrs	r3, BASEPRI
 8005656:	603b      	str	r3, [r7, #0]
  return(result);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <osKernelInitialize+0x3a>
 800565e:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <osKernelInitialize+0x64>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d103      	bne.n	800566e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005666:	f06f 0305 	mvn.w	r3, #5
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e00c      	b.n	8005688 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800566e:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <osKernelInitialize+0x64>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d105      	bne.n	8005682 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005676:	4b08      	ldr	r3, [pc, #32]	@ (8005698 <osKernelInitialize+0x64>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e002      	b.n	8005688 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005686:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	200076a0 	.word	0x200076a0

0800569c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056a2:	f3ef 8305 	mrs	r3, IPSR
 80056a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ae:	f3ef 8310 	mrs	r3, PRIMASK
 80056b2:	607b      	str	r3, [r7, #4]
  return(result);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056ba:	f3ef 8311 	mrs	r3, BASEPRI
 80056be:	603b      	str	r3, [r7, #0]
  return(result);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <osKernelStart+0x3a>
 80056c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005704 <osKernelStart+0x68>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d103      	bne.n	80056d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80056ce:	f06f 0305 	mvn.w	r3, #5
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e010      	b.n	80056f8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <osKernelStart+0x68>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d109      	bne.n	80056f2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056de:	f7ff ffa2 	bl	8005626 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056e2:	4b08      	ldr	r3, [pc, #32]	@ (8005704 <osKernelStart+0x68>)
 80056e4:	2202      	movs	r2, #2
 80056e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056e8:	f001 f8ca 	bl	8006880 <vTaskStartScheduler>
      stat = osOK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e002      	b.n	80056f8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80056f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	200076a0 	.word	0x200076a0

08005708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005708:	b580      	push	{r7, lr}
 800570a:	b090      	sub	sp, #64	@ 0x40
 800570c:	af04      	add	r7, sp, #16
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005718:	f3ef 8305 	mrs	r3, IPSR
 800571c:	61fb      	str	r3, [r7, #28]
  return(result);
 800571e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 808f 	bne.w	8005844 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005726:	f3ef 8310 	mrs	r3, PRIMASK
 800572a:	61bb      	str	r3, [r7, #24]
  return(result);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005732:	f3ef 8311 	mrs	r3, BASEPRI
 8005736:	617b      	str	r3, [r7, #20]
  return(result);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <osThreadNew+0x3e>
 800573e:	4b44      	ldr	r3, [pc, #272]	@ (8005850 <osThreadNew+0x148>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d07e      	beq.n	8005844 <osThreadNew+0x13c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d07b      	beq.n	8005844 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800574c:	2380      	movs	r3, #128	@ 0x80
 800574e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005750:	2318      	movs	r3, #24
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800575c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d045      	beq.n	80057f0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <osThreadNew+0x6a>
        name = attr->name;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <osThreadNew+0x90>
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2b38      	cmp	r3, #56	@ 0x38
 800578a:	d805      	bhi.n	8005798 <osThreadNew+0x90>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <osThreadNew+0x94>
        return (NULL);
 8005798:	2300      	movs	r3, #0
 800579a:	e054      	b.n	8005846 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00e      	beq.n	80057d2 <osThreadNew+0xca>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b5b      	cmp	r3, #91	@ 0x5b
 80057ba:	d90a      	bls.n	80057d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d006      	beq.n	80057d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <osThreadNew+0xca>
        mem = 1;
 80057cc:	2301      	movs	r3, #1
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	e010      	b.n	80057f4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <osThreadNew+0xec>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <osThreadNew+0xec>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <osThreadNew+0xec>
          mem = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	e001      	b.n	80057f4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d110      	bne.n	800581c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005802:	9202      	str	r2, [sp, #8]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fe4f 	bl	80064b4 <xTaskCreateStatic>
 8005816:	4603      	mov	r3, r0
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	e013      	b.n	8005844 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d110      	bne.n	8005844 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	b29a      	uxth	r2, r3
 8005826:	f107 0310 	add.w	r3, r7, #16
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fea3 	bl	8006580 <xTaskCreate>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <osThreadNew+0x13c>
          hTask = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005844:	693b      	ldr	r3, [r7, #16]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3730      	adds	r7, #48	@ 0x30
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200076a0 	.word	0x200076a0

08005854 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585c:	f3ef 8305 	mrs	r3, IPSR
 8005860:	613b      	str	r3, [r7, #16]
  return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10f      	bne.n	8005888 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005868:	f3ef 8310 	mrs	r3, PRIMASK
 800586c:	60fb      	str	r3, [r7, #12]
  return(result);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005874:	f3ef 8311 	mrs	r3, BASEPRI
 8005878:	60bb      	str	r3, [r7, #8]
  return(result);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <osDelay+0x3c>
 8005880:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <osDelay+0x58>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d103      	bne.n	8005890 <osDelay+0x3c>
    stat = osErrorISR;
 8005888:	f06f 0305 	mvn.w	r3, #5
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e007      	b.n	80058a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 ffb8 	bl	8006810 <vTaskDelay>
    }
  }

  return (stat);
 80058a0:	697b      	ldr	r3, [r7, #20]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200076a0 	.word	0x200076a0

080058b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4a07      	ldr	r2, [pc, #28]	@ (80058dc <vApplicationGetIdleTaskMemory+0x2c>)
 80058c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4a06      	ldr	r2, [pc, #24]	@ (80058e0 <vApplicationGetIdleTaskMemory+0x30>)
 80058c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2280      	movs	r2, #128	@ 0x80
 80058cc:	601a      	str	r2, [r3, #0]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	200076a4 	.word	0x200076a4
 80058e0:	20007700 	.word	0x20007700

080058e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <vApplicationGetTimerTaskMemory+0x2c>)
 80058f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4a06      	ldr	r2, [pc, #24]	@ (8005914 <vApplicationGetTimerTaskMemory+0x30>)
 80058fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005902:	601a      	str	r2, [r3, #0]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	20007900 	.word	0x20007900
 8005914:	2000795c 	.word	0x2000795c

08005918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f103 0208 	add.w	r2, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f103 0208 	add.w	r2, r3, #8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f103 0208 	add.w	r2, r3, #8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059d0:	d103      	bne.n	80059da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e00c      	b.n	80059f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3308      	adds	r3, #8
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	e002      	b.n	80059e8 <vListInsert+0x2e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d2f6      	bcs.n	80059e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	601a      	str	r2, [r3, #0]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6892      	ldr	r2, [r2, #8]
 8005a42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6852      	ldr	r2, [r2, #4]
 8005a4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d103      	bne.n	8005a60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	1e5a      	subs	r2, r3, #1
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <xQueueGenericReset+0x30>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	b672      	cpsid	i
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	b662      	cpsie	i
 8005aa8:	60bb      	str	r3, [r7, #8]
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005ab0:	f002 f8d4 	bl	8007c5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	441a      	add	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ae6:	fb01 f303 	mul.w	r3, r1, r3
 8005aea:	441a      	add	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	22ff      	movs	r2, #255	@ 0xff
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	22ff      	movs	r2, #255	@ 0xff
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d114      	bne.n	8005b30 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01a      	beq.n	8005b44 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3310      	adds	r3, #16
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f950 	bl	8006db8 <xTaskRemoveFromEventList>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d012      	beq.n	8005b44 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <xQueueGenericReset+0xd4>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	e009      	b.n	8005b44 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3310      	adds	r3, #16
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff feef 	bl	8005918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3324      	adds	r3, #36	@ 0x24
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff feea 	bl	8005918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b44:	f002 f8c0 	bl	8007cc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b48:	2301      	movs	r3, #1
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08e      	sub	sp, #56	@ 0x38
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10d      	bne.n	8005b88 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	b672      	cpsid	i
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	b662      	cpsie	i
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	b672      	cpsid	i
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	b662      	cpsie	i
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <xQueueGenericCreateStatic+0x5e>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <xQueueGenericCreateStatic+0x62>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xQueueGenericCreateStatic+0x64>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10d      	bne.n	8005bdc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	b672      	cpsid	i
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	b662      	cpsie	i
 8005bd4:	623b      	str	r3, [r7, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	e7fd      	b.n	8005bd8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <xQueueGenericCreateStatic+0x90>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <xQueueGenericCreateStatic+0x94>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <xQueueGenericCreateStatic+0x96>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10d      	bne.n	8005c0e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	b672      	cpsid	i
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	b662      	cpsie	i
 8005c06:	61fb      	str	r3, [r7, #28]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c0e:	2350      	movs	r3, #80	@ 0x50
 8005c10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b50      	cmp	r3, #80	@ 0x50
 8005c16:	d00d      	beq.n	8005c34 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	b672      	cpsid	i
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	b662      	cpsie	i
 8005c2c:	61bb      	str	r3, [r7, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c48:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f805 	bl	8005c66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3730      	adds	r7, #48	@ 0x30
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e002      	b.n	8005c88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c94:	2101      	movs	r1, #1
 8005c96:	69b8      	ldr	r0, [r7, #24]
 8005c98:	f7ff fef2 	bl	8005a80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08e      	sub	sp, #56	@ 0x38
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <xQueueGenericSend+0x38>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	b672      	cpsid	i
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	b662      	cpsie	i
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d103      	bne.n	8005cf2 <xQueueGenericSend+0x46>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <xQueueGenericSend+0x4a>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <xQueueGenericSend+0x4c>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <xQueueGenericSend+0x6c>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d00:	b672      	cpsid	i
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	b662      	cpsie	i
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d103      	bne.n	8005d26 <xQueueGenericSend+0x7a>
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <xQueueGenericSend+0x7e>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <xQueueGenericSend+0x80>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10d      	bne.n	8005d4c <xQueueGenericSend+0xa0>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	b672      	cpsid	i
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	b662      	cpsie	i
 8005d44:	623b      	str	r3, [r7, #32]
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d4c:	f001 fa26 	bl	800719c <xTaskGetSchedulerState>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <xQueueGenericSend+0xb0>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <xQueueGenericSend+0xb4>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <xQueueGenericSend+0xb6>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10d      	bne.n	8005d82 <xQueueGenericSend+0xd6>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6a:	b672      	cpsid	i
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	b662      	cpsie	i
 8005d7a:	61fb      	str	r3, [r7, #28]
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d82:	f001 ff6b 	bl	8007c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <xQueueGenericSend+0xec>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d129      	bne.n	8005dec <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d9e:	f000 fa1b 	bl	80061d8 <prvCopyDataToQueue>
 8005da2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	3324      	adds	r3, #36	@ 0x24
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 f801 	bl	8006db8 <xTaskRemoveFromEventList>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d013      	beq.n	8005de4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ebc <xQueueGenericSend+0x210>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	e00a      	b.n	8005de4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005dd4:	4b39      	ldr	r3, [pc, #228]	@ (8005ebc <xQueueGenericSend+0x210>)
 8005dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005de4:	f001 ff70 	bl	8007cc8 <vPortExitCritical>
				return pdPASS;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e063      	b.n	8005eb4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005df2:	f001 ff69 	bl	8007cc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e05c      	b.n	8005eb4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d106      	bne.n	8005e0e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 f867 	bl	8006ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e0e:	f001 ff5b 	bl	8007cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e12:	f000 fda1 	bl	8006958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e16:	f001 ff21 	bl	8007c5c <vPortEnterCritical>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e20:	b25b      	sxtb	r3, r3
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e26:	d103      	bne.n	8005e30 <xQueueGenericSend+0x184>
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e36:	b25b      	sxtb	r3, r3
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e3c:	d103      	bne.n	8005e46 <xQueueGenericSend+0x19a>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e46:	f001 ff3f 	bl	8007cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e4a:	1d3a      	adds	r2, r7, #4
 8005e4c:	f107 0314 	add.w	r3, r7, #20
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 f856 	bl	8006f04 <xTaskCheckForTimeOut>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d124      	bne.n	8005ea8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e60:	f000 fab2 	bl	80063c8 <prvIsQueueFull>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d018      	beq.n	8005e9c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	3310      	adds	r3, #16
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 ff4a 	bl	8006d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e7a:	f000 fa3d 	bl	80062f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e7e:	f000 fd79 	bl	8006974 <xTaskResumeAll>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f47f af7c 	bne.w	8005d82 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <xQueueGenericSend+0x210>)
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	e772      	b.n	8005d82 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e9e:	f000 fa2b 	bl	80062f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ea2:	f000 fd67 	bl	8006974 <xTaskResumeAll>
 8005ea6:	e76c      	b.n	8005d82 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eaa:	f000 fa25 	bl	80062f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eae:	f000 fd61 	bl	8006974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005eb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3738      	adds	r7, #56	@ 0x38
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08e      	sub	sp, #56	@ 0x38
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	b672      	cpsid	i
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	b662      	cpsie	i
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <xQueueGenericSendFromISR+0x42>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <xQueueGenericSendFromISR+0x46>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <xQueueGenericSendFromISR+0x48>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	b672      	cpsid	i
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	b662      	cpsie	i
 8005f20:	623b      	str	r3, [r7, #32]
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	e7fd      	b.n	8005f24 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d103      	bne.n	8005f36 <xQueueGenericSendFromISR+0x76>
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <xQueueGenericSendFromISR+0x7a>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueGenericSendFromISR+0x7c>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10d      	bne.n	8005f5c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	b672      	cpsid	i
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	b662      	cpsie	i
 8005f54:	61fb      	str	r3, [r7, #28]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f5c:	f001 ff66 	bl	8007e2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f60:	f3ef 8211 	mrs	r2, BASEPRI
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	b672      	cpsid	i
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	b662      	cpsie	i
 8005f78:	61ba      	str	r2, [r7, #24]
 8005f7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <xQueueGenericSendFromISR+0xd2>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d12c      	bne.n	8005fec <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fa2:	f000 f919 	bl	80061d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fa6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fae:	d112      	bne.n	8005fd6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d016      	beq.n	8005fe6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	3324      	adds	r3, #36	@ 0x24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fefb 	bl	8006db8 <xTaskRemoveFromEventList>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00e      	beq.n	8005fe6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e007      	b.n	8005fe6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fda:	3301      	adds	r3, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	b25a      	sxtb	r2, r3
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005fea:	e001      	b.n	8005ff0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ffa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3738      	adds	r7, #56	@ 0x38
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	@ 0x30
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006014:	2300      	movs	r3, #0
 8006016:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10d      	bne.n	800603e <xQueueReceive+0x36>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	b672      	cpsid	i
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	b662      	cpsie	i
 8006036:	623b      	str	r3, [r7, #32]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d103      	bne.n	800604c <xQueueReceive+0x44>
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <xQueueReceive+0x48>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <xQueueReceive+0x4a>
 8006050:	2300      	movs	r3, #0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10d      	bne.n	8006072 <xQueueReceive+0x6a>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	b672      	cpsid	i
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	b662      	cpsie	i
 800606a:	61fb      	str	r3, [r7, #28]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006072:	f001 f893 	bl	800719c <xTaskGetSchedulerState>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <xQueueReceive+0x7a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <xQueueReceive+0x7e>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueReceive+0x80>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10d      	bne.n	80060a8 <xQueueReceive+0xa0>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	b672      	cpsid	i
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	b662      	cpsie	i
 80060a0:	61bb      	str	r3, [r7, #24]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060a8:	f001 fdd8 	bl	8007c5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01f      	beq.n	80060f8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060bc:	f000 f8f6 	bl	80062ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	1e5a      	subs	r2, r3, #1
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00f      	beq.n	80060f0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d2:	3310      	adds	r3, #16
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fe6f 	bl	8006db8 <xTaskRemoveFromEventList>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d007      	beq.n	80060f0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060e0:	4b3c      	ldr	r3, [pc, #240]	@ (80061d4 <xQueueReceive+0x1cc>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060f0:	f001 fdea 	bl	8007cc8 <vPortExitCritical>
				return pdPASS;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e069      	b.n	80061cc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060fe:	f001 fde3 	bl	8007cc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006102:	2300      	movs	r3, #0
 8006104:	e062      	b.n	80061cc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800610c:	f107 0310 	add.w	r3, r7, #16
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fee1 	bl	8006ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006116:	2301      	movs	r3, #1
 8006118:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800611a:	f001 fdd5 	bl	8007cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800611e:	f000 fc1b 	bl	8006958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006122:	f001 fd9b 	bl	8007c5c <vPortEnterCritical>
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800612c:	b25b      	sxtb	r3, r3
 800612e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006132:	d103      	bne.n	800613c <xQueueReceive+0x134>
 8006134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800613c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006142:	b25b      	sxtb	r3, r3
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006148:	d103      	bne.n	8006152 <xQueueReceive+0x14a>
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006152:	f001 fdb9 	bl	8007cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006156:	1d3a      	adds	r2, r7, #4
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fed0 	bl	8006f04 <xTaskCheckForTimeOut>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d123      	bne.n	80061b2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800616a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800616c:	f000 f916 	bl	800639c <prvIsQueueEmpty>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d017      	beq.n	80061a6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006178:	3324      	adds	r3, #36	@ 0x24
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fdc4 	bl	8006d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006186:	f000 f8b7 	bl	80062f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800618a:	f000 fbf3 	bl	8006974 <xTaskResumeAll>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d189      	bne.n	80060a8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006194:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <xQueueReceive+0x1cc>)
 8006196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	e780      	b.n	80060a8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061a8:	f000 f8a6 	bl	80062f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061ac:	f000 fbe2 	bl	8006974 <xTaskResumeAll>
 80061b0:	e77a      	b.n	80060a8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061b4:	f000 f8a0 	bl	80062f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061b8:	f000 fbdc 	bl	8006974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061be:	f000 f8ed 	bl	800639c <prvIsQueueEmpty>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f43f af6f 	beq.w	80060a8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3730      	adds	r7, #48	@ 0x30
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d14d      	bne.n	800629a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 ffe8 	bl	80071d8 <xTaskPriorityDisinherit>
 8006208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	e043      	b.n	800629a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d119      	bne.n	800624c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6858      	ldr	r0, [r3, #4]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	461a      	mov	r2, r3
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	f00c f919 	bl	801245a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	441a      	add	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	429a      	cmp	r2, r3
 8006240:	d32b      	bcc.n	800629a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	e026      	b.n	800629a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68d8      	ldr	r0, [r3, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	461a      	mov	r2, r3
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	f00c f8ff 	bl	801245a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006264:	425b      	negs	r3, r3
 8006266:	441a      	add	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d207      	bcs.n	8006288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006280:	425b      	negs	r3, r3
 8006282:	441a      	add	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d105      	bne.n	800629a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3b01      	subs	r3, #1
 8006298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80062a2:	697b      	ldr	r3, [r7, #20]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d018      	beq.n	80062f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	441a      	add	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d303      	bcc.n	80062e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68d9      	ldr	r1, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	461a      	mov	r2, r3
 80062ea:	6838      	ldr	r0, [r7, #0]
 80062ec:	f00c f8b5 	bl	801245a <memcpy>
	}
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006300:	f001 fcac 	bl	8007c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800630a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800630c:	e011      	b.n	8006332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d012      	beq.n	800633c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3324      	adds	r3, #36	@ 0x24
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fd4c 	bl	8006db8 <xTaskRemoveFromEventList>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006326:	f000 fe55 	bl	8006fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	3b01      	subs	r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	2b00      	cmp	r3, #0
 8006338:	dce9      	bgt.n	800630e <prvUnlockQueue+0x16>
 800633a:	e000      	b.n	800633e <prvUnlockQueue+0x46>
					break;
 800633c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	22ff      	movs	r2, #255	@ 0xff
 8006342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006346:	f001 fcbf 	bl	8007cc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800634a:	f001 fc87 	bl	8007c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006356:	e011      	b.n	800637c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d012      	beq.n	8006386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3310      	adds	r3, #16
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fd27 	bl	8006db8 <xTaskRemoveFromEventList>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006370:	f000 fe30 	bl	8006fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	3b01      	subs	r3, #1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800637c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006380:	2b00      	cmp	r3, #0
 8006382:	dce9      	bgt.n	8006358 <prvUnlockQueue+0x60>
 8006384:	e000      	b.n	8006388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	22ff      	movs	r2, #255	@ 0xff
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006390:	f001 fc9a 	bl	8007cc8 <vPortExitCritical>
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a4:	f001 fc5a 	bl	8007c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e001      	b.n	80063ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ba:	f001 fc85 	bl	8007cc8 <vPortExitCritical>

	return xReturn;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063d0:	f001 fc44 	bl	8007c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063dc:	429a      	cmp	r2, r3
 80063de:	d102      	bne.n	80063e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e001      	b.n	80063ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ea:	f001 fc6d 	bl	8007cc8 <vPortExitCritical>

	return xReturn;
 80063ee:	68fb      	ldr	r3, [r7, #12]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e014      	b.n	8006432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006408:	4a0f      	ldr	r2, [pc, #60]	@ (8006448 <vQueueAddToRegistry+0x50>)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006414:	490c      	ldr	r1, [pc, #48]	@ (8006448 <vQueueAddToRegistry+0x50>)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800641e:	4a0a      	ldr	r2, [pc, #40]	@ (8006448 <vQueueAddToRegistry+0x50>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4413      	add	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800642a:	e006      	b.n	800643a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b07      	cmp	r3, #7
 8006436:	d9e7      	bls.n	8006408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20007d5c 	.word	0x20007d5c

0800644c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800645c:	f001 fbfe 	bl	8007c5c <vPortEnterCritical>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006466:	b25b      	sxtb	r3, r3
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646c:	d103      	bne.n	8006476 <vQueueWaitForMessageRestricted+0x2a>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800647c:	b25b      	sxtb	r3, r3
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006482:	d103      	bne.n	800648c <vQueueWaitForMessageRestricted+0x40>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800648c:	f001 fc1c 	bl	8007cc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	3324      	adds	r3, #36	@ 0x24
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fc5b 	bl	8006d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064a6:	6978      	ldr	r0, [r7, #20]
 80064a8:	f7ff ff26 	bl	80062f8 <prvUnlockQueue>
	}
 80064ac:	bf00      	nop
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08e      	sub	sp, #56	@ 0x38
 80064b8:	af04      	add	r7, sp, #16
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10d      	bne.n	80064e4 <xTaskCreateStatic+0x30>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	b672      	cpsid	i
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	b662      	cpsie	i
 80064dc:	623b      	str	r3, [r7, #32]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10d      	bne.n	8006506 <xTaskCreateStatic+0x52>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ee:	b672      	cpsid	i
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	b662      	cpsie	i
 80064fe:	61fb      	str	r3, [r7, #28]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006506:	235c      	movs	r3, #92	@ 0x5c
 8006508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b5c      	cmp	r3, #92	@ 0x5c
 800650e:	d00d      	beq.n	800652c <xTaskCreateStatic+0x78>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	b672      	cpsid	i
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	b662      	cpsie	i
 8006524:	61bb      	str	r3, [r7, #24]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800652c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01e      	beq.n	8006572 <xTaskCreateStatic+0xbe>
 8006534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01b      	beq.n	8006572 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	2202      	movs	r2, #2
 8006548:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800654c:	2300      	movs	r3, #0
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	9302      	str	r3, [sp, #8]
 8006554:	f107 0314 	add.w	r3, r7, #20
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 f850 	bl	800660a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800656a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800656c:	f000 f8e0 	bl	8006730 <prvAddNewTaskToReadyList>
 8006570:	e001      	b.n	8006576 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006576:	697b      	ldr	r3, [r7, #20]
	}
 8006578:	4618      	mov	r0, r3
 800657a:	3728      	adds	r7, #40	@ 0x28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08c      	sub	sp, #48	@ 0x30
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fc8f 	bl	8007eb8 <pvPortMalloc>
 800659a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00e      	beq.n	80065c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065a2:	205c      	movs	r0, #92	@ 0x5c
 80065a4:	f001 fc88 	bl	8007eb8 <pvPortMalloc>
 80065a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80065b6:	e005      	b.n	80065c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065b8:	6978      	ldr	r0, [r7, #20]
 80065ba:	f001 fd4b 	bl	8008054 <vPortFree>
 80065be:	e001      	b.n	80065c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d017      	beq.n	80065fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	2300      	movs	r3, #0
 80065d6:	9303      	str	r3, [sp, #12]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f80e 	bl	800660a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065ee:	69f8      	ldr	r0, [r7, #28]
 80065f0:	f000 f89e 	bl	8006730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065f4:	2301      	movs	r3, #1
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e002      	b.n	8006600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006600:	69bb      	ldr	r3, [r7, #24]
	}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b088      	sub	sp, #32
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	461a      	mov	r2, r3
 8006622:	21a5      	movs	r1, #165	@ 0xa5
 8006624:	f00b fe4c 	bl	80122c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006632:	440b      	add	r3, r1
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f023 0307 	bic.w	r3, r3, #7
 8006640:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00d      	beq.n	8006668 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006650:	b672      	cpsid	i
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	b662      	cpsie	i
 8006660:	617b      	str	r3, [r7, #20]
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	e7fd      	b.n	8006664 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01f      	beq.n	80066ae <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800666e:	2300      	movs	r3, #0
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e012      	b.n	800669a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	7819      	ldrb	r1, [r3, #0]
 800667c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	3334      	adds	r3, #52	@ 0x34
 8006684:	460a      	mov	r2, r1
 8006686:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d006      	beq.n	80066a2 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d9e9      	bls.n	8006674 <prvInitialiseNewTask+0x6a>
 80066a0:	e000      	b.n	80066a4 <prvInitialiseNewTask+0x9a>
			{
				break;
 80066a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066ac:	e003      	b.n	80066b6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	2b37      	cmp	r3, #55	@ 0x37
 80066ba:	d901      	bls.n	80066c0 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066bc:	2337      	movs	r3, #55	@ 0x37
 80066be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ce:	2200      	movs	r2, #0
 80066d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	3304      	adds	r3, #4
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff f93e 	bl	8005958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	3318      	adds	r3, #24
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff f939 	bl	8005958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	2200      	movs	r2, #0
 8006700:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	68f9      	ldr	r1, [r7, #12]
 800670e:	69b8      	ldr	r0, [r7, #24]
 8006710:	f001 f992 	bl	8007a38 <pxPortInitialiseStack>
 8006714:	4602      	mov	r2, r0
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800671a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006726:	bf00      	nop
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006738:	f001 fa90 	bl	8007c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800673c:	4b2d      	ldr	r3, [pc, #180]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a2c      	ldr	r2, [pc, #176]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 8006744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006746:	4b2c      	ldr	r3, [pc, #176]	@ (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800674e:	4a2a      	ldr	r2, [pc, #168]	@ (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006754:	4b27      	ldr	r3, [pc, #156]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d110      	bne.n	800677e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800675c:	f000 fc5e 	bl	800701c <prvInitialiseTaskLists>
 8006760:	e00d      	b.n	800677e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006762:	4b26      	ldr	r3, [pc, #152]	@ (80067fc <prvAddNewTaskToReadyList+0xcc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800676a:	4b23      	ldr	r3, [pc, #140]	@ (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	429a      	cmp	r2, r3
 8006776:	d802      	bhi.n	800677e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006778:	4a1f      	ldr	r2, [pc, #124]	@ (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800677e:	4b20      	ldr	r3, [pc, #128]	@ (8006800 <prvAddNewTaskToReadyList+0xd0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	4a1e      	ldr	r2, [pc, #120]	@ (8006800 <prvAddNewTaskToReadyList+0xd0>)
 8006786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006788:	4b1d      	ldr	r3, [pc, #116]	@ (8006800 <prvAddNewTaskToReadyList+0xd0>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006794:	4b1b      	ldr	r3, [pc, #108]	@ (8006804 <prvAddNewTaskToReadyList+0xd4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d903      	bls.n	80067a4 <prvAddNewTaskToReadyList+0x74>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	4a18      	ldr	r2, [pc, #96]	@ (8006804 <prvAddNewTaskToReadyList+0xd4>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a15      	ldr	r2, [pc, #84]	@ (8006808 <prvAddNewTaskToReadyList+0xd8>)
 80067b2:	441a      	add	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7ff f8d9 	bl	8005972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067c0:	f001 fa82 	bl	8007cc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067c4:	4b0d      	ldr	r3, [pc, #52]	@ (80067fc <prvAddNewTaskToReadyList+0xcc>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00e      	beq.n	80067ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067cc:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d207      	bcs.n	80067ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067da:	4b0c      	ldr	r3, [pc, #48]	@ (800680c <prvAddNewTaskToReadyList+0xdc>)
 80067dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20008270 	.word	0x20008270
 80067f8:	20007d9c 	.word	0x20007d9c
 80067fc:	2000827c 	.word	0x2000827c
 8006800:	2000828c 	.word	0x2000828c
 8006804:	20008278 	.word	0x20008278
 8006808:	20007da0 	.word	0x20007da0
 800680c:	e000ed04 	.word	0xe000ed04

08006810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01a      	beq.n	8006858 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006822:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <vTaskDelay+0x68>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <vTaskDelay+0x36>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	b672      	cpsid	i
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	b662      	cpsie	i
 800683e:	60bb      	str	r3, [r7, #8]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006846:	f000 f887 	bl	8006958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800684a:	2100      	movs	r1, #0
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fd37 	bl	80072c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006852:	f000 f88f 	bl	8006974 <xTaskResumeAll>
 8006856:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d107      	bne.n	800686e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800685e:	4b07      	ldr	r3, [pc, #28]	@ (800687c <vTaskDelay+0x6c>)
 8006860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20008298 	.word	0x20008298
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	@ 0x28
 8006884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800688e:	463a      	mov	r2, r7
 8006890:	1d39      	adds	r1, r7, #4
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff f80a 	bl	80058b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	9202      	str	r2, [sp, #8]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2300      	movs	r3, #0
 80068ac:	460a      	mov	r2, r1
 80068ae:	4924      	ldr	r1, [pc, #144]	@ (8006940 <vTaskStartScheduler+0xc0>)
 80068b0:	4824      	ldr	r0, [pc, #144]	@ (8006944 <vTaskStartScheduler+0xc4>)
 80068b2:	f7ff fdff 	bl	80064b4 <xTaskCreateStatic>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4a23      	ldr	r2, [pc, #140]	@ (8006948 <vTaskStartScheduler+0xc8>)
 80068ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068bc:	4b22      	ldr	r3, [pc, #136]	@ (8006948 <vTaskStartScheduler+0xc8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e001      	b.n	80068ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d102      	bne.n	80068da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068d4:	f000 fd48 	bl	8007368 <xTimerCreateTimerTask>
 80068d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d118      	bne.n	8006912 <vTaskStartScheduler+0x92>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	b672      	cpsid	i
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	b662      	cpsie	i
 80068f4:	613b      	str	r3, [r7, #16]
}
 80068f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068f8:	4b14      	ldr	r3, [pc, #80]	@ (800694c <vTaskStartScheduler+0xcc>)
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006900:	4b13      	ldr	r3, [pc, #76]	@ (8006950 <vTaskStartScheduler+0xd0>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006906:	4b13      	ldr	r3, [pc, #76]	@ (8006954 <vTaskStartScheduler+0xd4>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800690c:	f001 f928 	bl	8007b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006910:	e011      	b.n	8006936 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006918:	d10d      	bne.n	8006936 <vTaskStartScheduler+0xb6>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	b672      	cpsid	i
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	b662      	cpsie	i
 800692e:	60fb      	str	r3, [r7, #12]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vTaskStartScheduler+0xb2>
}
 8006936:	bf00      	nop
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	080157fc 	.word	0x080157fc
 8006944:	08006fed 	.word	0x08006fed
 8006948:	20008294 	.word	0x20008294
 800694c:	20008290 	.word	0x20008290
 8006950:	2000827c 	.word	0x2000827c
 8006954:	20008274 	.word	0x20008274

08006958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <vTaskSuspendAll+0x18>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	4a03      	ldr	r2, [pc, #12]	@ (8006970 <vTaskSuspendAll+0x18>)
 8006964:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	20008298 	.word	0x20008298

08006974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006982:	4b43      	ldr	r3, [pc, #268]	@ (8006a90 <xTaskResumeAll+0x11c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10d      	bne.n	80069a6 <xTaskResumeAll+0x32>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	b672      	cpsid	i
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	b662      	cpsie	i
 800699e:	603b      	str	r3, [r7, #0]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069a6:	f001 f959 	bl	8007c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069aa:	4b39      	ldr	r3, [pc, #228]	@ (8006a90 <xTaskResumeAll+0x11c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	4a37      	ldr	r2, [pc, #220]	@ (8006a90 <xTaskResumeAll+0x11c>)
 80069b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b4:	4b36      	ldr	r3, [pc, #216]	@ (8006a90 <xTaskResumeAll+0x11c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d162      	bne.n	8006a82 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069bc:	4b35      	ldr	r3, [pc, #212]	@ (8006a94 <xTaskResumeAll+0x120>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d05e      	beq.n	8006a82 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c4:	e02f      	b.n	8006a26 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c6:	4b34      	ldr	r3, [pc, #208]	@ (8006a98 <xTaskResumeAll+0x124>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3318      	adds	r3, #24
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f82a 	bl	8005a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3304      	adds	r3, #4
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff f825 	bl	8005a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e6:	4b2d      	ldr	r3, [pc, #180]	@ (8006a9c <xTaskResumeAll+0x128>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d903      	bls.n	80069f6 <xTaskResumeAll+0x82>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a9c <xTaskResumeAll+0x128>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4a27      	ldr	r2, [pc, #156]	@ (8006aa0 <xTaskResumeAll+0x12c>)
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f7fe ffb0 	bl	8005972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a16:	4b23      	ldr	r3, [pc, #140]	@ (8006aa4 <xTaskResumeAll+0x130>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006a20:	4b21      	ldr	r3, [pc, #132]	@ (8006aa8 <xTaskResumeAll+0x134>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a26:	4b1c      	ldr	r3, [pc, #112]	@ (8006a98 <xTaskResumeAll+0x124>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1cb      	bne.n	80069c6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a34:	f000 fb92 	bl	800715c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a38:	4b1c      	ldr	r3, [pc, #112]	@ (8006aac <xTaskResumeAll+0x138>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a44:	f000 f846 	bl	8006ad4 <xTaskIncrementTick>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006a4e:	4b16      	ldr	r3, [pc, #88]	@ (8006aa8 <xTaskResumeAll+0x134>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f1      	bne.n	8006a44 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006a60:	4b12      	ldr	r3, [pc, #72]	@ (8006aac <xTaskResumeAll+0x138>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a66:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <xTaskResumeAll+0x134>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a72:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab0 <xTaskResumeAll+0x13c>)
 8006a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a82:	f001 f921 	bl	8007cc8 <vPortExitCritical>

	return xAlreadyYielded;
 8006a86:	68bb      	ldr	r3, [r7, #8]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20008298 	.word	0x20008298
 8006a94:	20008270 	.word	0x20008270
 8006a98:	20008230 	.word	0x20008230
 8006a9c:	20008278 	.word	0x20008278
 8006aa0:	20007da0 	.word	0x20007da0
 8006aa4:	20007d9c 	.word	0x20007d9c
 8006aa8:	20008284 	.word	0x20008284
 8006aac:	20008280 	.word	0x20008280
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006aba:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <xTaskGetTickCount+0x1c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ac0:	687b      	ldr	r3, [r7, #4]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20008274 	.word	0x20008274

08006ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ade:	4b50      	ldr	r3, [pc, #320]	@ (8006c20 <xTaskIncrementTick+0x14c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 808c 	bne.w	8006c00 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8006c24 <xTaskIncrementTick+0x150>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006af0:	4a4c      	ldr	r2, [pc, #304]	@ (8006c24 <xTaskIncrementTick+0x150>)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d123      	bne.n	8006b44 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006afc:	4b4a      	ldr	r3, [pc, #296]	@ (8006c28 <xTaskIncrementTick+0x154>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	b672      	cpsid	i
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	b662      	cpsie	i
 8006b1a:	603b      	str	r3, [r7, #0]
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	e7fd      	b.n	8006b1e <xTaskIncrementTick+0x4a>
 8006b22:	4b41      	ldr	r3, [pc, #260]	@ (8006c28 <xTaskIncrementTick+0x154>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	4b40      	ldr	r3, [pc, #256]	@ (8006c2c <xTaskIncrementTick+0x158>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c28 <xTaskIncrementTick+0x154>)
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	4a3e      	ldr	r2, [pc, #248]	@ (8006c2c <xTaskIncrementTick+0x158>)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	4b3e      	ldr	r3, [pc, #248]	@ (8006c30 <xTaskIncrementTick+0x15c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	4a3c      	ldr	r2, [pc, #240]	@ (8006c30 <xTaskIncrementTick+0x15c>)
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	f000 fb0c 	bl	800715c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b44:	4b3b      	ldr	r3, [pc, #236]	@ (8006c34 <xTaskIncrementTick+0x160>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d349      	bcc.n	8006be2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b4e:	4b36      	ldr	r3, [pc, #216]	@ (8006c28 <xTaskIncrementTick+0x154>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b58:	4b36      	ldr	r3, [pc, #216]	@ (8006c34 <xTaskIncrementTick+0x160>)
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b5e:	601a      	str	r2, [r3, #0]
					break;
 8006b60:	e03f      	b.n	8006be2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b62:	4b31      	ldr	r3, [pc, #196]	@ (8006c28 <xTaskIncrementTick+0x154>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d203      	bcs.n	8006b82 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8006c34 <xTaskIncrementTick+0x160>)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b80:	e02f      	b.n	8006be2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe ff50 	bl	8005a2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	3318      	adds	r3, #24
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe ff47 	bl	8005a2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba2:	4b25      	ldr	r3, [pc, #148]	@ (8006c38 <xTaskIncrementTick+0x164>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d903      	bls.n	8006bb2 <xTaskIncrementTick+0xde>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	4a22      	ldr	r2, [pc, #136]	@ (8006c38 <xTaskIncrementTick+0x164>)
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006c3c <xTaskIncrementTick+0x168>)
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fe fed2 	bl	8005972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <xTaskIncrementTick+0x16c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d3b8      	bcc.n	8006b4e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be0:	e7b5      	b.n	8006b4e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006be2:	4b17      	ldr	r3, [pc, #92]	@ (8006c40 <xTaskIncrementTick+0x16c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be8:	4914      	ldr	r1, [pc, #80]	@ (8006c3c <xTaskIncrementTick+0x168>)
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d907      	bls.n	8006c0a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e004      	b.n	8006c0a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c00:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <xTaskIncrementTick+0x170>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	4a0f      	ldr	r2, [pc, #60]	@ (8006c44 <xTaskIncrementTick+0x170>)
 8006c08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <xTaskIncrementTick+0x174>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006c12:	2301      	movs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c16:	697b      	ldr	r3, [r7, #20]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20008298 	.word	0x20008298
 8006c24:	20008274 	.word	0x20008274
 8006c28:	20008228 	.word	0x20008228
 8006c2c:	2000822c 	.word	0x2000822c
 8006c30:	20008288 	.word	0x20008288
 8006c34:	20008290 	.word	0x20008290
 8006c38:	20008278 	.word	0x20008278
 8006c3c:	20007da0 	.word	0x20007da0
 8006c40:	20007d9c 	.word	0x20007d9c
 8006c44:	20008280 	.word	0x20008280
 8006c48:	20008284 	.word	0x20008284

08006c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c52:	4b29      	ldr	r3, [pc, #164]	@ (8006cf8 <vTaskSwitchContext+0xac>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c5a:	4b28      	ldr	r3, [pc, #160]	@ (8006cfc <vTaskSwitchContext+0xb0>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c60:	e044      	b.n	8006cec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006c62:	4b26      	ldr	r3, [pc, #152]	@ (8006cfc <vTaskSwitchContext+0xb0>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c68:	4b25      	ldr	r3, [pc, #148]	@ (8006d00 <vTaskSwitchContext+0xb4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e013      	b.n	8006c98 <vTaskSwitchContext+0x4c>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10d      	bne.n	8006c92 <vTaskSwitchContext+0x46>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7a:	b672      	cpsid	i
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	b662      	cpsie	i
 8006c8a:	607b      	str	r3, [r7, #4]
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	e7fd      	b.n	8006c8e <vTaskSwitchContext+0x42>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	491a      	ldr	r1, [pc, #104]	@ (8006d04 <vTaskSwitchContext+0xb8>)
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0e1      	beq.n	8006c70 <vTaskSwitchContext+0x24>
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a13      	ldr	r2, [pc, #76]	@ (8006d04 <vTaskSwitchContext+0xb8>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	605a      	str	r2, [r3, #4]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d104      	bne.n	8006cdc <vTaskSwitchContext+0x90>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	605a      	str	r2, [r3, #4]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	4a09      	ldr	r2, [pc, #36]	@ (8006d08 <vTaskSwitchContext+0xbc>)
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	4a06      	ldr	r2, [pc, #24]	@ (8006d00 <vTaskSwitchContext+0xb4>)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	20008298 	.word	0x20008298
 8006cfc:	20008284 	.word	0x20008284
 8006d00:	20008278 	.word	0x20008278
 8006d04:	20007da0 	.word	0x20007da0
 8006d08:	20007d9c 	.word	0x20007d9c

08006d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	b672      	cpsid	i
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	b662      	cpsie	i
 8006d30:	60fb      	str	r3, [r7, #12]
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <vTaskPlaceOnEventList+0x4c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3318      	adds	r3, #24
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7fe fe3a 	bl	80059ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d46:	2101      	movs	r1, #1
 8006d48:	6838      	ldr	r0, [r7, #0]
 8006d4a:	f000 fab9 	bl	80072c0 <prvAddCurrentTaskToDelayedList>
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20007d9c 	.word	0x20007d9c

08006d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	b672      	cpsid	i
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	b662      	cpsie	i
 8006d82:	617b      	str	r3, [r7, #20]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006db4 <vTaskPlaceOnEventListRestricted+0x58>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3318      	adds	r3, #24
 8006d90:	4619      	mov	r1, r3
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7fe fded 	bl	8005972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006da2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	68b8      	ldr	r0, [r7, #8]
 8006da8:	f000 fa8a 	bl	80072c0 <prvAddCurrentTaskToDelayedList>
	}
 8006dac:	bf00      	nop
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20007d9c 	.word	0x20007d9c

08006db8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10d      	bne.n	8006dea <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	b672      	cpsid	i
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	b662      	cpsie	i
 8006de2:	60fb      	str	r3, [r7, #12]
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	e7fd      	b.n	8006de6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3318      	adds	r3, #24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fe1c 	bl	8005a2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e6c <xTaskRemoveFromEventList+0xb4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11d      	bne.n	8006e38 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fe13 	bl	8005a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0a:	4b19      	ldr	r3, [pc, #100]	@ (8006e70 <xTaskRemoveFromEventList+0xb8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d903      	bls.n	8006e1a <xTaskRemoveFromEventList+0x62>
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e16:	4a16      	ldr	r2, [pc, #88]	@ (8006e70 <xTaskRemoveFromEventList+0xb8>)
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4a13      	ldr	r2, [pc, #76]	@ (8006e74 <xTaskRemoveFromEventList+0xbc>)
 8006e28:	441a      	add	r2, r3
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f7fe fd9e 	bl	8005972 <vListInsertEnd>
 8006e36:	e005      	b.n	8006e44 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	3318      	adds	r3, #24
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	480e      	ldr	r0, [pc, #56]	@ (8006e78 <xTaskRemoveFromEventList+0xc0>)
 8006e40:	f7fe fd97 	bl	8005972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e48:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <xTaskRemoveFromEventList+0xc4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d905      	bls.n	8006e5e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e52:	2301      	movs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e56:	4b0a      	ldr	r3, [pc, #40]	@ (8006e80 <xTaskRemoveFromEventList+0xc8>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e001      	b.n	8006e62 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e62:	697b      	ldr	r3, [r7, #20]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20008298 	.word	0x20008298
 8006e70:	20008278 	.word	0x20008278
 8006e74:	20007da0 	.word	0x20007da0
 8006e78:	20008230 	.word	0x20008230
 8006e7c:	20007d9c 	.word	0x20007d9c
 8006e80:	20008284 	.word	0x20008284

08006e84 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10d      	bne.n	8006eae <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e96:	b672      	cpsid	i
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	b662      	cpsie	i
 8006ea6:	60fb      	str	r3, [r7, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	e7fd      	b.n	8006eaa <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8006eae:	f000 fed5 	bl	8007c5c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006eb2:	4b07      	ldr	r3, [pc, #28]	@ (8006ed0 <vTaskSetTimeOutState+0x4c>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006eba:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <vTaskSetTimeOutState+0x50>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006ec2:	f000 ff01 	bl	8007cc8 <vPortExitCritical>
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20008288 	.word	0x20008288
 8006ed4:	20008274 	.word	0x20008274

08006ed8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ee0:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <vTaskInternalSetTimeOutState+0x24>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ee8:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <vTaskInternalSetTimeOutState+0x28>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	20008288 	.word	0x20008288
 8006f00:	20008274 	.word	0x20008274

08006f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10d      	bne.n	8006f30 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	b672      	cpsid	i
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	b662      	cpsie	i
 8006f28:	613b      	str	r3, [r7, #16]
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	e7fd      	b.n	8006f2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	b672      	cpsid	i
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	b662      	cpsie	i
 8006f4a:	60fb      	str	r3, [r7, #12]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006f52:	f000 fe83 	bl	8007c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f56:	4b1d      	ldr	r3, [pc, #116]	@ (8006fcc <xTaskCheckForTimeOut+0xc8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f6e:	d102      	bne.n	8006f76 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e023      	b.n	8006fbe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b15      	ldr	r3, [pc, #84]	@ (8006fd0 <xTaskCheckForTimeOut+0xcc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d007      	beq.n	8006f92 <xTaskCheckForTimeOut+0x8e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e015      	b.n	8006fbe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d20b      	bcs.n	8006fb4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff95 	bl	8006ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	e004      	b.n	8006fbe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fbe:	f000 fe83 	bl	8007cc8 <vPortExitCritical>

	return xReturn;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20008274 	.word	0x20008274
 8006fd0:	20008288 	.word	0x20008288

08006fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fd8:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <vTaskMissedYield+0x14>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20008284 	.word	0x20008284

08006fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ff4:	f000 f852 	bl	800709c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <prvIdleTask+0x28>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d9f9      	bls.n	8006ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007000:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <prvIdleTask+0x2c>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007010:	e7f0      	b.n	8006ff4 <prvIdleTask+0x8>
 8007012:	bf00      	nop
 8007014:	20007da0 	.word	0x20007da0
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e00c      	b.n	8007042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a12      	ldr	r2, [pc, #72]	@ (800707c <prvInitialiseTaskLists+0x60>)
 8007034:	4413      	add	r3, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fc6e 	bl	8005918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3301      	adds	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b37      	cmp	r3, #55	@ 0x37
 8007046:	d9ef      	bls.n	8007028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007048:	480d      	ldr	r0, [pc, #52]	@ (8007080 <prvInitialiseTaskLists+0x64>)
 800704a:	f7fe fc65 	bl	8005918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800704e:	480d      	ldr	r0, [pc, #52]	@ (8007084 <prvInitialiseTaskLists+0x68>)
 8007050:	f7fe fc62 	bl	8005918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007054:	480c      	ldr	r0, [pc, #48]	@ (8007088 <prvInitialiseTaskLists+0x6c>)
 8007056:	f7fe fc5f 	bl	8005918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800705a:	480c      	ldr	r0, [pc, #48]	@ (800708c <prvInitialiseTaskLists+0x70>)
 800705c:	f7fe fc5c 	bl	8005918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007060:	480b      	ldr	r0, [pc, #44]	@ (8007090 <prvInitialiseTaskLists+0x74>)
 8007062:	f7fe fc59 	bl	8005918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007066:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <prvInitialiseTaskLists+0x78>)
 8007068:	4a05      	ldr	r2, [pc, #20]	@ (8007080 <prvInitialiseTaskLists+0x64>)
 800706a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <prvInitialiseTaskLists+0x7c>)
 800706e:	4a05      	ldr	r2, [pc, #20]	@ (8007084 <prvInitialiseTaskLists+0x68>)
 8007070:	601a      	str	r2, [r3, #0]
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20007da0 	.word	0x20007da0
 8007080:	20008200 	.word	0x20008200
 8007084:	20008214 	.word	0x20008214
 8007088:	20008230 	.word	0x20008230
 800708c:	20008244 	.word	0x20008244
 8007090:	2000825c 	.word	0x2000825c
 8007094:	20008228 	.word	0x20008228
 8007098:	2000822c 	.word	0x2000822c

0800709c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a2:	e019      	b.n	80070d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070a4:	f000 fdda 	bl	8007c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a8:	4b10      	ldr	r3, [pc, #64]	@ (80070ec <prvCheckTasksWaitingTermination+0x50>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fcb9 	bl	8005a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ba:	4b0d      	ldr	r3, [pc, #52]	@ (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	4a0b      	ldr	r2, [pc, #44]	@ (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070c4:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	4a0a      	ldr	r2, [pc, #40]	@ (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070ce:	f000 fdfb 	bl	8007cc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f810 	bl	80070f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070d8:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e1      	bne.n	80070a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20008244 	.word	0x20008244
 80070f0:	20008270 	.word	0x20008270
 80070f4:	20008258 	.word	0x20008258

080070f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	4618      	mov	r0, r3
 8007110:	f000 ffa0 	bl	8008054 <vPortFree>
				vPortFree( pxTCB );
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 ff9d 	bl	8008054 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800711a:	e01b      	b.n	8007154 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007122:	2b01      	cmp	r3, #1
 8007124:	d103      	bne.n	800712e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 ff94 	bl	8008054 <vPortFree>
	}
 800712c:	e012      	b.n	8007154 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007134:	2b02      	cmp	r3, #2
 8007136:	d00d      	beq.n	8007154 <prvDeleteTCB+0x5c>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	b672      	cpsid	i
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	b662      	cpsie	i
 800714c:	60fb      	str	r3, [r7, #12]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <prvDeleteTCB+0x58>
	}
 8007154:	bf00      	nop
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007162:	4b0c      	ldr	r3, [pc, #48]	@ (8007194 <prvResetNextTaskUnblockTime+0x38>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800716c:	4b0a      	ldr	r3, [pc, #40]	@ (8007198 <prvResetNextTaskUnblockTime+0x3c>)
 800716e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007174:	e008      	b.n	8007188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007176:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <prvResetNextTaskUnblockTime+0x38>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4a04      	ldr	r2, [pc, #16]	@ (8007198 <prvResetNextTaskUnblockTime+0x3c>)
 8007186:	6013      	str	r3, [r2, #0]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	20008228 	.word	0x20008228
 8007198:	20008290 	.word	0x20008290

0800719c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071a2:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <xTaskGetSchedulerState+0x34>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071aa:	2301      	movs	r3, #1
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	e008      	b.n	80071c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b0:	4b08      	ldr	r3, [pc, #32]	@ (80071d4 <xTaskGetSchedulerState+0x38>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071b8:	2302      	movs	r3, #2
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	e001      	b.n	80071c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071c2:	687b      	ldr	r3, [r7, #4]
	}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	2000827c 	.word	0x2000827c
 80071d4:	20008298 	.word	0x20008298

080071d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d05c      	beq.n	80072a8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071ee:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <xTaskPriorityDisinherit+0xdc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d00d      	beq.n	8007214 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	b672      	cpsid	i
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	b662      	cpsie	i
 800720c:	60fb      	str	r3, [r7, #12]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	b672      	cpsid	i
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	b662      	cpsie	i
 8007230:	60bb      	str	r3, [r7, #8]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800723c:	1e5a      	subs	r2, r3, #1
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800724a:	429a      	cmp	r2, r3
 800724c:	d02c      	beq.n	80072a8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007252:	2b00      	cmp	r3, #0
 8007254:	d128      	bne.n	80072a8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fbe6 	bl	8005a2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007278:	4b0f      	ldr	r3, [pc, #60]	@ (80072b8 <xTaskPriorityDisinherit+0xe0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d903      	bls.n	8007288 <xTaskPriorityDisinherit+0xb0>
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007284:	4a0c      	ldr	r2, [pc, #48]	@ (80072b8 <xTaskPriorityDisinherit+0xe0>)
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4a09      	ldr	r2, [pc, #36]	@ (80072bc <xTaskPriorityDisinherit+0xe4>)
 8007296:	441a      	add	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fe fb67 	bl	8005972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072a8:	697b      	ldr	r3, [r7, #20]
	}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20007d9c 	.word	0x20007d9c
 80072b8:	20008278 	.word	0x20008278
 80072bc:	20007da0 	.word	0x20007da0

080072c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072ca:	4b21      	ldr	r3, [pc, #132]	@ (8007350 <prvAddCurrentTaskToDelayedList+0x90>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072d0:	4b20      	ldr	r3, [pc, #128]	@ (8007354 <prvAddCurrentTaskToDelayedList+0x94>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fba8 	bl	8005a2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072e2:	d10a      	bne.n	80072fa <prvAddCurrentTaskToDelayedList+0x3a>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d007      	beq.n	80072fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <prvAddCurrentTaskToDelayedList+0x94>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4619      	mov	r1, r3
 80072f2:	4819      	ldr	r0, [pc, #100]	@ (8007358 <prvAddCurrentTaskToDelayedList+0x98>)
 80072f4:	f7fe fb3d 	bl	8005972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072f8:	e026      	b.n	8007348 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007302:	4b14      	ldr	r3, [pc, #80]	@ (8007354 <prvAddCurrentTaskToDelayedList+0x94>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	429a      	cmp	r2, r3
 8007310:	d209      	bcs.n	8007326 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <prvAddCurrentTaskToDelayedList+0x94>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3304      	adds	r3, #4
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f7fe fb4b 	bl	80059ba <vListInsert>
}
 8007324:	e010      	b.n	8007348 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007326:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <prvAddCurrentTaskToDelayedList+0x94>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3304      	adds	r3, #4
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f7fe fb41 	bl	80059ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007338:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <prvAddCurrentTaskToDelayedList+0xa4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	d202      	bcs.n	8007348 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007342:	4a08      	ldr	r2, [pc, #32]	@ (8007364 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6013      	str	r3, [r2, #0]
}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20008274 	.word	0x20008274
 8007354:	20007d9c 	.word	0x20007d9c
 8007358:	2000825c 	.word	0x2000825c
 800735c:	2000822c 	.word	0x2000822c
 8007360:	20008228 	.word	0x20008228
 8007364:	20008290 	.word	0x20008290

08007368 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	@ 0x28
 800736c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007372:	f000 fb21 	bl	80079b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007376:	4b1e      	ldr	r3, [pc, #120]	@ (80073f0 <xTimerCreateTimerTask+0x88>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d021      	beq.n	80073c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007386:	1d3a      	adds	r2, r7, #4
 8007388:	f107 0108 	add.w	r1, r7, #8
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe faa7 	bl	80058e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	9202      	str	r2, [sp, #8]
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	2302      	movs	r3, #2
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	2300      	movs	r3, #0
 80073a6:	460a      	mov	r2, r1
 80073a8:	4912      	ldr	r1, [pc, #72]	@ (80073f4 <xTimerCreateTimerTask+0x8c>)
 80073aa:	4813      	ldr	r0, [pc, #76]	@ (80073f8 <xTimerCreateTimerTask+0x90>)
 80073ac:	f7ff f882 	bl	80064b4 <xTaskCreateStatic>
 80073b0:	4603      	mov	r3, r0
 80073b2:	4a12      	ldr	r2, [pc, #72]	@ (80073fc <xTimerCreateTimerTask+0x94>)
 80073b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073b6:	4b11      	ldr	r3, [pc, #68]	@ (80073fc <xTimerCreateTimerTask+0x94>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073be:	2301      	movs	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10d      	bne.n	80073e4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073cc:	b672      	cpsid	i
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	b662      	cpsie	i
 80073dc:	613b      	str	r3, [r7, #16]
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	e7fd      	b.n	80073e0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80073e4:	697b      	ldr	r3, [r7, #20]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200082cc 	.word	0x200082cc
 80073f4:	08015804 	.word	0x08015804
 80073f8:	08007541 	.word	0x08007541
 80073fc:	200082d0 	.word	0x200082d0

08007400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	@ 0x28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10d      	bne.n	8007434 <xTimerGenericCommand+0x34>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741c:	b672      	cpsid	i
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	b662      	cpsie	i
 800742c:	623b      	str	r3, [r7, #32]
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007434:	4b19      	ldr	r3, [pc, #100]	@ (800749c <xTimerGenericCommand+0x9c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d02a      	beq.n	8007492 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b05      	cmp	r3, #5
 800744c:	dc18      	bgt.n	8007480 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800744e:	f7ff fea5 	bl	800719c <xTaskGetSchedulerState>
 8007452:	4603      	mov	r3, r0
 8007454:	2b02      	cmp	r3, #2
 8007456:	d109      	bne.n	800746c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007458:	4b10      	ldr	r3, [pc, #64]	@ (800749c <xTimerGenericCommand+0x9c>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	f107 0110 	add.w	r1, r7, #16
 8007460:	2300      	movs	r3, #0
 8007462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007464:	f7fe fc22 	bl	8005cac <xQueueGenericSend>
 8007468:	6278      	str	r0, [r7, #36]	@ 0x24
 800746a:	e012      	b.n	8007492 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800746c:	4b0b      	ldr	r3, [pc, #44]	@ (800749c <xTimerGenericCommand+0x9c>)
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	f107 0110 	add.w	r1, r7, #16
 8007474:	2300      	movs	r3, #0
 8007476:	2200      	movs	r2, #0
 8007478:	f7fe fc18 	bl	8005cac <xQueueGenericSend>
 800747c:	6278      	str	r0, [r7, #36]	@ 0x24
 800747e:	e008      	b.n	8007492 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007480:	4b06      	ldr	r3, [pc, #24]	@ (800749c <xTimerGenericCommand+0x9c>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	f107 0110 	add.w	r1, r7, #16
 8007488:	2300      	movs	r3, #0
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	f7fe fd18 	bl	8005ec0 <xQueueGenericSendFromISR>
 8007490:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007494:	4618      	mov	r0, r3
 8007496:	3728      	adds	r7, #40	@ 0x28
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	200082cc 	.word	0x200082cc

080074a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074aa:	4b24      	ldr	r3, [pc, #144]	@ (800753c <prvProcessExpiredTimer+0x9c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fab7 	bl	8005a2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d025      	beq.n	8007518 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	699a      	ldr	r2, [r3, #24]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	18d1      	adds	r1, r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	6978      	ldr	r0, [r7, #20]
 80074da:	f000 f8d7 	bl	800768c <prvInsertTimerInActiveList>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d022      	beq.n	800752a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074e4:	2300      	movs	r3, #0
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	2100      	movs	r1, #0
 80074ee:	6978      	ldr	r0, [r7, #20]
 80074f0:	f7ff ff86 	bl	8007400 <xTimerGenericCommand>
 80074f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d116      	bne.n	800752a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007500:	b672      	cpsid	i
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	b662      	cpsie	i
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800751e:	f023 0301 	bic.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	6978      	ldr	r0, [r7, #20]
 8007530:	4798      	blx	r3
}
 8007532:	bf00      	nop
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200082c4 	.word	0x200082c4

08007540 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	4618      	mov	r0, r3
 800754e:	f000 f859 	bl	8007604 <prvGetNextExpireTime>
 8007552:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 f805 	bl	8007568 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800755e:	f000 f8d7 	bl	8007710 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007562:	bf00      	nop
 8007564:	e7f0      	b.n	8007548 <prvTimerTask+0x8>
	...

08007568 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007572:	f7ff f9f1 	bl	8006958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007576:	f107 0308 	add.w	r3, r7, #8
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f866 	bl	800764c <prvSampleTimeNow>
 8007580:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d130      	bne.n	80075ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <prvProcessTimerOrBlockTask+0x3c>
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	429a      	cmp	r2, r3
 8007594:	d806      	bhi.n	80075a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007596:	f7ff f9ed 	bl	8006974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff ff7f 	bl	80074a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075a2:	e024      	b.n	80075ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075aa:	4b13      	ldr	r3, [pc, #76]	@ (80075f8 <prvProcessTimerOrBlockTask+0x90>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <prvProcessTimerOrBlockTask+0x50>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <prvProcessTimerOrBlockTask+0x52>
 80075b8:	2300      	movs	r3, #0
 80075ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075bc:	4b0f      	ldr	r3, [pc, #60]	@ (80075fc <prvProcessTimerOrBlockTask+0x94>)
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	4619      	mov	r1, r3
 80075ca:	f7fe ff3f 	bl	800644c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075ce:	f7ff f9d1 	bl	8006974 <xTaskResumeAll>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075d8:	4b09      	ldr	r3, [pc, #36]	@ (8007600 <prvProcessTimerOrBlockTask+0x98>)
 80075da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	f3bf 8f6f 	isb	sy
}
 80075e8:	e001      	b.n	80075ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075ea:	f7ff f9c3 	bl	8006974 <xTaskResumeAll>
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200082c8 	.word	0x200082c8
 80075fc:	200082cc 	.word	0x200082cc
 8007600:	e000ed04 	.word	0xe000ed04

08007604 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800760c:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <prvGetNextExpireTime+0x44>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <prvGetNextExpireTime+0x16>
 8007616:	2201      	movs	r2, #1
 8007618:	e000      	b.n	800761c <prvGetNextExpireTime+0x18>
 800761a:	2200      	movs	r2, #0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007628:	4b07      	ldr	r3, [pc, #28]	@ (8007648 <prvGetNextExpireTime+0x44>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e001      	b.n	8007638 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007638:	68fb      	ldr	r3, [r7, #12]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	200082c4 	.word	0x200082c4

0800764c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007654:	f7ff fa2e 	bl	8006ab4 <xTaskGetTickCount>
 8007658:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800765a:	4b0b      	ldr	r3, [pc, #44]	@ (8007688 <prvSampleTimeNow+0x3c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	429a      	cmp	r2, r3
 8007662:	d205      	bcs.n	8007670 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007664:	f000 f940 	bl	80078e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e002      	b.n	8007676 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007676:	4a04      	ldr	r2, [pc, #16]	@ (8007688 <prvSampleTimeNow+0x3c>)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	200082d4 	.word	0x200082d4

0800768c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d812      	bhi.n	80076d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	1ad2      	subs	r2, r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d302      	bcc.n	80076c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e01b      	b.n	80076fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076c6:	4b10      	ldr	r3, [pc, #64]	@ (8007708 <prvInsertTimerInActiveList+0x7c>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7fe f972 	bl	80059ba <vListInsert>
 80076d6:	e012      	b.n	80076fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d206      	bcs.n	80076ee <prvInsertTimerInActiveList+0x62>
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d302      	bcc.n	80076ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e007      	b.n	80076fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ee:	4b07      	ldr	r3, [pc, #28]	@ (800770c <prvInsertTimerInActiveList+0x80>)
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3304      	adds	r3, #4
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f7fe f95e 	bl	80059ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076fe:	697b      	ldr	r3, [r7, #20]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	200082c8 	.word	0x200082c8
 800770c:	200082c4 	.word	0x200082c4

08007710 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08e      	sub	sp, #56	@ 0x38
 8007714:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007716:	e0d4      	b.n	80078c2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	da1b      	bge.n	8007756 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	3304      	adds	r3, #4
 8007722:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10d      	bne.n	8007746 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	b672      	cpsid	i
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	b662      	cpsie	i
 800773e:	61fb      	str	r3, [r7, #28]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800774c:	6850      	ldr	r0, [r2, #4]
 800774e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007750:	6892      	ldr	r2, [r2, #8]
 8007752:	4611      	mov	r1, r2
 8007754:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f2c0 80b2 	blt.w	80078c2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe f95c 	bl	8005a2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007774:	463b      	mov	r3, r7
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff ff68 	bl	800764c <prvSampleTimeNow>
 800777c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b09      	cmp	r3, #9
 8007782:	f200 809b 	bhi.w	80078bc <prvProcessReceivedCommands+0x1ac>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <prvProcessReceivedCommands+0x7c>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077b5 	.word	0x080077b5
 8007798:	0800782f 	.word	0x0800782f
 800779c:	08007843 	.word	0x08007843
 80077a0:	08007893 	.word	0x08007893
 80077a4:	080077b5 	.word	0x080077b5
 80077a8:	080077b5 	.word	0x080077b5
 80077ac:	0800782f 	.word	0x0800782f
 80077b0:	08007843 	.word	0x08007843
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	18d1      	adds	r1, r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077d4:	f7ff ff5a 	bl	800768c <prvInsertTimerInActiveList>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d070      	beq.n	80078c0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d065      	beq.n	80078c0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	441a      	add	r2, r3
 80077fc:	2300      	movs	r3, #0
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2300      	movs	r3, #0
 8007802:	2100      	movs	r1, #0
 8007804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007806:	f7ff fdfb 	bl	8007400 <xTimerGenericCommand>
 800780a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d156      	bne.n	80078c0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	b672      	cpsid	i
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	b662      	cpsie	i
 8007826:	61bb      	str	r3, [r7, #24]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	b2da      	uxtb	r2, r3
 800783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007840:	e03f      	b.n	80078c2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	b2da      	uxtb	r2, r3
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007858:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800785a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10d      	bne.n	800787e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007866:	b672      	cpsid	i
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	b662      	cpsie	i
 8007876:	617b      	str	r3, [r7, #20]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	18d1      	adds	r1, r2, r3
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800788a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800788c:	f7ff fefe 	bl	800768c <prvInsertTimerInActiveList>
					break;
 8007890:	e017      	b.n	80078c2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80078a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078a2:	f000 fbd7 	bl	8008054 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078a6:	e00c      	b.n	80078c2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078ba:	e002      	b.n	80078c2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80078bc:	bf00      	nop
 80078be:	e000      	b.n	80078c2 <prvProcessReceivedCommands+0x1b2>
					break;
 80078c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078c2:	4b08      	ldr	r3, [pc, #32]	@ (80078e4 <prvProcessReceivedCommands+0x1d4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	1d39      	adds	r1, r7, #4
 80078c8:	2200      	movs	r2, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fb9c 	bl	8006008 <xQueueReceive>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f47f af20 	bne.w	8007718 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	3730      	adds	r7, #48	@ 0x30
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	200082cc 	.word	0x200082cc

080078e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ee:	e04b      	b.n	8007988 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f0:	4b2f      	ldr	r3, [pc, #188]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fa:	4b2d      	ldr	r3, [pc, #180]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3304      	adds	r3, #4
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe f88f 	bl	8005a2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d031      	beq.n	8007988 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4413      	add	r3, r2
 800792c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	429a      	cmp	r2, r3
 8007934:	d90e      	bls.n	8007954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007942:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f7fe f834 	bl	80059ba <vListInsert>
 8007952:	e019      	b.n	8007988 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007954:	2300      	movs	r3, #0
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	2300      	movs	r3, #0
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	2100      	movs	r1, #0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fd4e 	bl	8007400 <xTimerGenericCommand>
 8007964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	b672      	cpsid	i
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	b662      	cpsie	i
 8007980:	603b      	str	r3, [r7, #0]
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007988:	4b09      	ldr	r3, [pc, #36]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1ae      	bne.n	80078f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007992:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <prvSwitchTimerLists+0xcc>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a04      	ldr	r2, [pc, #16]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 800799e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079a0:	4a04      	ldr	r2, [pc, #16]	@ (80079b4 <prvSwitchTimerLists+0xcc>)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	6013      	str	r3, [r2, #0]
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	200082c4 	.word	0x200082c4
 80079b4:	200082c8 	.word	0x200082c8

080079b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079be:	f000 f94d 	bl	8007c5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079c2:	4b15      	ldr	r3, [pc, #84]	@ (8007a18 <prvCheckForValidListAndQueue+0x60>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d120      	bne.n	8007a0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079ca:	4814      	ldr	r0, [pc, #80]	@ (8007a1c <prvCheckForValidListAndQueue+0x64>)
 80079cc:	f7fd ffa4 	bl	8005918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079d0:	4813      	ldr	r0, [pc, #76]	@ (8007a20 <prvCheckForValidListAndQueue+0x68>)
 80079d2:	f7fd ffa1 	bl	8005918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079d6:	4b13      	ldr	r3, [pc, #76]	@ (8007a24 <prvCheckForValidListAndQueue+0x6c>)
 80079d8:	4a10      	ldr	r2, [pc, #64]	@ (8007a1c <prvCheckForValidListAndQueue+0x64>)
 80079da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079dc:	4b12      	ldr	r3, [pc, #72]	@ (8007a28 <prvCheckForValidListAndQueue+0x70>)
 80079de:	4a10      	ldr	r2, [pc, #64]	@ (8007a20 <prvCheckForValidListAndQueue+0x68>)
 80079e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079e2:	2300      	movs	r3, #0
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	4b11      	ldr	r3, [pc, #68]	@ (8007a2c <prvCheckForValidListAndQueue+0x74>)
 80079e8:	4a11      	ldr	r2, [pc, #68]	@ (8007a30 <prvCheckForValidListAndQueue+0x78>)
 80079ea:	2110      	movs	r1, #16
 80079ec:	200a      	movs	r0, #10
 80079ee:	f7fe f8b3 	bl	8005b58 <xQueueGenericCreateStatic>
 80079f2:	4603      	mov	r3, r0
 80079f4:	4a08      	ldr	r2, [pc, #32]	@ (8007a18 <prvCheckForValidListAndQueue+0x60>)
 80079f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079f8:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <prvCheckForValidListAndQueue+0x60>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d005      	beq.n	8007a0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <prvCheckForValidListAndQueue+0x60>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	490b      	ldr	r1, [pc, #44]	@ (8007a34 <prvCheckForValidListAndQueue+0x7c>)
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fcf6 	bl	80063f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a0c:	f000 f95c 	bl	8007cc8 <vPortExitCritical>
}
 8007a10:	bf00      	nop
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200082cc 	.word	0x200082cc
 8007a1c:	2000829c 	.word	0x2000829c
 8007a20:	200082b0 	.word	0x200082b0
 8007a24:	200082c4 	.word	0x200082c4
 8007a28:	200082c8 	.word	0x200082c8
 8007a2c:	20008378 	.word	0x20008378
 8007a30:	200082d8 	.word	0x200082d8
 8007a34:	0801580c 	.word	0x0801580c

08007a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3b04      	subs	r3, #4
 8007a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3b04      	subs	r3, #4
 8007a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f023 0201 	bic.w	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3b04      	subs	r3, #4
 8007a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a68:	4a0c      	ldr	r2, [pc, #48]	@ (8007a9c <pxPortInitialiseStack+0x64>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3b14      	subs	r3, #20
 8007a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f06f 0202 	mvn.w	r2, #2
 8007a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3b20      	subs	r3, #32
 8007a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	08007aa1 	.word	0x08007aa1

08007aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aaa:	4b15      	ldr	r3, [pc, #84]	@ (8007b00 <prvTaskExitError+0x60>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ab2:	d00d      	beq.n	8007ad0 <prvTaskExitError+0x30>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab8:	b672      	cpsid	i
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	b662      	cpsie	i
 8007ac8:	60fb      	str	r3, [r7, #12]
}
 8007aca:	bf00      	nop
 8007acc:	bf00      	nop
 8007ace:	e7fd      	b.n	8007acc <prvTaskExitError+0x2c>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	b672      	cpsid	i
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	b662      	cpsie	i
 8007ae4:	60bb      	str	r3, [r7, #8]
}
 8007ae6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ae8:	bf00      	nop
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0fc      	beq.n	8007aea <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000010 	.word	0x20000010
	...

08007b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b10:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <pxCurrentTCBConst2>)
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	6808      	ldr	r0, [r1, #0]
 8007b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1a:	f380 8809 	msr	PSP, r0
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8811 	msr	BASEPRI, r0
 8007b2a:	4770      	bx	lr
 8007b2c:	f3af 8000 	nop.w

08007b30 <pxCurrentTCBConst2>:
 8007b30:	20007d9c 	.word	0x20007d9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop

08007b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b38:	4808      	ldr	r0, [pc, #32]	@ (8007b5c <prvPortStartFirstTask+0x24>)
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f380 8808 	msr	MSP, r0
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f380 8814 	msr	CONTROL, r0
 8007b4a:	b662      	cpsie	i
 8007b4c:	b661      	cpsie	f
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	df00      	svc	0
 8007b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b5a:	bf00      	nop
 8007b5c:	e000ed08 	.word	0xe000ed08

08007b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b66:	4b37      	ldr	r3, [pc, #220]	@ (8007c44 <xPortStartScheduler+0xe4>)
 8007b68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	22ff      	movs	r2, #255	@ 0xff
 8007b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c48 <xPortStartScheduler+0xe8>)
 8007b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007b90:	2207      	movs	r2, #7
 8007b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b94:	e009      	b.n	8007baa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b96:	4b2d      	ldr	r3, [pc, #180]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb2:	2b80      	cmp	r3, #128	@ 0x80
 8007bb4:	d0ef      	beq.n	8007b96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bb6:	4b25      	ldr	r3, [pc, #148]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1c3 0307 	rsb	r3, r3, #7
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d00d      	beq.n	8007bde <xPortStartScheduler+0x7e>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	b672      	cpsid	i
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	b662      	cpsie	i
 8007bd6:	60bb      	str	r3, [r7, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bde:	4b1b      	ldr	r3, [pc, #108]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	4a19      	ldr	r2, [pc, #100]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007be8:	4b18      	ldr	r3, [pc, #96]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bf0:	4a16      	ldr	r2, [pc, #88]	@ (8007c4c <xPortStartScheduler+0xec>)
 8007bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bfc:	4b14      	ldr	r3, [pc, #80]	@ (8007c50 <xPortStartScheduler+0xf0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a13      	ldr	r2, [pc, #76]	@ (8007c50 <xPortStartScheduler+0xf0>)
 8007c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c08:	4b11      	ldr	r3, [pc, #68]	@ (8007c50 <xPortStartScheduler+0xf0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a10      	ldr	r2, [pc, #64]	@ (8007c50 <xPortStartScheduler+0xf0>)
 8007c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c14:	f000 f8dc 	bl	8007dd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c18:	4b0e      	ldr	r3, [pc, #56]	@ (8007c54 <xPortStartScheduler+0xf4>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c1e:	f000 f8fb 	bl	8007e18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c22:	4b0d      	ldr	r3, [pc, #52]	@ (8007c58 <xPortStartScheduler+0xf8>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a0c      	ldr	r2, [pc, #48]	@ (8007c58 <xPortStartScheduler+0xf8>)
 8007c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c2e:	f7ff ff83 	bl	8007b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c32:	f7ff f80b 	bl	8006c4c <vTaskSwitchContext>
	prvTaskExitError();
 8007c36:	f7ff ff33 	bl	8007aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	e000e400 	.word	0xe000e400
 8007c48:	200083c8 	.word	0x200083c8
 8007c4c:	200083cc 	.word	0x200083cc
 8007c50:	e000ed20 	.word	0xe000ed20
 8007c54:	20000010 	.word	0x20000010
 8007c58:	e000ef34 	.word	0xe000ef34

08007c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	b672      	cpsid	i
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	b662      	cpsie	i
 8007c76:	607b      	str	r3, [r7, #4]
}
 8007c78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c7a:	4b11      	ldr	r3, [pc, #68]	@ (8007cc0 <vPortEnterCritical+0x64>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	4a0f      	ldr	r2, [pc, #60]	@ (8007cc0 <vPortEnterCritical+0x64>)
 8007c82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c84:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc0 <vPortEnterCritical+0x64>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d112      	bne.n	8007cb2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc4 <vPortEnterCritical+0x68>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00d      	beq.n	8007cb2 <vPortEnterCritical+0x56>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	b672      	cpsid	i
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	b662      	cpsie	i
 8007caa:	603b      	str	r3, [r7, #0]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <vPortEnterCritical+0x52>
	}
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20000010 	.word	0x20000010
 8007cc4:	e000ed04 	.word	0xe000ed04

08007cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cce:	4b13      	ldr	r3, [pc, #76]	@ (8007d1c <vPortExitCritical+0x54>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10d      	bne.n	8007cf2 <vPortExitCritical+0x2a>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	607b      	str	r3, [r7, #4]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <vPortExitCritical+0x54>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	4a08      	ldr	r2, [pc, #32]	@ (8007d1c <vPortExitCritical+0x54>)
 8007cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cfc:	4b07      	ldr	r3, [pc, #28]	@ (8007d1c <vPortExitCritical+0x54>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <vPortExitCritical+0x48>
 8007d04:	2300      	movs	r3, #0
 8007d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f383 8811 	msr	BASEPRI, r3
}
 8007d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	20000010 	.word	0x20000010

08007d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d20:	f3ef 8009 	mrs	r0, PSP
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4b15      	ldr	r3, [pc, #84]	@ (8007d80 <pxCurrentTCBConst>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f01e 0f10 	tst.w	lr, #16
 8007d30:	bf08      	it	eq
 8007d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	6010      	str	r0, [r2, #0]
 8007d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d44:	b672      	cpsid	i
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	b662      	cpsie	i
 8007d54:	f7fe ff7a 	bl	8006c4c <vTaskSwitchContext>
 8007d58:	f04f 0000 	mov.w	r0, #0
 8007d5c:	f380 8811 	msr	BASEPRI, r0
 8007d60:	bc09      	pop	{r0, r3}
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	6808      	ldr	r0, [r1, #0]
 8007d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6a:	f01e 0f10 	tst.w	lr, #16
 8007d6e:	bf08      	it	eq
 8007d70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d74:	f380 8809 	msr	PSP, r0
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <pxCurrentTCBConst>:
 8007d80:	20007d9c 	.word	0x20007d9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop

08007d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	b672      	cpsid	i
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	b662      	cpsie	i
 8007da2:	607b      	str	r3, [r7, #4]
}
 8007da4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007da6:	f7fe fe95 	bl	8006ad4 <xTaskIncrementTick>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007db0:	4b06      	ldr	r3, [pc, #24]	@ (8007dcc <SysTick_Handler+0x44>)
 8007db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	2300      	movs	r3, #0
 8007dba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f383 8811 	msr	BASEPRI, r3
}
 8007dc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e04 <vPortSetupTimerInterrupt+0x34>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	@ (8007e08 <vPortSetupTimerInterrupt+0x38>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <vPortSetupTimerInterrupt+0x3c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a0a      	ldr	r2, [pc, #40]	@ (8007e10 <vPortSetupTimerInterrupt+0x40>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	099b      	lsrs	r3, r3, #6
 8007dec:	4a09      	ldr	r2, [pc, #36]	@ (8007e14 <vPortSetupTimerInterrupt+0x44>)
 8007dee:	3b01      	subs	r3, #1
 8007df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007df2:	4b04      	ldr	r3, [pc, #16]	@ (8007e04 <vPortSetupTimerInterrupt+0x34>)
 8007df4:	2207      	movs	r2, #7
 8007df6:	601a      	str	r2, [r3, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	e000e010 	.word	0xe000e010
 8007e08:	e000e018 	.word	0xe000e018
 8007e0c:	20000004 	.word	0x20000004
 8007e10:	10624dd3 	.word	0x10624dd3
 8007e14:	e000e014 	.word	0xe000e014

08007e18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e28 <vPortEnableVFP+0x10>
 8007e1c:	6801      	ldr	r1, [r0, #0]
 8007e1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e22:	6001      	str	r1, [r0, #0]
 8007e24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e26:	bf00      	nop
 8007e28:	e000ed88 	.word	0xe000ed88

08007e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e32:	f3ef 8305 	mrs	r3, IPSR
 8007e36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b0f      	cmp	r3, #15
 8007e3c:	d917      	bls.n	8007e6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ea8 <vPortValidateInterruptPriority+0x7c>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e48:	4b18      	ldr	r3, [pc, #96]	@ (8007eac <vPortValidateInterruptPriority+0x80>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	7afa      	ldrb	r2, [r7, #11]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d20d      	bcs.n	8007e6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	b672      	cpsid	i
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	b662      	cpsie	i
 8007e66:	607b      	str	r3, [r7, #4]
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	e7fd      	b.n	8007e6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e6e:	4b10      	ldr	r3, [pc, #64]	@ (8007eb0 <vPortValidateInterruptPriority+0x84>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e76:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb4 <vPortValidateInterruptPriority+0x88>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d90d      	bls.n	8007e9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	b672      	cpsid	i
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	b662      	cpsie	i
 8007e92:	603b      	str	r3, [r7, #0]
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	e7fd      	b.n	8007e96 <vPortValidateInterruptPriority+0x6a>
	}
 8007e9a:	bf00      	nop
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	e000e3f0 	.word	0xe000e3f0
 8007eac:	200083c8 	.word	0x200083c8
 8007eb0:	e000ed0c 	.word	0xe000ed0c
 8007eb4:	200083cc 	.word	0x200083cc

08007eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	@ 0x28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ec4:	f7fe fd48 	bl	8006958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ec8:	4b5d      	ldr	r3, [pc, #372]	@ (8008040 <pvPortMalloc+0x188>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ed0:	f000 f920 	bl	8008114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8008044 <pvPortMalloc+0x18c>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 8094 	bne.w	800800a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d020      	beq.n	8007f2a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007ee8:	2208      	movs	r2, #8
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4413      	add	r3, r2
 8007eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d017      	beq.n	8007f2a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f023 0307 	bic.w	r3, r3, #7
 8007f00:	3308      	adds	r3, #8
 8007f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00d      	beq.n	8007f2a <pvPortMalloc+0x72>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	b672      	cpsid	i
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	b662      	cpsie	i
 8007f22:	617b      	str	r3, [r7, #20]
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	e7fd      	b.n	8007f26 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06c      	beq.n	800800a <pvPortMalloc+0x152>
 8007f30:	4b45      	ldr	r3, [pc, #276]	@ (8008048 <pvPortMalloc+0x190>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d867      	bhi.n	800800a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f3a:	4b44      	ldr	r3, [pc, #272]	@ (800804c <pvPortMalloc+0x194>)
 8007f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f3e:	4b43      	ldr	r3, [pc, #268]	@ (800804c <pvPortMalloc+0x194>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f44:	e004      	b.n	8007f50 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d903      	bls.n	8007f62 <pvPortMalloc+0xaa>
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f1      	bne.n	8007f46 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f62:	4b37      	ldr	r3, [pc, #220]	@ (8008040 <pvPortMalloc+0x188>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d04e      	beq.n	800800a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2208      	movs	r2, #8
 8007f72:	4413      	add	r3, r2
 8007f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	1ad2      	subs	r2, r2, r3
 8007f86:	2308      	movs	r3, #8
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d922      	bls.n	8007fd4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00d      	beq.n	8007fbc <pvPortMalloc+0x104>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	b672      	cpsid	i
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	b662      	cpsie	i
 8007fb4:	613b      	str	r3, [r7, #16]
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fce:	69b8      	ldr	r0, [r7, #24]
 8007fd0:	f000 f902 	bl	80081d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008048 <pvPortMalloc+0x190>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	4a1a      	ldr	r2, [pc, #104]	@ (8008048 <pvPortMalloc+0x190>)
 8007fe0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fe2:	4b19      	ldr	r3, [pc, #100]	@ (8008048 <pvPortMalloc+0x190>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8008050 <pvPortMalloc+0x198>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d203      	bcs.n	8007ff6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fee:	4b16      	ldr	r3, [pc, #88]	@ (8008048 <pvPortMalloc+0x190>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a17      	ldr	r2, [pc, #92]	@ (8008050 <pvPortMalloc+0x198>)
 8007ff4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	4b12      	ldr	r3, [pc, #72]	@ (8008044 <pvPortMalloc+0x18c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800800a:	f7fe fcb3 	bl	8006974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00d      	beq.n	8008034 <pvPortMalloc+0x17c>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	b672      	cpsid	i
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	b662      	cpsie	i
 800802c:	60fb      	str	r3, [r7, #12]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <pvPortMalloc+0x178>
	return pvReturn;
 8008034:	69fb      	ldr	r3, [r7, #28]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3728      	adds	r7, #40	@ 0x28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	2000bfd8 	.word	0x2000bfd8
 8008044:	2000bfe4 	.word	0x2000bfe4
 8008048:	2000bfdc 	.word	0x2000bfdc
 800804c:	2000bfd0 	.word	0x2000bfd0
 8008050:	2000bfe0 	.word	0x2000bfe0

08008054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d04e      	beq.n	8008104 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008066:	2308      	movs	r3, #8
 8008068:	425b      	negs	r3, r3
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	4b24      	ldr	r3, [pc, #144]	@ (800810c <vPortFree+0xb8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4013      	ands	r3, r2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10d      	bne.n	800809e <vPortFree+0x4a>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	b672      	cpsid	i
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	b662      	cpsie	i
 8008096:	60fb      	str	r3, [r7, #12]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <vPortFree+0x6e>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080aa:	b672      	cpsid	i
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	b662      	cpsie	i
 80080ba:	60bb      	str	r3, [r7, #8]
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	e7fd      	b.n	80080be <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	4b11      	ldr	r3, [pc, #68]	@ (800810c <vPortFree+0xb8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4013      	ands	r3, r2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d019      	beq.n	8008104 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d115      	bne.n	8008104 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	4b0b      	ldr	r3, [pc, #44]	@ (800810c <vPortFree+0xb8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	401a      	ands	r2, r3
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080e8:	f7fe fc36 	bl	8006958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	4b07      	ldr	r3, [pc, #28]	@ (8008110 <vPortFree+0xbc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	4a06      	ldr	r2, [pc, #24]	@ (8008110 <vPortFree+0xbc>)
 80080f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080fa:	6938      	ldr	r0, [r7, #16]
 80080fc:	f000 f86c 	bl	80081d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008100:	f7fe fc38 	bl	8006974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	2000bfe4 	.word	0x2000bfe4
 8008110:	2000bfdc 	.word	0x2000bfdc

08008114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800811a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800811e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008120:	4b27      	ldr	r3, [pc, #156]	@ (80081c0 <prvHeapInit+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3307      	adds	r3, #7
 8008132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	4a1f      	ldr	r2, [pc, #124]	@ (80081c0 <prvHeapInit+0xac>)
 8008144:	4413      	add	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800814c:	4a1d      	ldr	r2, [pc, #116]	@ (80081c4 <prvHeapInit+0xb0>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008152:	4b1c      	ldr	r3, [pc, #112]	@ (80081c4 <prvHeapInit+0xb0>)
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008160:	2208      	movs	r2, #8
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a15      	ldr	r2, [pc, #84]	@ (80081c8 <prvHeapInit+0xb4>)
 8008174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008176:	4b14      	ldr	r3, [pc, #80]	@ (80081c8 <prvHeapInit+0xb4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800817e:	4b12      	ldr	r3, [pc, #72]	@ (80081c8 <prvHeapInit+0xb4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008194:	4b0c      	ldr	r3, [pc, #48]	@ (80081c8 <prvHeapInit+0xb4>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4a0a      	ldr	r2, [pc, #40]	@ (80081cc <prvHeapInit+0xb8>)
 80081a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4a09      	ldr	r2, [pc, #36]	@ (80081d0 <prvHeapInit+0xbc>)
 80081aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ac:	4b09      	ldr	r3, [pc, #36]	@ (80081d4 <prvHeapInit+0xc0>)
 80081ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	200083d0 	.word	0x200083d0
 80081c4:	2000bfd0 	.word	0x2000bfd0
 80081c8:	2000bfd8 	.word	0x2000bfd8
 80081cc:	2000bfe0 	.word	0x2000bfe0
 80081d0:	2000bfdc 	.word	0x2000bfdc
 80081d4:	2000bfe4 	.word	0x2000bfe4

080081d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081e0:	4b28      	ldr	r3, [pc, #160]	@ (8008284 <prvInsertBlockIntoFreeList+0xac>)
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e002      	b.n	80081ec <prvInsertBlockIntoFreeList+0x14>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d8f7      	bhi.n	80081e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d108      	bne.n	800821a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	441a      	add	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	441a      	add	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d118      	bne.n	8008260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b15      	ldr	r3, [pc, #84]	@ (8008288 <prvInsertBlockIntoFreeList+0xb0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d00d      	beq.n	8008256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	441a      	add	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e008      	b.n	8008268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008256:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <prvInsertBlockIntoFreeList+0xb0>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e003      	b.n	8008268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d002      	beq.n	8008276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	2000bfd0 	.word	0x2000bfd0
 8008288:	2000bfd8 	.word	0x2000bfd8

0800828c <rcl_get_zero_initialized_publisher>:
 800828c:	4b01      	ldr	r3, [pc, #4]	@ (8008294 <rcl_get_zero_initialized_publisher+0x8>)
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	0801585c 	.word	0x0801585c

08008298 <rcl_publisher_init>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	b091      	sub	sp, #68	@ 0x44
 800829e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	d041      	beq.n	8008328 <rcl_publisher_init+0x90>
 80082a4:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 80082a8:	4604      	mov	r4, r0
 80082aa:	460e      	mov	r6, r1
 80082ac:	4690      	mov	r8, r2
 80082ae:	4648      	mov	r0, r9
 80082b0:	461d      	mov	r5, r3
 80082b2:	f000 fa3d 	bl	8008730 <rcutils_allocator_is_valid>
 80082b6:	f080 0001 	eor.w	r0, r0, #1
 80082ba:	f010 0fff 	tst.w	r0, #255	@ 0xff
 80082be:	d133      	bne.n	8008328 <rcl_publisher_init+0x90>
 80082c0:	b394      	cbz	r4, 8008328 <rcl_publisher_init+0x90>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	b123      	cbz	r3, 80082d0 <rcl_publisher_init+0x38>
 80082c6:	2564      	movs	r5, #100	@ 0x64
 80082c8:	4628      	mov	r0, r5
 80082ca:	b011      	add	sp, #68	@ 0x44
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	4630      	mov	r0, r6
 80082d2:	f005 fb6d 	bl	800d9b0 <rcl_node_is_valid>
 80082d6:	b360      	cbz	r0, 8008332 <rcl_publisher_init+0x9a>
 80082d8:	f1b8 0f00 	cmp.w	r8, #0
 80082dc:	d024      	beq.n	8008328 <rcl_publisher_init+0x90>
 80082de:	fab5 fa85 	clz	sl, r5
 80082e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80082e6:	b1fd      	cbz	r5, 8008328 <rcl_publisher_init+0x90>
 80082e8:	46ce      	mov	lr, r9
 80082ea:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 80082ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80082f2:	f8de e000 	ldr.w	lr, [lr]
 80082f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80082fa:	f8cc e000 	str.w	lr, [ip]
 80082fe:	f000 fa53 	bl	80087a8 <rcutils_get_zero_initialized_string_map>
 8008302:	aa10      	add	r2, sp, #64	@ 0x40
 8008304:	4684      	mov	ip, r0
 8008306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008308:	f8cd c020 	str.w	ip, [sp, #32]
 800830c:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8008310:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008314:	4651      	mov	r1, sl
 8008316:	a808      	add	r0, sp, #32
 8008318:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800831a:	f000 fabf 	bl	800889c <rcutils_string_map_init>
 800831e:	b150      	cbz	r0, 8008336 <rcl_publisher_init+0x9e>
 8008320:	280a      	cmp	r0, #10
 8008322:	d013      	beq.n	800834c <rcl_publisher_init+0xb4>
 8008324:	2501      	movs	r5, #1
 8008326:	e7cf      	b.n	80082c8 <rcl_publisher_init+0x30>
 8008328:	250b      	movs	r5, #11
 800832a:	4628      	mov	r0, r5
 800832c:	b011      	add	sp, #68	@ 0x44
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	25c8      	movs	r5, #200	@ 0xc8
 8008334:	e7c8      	b.n	80082c8 <rcl_publisher_init+0x30>
 8008336:	a808      	add	r0, sp, #32
 8008338:	f004 ff74 	bl	800d224 <rcl_get_default_topic_name_substitutions>
 800833c:	4682      	mov	sl, r0
 800833e:	b138      	cbz	r0, 8008350 <rcl_publisher_init+0xb8>
 8008340:	a808      	add	r0, sp, #32
 8008342:	f000 fae9 	bl	8008918 <rcutils_string_map_fini>
 8008346:	f1ba 0f0a 	cmp.w	sl, #10
 800834a:	d1eb      	bne.n	8008324 <rcl_publisher_init+0x8c>
 800834c:	250a      	movs	r5, #10
 800834e:	e7bb      	b.n	80082c8 <rcl_publisher_init+0x30>
 8008350:	4630      	mov	r0, r6
 8008352:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008356:	f005 fb35 	bl	800d9c4 <rcl_node_get_name>
 800835a:	4682      	mov	sl, r0
 800835c:	4630      	mov	r0, r6
 800835e:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8008362:	f005 fb37 	bl	800d9d4 <rcl_node_get_namespace>
 8008366:	4686      	mov	lr, r0
 8008368:	46ec      	mov	ip, sp
 800836a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800836e:	f8d9 9000 	ldr.w	r9, [r9]
 8008372:	f8cd b014 	str.w	fp, [sp, #20]
 8008376:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800837a:	4628      	mov	r0, r5
 800837c:	4651      	mov	r1, sl
 800837e:	4672      	mov	r2, lr
 8008380:	ab08      	add	r3, sp, #32
 8008382:	f8cc 9000 	str.w	r9, [ip]
 8008386:	f004 fdf1 	bl	800cf6c <rcl_expand_topic_name>
 800838a:	4605      	mov	r5, r0
 800838c:	a808      	add	r0, sp, #32
 800838e:	f000 fac3 	bl	8008918 <rcutils_string_map_fini>
 8008392:	b920      	cbnz	r0, 800839e <rcl_publisher_init+0x106>
 8008394:	b15d      	cbz	r5, 80083ae <rcl_publisher_init+0x116>
 8008396:	2d67      	cmp	r5, #103	@ 0x67
 8008398:	d05f      	beq.n	800845a <rcl_publisher_init+0x1c2>
 800839a:	2d69      	cmp	r5, #105	@ 0x69
 800839c:	d05d      	beq.n	800845a <rcl_publisher_init+0x1c2>
 800839e:	2501      	movs	r5, #1
 80083a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d090      	beq.n	80082c8 <rcl_publisher_init+0x30>
 80083a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083a8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80083aa:	4798      	blx	r3
 80083ac:	e78c      	b.n	80082c8 <rcl_publisher_init+0x30>
 80083ae:	4630      	mov	r0, r6
 80083b0:	f005 fb18 	bl	800d9e4 <rcl_node_get_options>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d0f2      	beq.n	800839e <rcl_publisher_init+0x106>
 80083b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ba:	f7f7 ffa1 	bl	8000300 <strlen>
 80083be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80083c2:	3001      	adds	r0, #1
 80083c4:	4798      	blx	r3
 80083c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083c8:	4681      	mov	r9, r0
 80083ca:	4608      	mov	r0, r1
 80083cc:	9107      	str	r1, [sp, #28]
 80083ce:	f7f7 ff97 	bl	8000300 <strlen>
 80083d2:	4602      	mov	r2, r0
 80083d4:	9907      	ldr	r1, [sp, #28]
 80083d6:	4648      	mov	r0, r9
 80083d8:	3201      	adds	r2, #1
 80083da:	f00a f83e 	bl	801245a <memcpy>
 80083de:	462a      	mov	r2, r5
 80083e0:	4648      	mov	r0, r9
 80083e2:	a90a      	add	r1, sp, #40	@ 0x28
 80083e4:	f000 fb14 	bl	8008a10 <rmw_validate_full_topic_name>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d138      	bne.n	800845e <rcl_publisher_init+0x1c6>
 80083ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d137      	bne.n	8008462 <rcl_publisher_init+0x1ca>
 80083f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f4:	20c0      	movs	r0, #192	@ 0xc0
 80083f6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80083f8:	4798      	blx	r3
 80083fa:	6020      	str	r0, [r4, #0]
 80083fc:	b398      	cbz	r0, 8008466 <rcl_publisher_init+0x1ce>
 80083fe:	4630      	mov	r0, r6
 8008400:	f005 faf8 	bl	800d9f4 <rcl_node_get_rmw_handle>
 8008404:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8008408:	4641      	mov	r1, r8
 800840a:	463b      	mov	r3, r7
 800840c:	9200      	str	r2, [sp, #0]
 800840e:	464a      	mov	r2, r9
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	f000 fc01 	bl	8008c18 <rmw_create_publisher>
 8008416:	6821      	ldr	r1, [r4, #0]
 8008418:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 800841c:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 8008420:	b380      	cbz	r0, 8008484 <rcl_publisher_init+0x1ec>
 8008422:	3168      	adds	r1, #104	@ 0x68
 8008424:	f000 fcdc 	bl	8008de0 <rmw_publisher_get_actual_qos>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	4605      	mov	r5, r0
 800842c:	b9e8      	cbnz	r0, 800846a <rcl_publisher_init+0x1d2>
 800842e:	f897 4048 	ldrb.w	r4, [r7, #72]	@ 0x48
 8008432:	2268      	movs	r2, #104	@ 0x68
 8008434:	4639      	mov	r1, r7
 8008436:	4618      	mov	r0, r3
 8008438:	f883 40b0 	strb.w	r4, [r3, #176]	@ 0xb0
 800843c:	f00a f80d 	bl	801245a <memcpy>
 8008440:	6832      	ldr	r2, [r6, #0]
 8008442:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 8008446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008448:	b110      	cbz	r0, 8008450 <rcl_publisher_init+0x1b8>
 800844a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800844c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800844e:	4798      	blx	r3
 8008450:	4648      	mov	r0, r9
 8008452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008454:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008456:	4798      	blx	r3
 8008458:	e736      	b.n	80082c8 <rcl_publisher_init+0x30>
 800845a:	2567      	movs	r5, #103	@ 0x67
 800845c:	e7a0      	b.n	80083a0 <rcl_publisher_init+0x108>
 800845e:	2501      	movs	r5, #1
 8008460:	e7f1      	b.n	8008446 <rcl_publisher_init+0x1ae>
 8008462:	2567      	movs	r5, #103	@ 0x67
 8008464:	e7ef      	b.n	8008446 <rcl_publisher_init+0x1ae>
 8008466:	250a      	movs	r5, #10
 8008468:	e7ed      	b.n	8008446 <rcl_publisher_init+0x1ae>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f7      	beq.n	800845e <rcl_publisher_init+0x1c6>
 800846e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008472:	b13b      	cbz	r3, 8008484 <rcl_publisher_init+0x1ec>
 8008474:	4630      	mov	r0, r6
 8008476:	f005 fabd 	bl	800d9f4 <rcl_node_get_rmw_handle>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8008480:	f000 fcc2 	bl	8008e08 <rmw_destroy_publisher>
 8008484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008486:	2501      	movs	r5, #1
 8008488:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800848a:	6820      	ldr	r0, [r4, #0]
 800848c:	4798      	blx	r3
 800848e:	2300      	movs	r3, #0
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	e7d8      	b.n	8008446 <rcl_publisher_init+0x1ae>

08008494 <rcl_publisher_get_default_options>:
 8008494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008496:	4f0e      	ldr	r7, [pc, #56]	@ (80084d0 <rcl_publisher_get_default_options+0x3c>)
 8008498:	b087      	sub	sp, #28
 800849a:	4606      	mov	r6, r0
 800849c:	2250      	movs	r2, #80	@ 0x50
 800849e:	490d      	ldr	r1, [pc, #52]	@ (80084d4 <rcl_publisher_get_default_options+0x40>)
 80084a0:	4638      	mov	r0, r7
 80084a2:	466c      	mov	r4, sp
 80084a4:	f009 ffd9 	bl	801245a <memcpy>
 80084a8:	4668      	mov	r0, sp
 80084aa:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80084ae:	f000 f931 	bl	8008714 <rcutils_get_default_allocator>
 80084b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084b4:	6824      	ldr	r4, [r4, #0]
 80084b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084b8:	602c      	str	r4, [r5, #0]
 80084ba:	f000 faa7 	bl	8008a0c <rmw_get_default_publisher_options>
 80084be:	4639      	mov	r1, r7
 80084c0:	6678      	str	r0, [r7, #100]	@ 0x64
 80084c2:	2268      	movs	r2, #104	@ 0x68
 80084c4:	4630      	mov	r0, r6
 80084c6:	f009 ffc8 	bl	801245a <memcpy>
 80084ca:	4630      	mov	r0, r6
 80084cc:	b007      	add	sp, #28
 80084ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d0:	2000bfe8 	.word	0x2000bfe8
 80084d4:	08015860 	.word	0x08015860

080084d8 <rcl_publish>:
 80084d8:	b1f8      	cbz	r0, 800851a <rcl_publish+0x42>
 80084da:	6803      	ldr	r3, [r0, #0]
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4604      	mov	r4, r0
 80084e0:	b1b3      	cbz	r3, 8008510 <rcl_publish+0x38>
 80084e2:	4616      	mov	r6, r2
 80084e4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80084e8:	b192      	cbz	r2, 8008510 <rcl_publish+0x38>
 80084ea:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80084ee:	460d      	mov	r5, r1
 80084f0:	f004 fcd2 	bl	800ce98 <rcl_context_is_valid>
 80084f4:	b160      	cbz	r0, 8008510 <rcl_publish+0x38>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80084fc:	b140      	cbz	r0, 8008510 <rcl_publish+0x38>
 80084fe:	b155      	cbz	r5, 8008516 <rcl_publish+0x3e>
 8008500:	4632      	mov	r2, r6
 8008502:	4629      	mov	r1, r5
 8008504:	f000 fb28 	bl	8008b58 <rmw_publish>
 8008508:	3800      	subs	r0, #0
 800850a:	bf18      	it	ne
 800850c:	2001      	movne	r0, #1
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008514:	bd70      	pop	{r4, r5, r6, pc}
 8008516:	200b      	movs	r0, #11
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800851e:	4770      	bx	lr

08008520 <rclc_support_init>:
 8008520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008524:	b086      	sub	sp, #24
 8008526:	2b00      	cmp	r3, #0
 8008528:	d042      	beq.n	80085b0 <rclc_support_init+0x90>
 800852a:	4606      	mov	r6, r0
 800852c:	2800      	cmp	r0, #0
 800852e:	d03f      	beq.n	80085b0 <rclc_support_init+0x90>
 8008530:	461c      	mov	r4, r3
 8008532:	460f      	mov	r7, r1
 8008534:	4690      	mov	r8, r2
 8008536:	f004 ff7d 	bl	800d434 <rcl_get_zero_initialized_init_options>
 800853a:	4603      	mov	r3, r0
 800853c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008546:	a805      	add	r0, sp, #20
 8008548:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800854c:	f004 ff74 	bl	800d438 <rcl_init_options_init>
 8008550:	4605      	mov	r5, r0
 8008552:	bb38      	cbnz	r0, 80085a4 <rclc_support_init+0x84>
 8008554:	f004 ff6e 	bl	800d434 <rcl_get_zero_initialized_init_options>
 8008558:	4631      	mov	r1, r6
 800855a:	6030      	str	r0, [r6, #0]
 800855c:	a805      	add	r0, sp, #20
 800855e:	f004 ffe3 	bl	800d528 <rcl_init_options_copy>
 8008562:	4605      	mov	r5, r0
 8008564:	b9c0      	cbnz	r0, 8008598 <rclc_support_init+0x78>
 8008566:	ad02      	add	r5, sp, #8
 8008568:	4628      	mov	r0, r5
 800856a:	f004 fc8b 	bl	800ce84 <rcl_get_zero_initialized_context>
 800856e:	1d33      	adds	r3, r6, #4
 8008570:	4632      	mov	r2, r6
 8008572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008576:	e883 0003 	stmia.w	r3, {r0, r1}
 800857a:	4641      	mov	r1, r8
 800857c:	4638      	mov	r0, r7
 800857e:	f004 fe57 	bl	800d230 <rcl_init>
 8008582:	4605      	mov	r5, r0
 8008584:	b940      	cbnz	r0, 8008598 <rclc_support_init+0x78>
 8008586:	4622      	mov	r2, r4
 8008588:	f106 0110 	add.w	r1, r6, #16
 800858c:	2003      	movs	r0, #3
 800858e:	60f4      	str	r4, [r6, #12]
 8008590:	f005 fb8a 	bl	800dca8 <rcl_clock_init>
 8008594:	4605      	mov	r5, r0
 8008596:	b108      	cbz	r0, 800859c <rclc_support_init+0x7c>
 8008598:	f000 f8ee 	bl	8008778 <rcutils_reset_error>
 800859c:	a805      	add	r0, sp, #20
 800859e:	f004 ff9f 	bl	800d4e0 <rcl_init_options_fini>
 80085a2:	b108      	cbz	r0, 80085a8 <rclc_support_init+0x88>
 80085a4:	f000 f8e8 	bl	8008778 <rcutils_reset_error>
 80085a8:	4628      	mov	r0, r5
 80085aa:	b006      	add	sp, #24
 80085ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b0:	250b      	movs	r5, #11
 80085b2:	4628      	mov	r0, r5
 80085b4:	b006      	add	sp, #24
 80085b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ba:	bf00      	nop

080085bc <rclc_node_init_default>:
 80085bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085c0:	fab3 f483 	clz	r4, r3
 80085c4:	b08f      	sub	sp, #60	@ 0x3c
 80085c6:	0964      	lsrs	r4, r4, #5
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	bf08      	it	eq
 80085cc:	2401      	moveq	r4, #1
 80085ce:	2900      	cmp	r1, #0
 80085d0:	bf08      	it	eq
 80085d2:	2401      	moveq	r4, #1
 80085d4:	bb2c      	cbnz	r4, 8008622 <rclc_node_init_default+0x66>
 80085d6:	4605      	mov	r5, r0
 80085d8:	b318      	cbz	r0, 8008622 <rclc_node_init_default+0x66>
 80085da:	ac04      	add	r4, sp, #16
 80085dc:	4698      	mov	r8, r3
 80085de:	4617      	mov	r7, r2
 80085e0:	460e      	mov	r6, r1
 80085e2:	4620      	mov	r0, r4
 80085e4:	f10d 091c 	add.w	r9, sp, #28
 80085e8:	f005 f868 	bl	800d6bc <rcl_get_zero_initialized_node>
 80085ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80085f4:	4648      	mov	r0, r9
 80085f6:	f005 fa03 	bl	800da00 <rcl_node_get_default_options>
 80085fa:	4620      	mov	r0, r4
 80085fc:	f005 f85e 	bl	800d6bc <rcl_get_zero_initialized_node>
 8008600:	f8cd 9000 	str.w	r9, [sp]
 8008604:	f108 0304 	add.w	r3, r8, #4
 8008608:	463a      	mov	r2, r7
 800860a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800860e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008612:	4631      	mov	r1, r6
 8008614:	4628      	mov	r0, r5
 8008616:	f005 f85b 	bl	800d6d0 <rcl_node_init>
 800861a:	b930      	cbnz	r0, 800862a <rclc_node_init_default+0x6e>
 800861c:	b00f      	add	sp, #60	@ 0x3c
 800861e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008622:	200b      	movs	r0, #11
 8008624:	b00f      	add	sp, #60	@ 0x3c
 8008626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800862a:	9003      	str	r0, [sp, #12]
 800862c:	f000 f8a4 	bl	8008778 <rcutils_reset_error>
 8008630:	f000 f8a2 	bl	8008778 <rcutils_reset_error>
 8008634:	9803      	ldr	r0, [sp, #12]
 8008636:	b00f      	add	sp, #60	@ 0x3c
 8008638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800863c <rclc_publisher_init_default>:
 800863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008640:	fab3 f483 	clz	r4, r3
 8008644:	b09e      	sub	sp, #120	@ 0x78
 8008646:	0964      	lsrs	r4, r4, #5
 8008648:	2a00      	cmp	r2, #0
 800864a:	bf08      	it	eq
 800864c:	2401      	moveq	r4, #1
 800864e:	2900      	cmp	r1, #0
 8008650:	bf08      	it	eq
 8008652:	2401      	moveq	r4, #1
 8008654:	bb14      	cbnz	r4, 800869c <rclc_publisher_init_default+0x60>
 8008656:	4605      	mov	r5, r0
 8008658:	b300      	cbz	r0, 800869c <rclc_publisher_init_default+0x60>
 800865a:	ac04      	add	r4, sp, #16
 800865c:	4698      	mov	r8, r3
 800865e:	4617      	mov	r7, r2
 8008660:	460e      	mov	r6, r1
 8008662:	f7ff fe13 	bl	800828c <rcl_get_zero_initialized_publisher>
 8008666:	6028      	str	r0, [r5, #0]
 8008668:	4620      	mov	r0, r4
 800866a:	f7ff ff13 	bl	8008494 <rcl_publisher_get_default_options>
 800866e:	2250      	movs	r2, #80	@ 0x50
 8008670:	490c      	ldr	r1, [pc, #48]	@ (80086a4 <rclc_publisher_init_default+0x68>)
 8008672:	4620      	mov	r0, r4
 8008674:	f009 fef1 	bl	801245a <memcpy>
 8008678:	4643      	mov	r3, r8
 800867a:	463a      	mov	r2, r7
 800867c:	4631      	mov	r1, r6
 800867e:	4628      	mov	r0, r5
 8008680:	9400      	str	r4, [sp, #0]
 8008682:	f7ff fe09 	bl	8008298 <rcl_publisher_init>
 8008686:	b910      	cbnz	r0, 800868e <rclc_publisher_init_default+0x52>
 8008688:	b01e      	add	sp, #120	@ 0x78
 800868a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868e:	9003      	str	r0, [sp, #12]
 8008690:	f000 f872 	bl	8008778 <rcutils_reset_error>
 8008694:	9803      	ldr	r0, [sp, #12]
 8008696:	b01e      	add	sp, #120	@ 0x78
 8008698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869c:	200b      	movs	r0, #11
 800869e:	b01e      	add	sp, #120	@ 0x78
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	080158b0 	.word	0x080158b0

080086a8 <__default_zero_allocate>:
 80086a8:	f008 bbe8 	b.w	8010e7c <calloc>

080086ac <__default_reallocate>:
 80086ac:	f008 bd74 	b.w	8011198 <realloc>

080086b0 <__default_deallocate>:
 80086b0:	f008 bc50 	b.w	8010f54 <free>

080086b4 <__default_allocate>:
 80086b4:	f008 bc46 	b.w	8010f44 <malloc>

080086b8 <rcutils_get_zero_initialized_allocator>:
 80086b8:	b470      	push	{r4, r5, r6}
 80086ba:	4d05      	ldr	r5, [pc, #20]	@ (80086d0 <rcutils_get_zero_initialized_allocator+0x18>)
 80086bc:	4606      	mov	r6, r0
 80086be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086c0:	4634      	mov	r4, r6
 80086c2:	682d      	ldr	r5, [r5, #0]
 80086c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086c6:	4630      	mov	r0, r6
 80086c8:	6025      	str	r5, [r4, #0]
 80086ca:	bc70      	pop	{r4, r5, r6}
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	08015900 	.word	0x08015900

080086d4 <rcutils_set_default_allocator>:
 80086d4:	b1a0      	cbz	r0, 8008700 <rcutils_set_default_allocator+0x2c>
 80086d6:	6802      	ldr	r2, [r0, #0]
 80086d8:	b19a      	cbz	r2, 8008702 <rcutils_set_default_allocator+0x2e>
 80086da:	6841      	ldr	r1, [r0, #4]
 80086dc:	b199      	cbz	r1, 8008706 <rcutils_set_default_allocator+0x32>
 80086de:	b470      	push	{r4, r5, r6}
 80086e0:	68c4      	ldr	r4, [r0, #12]
 80086e2:	b15c      	cbz	r4, 80086fc <rcutils_set_default_allocator+0x28>
 80086e4:	6885      	ldr	r5, [r0, #8]
 80086e6:	b185      	cbz	r5, 800870a <rcutils_set_default_allocator+0x36>
 80086e8:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <rcutils_set_default_allocator+0x3c>)
 80086ea:	2600      	movs	r6, #0
 80086ec:	2001      	movs	r0, #1
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e9c3 1501 	strd	r1, r5, [r3, #4]
 80086f4:	e9c3 4603 	strd	r4, r6, [r3, #12]
 80086f8:	bc70      	pop	{r4, r5, r6}
 80086fa:	4770      	bx	lr
 80086fc:	4620      	mov	r0, r4
 80086fe:	e7fb      	b.n	80086f8 <rcutils_set_default_allocator+0x24>
 8008700:	4770      	bx	lr
 8008702:	4610      	mov	r0, r2
 8008704:	4770      	bx	lr
 8008706:	4608      	mov	r0, r1
 8008708:	4770      	bx	lr
 800870a:	4628      	mov	r0, r5
 800870c:	e7f4      	b.n	80086f8 <rcutils_set_default_allocator+0x24>
 800870e:	bf00      	nop
 8008710:	20000014 	.word	0x20000014

08008714 <rcutils_get_default_allocator>:
 8008714:	b470      	push	{r4, r5, r6}
 8008716:	4d05      	ldr	r5, [pc, #20]	@ (800872c <rcutils_get_default_allocator+0x18>)
 8008718:	4606      	mov	r6, r0
 800871a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800871c:	4634      	mov	r4, r6
 800871e:	682d      	ldr	r5, [r5, #0]
 8008720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008722:	4630      	mov	r0, r6
 8008724:	6025      	str	r5, [r4, #0]
 8008726:	bc70      	pop	{r4, r5, r6}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20000014 	.word	0x20000014

08008730 <rcutils_allocator_is_valid>:
 8008730:	b158      	cbz	r0, 800874a <rcutils_allocator_is_valid+0x1a>
 8008732:	6803      	ldr	r3, [r0, #0]
 8008734:	b143      	cbz	r3, 8008748 <rcutils_allocator_is_valid+0x18>
 8008736:	6843      	ldr	r3, [r0, #4]
 8008738:	b133      	cbz	r3, 8008748 <rcutils_allocator_is_valid+0x18>
 800873a:	68c3      	ldr	r3, [r0, #12]
 800873c:	b123      	cbz	r3, 8008748 <rcutils_allocator_is_valid+0x18>
 800873e:	6880      	ldr	r0, [r0, #8]
 8008740:	3800      	subs	r0, #0
 8008742:	bf18      	it	ne
 8008744:	2001      	movne	r0, #1
 8008746:	4770      	bx	lr
 8008748:	4618      	mov	r0, r3
 800874a:	4770      	bx	lr

0800874c <rcutils_get_error_string>:
 800874c:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <rcutils_get_error_string+0x1c>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	b13b      	cbz	r3, 8008762 <rcutils_get_error_string+0x16>
 8008752:	4b06      	ldr	r3, [pc, #24]	@ (800876c <rcutils_get_error_string+0x20>)
 8008754:	781a      	ldrb	r2, [r3, #0]
 8008756:	b90a      	cbnz	r2, 800875c <rcutils_get_error_string+0x10>
 8008758:	2201      	movs	r2, #1
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	4b04      	ldr	r3, [pc, #16]	@ (8008770 <rcutils_get_error_string+0x24>)
 800875e:	7818      	ldrb	r0, [r3, #0]
 8008760:	4770      	bx	lr
 8008762:	4b04      	ldr	r3, [pc, #16]	@ (8008774 <rcutils_get_error_string+0x28>)
 8008764:	7818      	ldrb	r0, [r3, #0]
 8008766:	4770      	bx	lr
 8008768:	2000c050 	.word	0x2000c050
 800876c:	2000c051 	.word	0x2000c051
 8008770:	2000c2b8 	.word	0x2000c2b8
 8008774:	08015914 	.word	0x08015914

08008778 <rcutils_reset_error>:
 8008778:	b430      	push	{r4, r5}
 800877a:	2300      	movs	r3, #0
 800877c:	4c06      	ldr	r4, [pc, #24]	@ (8008798 <rcutils_reset_error+0x20>)
 800877e:	4a07      	ldr	r2, [pc, #28]	@ (800879c <rcutils_reset_error+0x24>)
 8008780:	2000      	movs	r0, #0
 8008782:	4d07      	ldr	r5, [pc, #28]	@ (80087a0 <rcutils_reset_error+0x28>)
 8008784:	2100      	movs	r1, #0
 8008786:	7023      	strb	r3, [r4, #0]
 8008788:	4c06      	ldr	r4, [pc, #24]	@ (80087a4 <rcutils_reset_error+0x2c>)
 800878a:	8013      	strh	r3, [r2, #0]
 800878c:	702b      	strb	r3, [r5, #0]
 800878e:	7023      	strb	r3, [r4, #0]
 8008790:	e9c2 0102 	strd	r0, r1, [r2, #8]
 8008794:	bc30      	pop	{r4, r5}
 8008796:	4770      	bx	lr
 8008798:	2000c051 	.word	0x2000c051
 800879c:	2000c2c0 	.word	0x2000c2c0
 80087a0:	2000c2b8 	.word	0x2000c2b8
 80087a4:	2000c050 	.word	0x2000c050

080087a8 <rcutils_get_zero_initialized_string_map>:
 80087a8:	4b01      	ldr	r3, [pc, #4]	@ (80087b0 <rcutils_get_zero_initialized_string_map+0x8>)
 80087aa:	2000      	movs	r0, #0
 80087ac:	6018      	str	r0, [r3, #0]
 80087ae:	4770      	bx	lr
 80087b0:	2000c054 	.word	0x2000c054

080087b4 <rcutils_string_map_reserve>:
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d061      	beq.n	800887c <rcutils_string_map_reserve+0xc8>
 80087b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087bc:	6805      	ldr	r5, [r0, #0]
 80087be:	b083      	sub	sp, #12
 80087c0:	4606      	mov	r6, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	b12d      	cbz	r5, 80087d2 <rcutils_string_map_reserve+0x1e>
 80087c6:	68eb      	ldr	r3, [r5, #12]
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d906      	bls.n	80087da <rcutils_string_map_reserve+0x26>
 80087cc:	461c      	mov	r4, r3
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	d1f9      	bne.n	80087c6 <rcutils_string_map_reserve+0x12>
 80087d2:	201f      	movs	r0, #31
 80087d4:	b003      	add	sp, #12
 80087d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087da:	68ab      	ldr	r3, [r5, #8]
 80087dc:	42a3      	cmp	r3, r4
 80087de:	d049      	beq.n	8008874 <rcutils_string_map_reserve+0xc0>
 80087e0:	6a2f      	ldr	r7, [r5, #32]
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	d035      	beq.n	8008852 <rcutils_string_map_reserve+0x9e>
 80087e6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80087ea:	d245      	bcs.n	8008878 <rcutils_string_map_reserve+0xc4>
 80087ec:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80087f0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80087f4:	6828      	ldr	r0, [r5, #0]
 80087f6:	463a      	mov	r2, r7
 80087f8:	4641      	mov	r1, r8
 80087fa:	47c8      	blx	r9
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d03b      	beq.n	8008878 <rcutils_string_map_reserve+0xc4>
 8008800:	6833      	ldr	r3, [r6, #0]
 8008802:	463a      	mov	r2, r7
 8008804:	4641      	mov	r1, r8
 8008806:	6018      	str	r0, [r3, #0]
 8008808:	6858      	ldr	r0, [r3, #4]
 800880a:	47c8      	blx	r9
 800880c:	2800      	cmp	r0, #0
 800880e:	d033      	beq.n	8008878 <rcutils_string_map_reserve+0xc4>
 8008810:	6835      	ldr	r5, [r6, #0]
 8008812:	68ab      	ldr	r3, [r5, #8]
 8008814:	6068      	str	r0, [r5, #4]
 8008816:	42a3      	cmp	r3, r4
 8008818:	d227      	bcs.n	800886a <rcutils_string_map_reserve+0xb6>
 800881a:	682a      	ldr	r2, [r5, #0]
 800881c:	eb00 0108 	add.w	r1, r0, r8
 8008820:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008824:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8008828:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800882c:	428f      	cmp	r7, r1
 800882e:	d203      	bcs.n	8008838 <rcutils_string_map_reserve+0x84>
 8008830:	eb02 0108 	add.w	r1, r2, r8
 8008834:	428e      	cmp	r6, r1
 8008836:	d323      	bcc.n	8008880 <rcutils_string_map_reserve+0xcc>
 8008838:	1ae3      	subs	r3, r4, r3
 800883a:	4638      	mov	r0, r7
 800883c:	2100      	movs	r1, #0
 800883e:	009a      	lsls	r2, r3, #2
 8008840:	9201      	str	r2, [sp, #4]
 8008842:	f009 fd3d 	bl	80122c0 <memset>
 8008846:	9a01      	ldr	r2, [sp, #4]
 8008848:	4630      	mov	r0, r6
 800884a:	2100      	movs	r1, #0
 800884c:	f009 fd38 	bl	80122c0 <memset>
 8008850:	e00b      	b.n	800886a <rcutils_string_map_reserve+0xb6>
 8008852:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8008856:	4639      	mov	r1, r7
 8008858:	6828      	ldr	r0, [r5, #0]
 800885a:	47c0      	blx	r8
 800885c:	6833      	ldr	r3, [r6, #0]
 800885e:	4639      	mov	r1, r7
 8008860:	6858      	ldr	r0, [r3, #4]
 8008862:	601c      	str	r4, [r3, #0]
 8008864:	47c0      	blx	r8
 8008866:	6835      	ldr	r5, [r6, #0]
 8008868:	606c      	str	r4, [r5, #4]
 800886a:	2000      	movs	r0, #0
 800886c:	60ac      	str	r4, [r5, #8]
 800886e:	b003      	add	sp, #12
 8008870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008874:	2000      	movs	r0, #0
 8008876:	e7ad      	b.n	80087d4 <rcutils_string_map_reserve+0x20>
 8008878:	200a      	movs	r0, #10
 800887a:	e7ab      	b.n	80087d4 <rcutils_string_map_reserve+0x20>
 800887c:	200b      	movs	r0, #11
 800887e:	4770      	bx	lr
 8008880:	1f13      	subs	r3, r2, #4
 8008882:	f1ac 0c04 	sub.w	ip, ip, #4
 8008886:	4498      	add	r8, r3
 8008888:	4460      	add	r0, ip
 800888a:	4462      	add	r2, ip
 800888c:	2300      	movs	r3, #0
 800888e:	f842 3f04 	str.w	r3, [r2, #4]!
 8008892:	4542      	cmp	r2, r8
 8008894:	f840 3f04 	str.w	r3, [r0, #4]!
 8008898:	d1f9      	bne.n	800888e <rcutils_string_map_reserve+0xda>
 800889a:	e7e6      	b.n	800886a <rcutils_string_map_reserve+0xb6>

0800889c <rcutils_string_map_init>:
 800889c:	b082      	sub	sp, #8
 800889e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a0:	ac06      	add	r4, sp, #24
 80088a2:	e884 000c 	stmia.w	r4, {r2, r3}
 80088a6:	b378      	cbz	r0, 8008908 <rcutils_string_map_init+0x6c>
 80088a8:	6806      	ldr	r6, [r0, #0]
 80088aa:	4604      	mov	r4, r0
 80088ac:	b12e      	cbz	r6, 80088ba <rcutils_string_map_init+0x1e>
 80088ae:	251e      	movs	r5, #30
 80088b0:	4628      	mov	r0, r5
 80088b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088b6:	b002      	add	sp, #8
 80088b8:	4770      	bx	lr
 80088ba:	a806      	add	r0, sp, #24
 80088bc:	460d      	mov	r5, r1
 80088be:	f7ff ff37 	bl	8008730 <rcutils_allocator_is_valid>
 80088c2:	b308      	cbz	r0, 8008908 <rcutils_string_map_init+0x6c>
 80088c4:	9b06      	ldr	r3, [sp, #24]
 80088c6:	2024      	movs	r0, #36	@ 0x24
 80088c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088ca:	4798      	blx	r3
 80088cc:	6020      	str	r0, [r4, #0]
 80088ce:	b308      	cbz	r0, 8008914 <rcutils_string_map_init+0x78>
 80088d0:	f10d 0c18 	add.w	ip, sp, #24
 80088d4:	f100 0710 	add.w	r7, r0, #16
 80088d8:	e9c0 6600 	strd	r6, r6, [r0]
 80088dc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80088e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80088e4:	f8dc c000 	ldr.w	ip, [ip]
 80088e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80088ea:	4629      	mov	r1, r5
 80088ec:	4620      	mov	r0, r4
 80088ee:	f8c7 c000 	str.w	ip, [r7]
 80088f2:	f7ff ff5f 	bl	80087b4 <rcutils_string_map_reserve>
 80088f6:	4605      	mov	r5, r0
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d0d9      	beq.n	80088b0 <rcutils_string_map_init+0x14>
 80088fc:	9b07      	ldr	r3, [sp, #28]
 80088fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	4798      	blx	r3
 8008904:	6026      	str	r6, [r4, #0]
 8008906:	e7d3      	b.n	80088b0 <rcutils_string_map_init+0x14>
 8008908:	250b      	movs	r5, #11
 800890a:	4628      	mov	r0, r5
 800890c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008910:	b002      	add	sp, #8
 8008912:	4770      	bx	lr
 8008914:	250a      	movs	r5, #10
 8008916:	e7cb      	b.n	80088b0 <rcutils_string_map_init+0x14>

08008918 <rcutils_string_map_fini>:
 8008918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	2800      	cmp	r0, #0
 8008920:	d039      	beq.n	8008996 <rcutils_string_map_fini+0x7e>
 8008922:	6804      	ldr	r4, [r0, #0]
 8008924:	4606      	mov	r6, r0
 8008926:	2c00      	cmp	r4, #0
 8008928:	d031      	beq.n	800898e <rcutils_string_map_fini+0x76>
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	b323      	cbz	r3, 8008978 <rcutils_string_map_fini+0x60>
 800892e:	2500      	movs	r5, #0
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	46a8      	mov	r8, r5
 8008934:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8008938:	b1d8      	cbz	r0, 8008972 <rcutils_string_map_fini+0x5a>
 800893a:	6a21      	ldr	r1, [r4, #32]
 800893c:	6967      	ldr	r7, [r4, #20]
 800893e:	9101      	str	r1, [sp, #4]
 8008940:	47b8      	blx	r7
 8008942:	9901      	ldr	r1, [sp, #4]
 8008944:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008948:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800894c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8008950:	47b8      	blx	r7
 8008952:	68e3      	ldr	r3, [r4, #12]
 8008954:	6862      	ldr	r2, [r4, #4]
 8008956:	3b01      	subs	r3, #1
 8008958:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800895c:	3501      	adds	r5, #1
 800895e:	60e3      	str	r3, [r4, #12]
 8008960:	6834      	ldr	r4, [r6, #0]
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	429d      	cmp	r5, r3
 8008966:	d207      	bcs.n	8008978 <rcutils_string_map_fini+0x60>
 8008968:	6822      	ldr	r2, [r4, #0]
 800896a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800896e:	2800      	cmp	r0, #0
 8008970:	d1e3      	bne.n	800893a <rcutils_string_map_fini+0x22>
 8008972:	3501      	adds	r5, #1
 8008974:	429d      	cmp	r5, r3
 8008976:	d3dd      	bcc.n	8008934 <rcutils_string_map_fini+0x1c>
 8008978:	2100      	movs	r1, #0
 800897a:	4630      	mov	r0, r6
 800897c:	f7ff ff1a 	bl	80087b4 <rcutils_string_map_reserve>
 8008980:	4604      	mov	r4, r0
 8008982:	b920      	cbnz	r0, 800898e <rcutils_string_map_fini+0x76>
 8008984:	6830      	ldr	r0, [r6, #0]
 8008986:	6943      	ldr	r3, [r0, #20]
 8008988:	6a01      	ldr	r1, [r0, #32]
 800898a:	4798      	blx	r3
 800898c:	6034      	str	r4, [r6, #0]
 800898e:	4620      	mov	r0, r4
 8008990:	b002      	add	sp, #8
 8008992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008996:	240b      	movs	r4, #11
 8008998:	4620      	mov	r0, r4
 800899a:	b002      	add	sp, #8
 800899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089a0 <rcutils_string_map_getn>:
 80089a0:	b398      	cbz	r0, 8008a0a <rcutils_string_map_getn+0x6a>
 80089a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a6:	f8d0 9000 	ldr.w	r9, [r0]
 80089aa:	b082      	sub	sp, #8
 80089ac:	f1b9 0f00 	cmp.w	r9, #0
 80089b0:	d020      	beq.n	80089f4 <rcutils_string_map_getn+0x54>
 80089b2:	fab1 f581 	clz	r5, r1
 80089b6:	460e      	mov	r6, r1
 80089b8:	096d      	lsrs	r5, r5, #5
 80089ba:	b1d9      	cbz	r1, 80089f4 <rcutils_string_map_getn+0x54>
 80089bc:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80089c0:	f8d9 7000 	ldr.w	r7, [r9]
 80089c4:	b1b4      	cbz	r4, 80089f4 <rcutils_string_map_getn+0x54>
 80089c6:	4690      	mov	r8, r2
 80089c8:	3f04      	subs	r7, #4
 80089ca:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80089ce:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 80089d2:	3501      	adds	r5, #1
 80089d4:	4608      	mov	r0, r1
 80089d6:	9101      	str	r1, [sp, #4]
 80089d8:	b151      	cbz	r1, 80089f0 <rcutils_string_map_getn+0x50>
 80089da:	f7f7 fc91 	bl	8000300 <strlen>
 80089de:	4602      	mov	r2, r0
 80089e0:	9901      	ldr	r1, [sp, #4]
 80089e2:	4630      	mov	r0, r6
 80089e4:	4542      	cmp	r2, r8
 80089e6:	bf38      	it	cc
 80089e8:	4642      	movcc	r2, r8
 80089ea:	f009 fc7e 	bl	80122ea <strncmp>
 80089ee:	b128      	cbz	r0, 80089fc <rcutils_string_map_getn+0x5c>
 80089f0:	42ac      	cmp	r4, r5
 80089f2:	d1ea      	bne.n	80089ca <rcutils_string_map_getn+0x2a>
 80089f4:	2000      	movs	r0, #0
 80089f6:	b002      	add	sp, #8
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008a00:	f853 000a 	ldr.w	r0, [r3, sl]
 8008a04:	b002      	add	sp, #8
 8008a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0a:	4770      	bx	lr

08008a0c <rmw_get_default_publisher_options>:
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	4770      	bx	lr

08008a10 <rmw_validate_full_topic_name>:
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d064      	beq.n	8008ade <rmw_validate_full_topic_name+0xce>
 8008a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	460d      	mov	r5, r1
 8008a1a:	2900      	cmp	r1, #0
 8008a1c:	d061      	beq.n	8008ae2 <rmw_validate_full_topic_name+0xd2>
 8008a1e:	4616      	mov	r6, r2
 8008a20:	4604      	mov	r4, r0
 8008a22:	f7f7 fc6d 	bl	8000300 <strlen>
 8008a26:	b148      	cbz	r0, 8008a3c <rmw_validate_full_topic_name+0x2c>
 8008a28:	7823      	ldrb	r3, [r4, #0]
 8008a2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a2c:	d00d      	beq.n	8008a4a <rmw_validate_full_topic_name+0x3a>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	b13e      	cbz	r6, 8008a44 <rmw_validate_full_topic_name+0x34>
 8008a34:	2000      	movs	r0, #0
 8008a36:	6030      	str	r0, [r6, #0]
 8008a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	d1f7      	bne.n	8008a34 <rmw_validate_full_topic_name+0x24>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a4a:	1e47      	subs	r7, r0, #1
 8008a4c:	5de3      	ldrb	r3, [r4, r7]
 8008a4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a50:	d049      	beq.n	8008ae6 <rmw_validate_full_topic_name+0xd6>
 8008a52:	1e62      	subs	r2, r4, #1
 8008a54:	f1c4 0e01 	rsb	lr, r4, #1
 8008a58:	eb02 0900 	add.w	r9, r2, r0
 8008a5c:	eb0e 0802 	add.w	r8, lr, r2
 8008a60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008a64:	f023 0120 	bic.w	r1, r3, #32
 8008a68:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8008a6c:	3941      	subs	r1, #65	@ 0x41
 8008a6e:	2919      	cmp	r1, #25
 8008a70:	d910      	bls.n	8008a94 <rmw_validate_full_topic_name+0x84>
 8008a72:	f1bc 0f0a 	cmp.w	ip, #10
 8008a76:	d90d      	bls.n	8008a94 <rmw_validate_full_topic_name+0x84>
 8008a78:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8008a7c:	fab3 f383 	clz	r3, r3
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	b93b      	cbnz	r3, 8008a94 <rmw_validate_full_topic_name+0x84>
 8008a84:	2204      	movs	r2, #4
 8008a86:	602a      	str	r2, [r5, #0]
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	d0db      	beq.n	8008a44 <rmw_validate_full_topic_name+0x34>
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f8c6 8000 	str.w	r8, [r6]
 8008a92:	e7d1      	b.n	8008a38 <rmw_validate_full_topic_name+0x28>
 8008a94:	454a      	cmp	r2, r9
 8008a96:	d1e1      	bne.n	8008a5c <rmw_validate_full_topic_name+0x4c>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f107 0801 	add.w	r8, r7, #1
 8008a9e:	f8df e07c 	ldr.w	lr, [pc, #124]	@ 8008b1c <rmw_validate_full_topic_name+0x10c>
 8008aa2:	e004      	b.n	8008aae <rmw_validate_full_topic_name+0x9e>
 8008aa4:	4288      	cmp	r0, r1
 8008aa6:	f104 0401 	add.w	r4, r4, #1
 8008aaa:	461a      	mov	r2, r3
 8008aac:	d924      	bls.n	8008af8 <rmw_validate_full_topic_name+0xe8>
 8008aae:	4297      	cmp	r7, r2
 8008ab0:	f102 0301 	add.w	r3, r2, #1
 8008ab4:	d01d      	beq.n	8008af2 <rmw_validate_full_topic_name+0xe2>
 8008ab6:	f894 c000 	ldrb.w	ip, [r4]
 8008aba:	4619      	mov	r1, r3
 8008abc:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8008ac0:	d1f0      	bne.n	8008aa4 <rmw_validate_full_topic_name+0x94>
 8008ac2:	7862      	ldrb	r2, [r4, #1]
 8008ac4:	2a2f      	cmp	r2, #47	@ 0x2f
 8008ac6:	d024      	beq.n	8008b12 <rmw_validate_full_topic_name+0x102>
 8008ac8:	f812 200e 	ldrb.w	r2, [r2, lr]
 8008acc:	0752      	lsls	r2, r2, #29
 8008ace:	d5e9      	bpl.n	8008aa4 <rmw_validate_full_topic_name+0x94>
 8008ad0:	2206      	movs	r2, #6
 8008ad2:	602a      	str	r2, [r5, #0]
 8008ad4:	2e00      	cmp	r6, #0
 8008ad6:	d0b5      	beq.n	8008a44 <rmw_validate_full_topic_name+0x34>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	e7ac      	b.n	8008a38 <rmw_validate_full_topic_name+0x28>
 8008ade:	200b      	movs	r0, #11
 8008ae0:	4770      	bx	lr
 8008ae2:	200b      	movs	r0, #11
 8008ae4:	e7a8      	b.n	8008a38 <rmw_validate_full_topic_name+0x28>
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	d0aa      	beq.n	8008a44 <rmw_validate_full_topic_name+0x34>
 8008aee:	6037      	str	r7, [r6, #0]
 8008af0:	e7a8      	b.n	8008a44 <rmw_validate_full_topic_name+0x34>
 8008af2:	4641      	mov	r1, r8
 8008af4:	1c7b      	adds	r3, r7, #1
 8008af6:	e7d5      	b.n	8008aa4 <rmw_validate_full_topic_name+0x94>
 8008af8:	28f7      	cmp	r0, #247	@ 0xf7
 8008afa:	d802      	bhi.n	8008b02 <rmw_validate_full_topic_name+0xf2>
 8008afc:	2000      	movs	r0, #0
 8008afe:	6028      	str	r0, [r5, #0]
 8008b00:	e79a      	b.n	8008a38 <rmw_validate_full_topic_name+0x28>
 8008b02:	2307      	movs	r3, #7
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	d09c      	beq.n	8008a44 <rmw_validate_full_topic_name+0x34>
 8008b0a:	23f6      	movs	r3, #246	@ 0xf6
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	6033      	str	r3, [r6, #0]
 8008b10:	e792      	b.n	8008a38 <rmw_validate_full_topic_name+0x28>
 8008b12:	2205      	movs	r2, #5
 8008b14:	602a      	str	r2, [r5, #0]
 8008b16:	2e00      	cmp	r6, #0
 8008b18:	d1de      	bne.n	8008ad8 <rmw_validate_full_topic_name+0xc8>
 8008b1a:	e793      	b.n	8008a44 <rmw_validate_full_topic_name+0x34>
 8008b1c:	080160ac 	.word	0x080160ac

08008b20 <rmw_uros_set_custom_transport>:
 8008b20:	b4f0      	push	{r4, r5, r6, r7}
 8008b22:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008b26:	b16a      	cbz	r2, 8008b44 <rmw_uros_set_custom_transport+0x24>
 8008b28:	b163      	cbz	r3, 8008b44 <rmw_uros_set_custom_transport+0x24>
 8008b2a:	b15e      	cbz	r6, 8008b44 <rmw_uros_set_custom_transport+0x24>
 8008b2c:	b157      	cbz	r7, 8008b44 <rmw_uros_set_custom_transport+0x24>
 8008b2e:	4c07      	ldr	r4, [pc, #28]	@ (8008b4c <rmw_uros_set_custom_transport+0x2c>)
 8008b30:	4605      	mov	r5, r0
 8008b32:	2000      	movs	r0, #0
 8008b34:	7025      	strb	r5, [r4, #0]
 8008b36:	6167      	str	r7, [r4, #20]
 8008b38:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008b3c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8008b40:	bcf0      	pop	{r4, r5, r6, r7}
 8008b42:	4770      	bx	lr
 8008b44:	200b      	movs	r0, #11
 8008b46:	bcf0      	pop	{r4, r5, r6, r7}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	2000c2d0 	.word	0x2000c2d0

08008b50 <flush_session>:
 8008b50:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8008b52:	f002 bb05 	b.w	800b160 <uxr_run_session_until_confirm_delivery>
 8008b56:	bf00      	nop

08008b58 <rmw_publish>:
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d053      	beq.n	8008c04 <rmw_publish+0xac>
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	460d      	mov	r5, r1
 8008b60:	b08e      	sub	sp, #56	@ 0x38
 8008b62:	2900      	cmp	r1, #0
 8008b64:	d04b      	beq.n	8008bfe <rmw_publish+0xa6>
 8008b66:	4604      	mov	r4, r0
 8008b68:	6800      	ldr	r0, [r0, #0]
 8008b6a:	f000 fc19 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d045      	beq.n	8008bfe <rmw_publish+0xa6>
 8008b72:	6866      	ldr	r6, [r4, #4]
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	d042      	beq.n	8008bfe <rmw_publish+0xa6>
 8008b78:	69b4      	ldr	r4, [r6, #24]
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	4798      	blx	r3
 8008b80:	69f3      	ldr	r3, [r6, #28]
 8008b82:	9005      	str	r0, [sp, #20]
 8008b84:	b113      	cbz	r3, 8008b8c <rmw_publish+0x34>
 8008b86:	a805      	add	r0, sp, #20
 8008b88:	4798      	blx	r3
 8008b8a:	9805      	ldr	r0, [sp, #20]
 8008b8c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	ab06      	add	r3, sp, #24
 8008b94:	9000      	str	r0, [sp, #0]
 8008b96:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 8008b9a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8008b9c:	6972      	ldr	r2, [r6, #20]
 8008b9e:	f003 f8f3 	bl	800bd88 <uxr_prepare_output_stream>
 8008ba2:	b1d8      	cbz	r0, 8008bdc <rmw_publish+0x84>
 8008ba4:	68a3      	ldr	r3, [r4, #8]
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	a906      	add	r1, sp, #24
 8008baa:	4798      	blx	r3
 8008bac:	6a33      	ldr	r3, [r6, #32]
 8008bae:	4604      	mov	r4, r0
 8008bb0:	b10b      	cbz	r3, 8008bb6 <rmw_publish+0x5e>
 8008bb2:	a806      	add	r0, sp, #24
 8008bb4:	4798      	blx	r3
 8008bb6:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8008bc0:	d022      	beq.n	8008c08 <rmw_publish+0xb0>
 8008bc2:	6918      	ldr	r0, [r3, #16]
 8008bc4:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8008bc6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008bca:	f002 fac9 	bl	800b160 <uxr_run_session_until_confirm_delivery>
 8008bce:	4020      	ands	r0, r4
 8008bd0:	b2c4      	uxtb	r4, r0
 8008bd2:	f084 0001 	eor.w	r0, r4, #1
 8008bd6:	b2c0      	uxtb	r0, r0
 8008bd8:	b00e      	add	sp, #56	@ 0x38
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 8008be0:	ab06      	add	r3, sp, #24
 8008be2:	490c      	ldr	r1, [pc, #48]	@ (8008c14 <rmw_publish+0xbc>)
 8008be4:	6910      	ldr	r0, [r2, #16]
 8008be6:	9a05      	ldr	r2, [sp, #20]
 8008be8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008bec:	9200      	str	r2, [sp, #0]
 8008bee:	e9cd 1601 	strd	r1, r6, [sp, #4]
 8008bf2:	6972      	ldr	r2, [r6, #20]
 8008bf4:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8008bf6:	f003 f8f7 	bl	800bde8 <uxr_prepare_output_stream_fragmented>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d1d2      	bne.n	8008ba4 <rmw_publish+0x4c>
 8008bfe:	2001      	movs	r0, #1
 8008c00:	b00e      	add	sp, #56	@ 0x38
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	2001      	movs	r0, #1
 8008c06:	4770      	bx	lr
 8008c08:	6918      	ldr	r0, [r3, #16]
 8008c0a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008c0e:	f001 ff0d 	bl	800aa2c <uxr_flash_output_streams>
 8008c12:	e7de      	b.n	8008bd2 <rmw_publish+0x7a>
 8008c14:	08008b51 	.word	0x08008b51

08008c18 <rmw_create_publisher>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	b087      	sub	sp, #28
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f000 80d2 	beq.w	8008dc8 <rmw_create_publisher+0x1b0>
 8008c24:	460e      	mov	r6, r1
 8008c26:	2900      	cmp	r1, #0
 8008c28:	f000 80ce 	beq.w	8008dc8 <rmw_create_publisher+0x1b0>
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	6800      	ldr	r0, [r0, #0]
 8008c30:	4615      	mov	r5, r2
 8008c32:	4698      	mov	r8, r3
 8008c34:	f000 fbb4 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 8008c38:	f080 0001 	eor.w	r0, r0, #1
 8008c3c:	f010 0fff 	tst.w	r0, #255	@ 0xff
 8008c40:	f040 80c2 	bne.w	8008dc8 <rmw_create_publisher+0x1b0>
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	f000 80bf 	beq.w	8008dc8 <rmw_create_publisher+0x1b0>
 8008c4a:	782b      	ldrb	r3, [r5, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80bb 	beq.w	8008dc8 <rmw_create_publisher+0x1b0>
 8008c52:	f1b8 0f00 	cmp.w	r8, #0
 8008c56:	f000 80b7 	beq.w	8008dc8 <rmw_create_publisher+0x1b0>
 8008c5a:	485e      	ldr	r0, [pc, #376]	@ (8008dd4 <rmw_create_publisher+0x1bc>)
 8008c5c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008c60:	f005 fcde 	bl	800e620 <get_memory>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f000 80af 	beq.w	8008dc8 <rmw_create_publisher+0x1b0>
 8008c6a:	68c4      	ldr	r4, [r0, #12]
 8008c6c:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8008c70:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8008c74:	f005 fcf8 	bl	800e668 <rmw_get_implementation_identifier>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8008c84:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8008c88:	f7f7 fb3a 	bl	8000300 <strlen>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	283c      	cmp	r0, #60	@ 0x3c
 8008c90:	f200 808e 	bhi.w	8008db0 <rmw_create_publisher+0x198>
 8008c94:	462b      	mov	r3, r5
 8008c96:	4a50      	ldr	r2, [pc, #320]	@ (8008dd8 <rmw_create_publisher+0x1c0>)
 8008c98:	213c      	movs	r1, #60	@ 0x3c
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	f009 fa40 	bl	8012120 <sniprintf>
 8008ca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	2250      	movs	r2, #80	@ 0x50
 8008ca8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8008caa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008cae:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8008cb2:	f009 fbd2 	bl	801245a <memcpy>
 8008cb6:	f898 3008 	ldrb.w	r3, [r8, #8]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	4947      	ldr	r1, [pc, #284]	@ (8008ddc <rmw_create_publisher+0x1c4>)
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cc4:	bf0c      	ite	eq
 8008cc6:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8008cca:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8008cce:	67a3      	str	r3, [r4, #120]	@ 0x78
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008cd6:	f000 fb71 	bl	80093bc <get_message_typesupport_handle>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d068      	beq.n	8008db0 <rmw_create_publisher+0x198>
 8008cde:	6842      	ldr	r2, [r0, #4]
 8008ce0:	61a2      	str	r2, [r4, #24]
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	d064      	beq.n	8008db0 <rmw_create_publisher+0x198>
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4643      	mov	r3, r8
 8008cea:	4648      	mov	r0, r9
 8008cec:	f005 ff12 	bl	800eb14 <create_topic>
 8008cf0:	6260      	str	r0, [r4, #36]	@ 0x24
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d060      	beq.n	8008db8 <rmw_create_publisher+0x1a0>
 8008cf6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008cfa:	f241 5398 	movw	r3, #5528	@ 0x1598
 8008cfe:	2103      	movs	r1, #3
 8008d00:	2506      	movs	r5, #6
 8008d02:	5ad0      	ldrh	r0, [r2, r3]
 8008d04:	1c46      	adds	r6, r0, #1
 8008d06:	52d6      	strh	r6, [r2, r3]
 8008d08:	f001 fd3e 	bl	800a788 <uxr_object_id>
 8008d0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d10:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8008d14:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8008d18:	6912      	ldr	r2, [r2, #16]
 8008d1a:	6120      	str	r0, [r4, #16]
 8008d1c:	9500      	str	r5, [sp, #0]
 8008d1e:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008d2a:	f001 fc85 	bl	800a638 <uxr_buffer_create_publisher_bin>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008d34:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8008d38:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8008d3c:	f000 fab6 	bl	80092ac <run_xrce_session>
 8008d40:	b3b0      	cbz	r0, 8008db0 <rmw_create_publisher+0x198>
 8008d42:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008d46:	f241 539a 	movw	r3, #5530	@ 0x159a
 8008d4a:	2105      	movs	r1, #5
 8008d4c:	f10d 0a10 	add.w	sl, sp, #16
 8008d50:	5ad0      	ldrh	r0, [r2, r3]
 8008d52:	1c46      	adds	r6, r0, #1
 8008d54:	52d6      	strh	r6, [r2, r3]
 8008d56:	f001 fd17 	bl	800a788 <uxr_object_id>
 8008d5a:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8008d5e:	4602      	mov	r2, r0
 8008d60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d64:	4641      	mov	r1, r8
 8008d66:	6936      	ldr	r6, [r6, #16]
 8008d68:	4650      	mov	r0, sl
 8008d6a:	6162      	str	r2, [r4, #20]
 8008d6c:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8008d70:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8008d74:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8008d78:	f000 fab4 	bl	80092e4 <convert_qos_profile>
 8008d7c:	9503      	str	r5, [sp, #12]
 8008d7e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008d82:	9001      	str	r0, [sp, #4]
 8008d84:	4630      	mov	r0, r6
 8008d86:	f8ad 1008 	strh.w	r1, [sp, #8]
 8008d8a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	f8d8 1000 	ldr.w	r1, [r8]
 8008d94:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008d98:	f001 fc7c 	bl	800a694 <uxr_buffer_create_datawriter_bin>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008da2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8008da6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8008daa:	f000 fa7f 	bl	80092ac <run_xrce_session>
 8008dae:	b960      	cbnz	r0, 8008dca <rmw_create_publisher+0x1b2>
 8008db0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008db2:	b108      	cbz	r0, 8008db8 <rmw_create_publisher+0x1a0>
 8008db4:	f000 fa1e 	bl	80091f4 <rmw_uxrce_fini_topic_memory>
 8008db8:	4638      	mov	r0, r7
 8008dba:	2700      	movs	r7, #0
 8008dbc:	f000 f9c2 	bl	8009144 <rmw_uxrce_fini_publisher_memory>
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	b007      	add	sp, #28
 8008dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc8:	2700      	movs	r7, #0
 8008dca:	4638      	mov	r0, r7
 8008dcc:	b007      	add	sp, #28
 8008dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd2:	bf00      	nop
 8008dd4:	2000c300 	.word	0x2000c300
 8008dd8:	0801594c 	.word	0x0801594c
 8008ddc:	08015918 	.word	0x08015918

08008de0 <rmw_publisher_get_actual_qos>:
 8008de0:	b178      	cbz	r0, 8008e02 <rmw_publisher_get_actual_qos+0x22>
 8008de2:	b510      	push	{r4, lr}
 8008de4:	fab1 f481 	clz	r4, r1
 8008de8:	0964      	lsrs	r4, r4, #5
 8008dea:	b141      	cbz	r1, 8008dfe <rmw_publisher_get_actual_qos+0x1e>
 8008dec:	6843      	ldr	r3, [r0, #4]
 8008dee:	2250      	movs	r2, #80	@ 0x50
 8008df0:	4608      	mov	r0, r1
 8008df2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008df6:	f009 fb30 	bl	801245a <memcpy>
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	200b      	movs	r0, #11
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	200b      	movs	r0, #11
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop

08008e08 <rmw_destroy_publisher>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	b128      	cbz	r0, 8008e18 <rmw_destroy_publisher+0x10>
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	6800      	ldr	r0, [r0, #0]
 8008e10:	460d      	mov	r5, r1
 8008e12:	f000 fac5 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 8008e16:	b910      	cbnz	r0, 8008e1e <rmw_destroy_publisher+0x16>
 8008e18:	2401      	movs	r4, #1
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1e:	6863      	ldr	r3, [r4, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0f9      	beq.n	8008e18 <rmw_destroy_publisher+0x10>
 8008e24:	fab5 f485 	clz	r4, r5
 8008e28:	0964      	lsrs	r4, r4, #5
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	d0f4      	beq.n	8008e18 <rmw_destroy_publisher+0x10>
 8008e2e:	6828      	ldr	r0, [r5, #0]
 8008e30:	f000 fab6 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d0ef      	beq.n	8008e18 <rmw_destroy_publisher+0x10>
 8008e38:	686e      	ldr	r6, [r5, #4]
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	d0ec      	beq.n	8008e18 <rmw_destroy_publisher+0x10>
 8008e3e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8008e40:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8008e44:	f005 feb6 	bl	800ebb4 <destroy_topic>
 8008e48:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8008e4c:	6972      	ldr	r2, [r6, #20]
 8008e4e:	6918      	ldr	r0, [r3, #16]
 8008e50:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8008e54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	f001 fb3b 	bl	800a4d4 <uxr_buffer_delete_entity>
 8008e5e:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8008e62:	6932      	ldr	r2, [r6, #16]
 8008e64:	4606      	mov	r6, r0
 8008e66:	6918      	ldr	r0, [r3, #16]
 8008e68:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8008e6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008e70:	6819      	ldr	r1, [r3, #0]
 8008e72:	f001 fb2f 	bl	800a4d4 <uxr_buffer_delete_entity>
 8008e76:	6939      	ldr	r1, [r7, #16]
 8008e78:	4632      	mov	r2, r6
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	f8d1 3390 	ldr.w	r3, [r1, #912]	@ 0x390
 8008e80:	4608      	mov	r0, r1
 8008e82:	f8d1 1388 	ldr.w	r1, [r1, #904]	@ 0x388
 8008e86:	f000 fa11 	bl	80092ac <run_xrce_session>
 8008e8a:	6939      	ldr	r1, [r7, #16]
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	4606      	mov	r6, r0
 8008e90:	f8d1 3390 	ldr.w	r3, [r1, #912]	@ 0x390
 8008e94:	4608      	mov	r0, r1
 8008e96:	f8d1 1388 	ldr.w	r1, [r1, #904]	@ 0x388
 8008e9a:	f000 fa07 	bl	80092ac <run_xrce_session>
 8008e9e:	b126      	cbz	r6, 8008eaa <rmw_destroy_publisher+0xa2>
 8008ea0:	b118      	cbz	r0, 8008eaa <rmw_destroy_publisher+0xa2>
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f94e 	bl	8009144 <rmw_uxrce_fini_publisher_memory>
 8008ea8:	e7b7      	b.n	8008e1a <rmw_destroy_publisher+0x12>
 8008eaa:	2402      	movs	r4, #2
 8008eac:	e7f9      	b.n	8008ea2 <rmw_destroy_publisher+0x9a>
 8008eae:	bf00      	nop

08008eb0 <rmw_uxrce_init_service_memory>:
 8008eb0:	b1ba      	cbz	r2, 8008ee2 <rmw_uxrce_init_service_memory+0x32>
 8008eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb4:	7a03      	ldrb	r3, [r0, #8]
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	b993      	cbnz	r3, 8008ee0 <rmw_uxrce_init_service_memory+0x30>
 8008eba:	460c      	mov	r4, r1
 8008ebc:	21c8      	movs	r1, #200	@ 0xc8
 8008ebe:	461f      	mov	r7, r3
 8008ec0:	6003      	str	r3, [r0, #0]
 8008ec2:	fb01 4602 	mla	r6, r1, r2, r4
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	6043      	str	r3, [r0, #4]
 8008eca:	60c1      	str	r1, [r0, #12]
 8008ecc:	7202      	strb	r2, [r0, #8]
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f005 fbb5 	bl	800e640 <put_memory>
 8008ed6:	60e4      	str	r4, [r4, #12]
 8008ed8:	f804 7bc8 	strb.w	r7, [r4], #200
 8008edc:	42a6      	cmp	r6, r4
 8008ede:	d1f6      	bne.n	8008ece <rmw_uxrce_init_service_memory+0x1e>
 8008ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee2:	4770      	bx	lr

08008ee4 <rmw_uxrce_init_client_memory>:
 8008ee4:	b1ba      	cbz	r2, 8008f16 <rmw_uxrce_init_client_memory+0x32>
 8008ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee8:	7a03      	ldrb	r3, [r0, #8]
 8008eea:	4605      	mov	r5, r0
 8008eec:	b993      	cbnz	r3, 8008f14 <rmw_uxrce_init_client_memory+0x30>
 8008eee:	460c      	mov	r4, r1
 8008ef0:	21c8      	movs	r1, #200	@ 0xc8
 8008ef2:	461f      	mov	r7, r3
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	fb01 4602 	mla	r6, r1, r2, r4
 8008efa:	2201      	movs	r2, #1
 8008efc:	6043      	str	r3, [r0, #4]
 8008efe:	60c1      	str	r1, [r0, #12]
 8008f00:	7202      	strb	r2, [r0, #8]
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f005 fb9b 	bl	800e640 <put_memory>
 8008f0a:	60e4      	str	r4, [r4, #12]
 8008f0c:	f804 7bc8 	strb.w	r7, [r4], #200
 8008f10:	42a6      	cmp	r6, r4
 8008f12:	d1f6      	bne.n	8008f02 <rmw_uxrce_init_client_memory+0x1e>
 8008f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f16:	4770      	bx	lr

08008f18 <rmw_uxrce_init_publisher_memory>:
 8008f18:	b1ba      	cbz	r2, 8008f4a <rmw_uxrce_init_publisher_memory+0x32>
 8008f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1c:	7a03      	ldrb	r3, [r0, #8]
 8008f1e:	4605      	mov	r5, r0
 8008f20:	b993      	cbnz	r3, 8008f48 <rmw_uxrce_init_publisher_memory+0x30>
 8008f22:	460c      	mov	r4, r1
 8008f24:	21d8      	movs	r1, #216	@ 0xd8
 8008f26:	461f      	mov	r7, r3
 8008f28:	6003      	str	r3, [r0, #0]
 8008f2a:	fb01 4602 	mla	r6, r1, r2, r4
 8008f2e:	2201      	movs	r2, #1
 8008f30:	6043      	str	r3, [r0, #4]
 8008f32:	60c1      	str	r1, [r0, #12]
 8008f34:	7202      	strb	r2, [r0, #8]
 8008f36:	4621      	mov	r1, r4
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f005 fb81 	bl	800e640 <put_memory>
 8008f3e:	60e4      	str	r4, [r4, #12]
 8008f40:	f804 7bd8 	strb.w	r7, [r4], #216
 8008f44:	42a6      	cmp	r6, r4
 8008f46:	d1f6      	bne.n	8008f36 <rmw_uxrce_init_publisher_memory+0x1e>
 8008f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4a:	4770      	bx	lr

08008f4c <rmw_uxrce_init_subscription_memory>:
 8008f4c:	b1ba      	cbz	r2, 8008f7e <rmw_uxrce_init_subscription_memory+0x32>
 8008f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f50:	7a03      	ldrb	r3, [r0, #8]
 8008f52:	4605      	mov	r5, r0
 8008f54:	b993      	cbnz	r3, 8008f7c <rmw_uxrce_init_subscription_memory+0x30>
 8008f56:	460c      	mov	r4, r1
 8008f58:	21d0      	movs	r1, #208	@ 0xd0
 8008f5a:	461f      	mov	r7, r3
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	fb01 4602 	mla	r6, r1, r2, r4
 8008f62:	2201      	movs	r2, #1
 8008f64:	6043      	str	r3, [r0, #4]
 8008f66:	60c1      	str	r1, [r0, #12]
 8008f68:	7202      	strb	r2, [r0, #8]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f005 fb67 	bl	800e640 <put_memory>
 8008f72:	60e4      	str	r4, [r4, #12]
 8008f74:	f804 7bd0 	strb.w	r7, [r4], #208
 8008f78:	42a6      	cmp	r6, r4
 8008f7a:	d1f6      	bne.n	8008f6a <rmw_uxrce_init_subscription_memory+0x1e>
 8008f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f7e:	4770      	bx	lr

08008f80 <rmw_uxrce_init_node_memory>:
 8008f80:	b1ba      	cbz	r2, 8008fb2 <rmw_uxrce_init_node_memory+0x32>
 8008f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f84:	7a03      	ldrb	r3, [r0, #8]
 8008f86:	4605      	mov	r5, r0
 8008f88:	b993      	cbnz	r3, 8008fb0 <rmw_uxrce_init_node_memory+0x30>
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	21a4      	movs	r1, #164	@ 0xa4
 8008f8e:	461f      	mov	r7, r3
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	fb01 4602 	mla	r6, r1, r2, r4
 8008f96:	2201      	movs	r2, #1
 8008f98:	6043      	str	r3, [r0, #4]
 8008f9a:	60c1      	str	r1, [r0, #12]
 8008f9c:	7202      	strb	r2, [r0, #8]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f005 fb4d 	bl	800e640 <put_memory>
 8008fa6:	60e4      	str	r4, [r4, #12]
 8008fa8:	f804 7ba4 	strb.w	r7, [r4], #164
 8008fac:	42a6      	cmp	r6, r4
 8008fae:	d1f6      	bne.n	8008f9e <rmw_uxrce_init_node_memory+0x1e>
 8008fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb2:	4770      	bx	lr

08008fb4 <rmw_uxrce_init_session_memory>:
 8008fb4:	b1e2      	cbz	r2, 8008ff0 <rmw_uxrce_init_session_memory+0x3c>
 8008fb6:	7a03      	ldrb	r3, [r0, #8]
 8008fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	b9ab      	cbnz	r3, 8008fec <rmw_uxrce_init_session_memory+0x38>
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	4698      	mov	r8, r3
 8008fca:	fb01 4602 	mla	r6, r1, r2, r4
 8008fce:	460f      	mov	r7, r1
 8008fd0:	60e9      	str	r1, [r5, #12]
 8008fd2:	7228      	strb	r0, [r5, #8]
 8008fd4:	e9c5 3300 	strd	r3, r3, [r5]
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f005 fb30 	bl	800e640 <put_memory>
 8008fe0:	60e4      	str	r4, [r4, #12]
 8008fe2:	f884 8000 	strb.w	r8, [r4]
 8008fe6:	443c      	add	r4, r7
 8008fe8:	42a6      	cmp	r6, r4
 8008fea:	d1f5      	bne.n	8008fd8 <rmw_uxrce_init_session_memory+0x24>
 8008fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop

08008ff4 <rmw_uxrce_init_topic_memory>:
 8008ff4:	b1ca      	cbz	r2, 800902a <rmw_uxrce_init_topic_memory+0x36>
 8008ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff8:	7a03      	ldrb	r3, [r0, #8]
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	b9a3      	cbnz	r3, 8009028 <rmw_uxrce_init_topic_memory+0x34>
 8008ffe:	460c      	mov	r4, r1
 8009000:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009004:	2101      	movs	r1, #1
 8009006:	461f      	mov	r7, r3
 8009008:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800900c:	221c      	movs	r2, #28
 800900e:	7201      	strb	r1, [r0, #8]
 8009010:	60c2      	str	r2, [r0, #12]
 8009012:	e9c0 3300 	strd	r3, r3, [r0]
 8009016:	4621      	mov	r1, r4
 8009018:	4630      	mov	r0, r6
 800901a:	f005 fb11 	bl	800e640 <put_memory>
 800901e:	60e4      	str	r4, [r4, #12]
 8009020:	f804 7b1c 	strb.w	r7, [r4], #28
 8009024:	42a5      	cmp	r5, r4
 8009026:	d1f6      	bne.n	8009016 <rmw_uxrce_init_topic_memory+0x22>
 8009028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902a:	4770      	bx	lr

0800902c <rmw_uxrce_init_static_input_buffer_memory>:
 800902c:	b1da      	cbz	r2, 8009066 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800902e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009030:	7a03      	ldrb	r3, [r0, #8]
 8009032:	4606      	mov	r6, r0
 8009034:	b9b3      	cbnz	r3, 8009064 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 8009036:	460c      	mov	r4, r1
 8009038:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800903c:	2101      	movs	r1, #1
 800903e:	461f      	mov	r7, r3
 8009040:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 8009044:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8009048:	7201      	strb	r1, [r0, #8]
 800904a:	60c2      	str	r2, [r0, #12]
 800904c:	e9c0 3300 	strd	r3, r3, [r0]
 8009050:	4621      	mov	r1, r4
 8009052:	4630      	mov	r0, r6
 8009054:	f005 faf4 	bl	800e640 <put_memory>
 8009058:	60e4      	str	r4, [r4, #12]
 800905a:	7027      	strb	r7, [r4, #0]
 800905c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8009060:	42a5      	cmp	r5, r4
 8009062:	d1f5      	bne.n	8009050 <rmw_uxrce_init_static_input_buffer_memory+0x24>
 8009064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009066:	4770      	bx	lr

08009068 <rmw_uxrce_init_init_options_impl_memory>:
 8009068:	b1ba      	cbz	r2, 800909a <rmw_uxrce_init_init_options_impl_memory+0x32>
 800906a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906c:	7a03      	ldrb	r3, [r0, #8]
 800906e:	4605      	mov	r5, r0
 8009070:	b993      	cbnz	r3, 8009098 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8009072:	460c      	mov	r4, r1
 8009074:	212c      	movs	r1, #44	@ 0x2c
 8009076:	461f      	mov	r7, r3
 8009078:	6003      	str	r3, [r0, #0]
 800907a:	fb01 4602 	mla	r6, r1, r2, r4
 800907e:	2201      	movs	r2, #1
 8009080:	6043      	str	r3, [r0, #4]
 8009082:	60c1      	str	r1, [r0, #12]
 8009084:	7202      	strb	r2, [r0, #8]
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	f005 fad9 	bl	800e640 <put_memory>
 800908e:	60e4      	str	r4, [r4, #12]
 8009090:	f804 7b2c 	strb.w	r7, [r4], #44
 8009094:	42a6      	cmp	r6, r4
 8009096:	d1f6      	bne.n	8009086 <rmw_uxrce_init_init_options_impl_memory+0x1e>
 8009098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909a:	4770      	bx	lr

0800909c <rmw_uxrce_init_wait_set_memory>:
 800909c:	b1ca      	cbz	r2, 80090d2 <rmw_uxrce_init_wait_set_memory+0x36>
 800909e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a0:	7a03      	ldrb	r3, [r0, #8]
 80090a2:	4606      	mov	r6, r0
 80090a4:	b9a3      	cbnz	r3, 80090d0 <rmw_uxrce_init_wait_set_memory+0x34>
 80090a6:	460c      	mov	r4, r1
 80090a8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80090ac:	2101      	movs	r1, #1
 80090ae:	461f      	mov	r7, r3
 80090b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80090b4:	221c      	movs	r2, #28
 80090b6:	7201      	strb	r1, [r0, #8]
 80090b8:	60c2      	str	r2, [r0, #12]
 80090ba:	e9c0 3300 	strd	r3, r3, [r0]
 80090be:	4621      	mov	r1, r4
 80090c0:	4630      	mov	r0, r6
 80090c2:	f005 fabd 	bl	800e640 <put_memory>
 80090c6:	60e4      	str	r4, [r4, #12]
 80090c8:	f804 7b1c 	strb.w	r7, [r4], #28
 80090cc:	42a5      	cmp	r5, r4
 80090ce:	d1f6      	bne.n	80090be <rmw_uxrce_init_wait_set_memory+0x22>
 80090d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d2:	4770      	bx	lr

080090d4 <rmw_uxrce_init_guard_condition_memory>:
 80090d4:	b1ba      	cbz	r2, 8009106 <rmw_uxrce_init_guard_condition_memory+0x32>
 80090d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d8:	7a03      	ldrb	r3, [r0, #8]
 80090da:	4605      	mov	r5, r0
 80090dc:	b993      	cbnz	r3, 8009104 <rmw_uxrce_init_guard_condition_memory+0x30>
 80090de:	460c      	mov	r4, r1
 80090e0:	461f      	mov	r7, r3
 80090e2:	2101      	movs	r1, #1
 80090e4:	6003      	str	r3, [r0, #0]
 80090e6:	6043      	str	r3, [r0, #4]
 80090e8:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 80090ec:	2320      	movs	r3, #32
 80090ee:	7201      	strb	r1, [r0, #8]
 80090f0:	60c3      	str	r3, [r0, #12]
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f005 faa3 	bl	800e640 <put_memory>
 80090fa:	60e4      	str	r4, [r4, #12]
 80090fc:	f804 7b20 	strb.w	r7, [r4], #32
 8009100:	42a6      	cmp	r6, r4
 8009102:	d1f6      	bne.n	80090f2 <rmw_uxrce_init_guard_condition_memory+0x1e>
 8009104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009106:	4770      	bx	lr

08009108 <rmw_uxrce_fini_session_memory>:
 8009108:	4601      	mov	r1, r0
 800910a:	4801      	ldr	r0, [pc, #4]	@ (8009110 <rmw_uxrce_fini_session_memory+0x8>)
 800910c:	f005 ba98 	b.w	800e640 <put_memory>
 8009110:	2000f498 	.word	0x2000f498

08009114 <rmw_uxrce_fini_node_memory>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4604      	mov	r4, r0
 8009118:	6800      	ldr	r0, [r0, #0]
 800911a:	b128      	cbz	r0, 8009128 <rmw_uxrce_fini_node_memory+0x14>
 800911c:	4b07      	ldr	r3, [pc, #28]	@ (800913c <rmw_uxrce_fini_node_memory+0x28>)
 800911e:	6819      	ldr	r1, [r3, #0]
 8009120:	f7f7 f88e 	bl	8000240 <strcmp>
 8009124:	b940      	cbnz	r0, 8009138 <rmw_uxrce_fini_node_memory+0x24>
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	6861      	ldr	r1, [r4, #4]
 800912a:	b129      	cbz	r1, 8009138 <rmw_uxrce_fini_node_memory+0x24>
 800912c:	2500      	movs	r5, #0
 800912e:	4804      	ldr	r0, [pc, #16]	@ (8009140 <rmw_uxrce_fini_node_memory+0x2c>)
 8009130:	610d      	str	r5, [r1, #16]
 8009132:	f005 fa85 	bl	800e640 <put_memory>
 8009136:	6065      	str	r5, [r4, #4]
 8009138:	bd38      	pop	{r3, r4, r5, pc}
 800913a:	bf00      	nop
 800913c:	08015e20 	.word	0x08015e20
 8009140:	2000f2c4 	.word	0x2000f2c4

08009144 <rmw_uxrce_fini_publisher_memory>:
 8009144:	b510      	push	{r4, lr}
 8009146:	4604      	mov	r4, r0
 8009148:	6800      	ldr	r0, [r0, #0]
 800914a:	b128      	cbz	r0, 8009158 <rmw_uxrce_fini_publisher_memory+0x14>
 800914c:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <rmw_uxrce_fini_publisher_memory+0x24>)
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	f7f7 f876 	bl	8000240 <strcmp>
 8009154:	b938      	cbnz	r0, 8009166 <rmw_uxrce_fini_publisher_memory+0x22>
 8009156:	6020      	str	r0, [r4, #0]
 8009158:	6861      	ldr	r1, [r4, #4]
 800915a:	b121      	cbz	r1, 8009166 <rmw_uxrce_fini_publisher_memory+0x22>
 800915c:	4803      	ldr	r0, [pc, #12]	@ (800916c <rmw_uxrce_fini_publisher_memory+0x28>)
 800915e:	f005 fa6f 	bl	800e640 <put_memory>
 8009162:	2300      	movs	r3, #0
 8009164:	6063      	str	r3, [r4, #4]
 8009166:	bd10      	pop	{r4, pc}
 8009168:	08015e20 	.word	0x08015e20
 800916c:	2000c300 	.word	0x2000c300

08009170 <rmw_uxrce_fini_subscription_memory>:
 8009170:	b510      	push	{r4, lr}
 8009172:	4604      	mov	r4, r0
 8009174:	6800      	ldr	r0, [r0, #0]
 8009176:	b128      	cbz	r0, 8009184 <rmw_uxrce_fini_subscription_memory+0x14>
 8009178:	4b06      	ldr	r3, [pc, #24]	@ (8009194 <rmw_uxrce_fini_subscription_memory+0x24>)
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	f7f7 f860 	bl	8000240 <strcmp>
 8009180:	b938      	cbnz	r0, 8009192 <rmw_uxrce_fini_subscription_memory+0x22>
 8009182:	6020      	str	r0, [r4, #0]
 8009184:	6861      	ldr	r1, [r4, #4]
 8009186:	b121      	cbz	r1, 8009192 <rmw_uxrce_fini_subscription_memory+0x22>
 8009188:	4803      	ldr	r0, [pc, #12]	@ (8009198 <rmw_uxrce_fini_subscription_memory+0x28>)
 800918a:	f005 fa59 	bl	800e640 <put_memory>
 800918e:	2300      	movs	r3, #0
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	bd10      	pop	{r4, pc}
 8009194:	08015e20 	.word	0x08015e20
 8009198:	2000f55c 	.word	0x2000f55c

0800919c <rmw_uxrce_fini_service_memory>:
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	6800      	ldr	r0, [r0, #0]
 80091a2:	b128      	cbz	r0, 80091b0 <rmw_uxrce_fini_service_memory+0x14>
 80091a4:	4b06      	ldr	r3, [pc, #24]	@ (80091c0 <rmw_uxrce_fini_service_memory+0x24>)
 80091a6:	6819      	ldr	r1, [r3, #0]
 80091a8:	f7f7 f84a 	bl	8000240 <strcmp>
 80091ac:	b938      	cbnz	r0, 80091be <rmw_uxrce_fini_service_memory+0x22>
 80091ae:	6020      	str	r0, [r4, #0]
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	b121      	cbz	r1, 80091be <rmw_uxrce_fini_service_memory+0x22>
 80091b4:	4803      	ldr	r0, [pc, #12]	@ (80091c4 <rmw_uxrce_fini_service_memory+0x28>)
 80091b6:	f005 fa43 	bl	800e640 <put_memory>
 80091ba:	2300      	movs	r3, #0
 80091bc:	6063      	str	r3, [r4, #4]
 80091be:	bd10      	pop	{r4, pc}
 80091c0:	08015e20 	.word	0x08015e20
 80091c4:	2000f54c 	.word	0x2000f54c

080091c8 <rmw_uxrce_fini_client_memory>:
 80091c8:	b510      	push	{r4, lr}
 80091ca:	4604      	mov	r4, r0
 80091cc:	6800      	ldr	r0, [r0, #0]
 80091ce:	b128      	cbz	r0, 80091dc <rmw_uxrce_fini_client_memory+0x14>
 80091d0:	4b06      	ldr	r3, [pc, #24]	@ (80091ec <rmw_uxrce_fini_client_memory+0x24>)
 80091d2:	6819      	ldr	r1, [r3, #0]
 80091d4:	f7f7 f834 	bl	8000240 <strcmp>
 80091d8:	b938      	cbnz	r0, 80091ea <rmw_uxrce_fini_client_memory+0x22>
 80091da:	6020      	str	r0, [r4, #0]
 80091dc:	6861      	ldr	r1, [r4, #4]
 80091de:	b121      	cbz	r1, 80091ea <rmw_uxrce_fini_client_memory+0x22>
 80091e0:	4803      	ldr	r0, [pc, #12]	@ (80091f0 <rmw_uxrce_fini_client_memory+0x28>)
 80091e2:	f005 fa2d 	bl	800e640 <put_memory>
 80091e6:	2300      	movs	r3, #0
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	bd10      	pop	{r4, pc}
 80091ec:	08015e20 	.word	0x08015e20
 80091f0:	2000cb80 	.word	0x2000cb80

080091f4 <rmw_uxrce_fini_topic_memory>:
 80091f4:	b510      	push	{r4, lr}
 80091f6:	4604      	mov	r4, r0
 80091f8:	4803      	ldr	r0, [pc, #12]	@ (8009208 <rmw_uxrce_fini_topic_memory+0x14>)
 80091fa:	4621      	mov	r1, r4
 80091fc:	f005 fa20 	bl	800e640 <put_memory>
 8009200:	2300      	movs	r3, #0
 8009202:	61a3      	str	r3, [r4, #24]
 8009204:	bd10      	pop	{r4, pc}
 8009206:	bf00      	nop
 8009208:	2000f488 	.word	0x2000f488

0800920c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800920c:	b082      	sub	sp, #8
 800920e:	4926      	ldr	r1, [pc, #152]	@ (80092a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8009210:	b4f0      	push	{r4, r5, r6, r7}
 8009212:	6809      	ldr	r1, [r1, #0]
 8009214:	ac04      	add	r4, sp, #16
 8009216:	e884 000c 	stmia.w	r4, {r2, r3}
 800921a:	9d05      	ldr	r5, [sp, #20]
 800921c:	2900      	cmp	r1, #0
 800921e:	d041      	beq.n	80092a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8009220:	460b      	mov	r3, r1
 8009222:	2400      	movs	r4, #0
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800922c:	4290      	cmp	r0, r2
 800922e:	bf08      	it	eq
 8009230:	3401      	addeq	r4, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1f6      	bne.n	8009224 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8009236:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d026      	beq.n	800928c <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800923e:	d81e      	bhi.n	800927e <rmw_uxrce_get_static_input_buffer_for_entity+0x72>
 8009240:	42a5      	cmp	r5, r4
 8009242:	d82a      	bhi.n	800929a <rmw_uxrce_get_static_input_buffer_for_entity+0x8e>
 8009244:	fab5 f385 	clz	r3, r5
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	b335      	cbz	r5, 800929a <rmw_uxrce_get_static_input_buffer_for_entity+0x8e>
 800924c:	b1c9      	cbz	r1, 8009282 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800924e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009252:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8009256:	e001      	b.n	800925c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8009258:	6889      	ldr	r1, [r1, #8]
 800925a:	b199      	cbz	r1, 8009284 <rmw_uxrce_get_static_input_buffer_for_entity+0x78>
 800925c:	68ca      	ldr	r2, [r1, #12]
 800925e:	f8d2 6814 	ldr.w	r6, [r2, #2068]	@ 0x814
 8009262:	42b0      	cmp	r0, r6
 8009264:	d1f8      	bne.n	8009258 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8009266:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 800926a:	e9d2 6700 	ldrd	r6, r7, [r2]
 800926e:	42a6      	cmp	r6, r4
 8009270:	eb77 0205 	sbcs.w	r2, r7, r5
 8009274:	daf0      	bge.n	8009258 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8009276:	4634      	mov	r4, r6
 8009278:	463d      	mov	r5, r7
 800927a:	460b      	mov	r3, r1
 800927c:	e7ec      	b.n	8009258 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800927e:	2b03      	cmp	r3, #3
 8009280:	d0de      	beq.n	8009240 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8009282:	2300      	movs	r3, #0
 8009284:	4618      	mov	r0, r3
 8009286:	bcf0      	pop	{r4, r5, r6, r7}
 8009288:	b002      	add	sp, #8
 800928a:	4770      	bx	lr
 800928c:	42a5      	cmp	r5, r4
 800928e:	d804      	bhi.n	800929a <rmw_uxrce_get_static_input_buffer_for_entity+0x8e>
 8009290:	fab5 f385 	clz	r3, r5
 8009294:	095b      	lsrs	r3, r3, #5
 8009296:	2d00      	cmp	r5, #0
 8009298:	d1f4      	bne.n	8009284 <rmw_uxrce_get_static_input_buffer_for_entity+0x78>
 800929a:	4803      	ldr	r0, [pc, #12]	@ (80092a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800929c:	bcf0      	pop	{r4, r5, r6, r7}
 800929e:	b002      	add	sp, #8
 80092a0:	f005 b9be 	b.w	800e620 <get_memory>
 80092a4:	460c      	mov	r4, r1
 80092a6:	e7c6      	b.n	8009236 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80092a8:	2000c2f0 	.word	0x2000c2f0

080092ac <run_xrce_session>:
 80092ac:	b510      	push	{r4, lr}
 80092ae:	788c      	ldrb	r4, [r1, #2]
 80092b0:	b086      	sub	sp, #24
 80092b2:	2c01      	cmp	r4, #1
 80092b4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80092b8:	d00c      	beq.n	80092d4 <run_xrce_session+0x28>
 80092ba:	2201      	movs	r2, #1
 80092bc:	4619      	mov	r1, r3
 80092be:	f10d 0317 	add.w	r3, sp, #23
 80092c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80092c6:	9200      	str	r2, [sp, #0]
 80092c8:	f10d 020e 	add.w	r2, sp, #14
 80092cc:	f001 ff6c 	bl	800b1a8 <uxr_run_session_until_all_status>
 80092d0:	b006      	add	sp, #24
 80092d2:	bd10      	pop	{r4, pc}
 80092d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80092d8:	f001 fba8 	bl	800aa2c <uxr_flash_output_streams>
 80092dc:	4620      	mov	r0, r4
 80092de:	b006      	add	sp, #24
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	bf00      	nop

080092e4 <convert_qos_profile>:
 80092e4:	b470      	push	{r4, r5, r6}
 80092e6:	7a0d      	ldrb	r5, [r1, #8]
 80092e8:	780c      	ldrb	r4, [r1, #0]
 80092ea:	7a4a      	ldrb	r2, [r1, #9]
 80092ec:	f1a5 0502 	sub.w	r5, r5, #2
 80092f0:	888e      	ldrh	r6, [r1, #4]
 80092f2:	f1a4 0102 	sub.w	r1, r4, #2
 80092f6:	2a02      	cmp	r2, #2
 80092f8:	fab5 f585 	clz	r5, r5
 80092fc:	fab1 f181 	clz	r1, r1
 8009300:	8086      	strh	r6, [r0, #4]
 8009302:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8009306:	bf18      	it	ne
 8009308:	2200      	movne	r2, #0
 800930a:	0949      	lsrs	r1, r1, #5
 800930c:	7045      	strb	r5, [r0, #1]
 800930e:	7002      	strb	r2, [r0, #0]
 8009310:	7081      	strb	r1, [r0, #2]
 8009312:	bc70      	pop	{r4, r5, r6}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop

08009318 <generate_type_name>:
 8009318:	2300      	movs	r3, #0
 800931a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931c:	700b      	strb	r3, [r1, #0]
 800931e:	b087      	sub	sp, #28
 8009320:	6803      	ldr	r3, [r0, #0]
 8009322:	4614      	mov	r4, r2
 8009324:	b1bb      	cbz	r3, 8009356 <generate_type_name+0x3e>
 8009326:	4d0e      	ldr	r5, [pc, #56]	@ (8009360 <generate_type_name+0x48>)
 8009328:	462f      	mov	r7, r5
 800932a:	6846      	ldr	r6, [r0, #4]
 800932c:	4608      	mov	r0, r1
 800932e:	4a0d      	ldr	r2, [pc, #52]	@ (8009364 <generate_type_name+0x4c>)
 8009330:	4621      	mov	r1, r4
 8009332:	9503      	str	r5, [sp, #12]
 8009334:	4d0c      	ldr	r5, [pc, #48]	@ (8009368 <generate_type_name+0x50>)
 8009336:	9205      	str	r2, [sp, #20]
 8009338:	9604      	str	r6, [sp, #16]
 800933a:	9700      	str	r7, [sp, #0]
 800933c:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8009340:	4a0a      	ldr	r2, [pc, #40]	@ (800936c <generate_type_name+0x54>)
 8009342:	f008 feed 	bl	8012120 <sniprintf>
 8009346:	2800      	cmp	r0, #0
 8009348:	bfa8      	it	ge
 800934a:	4284      	cmpge	r4, r0
 800934c:	bfcc      	ite	gt
 800934e:	2001      	movgt	r0, #1
 8009350:	2000      	movle	r0, #0
 8009352:	b007      	add	sp, #28
 8009354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009356:	4b06      	ldr	r3, [pc, #24]	@ (8009370 <generate_type_name+0x58>)
 8009358:	4d01      	ldr	r5, [pc, #4]	@ (8009360 <generate_type_name+0x48>)
 800935a:	461f      	mov	r7, r3
 800935c:	e7e5      	b.n	800932a <generate_type_name+0x12>
 800935e:	bf00      	nop
 8009360:	0801593c 	.word	0x0801593c
 8009364:	08015950 	.word	0x08015950
 8009368:	08015954 	.word	0x08015954
 800936c:	08015940 	.word	0x08015940
 8009370:	08015bf8 	.word	0x08015bf8

08009374 <generate_topic_name>:
 8009374:	b510      	push	{r4, lr}
 8009376:	4614      	mov	r4, r2
 8009378:	b082      	sub	sp, #8
 800937a:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <generate_topic_name+0x24>)
 800937c:	9000      	str	r0, [sp, #0]
 800937e:	4608      	mov	r0, r1
 8009380:	4a06      	ldr	r2, [pc, #24]	@ (800939c <generate_topic_name+0x28>)
 8009382:	4621      	mov	r1, r4
 8009384:	f008 fecc 	bl	8012120 <sniprintf>
 8009388:	2800      	cmp	r0, #0
 800938a:	bfa8      	it	ge
 800938c:	4284      	cmpge	r4, r0
 800938e:	bfcc      	ite	gt
 8009390:	2001      	movgt	r0, #1
 8009392:	2000      	movle	r0, #0
 8009394:	b002      	add	sp, #8
 8009396:	bd10      	pop	{r4, pc}
 8009398:	08015960 	.word	0x08015960
 800939c:	08015958 	.word	0x08015958

080093a0 <is_uxrce_rmw_identifier_valid>:
 80093a0:	b510      	push	{r4, lr}
 80093a2:	4604      	mov	r4, r0
 80093a4:	b140      	cbz	r0, 80093b8 <is_uxrce_rmw_identifier_valid+0x18>
 80093a6:	f005 f95f 	bl	800e668 <rmw_get_implementation_identifier>
 80093aa:	4601      	mov	r1, r0
 80093ac:	4620      	mov	r0, r4
 80093ae:	f7f6 ff47 	bl	8000240 <strcmp>
 80093b2:	fab0 f080 	clz	r0, r0
 80093b6:	0940      	lsrs	r0, r0, #5
 80093b8:	bd10      	pop	{r4, pc}
 80093ba:	bf00      	nop

080093bc <get_message_typesupport_handle>:
 80093bc:	6883      	ldr	r3, [r0, #8]
 80093be:	4718      	bx	r3

080093c0 <get_message_typesupport_handle_function>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	4604      	mov	r4, r0
 80093c4:	6800      	ldr	r0, [r0, #0]
 80093c6:	f7f6 ff3b 	bl	8000240 <strcmp>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	bf0c      	ite	eq
 80093ce:	4620      	moveq	r0, r4
 80093d0:	2000      	movne	r0, #0
 80093d2:	bd10      	pop	{r4, pc}

080093d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80093d4:	f000 b82a 	b.w	800942c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

080093d8 <_Int32__max_serialized_size>:
 80093d8:	2104      	movs	r1, #4
 80093da:	2000      	movs	r0, #0
 80093dc:	b508      	push	{r3, lr}
 80093de:	f001 f809 	bl	800a3f4 <ucdr_alignment>
 80093e2:	3004      	adds	r0, #4
 80093e4:	bd08      	pop	{r3, pc}
 80093e6:	bf00      	nop

080093e8 <_Int32__cdr_deserialize>:
 80093e8:	b109      	cbz	r1, 80093ee <_Int32__cdr_deserialize+0x6>
 80093ea:	f000 bf1d 	b.w	800a228 <ucdr_deserialize_int32_t>
 80093ee:	4608      	mov	r0, r1
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop

080093f4 <get_serialized_size_std_msgs__msg__Int32>:
 80093f4:	b130      	cbz	r0, 8009404 <get_serialized_size_std_msgs__msg__Int32+0x10>
 80093f6:	4608      	mov	r0, r1
 80093f8:	2104      	movs	r1, #4
 80093fa:	b508      	push	{r3, lr}
 80093fc:	f000 fffa 	bl	800a3f4 <ucdr_alignment>
 8009400:	3004      	adds	r0, #4
 8009402:	bd08      	pop	{r3, pc}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop

08009408 <_Int32__cdr_serialize>:
 8009408:	460a      	mov	r2, r1
 800940a:	b118      	cbz	r0, 8009414 <_Int32__cdr_serialize+0xc>
 800940c:	6801      	ldr	r1, [r0, #0]
 800940e:	4610      	mov	r0, r2
 8009410:	f000 be72 	b.w	800a0f8 <ucdr_serialize_int32_t>
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop

08009418 <_Int32__get_serialized_size>:
 8009418:	b130      	cbz	r0, 8009428 <_Int32__get_serialized_size+0x10>
 800941a:	2104      	movs	r1, #4
 800941c:	2000      	movs	r0, #0
 800941e:	b508      	push	{r3, lr}
 8009420:	f000 ffe8 	bl	800a3f4 <ucdr_alignment>
 8009424:	3004      	adds	r0, #4
 8009426:	bd08      	pop	{r3, pc}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop

0800942c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800942c:	4800      	ldr	r0, [pc, #0]	@ (8009430 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800942e:	4770      	bx	lr
 8009430:	20000028 	.word	0x20000028

08009434 <ucdr_serialize_bool>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	460d      	mov	r5, r1
 8009438:	2101      	movs	r1, #1
 800943a:	4604      	mov	r4, r0
 800943c:	f000 ff90 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009440:	b148      	cbz	r0, 8009456 <ucdr_serialize_bool+0x22>
 8009442:	68a3      	ldr	r3, [r4, #8]
 8009444:	2101      	movs	r1, #1
 8009446:	701d      	strb	r5, [r3, #0]
 8009448:	68a2      	ldr	r2, [r4, #8]
 800944a:	6923      	ldr	r3, [r4, #16]
 800944c:	440a      	add	r2, r1
 800944e:	7561      	strb	r1, [r4, #21]
 8009450:	440b      	add	r3, r1
 8009452:	60a2      	str	r2, [r4, #8]
 8009454:	6123      	str	r3, [r4, #16]
 8009456:	7da0      	ldrb	r0, [r4, #22]
 8009458:	f080 0001 	eor.w	r0, r0, #1
 800945c:	bd38      	pop	{r3, r4, r5, pc}
 800945e:	bf00      	nop

08009460 <ucdr_deserialize_bool>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	460d      	mov	r5, r1
 8009464:	2101      	movs	r1, #1
 8009466:	4604      	mov	r4, r0
 8009468:	f000 ff7a 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800946c:	b160      	cbz	r0, 8009488 <ucdr_deserialize_bool+0x28>
 800946e:	68a2      	ldr	r2, [r4, #8]
 8009470:	2001      	movs	r0, #1
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009478:	4403      	add	r3, r0
 800947a:	3900      	subs	r1, #0
 800947c:	bf18      	it	ne
 800947e:	2101      	movne	r1, #1
 8009480:	7029      	strb	r1, [r5, #0]
 8009482:	60a2      	str	r2, [r4, #8]
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	7560      	strb	r0, [r4, #21]
 8009488:	7da0      	ldrb	r0, [r4, #22]
 800948a:	f080 0001 	eor.w	r0, r0, #1
 800948e:	bd38      	pop	{r3, r4, r5, pc}

08009490 <ucdr_serialize_uint8_t>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	460d      	mov	r5, r1
 8009494:	2101      	movs	r1, #1
 8009496:	4604      	mov	r4, r0
 8009498:	f000 ff62 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800949c:	b148      	cbz	r0, 80094b2 <ucdr_serialize_uint8_t+0x22>
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	2101      	movs	r1, #1
 80094a2:	701d      	strb	r5, [r3, #0]
 80094a4:	68a2      	ldr	r2, [r4, #8]
 80094a6:	6923      	ldr	r3, [r4, #16]
 80094a8:	440a      	add	r2, r1
 80094aa:	7561      	strb	r1, [r4, #21]
 80094ac:	440b      	add	r3, r1
 80094ae:	60a2      	str	r2, [r4, #8]
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	7da0      	ldrb	r0, [r4, #22]
 80094b4:	f080 0001 	eor.w	r0, r0, #1
 80094b8:	bd38      	pop	{r3, r4, r5, pc}
 80094ba:	bf00      	nop

080094bc <ucdr_deserialize_uint8_t>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	460d      	mov	r5, r1
 80094c0:	2101      	movs	r1, #1
 80094c2:	4604      	mov	r4, r0
 80094c4:	f000 ff4c 	bl	800a360 <ucdr_check_final_buffer_behavior>
 80094c8:	b150      	cbz	r0, 80094e0 <ucdr_deserialize_uint8_t+0x24>
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	2101      	movs	r1, #1
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	702b      	strb	r3, [r5, #0]
 80094d2:	68a2      	ldr	r2, [r4, #8]
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	440a      	add	r2, r1
 80094d8:	7561      	strb	r1, [r4, #21]
 80094da:	440b      	add	r3, r1
 80094dc:	60a2      	str	r2, [r4, #8]
 80094de:	6123      	str	r3, [r4, #16]
 80094e0:	7da0      	ldrb	r0, [r4, #22]
 80094e2:	f080 0001 	eor.w	r0, r0, #1
 80094e6:	bd38      	pop	{r3, r4, r5, pc}

080094e8 <ucdr_serialize_uint16_t>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	460b      	mov	r3, r1
 80094ee:	b082      	sub	sp, #8
 80094f0:	4604      	mov	r4, r0
 80094f2:	2102      	movs	r1, #2
 80094f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80094f8:	f000 ff84 	bl	800a404 <ucdr_buffer_alignment>
 80094fc:	4601      	mov	r1, r0
 80094fe:	4620      	mov	r0, r4
 8009500:	7d67      	ldrb	r7, [r4, #21]
 8009502:	f000 ffc7 	bl	800a494 <ucdr_advance_buffer>
 8009506:	4620      	mov	r0, r4
 8009508:	2102      	movs	r1, #2
 800950a:	f000 ff1d 	bl	800a348 <ucdr_check_buffer_available_for>
 800950e:	bb78      	cbnz	r0, 8009570 <ucdr_serialize_uint16_t+0x88>
 8009510:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009514:	42ab      	cmp	r3, r5
 8009516:	d926      	bls.n	8009566 <ucdr_serialize_uint16_t+0x7e>
 8009518:	1b5e      	subs	r6, r3, r5
 800951a:	6922      	ldr	r2, [r4, #16]
 800951c:	4620      	mov	r0, r4
 800951e:	60a3      	str	r3, [r4, #8]
 8009520:	4432      	add	r2, r6
 8009522:	f1c6 0802 	rsb	r8, r6, #2
 8009526:	6122      	str	r2, [r4, #16]
 8009528:	4641      	mov	r1, r8
 800952a:	f000 ff19 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800952e:	2800      	cmp	r0, #0
 8009530:	d03b      	beq.n	80095aa <ucdr_serialize_uint16_t+0xc2>
 8009532:	7d23      	ldrb	r3, [r4, #20]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d04a      	beq.n	80095ce <ucdr_serialize_uint16_t+0xe6>
 8009538:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800953c:	702b      	strb	r3, [r5, #0]
 800953e:	2e00      	cmp	r6, #0
 8009540:	d040      	beq.n	80095c4 <ucdr_serialize_uint16_t+0xdc>
 8009542:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009546:	706b      	strb	r3, [r5, #1]
 8009548:	6923      	ldr	r3, [r4, #16]
 800954a:	2102      	movs	r1, #2
 800954c:	68a2      	ldr	r2, [r4, #8]
 800954e:	440b      	add	r3, r1
 8009550:	7da0      	ldrb	r0, [r4, #22]
 8009552:	4442      	add	r2, r8
 8009554:	7561      	strb	r1, [r4, #21]
 8009556:	1b9e      	subs	r6, r3, r6
 8009558:	f080 0001 	eor.w	r0, r0, #1
 800955c:	60a2      	str	r2, [r4, #8]
 800955e:	6126      	str	r6, [r4, #16]
 8009560:	b002      	add	sp, #8
 8009562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009566:	2102      	movs	r1, #2
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fef9 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800956e:	b190      	cbz	r0, 8009596 <ucdr_serialize_uint16_t+0xae>
 8009570:	7d23      	ldrb	r3, [r4, #20]
 8009572:	2b01      	cmp	r3, #1
 8009574:	68a3      	ldr	r3, [r4, #8]
 8009576:	d014      	beq.n	80095a2 <ucdr_serialize_uint16_t+0xba>
 8009578:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800957c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009580:	7019      	strb	r1, [r3, #0]
 8009582:	68a3      	ldr	r3, [r4, #8]
 8009584:	705a      	strb	r2, [r3, #1]
 8009586:	2102      	movs	r1, #2
 8009588:	68a2      	ldr	r2, [r4, #8]
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	440a      	add	r2, r1
 800958e:	7561      	strb	r1, [r4, #21]
 8009590:	440b      	add	r3, r1
 8009592:	60a2      	str	r2, [r4, #8]
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	7da0      	ldrb	r0, [r4, #22]
 8009598:	f080 0001 	eor.w	r0, r0, #1
 800959c:	b002      	add	sp, #8
 800959e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	e7ed      	b.n	8009586 <ucdr_serialize_uint16_t+0x9e>
 80095aa:	68a2      	ldr	r2, [r4, #8]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	7da0      	ldrb	r0, [r4, #22]
 80095b0:	1b92      	subs	r2, r2, r6
 80095b2:	1b9e      	subs	r6, r3, r6
 80095b4:	7567      	strb	r7, [r4, #21]
 80095b6:	f080 0001 	eor.w	r0, r0, #1
 80095ba:	60a2      	str	r2, [r4, #8]
 80095bc:	6126      	str	r6, [r4, #16]
 80095be:	b002      	add	sp, #8
 80095c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c4:	68a3      	ldr	r3, [r4, #8]
 80095c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	e7bc      	b.n	8009548 <ucdr_serialize_uint16_t+0x60>
 80095ce:	4628      	mov	r0, r5
 80095d0:	f10d 0506 	add.w	r5, sp, #6
 80095d4:	4632      	mov	r2, r6
 80095d6:	4629      	mov	r1, r5
 80095d8:	f008 ff3f 	bl	801245a <memcpy>
 80095dc:	4642      	mov	r2, r8
 80095de:	19a9      	adds	r1, r5, r6
 80095e0:	68a0      	ldr	r0, [r4, #8]
 80095e2:	f008 ff3a 	bl	801245a <memcpy>
 80095e6:	e7af      	b.n	8009548 <ucdr_serialize_uint16_t+0x60>

080095e8 <ucdr_serialize_endian_uint16_t>:
 80095e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	b083      	sub	sp, #12
 80095f0:	460d      	mov	r5, r1
 80095f2:	2102      	movs	r1, #2
 80095f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80095f8:	f000 ff04 	bl	800a404 <ucdr_buffer_alignment>
 80095fc:	4601      	mov	r1, r0
 80095fe:	4620      	mov	r0, r4
 8009600:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009604:	f000 ff46 	bl	800a494 <ucdr_advance_buffer>
 8009608:	4620      	mov	r0, r4
 800960a:	2102      	movs	r1, #2
 800960c:	f000 fe9c 	bl	800a348 <ucdr_check_buffer_available_for>
 8009610:	bb70      	cbnz	r0, 8009670 <ucdr_serialize_endian_uint16_t+0x88>
 8009612:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8009616:	42b3      	cmp	r3, r6
 8009618:	d925      	bls.n	8009666 <ucdr_serialize_endian_uint16_t+0x7e>
 800961a:	1b9f      	subs	r7, r3, r6
 800961c:	6922      	ldr	r2, [r4, #16]
 800961e:	4620      	mov	r0, r4
 8009620:	60a3      	str	r3, [r4, #8]
 8009622:	443a      	add	r2, r7
 8009624:	f1c7 0902 	rsb	r9, r7, #2
 8009628:	6122      	str	r2, [r4, #16]
 800962a:	4649      	mov	r1, r9
 800962c:	f000 fe98 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009630:	2800      	cmp	r0, #0
 8009632:	d039      	beq.n	80096a8 <ucdr_serialize_endian_uint16_t+0xc0>
 8009634:	2d01      	cmp	r5, #1
 8009636:	d04a      	beq.n	80096ce <ucdr_serialize_endian_uint16_t+0xe6>
 8009638:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800963c:	7033      	strb	r3, [r6, #0]
 800963e:	2f00      	cmp	r7, #0
 8009640:	d040      	beq.n	80096c4 <ucdr_serialize_endian_uint16_t+0xdc>
 8009642:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009646:	7073      	strb	r3, [r6, #1]
 8009648:	6923      	ldr	r3, [r4, #16]
 800964a:	2102      	movs	r1, #2
 800964c:	68a2      	ldr	r2, [r4, #8]
 800964e:	440b      	add	r3, r1
 8009650:	7da0      	ldrb	r0, [r4, #22]
 8009652:	444a      	add	r2, r9
 8009654:	7561      	strb	r1, [r4, #21]
 8009656:	1bdf      	subs	r7, r3, r7
 8009658:	f080 0001 	eor.w	r0, r0, #1
 800965c:	60a2      	str	r2, [r4, #8]
 800965e:	6127      	str	r7, [r4, #16]
 8009660:	b003      	add	sp, #12
 8009662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009666:	2102      	movs	r1, #2
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fe79 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800966e:	b188      	cbz	r0, 8009694 <ucdr_serialize_endian_uint16_t+0xac>
 8009670:	2d01      	cmp	r5, #1
 8009672:	68a3      	ldr	r3, [r4, #8]
 8009674:	d014      	beq.n	80096a0 <ucdr_serialize_endian_uint16_t+0xb8>
 8009676:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800967a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800967e:	7019      	strb	r1, [r3, #0]
 8009680:	68a3      	ldr	r3, [r4, #8]
 8009682:	705a      	strb	r2, [r3, #1]
 8009684:	2102      	movs	r1, #2
 8009686:	68a2      	ldr	r2, [r4, #8]
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	440a      	add	r2, r1
 800968c:	7561      	strb	r1, [r4, #21]
 800968e:	440b      	add	r3, r1
 8009690:	60a2      	str	r2, [r4, #8]
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	7da0      	ldrb	r0, [r4, #22]
 8009696:	f080 0001 	eor.w	r0, r0, #1
 800969a:	b003      	add	sp, #12
 800969c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80096a4:	801a      	strh	r2, [r3, #0]
 80096a6:	e7ed      	b.n	8009684 <ucdr_serialize_endian_uint16_t+0x9c>
 80096a8:	68a2      	ldr	r2, [r4, #8]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	7da0      	ldrb	r0, [r4, #22]
 80096ae:	1bd2      	subs	r2, r2, r7
 80096b0:	1bdf      	subs	r7, r3, r7
 80096b2:	f884 8015 	strb.w	r8, [r4, #21]
 80096b6:	f080 0001 	eor.w	r0, r0, #1
 80096ba:	60a2      	str	r2, [r4, #8]
 80096bc:	6127      	str	r7, [r4, #16]
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c4:	68a3      	ldr	r3, [r4, #8]
 80096c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80096ca:	701a      	strb	r2, [r3, #0]
 80096cc:	e7bc      	b.n	8009648 <ucdr_serialize_endian_uint16_t+0x60>
 80096ce:	f10d 0506 	add.w	r5, sp, #6
 80096d2:	463a      	mov	r2, r7
 80096d4:	4630      	mov	r0, r6
 80096d6:	4629      	mov	r1, r5
 80096d8:	f008 febf 	bl	801245a <memcpy>
 80096dc:	464a      	mov	r2, r9
 80096de:	19e9      	adds	r1, r5, r7
 80096e0:	68a0      	ldr	r0, [r4, #8]
 80096e2:	f008 feba 	bl	801245a <memcpy>
 80096e6:	e7af      	b.n	8009648 <ucdr_serialize_endian_uint16_t+0x60>

080096e8 <ucdr_deserialize_uint16_t>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	2102      	movs	r1, #2
 80096f2:	f000 fe87 	bl	800a404 <ucdr_buffer_alignment>
 80096f6:	4601      	mov	r1, r0
 80096f8:	4620      	mov	r0, r4
 80096fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80096fe:	f000 fec9 	bl	800a494 <ucdr_advance_buffer>
 8009702:	4620      	mov	r0, r4
 8009704:	2102      	movs	r1, #2
 8009706:	f000 fe1f 	bl	800a348 <ucdr_check_buffer_available_for>
 800970a:	bb60      	cbnz	r0, 8009766 <ucdr_deserialize_uint16_t+0x7e>
 800970c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8009710:	42b3      	cmp	r3, r6
 8009712:	d923      	bls.n	800975c <ucdr_deserialize_uint16_t+0x74>
 8009714:	1b9f      	subs	r7, r3, r6
 8009716:	6922      	ldr	r2, [r4, #16]
 8009718:	4620      	mov	r0, r4
 800971a:	60a3      	str	r3, [r4, #8]
 800971c:	443a      	add	r2, r7
 800971e:	f1c7 0902 	rsb	r9, r7, #2
 8009722:	6122      	str	r2, [r4, #16]
 8009724:	4649      	mov	r1, r9
 8009726:	f000 fe1b 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800972a:	2800      	cmp	r0, #0
 800972c:	d034      	beq.n	8009798 <ucdr_deserialize_uint16_t+0xb0>
 800972e:	7d23      	ldrb	r3, [r4, #20]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d042      	beq.n	80097ba <ucdr_deserialize_uint16_t+0xd2>
 8009734:	7873      	ldrb	r3, [r6, #1]
 8009736:	702b      	strb	r3, [r5, #0]
 8009738:	2f00      	cmp	r7, #0
 800973a:	d03a      	beq.n	80097b2 <ucdr_deserialize_uint16_t+0xca>
 800973c:	7833      	ldrb	r3, [r6, #0]
 800973e:	706b      	strb	r3, [r5, #1]
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	2102      	movs	r1, #2
 8009744:	68a2      	ldr	r2, [r4, #8]
 8009746:	440b      	add	r3, r1
 8009748:	7da0      	ldrb	r0, [r4, #22]
 800974a:	444a      	add	r2, r9
 800974c:	7561      	strb	r1, [r4, #21]
 800974e:	1bdf      	subs	r7, r3, r7
 8009750:	f080 0001 	eor.w	r0, r0, #1
 8009754:	60a2      	str	r2, [r4, #8]
 8009756:	6127      	str	r7, [r4, #16]
 8009758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975c:	2102      	movs	r1, #2
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fdfe 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009764:	b180      	cbz	r0, 8009788 <ucdr_deserialize_uint16_t+0xa0>
 8009766:	7d23      	ldrb	r3, [r4, #20]
 8009768:	2b01      	cmp	r3, #1
 800976a:	68a3      	ldr	r3, [r4, #8]
 800976c:	d011      	beq.n	8009792 <ucdr_deserialize_uint16_t+0xaa>
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	702b      	strb	r3, [r5, #0]
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	706b      	strb	r3, [r5, #1]
 8009778:	2102      	movs	r1, #2
 800977a:	68a2      	ldr	r2, [r4, #8]
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	440a      	add	r2, r1
 8009780:	7561      	strb	r1, [r4, #21]
 8009782:	440b      	add	r3, r1
 8009784:	60a2      	str	r2, [r4, #8]
 8009786:	6123      	str	r3, [r4, #16]
 8009788:	7da0      	ldrb	r0, [r4, #22]
 800978a:	f080 0001 	eor.w	r0, r0, #1
 800978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	802b      	strh	r3, [r5, #0]
 8009796:	e7ef      	b.n	8009778 <ucdr_deserialize_uint16_t+0x90>
 8009798:	68a2      	ldr	r2, [r4, #8]
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	1bd2      	subs	r2, r2, r7
 800979e:	7da0      	ldrb	r0, [r4, #22]
 80097a0:	1bdf      	subs	r7, r3, r7
 80097a2:	f884 8015 	strb.w	r8, [r4, #21]
 80097a6:	f080 0001 	eor.w	r0, r0, #1
 80097aa:	60a2      	str	r2, [r4, #8]
 80097ac:	6127      	str	r7, [r4, #16]
 80097ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	706b      	strb	r3, [r5, #1]
 80097b8:	e7c2      	b.n	8009740 <ucdr_deserialize_uint16_t+0x58>
 80097ba:	4631      	mov	r1, r6
 80097bc:	463a      	mov	r2, r7
 80097be:	4628      	mov	r0, r5
 80097c0:	f008 fe4b 	bl	801245a <memcpy>
 80097c4:	464a      	mov	r2, r9
 80097c6:	19e8      	adds	r0, r5, r7
 80097c8:	68a1      	ldr	r1, [r4, #8]
 80097ca:	f008 fe46 	bl	801245a <memcpy>
 80097ce:	e7b7      	b.n	8009740 <ucdr_deserialize_uint16_t+0x58>

080097d0 <ucdr_deserialize_endian_uint16_t>:
 80097d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	4604      	mov	r4, r0
 80097d6:	460e      	mov	r6, r1
 80097d8:	2102      	movs	r1, #2
 80097da:	4615      	mov	r5, r2
 80097dc:	f000 fe12 	bl	800a404 <ucdr_buffer_alignment>
 80097e0:	4601      	mov	r1, r0
 80097e2:	4620      	mov	r0, r4
 80097e4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80097e8:	f000 fe54 	bl	800a494 <ucdr_advance_buffer>
 80097ec:	4620      	mov	r0, r4
 80097ee:	2102      	movs	r1, #2
 80097f0:	f000 fdaa 	bl	800a348 <ucdr_check_buffer_available_for>
 80097f4:	bb70      	cbnz	r0, 8009854 <ucdr_deserialize_endian_uint16_t+0x84>
 80097f6:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80097fa:	42bb      	cmp	r3, r7
 80097fc:	d925      	bls.n	800984a <ucdr_deserialize_endian_uint16_t+0x7a>
 80097fe:	eba3 0907 	sub.w	r9, r3, r7
 8009802:	6922      	ldr	r2, [r4, #16]
 8009804:	4620      	mov	r0, r4
 8009806:	60a3      	str	r3, [r4, #8]
 8009808:	444a      	add	r2, r9
 800980a:	f1c9 0a02 	rsb	sl, r9, #2
 800980e:	6122      	str	r2, [r4, #16]
 8009810:	4651      	mov	r1, sl
 8009812:	f000 fda5 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009816:	2800      	cmp	r0, #0
 8009818:	d034      	beq.n	8009884 <ucdr_deserialize_endian_uint16_t+0xb4>
 800981a:	2e01      	cmp	r6, #1
 800981c:	d045      	beq.n	80098aa <ucdr_deserialize_endian_uint16_t+0xda>
 800981e:	787b      	ldrb	r3, [r7, #1]
 8009820:	702b      	strb	r3, [r5, #0]
 8009822:	f1b9 0f00 	cmp.w	r9, #0
 8009826:	d03c      	beq.n	80098a2 <ucdr_deserialize_endian_uint16_t+0xd2>
 8009828:	783b      	ldrb	r3, [r7, #0]
 800982a:	706b      	strb	r3, [r5, #1]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	2102      	movs	r1, #2
 8009830:	68a2      	ldr	r2, [r4, #8]
 8009832:	440b      	add	r3, r1
 8009834:	7da0      	ldrb	r0, [r4, #22]
 8009836:	4452      	add	r2, sl
 8009838:	7561      	strb	r1, [r4, #21]
 800983a:	eba3 0309 	sub.w	r3, r3, r9
 800983e:	f080 0001 	eor.w	r0, r0, #1
 8009842:	60a2      	str	r2, [r4, #8]
 8009844:	6123      	str	r3, [r4, #16]
 8009846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984a:	2102      	movs	r1, #2
 800984c:	4620      	mov	r0, r4
 800984e:	f000 fd87 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009852:	b178      	cbz	r0, 8009874 <ucdr_deserialize_endian_uint16_t+0xa4>
 8009854:	2e01      	cmp	r6, #1
 8009856:	68a3      	ldr	r3, [r4, #8]
 8009858:	d011      	beq.n	800987e <ucdr_deserialize_endian_uint16_t+0xae>
 800985a:	785b      	ldrb	r3, [r3, #1]
 800985c:	702b      	strb	r3, [r5, #0]
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	706b      	strb	r3, [r5, #1]
 8009864:	2102      	movs	r1, #2
 8009866:	68a2      	ldr	r2, [r4, #8]
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	440a      	add	r2, r1
 800986c:	7561      	strb	r1, [r4, #21]
 800986e:	440b      	add	r3, r1
 8009870:	60a2      	str	r2, [r4, #8]
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	7da0      	ldrb	r0, [r4, #22]
 8009876:	f080 0001 	eor.w	r0, r0, #1
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	802b      	strh	r3, [r5, #0]
 8009882:	e7ef      	b.n	8009864 <ucdr_deserialize_endian_uint16_t+0x94>
 8009884:	68a2      	ldr	r2, [r4, #8]
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	eba2 0209 	sub.w	r2, r2, r9
 800988c:	7da0      	ldrb	r0, [r4, #22]
 800988e:	eba3 0309 	sub.w	r3, r3, r9
 8009892:	f884 8015 	strb.w	r8, [r4, #21]
 8009896:	f080 0001 	eor.w	r0, r0, #1
 800989a:	60a2      	str	r2, [r4, #8]
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	706b      	strb	r3, [r5, #1]
 80098a8:	e7c0      	b.n	800982c <ucdr_deserialize_endian_uint16_t+0x5c>
 80098aa:	4639      	mov	r1, r7
 80098ac:	464a      	mov	r2, r9
 80098ae:	4628      	mov	r0, r5
 80098b0:	f008 fdd3 	bl	801245a <memcpy>
 80098b4:	4652      	mov	r2, sl
 80098b6:	eb05 0009 	add.w	r0, r5, r9
 80098ba:	68a1      	ldr	r1, [r4, #8]
 80098bc:	f008 fdcd 	bl	801245a <memcpy>
 80098c0:	e7b4      	b.n	800982c <ucdr_deserialize_endian_uint16_t+0x5c>
 80098c2:	bf00      	nop

080098c4 <ucdr_serialize_uint32_t>:
 80098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c8:	b082      	sub	sp, #8
 80098ca:	4604      	mov	r4, r0
 80098cc:	9101      	str	r1, [sp, #4]
 80098ce:	2104      	movs	r1, #4
 80098d0:	f000 fd98 	bl	800a404 <ucdr_buffer_alignment>
 80098d4:	4601      	mov	r1, r0
 80098d6:	4620      	mov	r0, r4
 80098d8:	7d67      	ldrb	r7, [r4, #21]
 80098da:	f000 fddb 	bl	800a494 <ucdr_advance_buffer>
 80098de:	4620      	mov	r0, r4
 80098e0:	2104      	movs	r1, #4
 80098e2:	f000 fd31 	bl	800a348 <ucdr_check_buffer_available_for>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d139      	bne.n	800995e <ucdr_serialize_uint32_t+0x9a>
 80098ea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80098ee:	42ab      	cmp	r3, r5
 80098f0:	d930      	bls.n	8009954 <ucdr_serialize_uint32_t+0x90>
 80098f2:	1b5e      	subs	r6, r3, r5
 80098f4:	6922      	ldr	r2, [r4, #16]
 80098f6:	4620      	mov	r0, r4
 80098f8:	60a3      	str	r3, [r4, #8]
 80098fa:	4432      	add	r2, r6
 80098fc:	f1c6 0804 	rsb	r8, r6, #4
 8009900:	6122      	str	r2, [r4, #16]
 8009902:	4641      	mov	r1, r8
 8009904:	f000 fd2c 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009908:	2800      	cmp	r0, #0
 800990a:	d04c      	beq.n	80099a6 <ucdr_serialize_uint32_t+0xe2>
 800990c:	7d23      	ldrb	r3, [r4, #20]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d063      	beq.n	80099da <ucdr_serialize_uint32_t+0x116>
 8009912:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009916:	702b      	strb	r3, [r5, #0]
 8009918:	2e00      	cmp	r6, #0
 800991a:	d051      	beq.n	80099c0 <ucdr_serialize_uint32_t+0xfc>
 800991c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009920:	2e01      	cmp	r6, #1
 8009922:	706b      	strb	r3, [r5, #1]
 8009924:	d050      	beq.n	80099c8 <ucdr_serialize_uint32_t+0x104>
 8009926:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800992a:	2e02      	cmp	r6, #2
 800992c:	70ab      	strb	r3, [r5, #2]
 800992e:	d04f      	beq.n	80099d0 <ucdr_serialize_uint32_t+0x10c>
 8009930:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009934:	70eb      	strb	r3, [r5, #3]
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	2104      	movs	r1, #4
 800993a:	68a2      	ldr	r2, [r4, #8]
 800993c:	440b      	add	r3, r1
 800993e:	7da0      	ldrb	r0, [r4, #22]
 8009940:	4442      	add	r2, r8
 8009942:	7561      	strb	r1, [r4, #21]
 8009944:	1b9e      	subs	r6, r3, r6
 8009946:	f080 0001 	eor.w	r0, r0, #1
 800994a:	60a2      	str	r2, [r4, #8]
 800994c:	6126      	str	r6, [r4, #16]
 800994e:	b002      	add	sp, #8
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009954:	2104      	movs	r1, #4
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fd02 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800995c:	b1d0      	cbz	r0, 8009994 <ucdr_serialize_uint32_t+0xd0>
 800995e:	7d23      	ldrb	r3, [r4, #20]
 8009960:	2b01      	cmp	r3, #1
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	d01c      	beq.n	80099a0 <ucdr_serialize_uint32_t+0xdc>
 8009966:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800996a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800996e:	7019      	strb	r1, [r3, #0]
 8009970:	68a3      	ldr	r3, [r4, #8]
 8009972:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8009976:	705a      	strb	r2, [r3, #1]
 8009978:	68a3      	ldr	r3, [r4, #8]
 800997a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800997e:	7099      	strb	r1, [r3, #2]
 8009980:	68a3      	ldr	r3, [r4, #8]
 8009982:	70da      	strb	r2, [r3, #3]
 8009984:	2104      	movs	r1, #4
 8009986:	68a2      	ldr	r2, [r4, #8]
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	440a      	add	r2, r1
 800998c:	7561      	strb	r1, [r4, #21]
 800998e:	440b      	add	r3, r1
 8009990:	60a2      	str	r2, [r4, #8]
 8009992:	6123      	str	r3, [r4, #16]
 8009994:	7da0      	ldrb	r0, [r4, #22]
 8009996:	f080 0001 	eor.w	r0, r0, #1
 800999a:	b002      	add	sp, #8
 800999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a0:	9a01      	ldr	r2, [sp, #4]
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	e7ee      	b.n	8009984 <ucdr_serialize_uint32_t+0xc0>
 80099a6:	68a2      	ldr	r2, [r4, #8]
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	7da0      	ldrb	r0, [r4, #22]
 80099ac:	1b92      	subs	r2, r2, r6
 80099ae:	1b9e      	subs	r6, r3, r6
 80099b0:	7567      	strb	r7, [r4, #21]
 80099b2:	f080 0001 	eor.w	r0, r0, #1
 80099b6:	60a2      	str	r2, [r4, #8]
 80099b8:	6126      	str	r6, [r4, #16]
 80099ba:	b002      	add	sp, #8
 80099bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c0:	68a3      	ldr	r3, [r4, #8]
 80099c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	68a3      	ldr	r3, [r4, #8]
 80099ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	68a3      	ldr	r3, [r4, #8]
 80099d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	e7ad      	b.n	8009936 <ucdr_serialize_uint32_t+0x72>
 80099da:	4628      	mov	r0, r5
 80099dc:	ad01      	add	r5, sp, #4
 80099de:	4632      	mov	r2, r6
 80099e0:	4629      	mov	r1, r5
 80099e2:	f008 fd3a 	bl	801245a <memcpy>
 80099e6:	4642      	mov	r2, r8
 80099e8:	19a9      	adds	r1, r5, r6
 80099ea:	68a0      	ldr	r0, [r4, #8]
 80099ec:	f008 fd35 	bl	801245a <memcpy>
 80099f0:	e7a1      	b.n	8009936 <ucdr_serialize_uint32_t+0x72>
 80099f2:	bf00      	nop

080099f4 <ucdr_serialize_endian_uint32_t>:
 80099f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099f8:	4604      	mov	r4, r0
 80099fa:	b083      	sub	sp, #12
 80099fc:	460d      	mov	r5, r1
 80099fe:	2104      	movs	r1, #4
 8009a00:	9201      	str	r2, [sp, #4]
 8009a02:	f000 fcff 	bl	800a404 <ucdr_buffer_alignment>
 8009a06:	4601      	mov	r1, r0
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009a0e:	f000 fd41 	bl	800a494 <ucdr_advance_buffer>
 8009a12:	4620      	mov	r0, r4
 8009a14:	2104      	movs	r1, #4
 8009a16:	f000 fc97 	bl	800a348 <ucdr_check_buffer_available_for>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d138      	bne.n	8009a90 <ucdr_serialize_endian_uint32_t+0x9c>
 8009a1e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8009a22:	42b3      	cmp	r3, r6
 8009a24:	d92f      	bls.n	8009a86 <ucdr_serialize_endian_uint32_t+0x92>
 8009a26:	1b9f      	subs	r7, r3, r6
 8009a28:	6922      	ldr	r2, [r4, #16]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	60a3      	str	r3, [r4, #8]
 8009a2e:	443a      	add	r2, r7
 8009a30:	f1c7 0904 	rsb	r9, r7, #4
 8009a34:	6122      	str	r2, [r4, #16]
 8009a36:	4649      	mov	r1, r9
 8009a38:	f000 fc92 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d04a      	beq.n	8009ad6 <ucdr_serialize_endian_uint32_t+0xe2>
 8009a40:	2d01      	cmp	r5, #1
 8009a42:	d063      	beq.n	8009b0c <ucdr_serialize_endian_uint32_t+0x118>
 8009a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009a48:	7033      	strb	r3, [r6, #0]
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	d051      	beq.n	8009af2 <ucdr_serialize_endian_uint32_t+0xfe>
 8009a4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009a52:	2f01      	cmp	r7, #1
 8009a54:	7073      	strb	r3, [r6, #1]
 8009a56:	d050      	beq.n	8009afa <ucdr_serialize_endian_uint32_t+0x106>
 8009a58:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009a5c:	2f02      	cmp	r7, #2
 8009a5e:	70b3      	strb	r3, [r6, #2]
 8009a60:	d04f      	beq.n	8009b02 <ucdr_serialize_endian_uint32_t+0x10e>
 8009a62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009a66:	70f3      	strb	r3, [r6, #3]
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	2104      	movs	r1, #4
 8009a6c:	68a2      	ldr	r2, [r4, #8]
 8009a6e:	440b      	add	r3, r1
 8009a70:	7da0      	ldrb	r0, [r4, #22]
 8009a72:	444a      	add	r2, r9
 8009a74:	7561      	strb	r1, [r4, #21]
 8009a76:	1bdf      	subs	r7, r3, r7
 8009a78:	f080 0001 	eor.w	r0, r0, #1
 8009a7c:	60a2      	str	r2, [r4, #8]
 8009a7e:	6127      	str	r7, [r4, #16]
 8009a80:	b003      	add	sp, #12
 8009a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a86:	2104      	movs	r1, #4
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fc69 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009a8e:	b1c8      	cbz	r0, 8009ac4 <ucdr_serialize_endian_uint32_t+0xd0>
 8009a90:	2d01      	cmp	r5, #1
 8009a92:	68a3      	ldr	r3, [r4, #8]
 8009a94:	d01c      	beq.n	8009ad0 <ucdr_serialize_endian_uint32_t+0xdc>
 8009a96:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009a9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a9e:	7019      	strb	r1, [r3, #0]
 8009aa0:	68a3      	ldr	r3, [r4, #8]
 8009aa2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8009aa6:	705a      	strb	r2, [r3, #1]
 8009aa8:	68a3      	ldr	r3, [r4, #8]
 8009aaa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009aae:	7099      	strb	r1, [r3, #2]
 8009ab0:	68a3      	ldr	r3, [r4, #8]
 8009ab2:	70da      	strb	r2, [r3, #3]
 8009ab4:	2104      	movs	r1, #4
 8009ab6:	68a2      	ldr	r2, [r4, #8]
 8009ab8:	6923      	ldr	r3, [r4, #16]
 8009aba:	440a      	add	r2, r1
 8009abc:	7561      	strb	r1, [r4, #21]
 8009abe:	440b      	add	r3, r1
 8009ac0:	60a2      	str	r2, [r4, #8]
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	7da0      	ldrb	r0, [r4, #22]
 8009ac6:	f080 0001 	eor.w	r0, r0, #1
 8009aca:	b003      	add	sp, #12
 8009acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	9a01      	ldr	r2, [sp, #4]
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	e7ee      	b.n	8009ab4 <ucdr_serialize_endian_uint32_t+0xc0>
 8009ad6:	68a2      	ldr	r2, [r4, #8]
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	7da0      	ldrb	r0, [r4, #22]
 8009adc:	1bd2      	subs	r2, r2, r7
 8009ade:	1bdf      	subs	r7, r3, r7
 8009ae0:	f884 8015 	strb.w	r8, [r4, #21]
 8009ae4:	f080 0001 	eor.w	r0, r0, #1
 8009ae8:	60a2      	str	r2, [r4, #8]
 8009aea:	6127      	str	r7, [r4, #16]
 8009aec:	b003      	add	sp, #12
 8009aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009af2:	68a3      	ldr	r3, [r4, #8]
 8009af4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	68a3      	ldr	r3, [r4, #8]
 8009afc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b00:	701a      	strb	r2, [r3, #0]
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	e7ad      	b.n	8009a68 <ucdr_serialize_endian_uint32_t+0x74>
 8009b0c:	ad01      	add	r5, sp, #4
 8009b0e:	463a      	mov	r2, r7
 8009b10:	4630      	mov	r0, r6
 8009b12:	4629      	mov	r1, r5
 8009b14:	f008 fca1 	bl	801245a <memcpy>
 8009b18:	464a      	mov	r2, r9
 8009b1a:	19e9      	adds	r1, r5, r7
 8009b1c:	68a0      	ldr	r0, [r4, #8]
 8009b1e:	f008 fc9c 	bl	801245a <memcpy>
 8009b22:	e7a1      	b.n	8009a68 <ucdr_serialize_endian_uint32_t+0x74>

08009b24 <ucdr_deserialize_uint32_t>:
 8009b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b28:	4604      	mov	r4, r0
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	f000 fc69 	bl	800a404 <ucdr_buffer_alignment>
 8009b32:	4601      	mov	r1, r0
 8009b34:	4620      	mov	r0, r4
 8009b36:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009b3a:	f000 fcab 	bl	800a494 <ucdr_advance_buffer>
 8009b3e:	4620      	mov	r0, r4
 8009b40:	2104      	movs	r1, #4
 8009b42:	f000 fc01 	bl	800a348 <ucdr_check_buffer_available_for>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d138      	bne.n	8009bbc <ucdr_deserialize_uint32_t+0x98>
 8009b4a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8009b4e:	42b3      	cmp	r3, r6
 8009b50:	d92f      	bls.n	8009bb2 <ucdr_deserialize_uint32_t+0x8e>
 8009b52:	1b9f      	subs	r7, r3, r6
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	4620      	mov	r0, r4
 8009b58:	60a3      	str	r3, [r4, #8]
 8009b5a:	443a      	add	r2, r7
 8009b5c:	f1c7 0904 	rsb	r9, r7, #4
 8009b60:	6122      	str	r2, [r4, #16]
 8009b62:	4649      	mov	r1, r9
 8009b64:	f000 fbfc 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d046      	beq.n	8009bfa <ucdr_deserialize_uint32_t+0xd6>
 8009b6c:	7d23      	ldrb	r3, [r4, #20]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d05c      	beq.n	8009c2c <ucdr_deserialize_uint32_t+0x108>
 8009b72:	78f3      	ldrb	r3, [r6, #3]
 8009b74:	702b      	strb	r3, [r5, #0]
 8009b76:	2f00      	cmp	r7, #0
 8009b78:	d04c      	beq.n	8009c14 <ucdr_deserialize_uint32_t+0xf0>
 8009b7a:	78b2      	ldrb	r2, [r6, #2]
 8009b7c:	2f01      	cmp	r7, #1
 8009b7e:	f105 0302 	add.w	r3, r5, #2
 8009b82:	706a      	strb	r2, [r5, #1]
 8009b84:	d04a      	beq.n	8009c1c <ucdr_deserialize_uint32_t+0xf8>
 8009b86:	7872      	ldrb	r2, [r6, #1]
 8009b88:	2f02      	cmp	r7, #2
 8009b8a:	f105 0303 	add.w	r3, r5, #3
 8009b8e:	70aa      	strb	r2, [r5, #2]
 8009b90:	d048      	beq.n	8009c24 <ucdr_deserialize_uint32_t+0x100>
 8009b92:	7833      	ldrb	r3, [r6, #0]
 8009b94:	70eb      	strb	r3, [r5, #3]
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	2104      	movs	r1, #4
 8009b9a:	68a2      	ldr	r2, [r4, #8]
 8009b9c:	440b      	add	r3, r1
 8009b9e:	7da0      	ldrb	r0, [r4, #22]
 8009ba0:	444a      	add	r2, r9
 8009ba2:	7561      	strb	r1, [r4, #21]
 8009ba4:	1bdf      	subs	r7, r3, r7
 8009ba6:	f080 0001 	eor.w	r0, r0, #1
 8009baa:	60a2      	str	r2, [r4, #8]
 8009bac:	6127      	str	r7, [r4, #16]
 8009bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 fbd3 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009bba:	b1b0      	cbz	r0, 8009bea <ucdr_deserialize_uint32_t+0xc6>
 8009bbc:	7d23      	ldrb	r3, [r4, #20]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	68a3      	ldr	r3, [r4, #8]
 8009bc2:	d017      	beq.n	8009bf4 <ucdr_deserialize_uint32_t+0xd0>
 8009bc4:	78db      	ldrb	r3, [r3, #3]
 8009bc6:	702b      	strb	r3, [r5, #0]
 8009bc8:	68a3      	ldr	r3, [r4, #8]
 8009bca:	789b      	ldrb	r3, [r3, #2]
 8009bcc:	706b      	strb	r3, [r5, #1]
 8009bce:	68a3      	ldr	r3, [r4, #8]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	70ab      	strb	r3, [r5, #2]
 8009bd4:	68a3      	ldr	r3, [r4, #8]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	70eb      	strb	r3, [r5, #3]
 8009bda:	2104      	movs	r1, #4
 8009bdc:	68a2      	ldr	r2, [r4, #8]
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	440a      	add	r2, r1
 8009be2:	7561      	strb	r1, [r4, #21]
 8009be4:	440b      	add	r3, r1
 8009be6:	60a2      	str	r2, [r4, #8]
 8009be8:	6123      	str	r3, [r4, #16]
 8009bea:	7da0      	ldrb	r0, [r4, #22]
 8009bec:	f080 0001 	eor.w	r0, r0, #1
 8009bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	602b      	str	r3, [r5, #0]
 8009bf8:	e7ef      	b.n	8009bda <ucdr_deserialize_uint32_t+0xb6>
 8009bfa:	68a2      	ldr	r2, [r4, #8]
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	1bd2      	subs	r2, r2, r7
 8009c00:	7da0      	ldrb	r0, [r4, #22]
 8009c02:	1bdf      	subs	r7, r3, r7
 8009c04:	f884 8015 	strb.w	r8, [r4, #21]
 8009c08:	f080 0001 	eor.w	r0, r0, #1
 8009c0c:	60a2      	str	r2, [r4, #8]
 8009c0e:	6127      	str	r7, [r4, #16]
 8009c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c14:	68a2      	ldr	r2, [r4, #8]
 8009c16:	1cab      	adds	r3, r5, #2
 8009c18:	7892      	ldrb	r2, [r2, #2]
 8009c1a:	706a      	strb	r2, [r5, #1]
 8009c1c:	68a2      	ldr	r2, [r4, #8]
 8009c1e:	7852      	ldrb	r2, [r2, #1]
 8009c20:	f803 2b01 	strb.w	r2, [r3], #1
 8009c24:	68a2      	ldr	r2, [r4, #8]
 8009c26:	7812      	ldrb	r2, [r2, #0]
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	e7b4      	b.n	8009b96 <ucdr_deserialize_uint32_t+0x72>
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	463a      	mov	r2, r7
 8009c30:	4628      	mov	r0, r5
 8009c32:	f008 fc12 	bl	801245a <memcpy>
 8009c36:	464a      	mov	r2, r9
 8009c38:	19e8      	adds	r0, r5, r7
 8009c3a:	68a1      	ldr	r1, [r4, #8]
 8009c3c:	f008 fc0d 	bl	801245a <memcpy>
 8009c40:	e7a9      	b.n	8009b96 <ucdr_deserialize_uint32_t+0x72>
 8009c42:	bf00      	nop

08009c44 <ucdr_deserialize_endian_uint32_t>:
 8009c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c48:	4604      	mov	r4, r0
 8009c4a:	460e      	mov	r6, r1
 8009c4c:	2104      	movs	r1, #4
 8009c4e:	4615      	mov	r5, r2
 8009c50:	f000 fbd8 	bl	800a404 <ucdr_buffer_alignment>
 8009c54:	4601      	mov	r1, r0
 8009c56:	4620      	mov	r0, r4
 8009c58:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009c5c:	f000 fc1a 	bl	800a494 <ucdr_advance_buffer>
 8009c60:	4620      	mov	r0, r4
 8009c62:	2104      	movs	r1, #4
 8009c64:	f000 fb70 	bl	800a348 <ucdr_check_buffer_available_for>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d13c      	bne.n	8009ce6 <ucdr_deserialize_endian_uint32_t+0xa2>
 8009c6c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009c70:	42bb      	cmp	r3, r7
 8009c72:	d933      	bls.n	8009cdc <ucdr_deserialize_endian_uint32_t+0x98>
 8009c74:	eba3 0907 	sub.w	r9, r3, r7
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	60a3      	str	r3, [r4, #8]
 8009c7e:	444a      	add	r2, r9
 8009c80:	f1c9 0a04 	rsb	sl, r9, #4
 8009c84:	6122      	str	r2, [r4, #16]
 8009c86:	4651      	mov	r1, sl
 8009c88:	f000 fb6a 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d048      	beq.n	8009d22 <ucdr_deserialize_endian_uint32_t+0xde>
 8009c90:	2e01      	cmp	r6, #1
 8009c92:	d061      	beq.n	8009d58 <ucdr_deserialize_endian_uint32_t+0x114>
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	702b      	strb	r3, [r5, #0]
 8009c98:	f1b9 0f00 	cmp.w	r9, #0
 8009c9c:	d050      	beq.n	8009d40 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009c9e:	78ba      	ldrb	r2, [r7, #2]
 8009ca0:	f1b9 0f01 	cmp.w	r9, #1
 8009ca4:	f105 0302 	add.w	r3, r5, #2
 8009ca8:	706a      	strb	r2, [r5, #1]
 8009caa:	d04d      	beq.n	8009d48 <ucdr_deserialize_endian_uint32_t+0x104>
 8009cac:	787a      	ldrb	r2, [r7, #1]
 8009cae:	f1b9 0f02 	cmp.w	r9, #2
 8009cb2:	f105 0303 	add.w	r3, r5, #3
 8009cb6:	70aa      	strb	r2, [r5, #2]
 8009cb8:	d04a      	beq.n	8009d50 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009cba:	783b      	ldrb	r3, [r7, #0]
 8009cbc:	70eb      	strb	r3, [r5, #3]
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	2104      	movs	r1, #4
 8009cc2:	68a2      	ldr	r2, [r4, #8]
 8009cc4:	440b      	add	r3, r1
 8009cc6:	7da0      	ldrb	r0, [r4, #22]
 8009cc8:	4452      	add	r2, sl
 8009cca:	7561      	strb	r1, [r4, #21]
 8009ccc:	eba3 0309 	sub.w	r3, r3, r9
 8009cd0:	f080 0001 	eor.w	r0, r0, #1
 8009cd4:	60a2      	str	r2, [r4, #8]
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cdc:	2104      	movs	r1, #4
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 fb3e 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009ce4:	b1a8      	cbz	r0, 8009d12 <ucdr_deserialize_endian_uint32_t+0xce>
 8009ce6:	2e01      	cmp	r6, #1
 8009ce8:	68a3      	ldr	r3, [r4, #8]
 8009cea:	d017      	beq.n	8009d1c <ucdr_deserialize_endian_uint32_t+0xd8>
 8009cec:	78db      	ldrb	r3, [r3, #3]
 8009cee:	702b      	strb	r3, [r5, #0]
 8009cf0:	68a3      	ldr	r3, [r4, #8]
 8009cf2:	789b      	ldrb	r3, [r3, #2]
 8009cf4:	706b      	strb	r3, [r5, #1]
 8009cf6:	68a3      	ldr	r3, [r4, #8]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	70ab      	strb	r3, [r5, #2]
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	70eb      	strb	r3, [r5, #3]
 8009d02:	2104      	movs	r1, #4
 8009d04:	68a2      	ldr	r2, [r4, #8]
 8009d06:	6923      	ldr	r3, [r4, #16]
 8009d08:	440a      	add	r2, r1
 8009d0a:	7561      	strb	r1, [r4, #21]
 8009d0c:	440b      	add	r3, r1
 8009d0e:	60a2      	str	r2, [r4, #8]
 8009d10:	6123      	str	r3, [r4, #16]
 8009d12:	7da0      	ldrb	r0, [r4, #22]
 8009d14:	f080 0001 	eor.w	r0, r0, #1
 8009d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	e7ef      	b.n	8009d02 <ucdr_deserialize_endian_uint32_t+0xbe>
 8009d22:	68a2      	ldr	r2, [r4, #8]
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	eba2 0209 	sub.w	r2, r2, r9
 8009d2a:	7da0      	ldrb	r0, [r4, #22]
 8009d2c:	eba3 0309 	sub.w	r3, r3, r9
 8009d30:	f884 8015 	strb.w	r8, [r4, #21]
 8009d34:	f080 0001 	eor.w	r0, r0, #1
 8009d38:	60a2      	str	r2, [r4, #8]
 8009d3a:	6123      	str	r3, [r4, #16]
 8009d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d40:	68a2      	ldr	r2, [r4, #8]
 8009d42:	1cab      	adds	r3, r5, #2
 8009d44:	7892      	ldrb	r2, [r2, #2]
 8009d46:	706a      	strb	r2, [r5, #1]
 8009d48:	68a2      	ldr	r2, [r4, #8]
 8009d4a:	7852      	ldrb	r2, [r2, #1]
 8009d4c:	f803 2b01 	strb.w	r2, [r3], #1
 8009d50:	68a2      	ldr	r2, [r4, #8]
 8009d52:	7812      	ldrb	r2, [r2, #0]
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	e7b2      	b.n	8009cbe <ucdr_deserialize_endian_uint32_t+0x7a>
 8009d58:	4639      	mov	r1, r7
 8009d5a:	464a      	mov	r2, r9
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f008 fb7c 	bl	801245a <memcpy>
 8009d62:	4652      	mov	r2, sl
 8009d64:	eb05 0009 	add.w	r0, r5, r9
 8009d68:	68a1      	ldr	r1, [r4, #8]
 8009d6a:	f008 fb76 	bl	801245a <memcpy>
 8009d6e:	e7a6      	b.n	8009cbe <ucdr_deserialize_endian_uint32_t+0x7a>

08009d70 <ucdr_serialize_uint64_t>:
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4604      	mov	r4, r0
 8009d76:	b082      	sub	sp, #8
 8009d78:	2108      	movs	r1, #8
 8009d7a:	e9cd 2300 	strd	r2, r3, [sp]
 8009d7e:	f000 fb41 	bl	800a404 <ucdr_buffer_alignment>
 8009d82:	4601      	mov	r1, r0
 8009d84:	4620      	mov	r0, r4
 8009d86:	7d67      	ldrb	r7, [r4, #21]
 8009d88:	f000 fb84 	bl	800a494 <ucdr_advance_buffer>
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	2108      	movs	r1, #8
 8009d90:	f000 fada 	bl	800a348 <ucdr_check_buffer_available_for>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d14e      	bne.n	8009e36 <ucdr_serialize_uint64_t+0xc6>
 8009d98:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	d945      	bls.n	8009e2c <ucdr_serialize_uint64_t+0xbc>
 8009da0:	1b5e      	subs	r6, r3, r5
 8009da2:	6922      	ldr	r2, [r4, #16]
 8009da4:	4620      	mov	r0, r4
 8009da6:	60a3      	str	r3, [r4, #8]
 8009da8:	4432      	add	r2, r6
 8009daa:	f1c6 0808 	rsb	r8, r6, #8
 8009dae:	6122      	str	r2, [r4, #16]
 8009db0:	4641      	mov	r1, r8
 8009db2:	f000 fad5 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d074      	beq.n	8009ea4 <ucdr_serialize_uint64_t+0x134>
 8009dba:	7d23      	ldrb	r3, [r4, #20]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	f000 809b 	beq.w	8009ef8 <ucdr_serialize_uint64_t+0x188>
 8009dc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009dc6:	702b      	strb	r3, [r5, #0]
 8009dc8:	2e00      	cmp	r6, #0
 8009dca:	d078      	beq.n	8009ebe <ucdr_serialize_uint64_t+0x14e>
 8009dcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009dd0:	2e01      	cmp	r6, #1
 8009dd2:	706b      	strb	r3, [r5, #1]
 8009dd4:	d077      	beq.n	8009ec6 <ucdr_serialize_uint64_t+0x156>
 8009dd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009dda:	2e02      	cmp	r6, #2
 8009ddc:	70ab      	strb	r3, [r5, #2]
 8009dde:	d076      	beq.n	8009ece <ucdr_serialize_uint64_t+0x15e>
 8009de0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009de4:	2e03      	cmp	r6, #3
 8009de6:	70eb      	strb	r3, [r5, #3]
 8009de8:	d075      	beq.n	8009ed6 <ucdr_serialize_uint64_t+0x166>
 8009dea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009dee:	2e04      	cmp	r6, #4
 8009df0:	712b      	strb	r3, [r5, #4]
 8009df2:	d074      	beq.n	8009ede <ucdr_serialize_uint64_t+0x16e>
 8009df4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009df8:	2e05      	cmp	r6, #5
 8009dfa:	716b      	strb	r3, [r5, #5]
 8009dfc:	d073      	beq.n	8009ee6 <ucdr_serialize_uint64_t+0x176>
 8009dfe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009e02:	2e06      	cmp	r6, #6
 8009e04:	71ab      	strb	r3, [r5, #6]
 8009e06:	d072      	beq.n	8009eee <ucdr_serialize_uint64_t+0x17e>
 8009e08:	f89d 3000 	ldrb.w	r3, [sp]
 8009e0c:	71eb      	strb	r3, [r5, #7]
 8009e0e:	6923      	ldr	r3, [r4, #16]
 8009e10:	2108      	movs	r1, #8
 8009e12:	68a2      	ldr	r2, [r4, #8]
 8009e14:	440b      	add	r3, r1
 8009e16:	7da0      	ldrb	r0, [r4, #22]
 8009e18:	4442      	add	r2, r8
 8009e1a:	7561      	strb	r1, [r4, #21]
 8009e1c:	1b9e      	subs	r6, r3, r6
 8009e1e:	f080 0001 	eor.w	r0, r0, #1
 8009e22:	60a2      	str	r2, [r4, #8]
 8009e24:	6126      	str	r6, [r4, #16]
 8009e26:	b002      	add	sp, #8
 8009e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e2c:	2108      	movs	r1, #8
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 fa96 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009e34:	b350      	cbz	r0, 8009e8c <ucdr_serialize_uint64_t+0x11c>
 8009e36:	7d23      	ldrb	r3, [r4, #20]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d02d      	beq.n	8009e98 <ucdr_serialize_uint64_t+0x128>
 8009e3c:	68a3      	ldr	r3, [r4, #8]
 8009e3e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009e42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009e46:	7019      	strb	r1, [r3, #0]
 8009e48:	68a3      	ldr	r3, [r4, #8]
 8009e4a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8009e4e:	705a      	strb	r2, [r3, #1]
 8009e50:	68a3      	ldr	r3, [r4, #8]
 8009e52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009e56:	7099      	strb	r1, [r3, #2]
 8009e58:	68a3      	ldr	r3, [r4, #8]
 8009e5a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009e5e:	70da      	strb	r2, [r3, #3]
 8009e60:	68a3      	ldr	r3, [r4, #8]
 8009e62:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009e66:	7119      	strb	r1, [r3, #4]
 8009e68:	68a3      	ldr	r3, [r4, #8]
 8009e6a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8009e6e:	715a      	strb	r2, [r3, #5]
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	f89d 2000 	ldrb.w	r2, [sp]
 8009e76:	7199      	strb	r1, [r3, #6]
 8009e78:	68a3      	ldr	r3, [r4, #8]
 8009e7a:	71da      	strb	r2, [r3, #7]
 8009e7c:	2108      	movs	r1, #8
 8009e7e:	68a2      	ldr	r2, [r4, #8]
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	440a      	add	r2, r1
 8009e84:	7561      	strb	r1, [r4, #21]
 8009e86:	440b      	add	r3, r1
 8009e88:	60a2      	str	r2, [r4, #8]
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	7da0      	ldrb	r0, [r4, #22]
 8009e8e:	f080 0001 	eor.w	r0, r0, #1
 8009e92:	b002      	add	sp, #8
 8009e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e98:	466b      	mov	r3, sp
 8009e9a:	68a2      	ldr	r2, [r4, #8]
 8009e9c:	cb03      	ldmia	r3!, {r0, r1}
 8009e9e:	6010      	str	r0, [r2, #0]
 8009ea0:	6051      	str	r1, [r2, #4]
 8009ea2:	e7eb      	b.n	8009e7c <ucdr_serialize_uint64_t+0x10c>
 8009ea4:	68a2      	ldr	r2, [r4, #8]
 8009ea6:	6923      	ldr	r3, [r4, #16]
 8009ea8:	7da0      	ldrb	r0, [r4, #22]
 8009eaa:	1b92      	subs	r2, r2, r6
 8009eac:	1b9e      	subs	r6, r3, r6
 8009eae:	7567      	strb	r7, [r4, #21]
 8009eb0:	f080 0001 	eor.w	r0, r0, #1
 8009eb4:	60a2      	str	r2, [r4, #8]
 8009eb6:	6126      	str	r6, [r4, #16]
 8009eb8:	b002      	add	sp, #8
 8009eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	68a3      	ldr	r3, [r4, #8]
 8009ec8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	68a3      	ldr	r3, [r4, #8]
 8009ed0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	68a3      	ldr	r3, [r4, #8]
 8009ed8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009edc:	701a      	strb	r2, [r3, #0]
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	68a3      	ldr	r3, [r4, #8]
 8009ef0:	f89d 2000 	ldrb.w	r2, [sp]
 8009ef4:	701a      	strb	r2, [r3, #0]
 8009ef6:	e78a      	b.n	8009e0e <ucdr_serialize_uint64_t+0x9e>
 8009ef8:	4628      	mov	r0, r5
 8009efa:	466d      	mov	r5, sp
 8009efc:	4632      	mov	r2, r6
 8009efe:	4629      	mov	r1, r5
 8009f00:	f008 faab 	bl	801245a <memcpy>
 8009f04:	4642      	mov	r2, r8
 8009f06:	19a9      	adds	r1, r5, r6
 8009f08:	68a0      	ldr	r0, [r4, #8]
 8009f0a:	f008 faa6 	bl	801245a <memcpy>
 8009f0e:	e77e      	b.n	8009e0e <ucdr_serialize_uint64_t+0x9e>

08009f10 <ucdr_serialize_int16_t>:
 8009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	460b      	mov	r3, r1
 8009f16:	b082      	sub	sp, #8
 8009f18:	4604      	mov	r4, r0
 8009f1a:	2102      	movs	r1, #2
 8009f1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009f20:	f000 fa70 	bl	800a404 <ucdr_buffer_alignment>
 8009f24:	4601      	mov	r1, r0
 8009f26:	4620      	mov	r0, r4
 8009f28:	7d67      	ldrb	r7, [r4, #21]
 8009f2a:	f000 fab3 	bl	800a494 <ucdr_advance_buffer>
 8009f2e:	4620      	mov	r0, r4
 8009f30:	2102      	movs	r1, #2
 8009f32:	f000 fa09 	bl	800a348 <ucdr_check_buffer_available_for>
 8009f36:	bb78      	cbnz	r0, 8009f98 <ucdr_serialize_int16_t+0x88>
 8009f38:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	d926      	bls.n	8009f8e <ucdr_serialize_int16_t+0x7e>
 8009f40:	1b5e      	subs	r6, r3, r5
 8009f42:	6922      	ldr	r2, [r4, #16]
 8009f44:	4620      	mov	r0, r4
 8009f46:	60a3      	str	r3, [r4, #8]
 8009f48:	4432      	add	r2, r6
 8009f4a:	f1c6 0802 	rsb	r8, r6, #2
 8009f4e:	6122      	str	r2, [r4, #16]
 8009f50:	4641      	mov	r1, r8
 8009f52:	f000 fa05 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d03b      	beq.n	8009fd2 <ucdr_serialize_int16_t+0xc2>
 8009f5a:	7d23      	ldrb	r3, [r4, #20]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d04a      	beq.n	8009ff6 <ucdr_serialize_int16_t+0xe6>
 8009f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009f64:	702b      	strb	r3, [r5, #0]
 8009f66:	2e00      	cmp	r6, #0
 8009f68:	d040      	beq.n	8009fec <ucdr_serialize_int16_t+0xdc>
 8009f6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009f6e:	706b      	strb	r3, [r5, #1]
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	2102      	movs	r1, #2
 8009f74:	68a2      	ldr	r2, [r4, #8]
 8009f76:	440b      	add	r3, r1
 8009f78:	7da0      	ldrb	r0, [r4, #22]
 8009f7a:	4442      	add	r2, r8
 8009f7c:	7561      	strb	r1, [r4, #21]
 8009f7e:	1b9e      	subs	r6, r3, r6
 8009f80:	f080 0001 	eor.w	r0, r0, #1
 8009f84:	60a2      	str	r2, [r4, #8]
 8009f86:	6126      	str	r6, [r4, #16]
 8009f88:	b002      	add	sp, #8
 8009f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f8e:	2102      	movs	r1, #2
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 f9e5 	bl	800a360 <ucdr_check_final_buffer_behavior>
 8009f96:	b190      	cbz	r0, 8009fbe <ucdr_serialize_int16_t+0xae>
 8009f98:	7d23      	ldrb	r3, [r4, #20]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	68a3      	ldr	r3, [r4, #8]
 8009f9e:	d014      	beq.n	8009fca <ucdr_serialize_int16_t+0xba>
 8009fa0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009fa4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009fa8:	7019      	strb	r1, [r3, #0]
 8009faa:	68a3      	ldr	r3, [r4, #8]
 8009fac:	705a      	strb	r2, [r3, #1]
 8009fae:	2102      	movs	r1, #2
 8009fb0:	68a2      	ldr	r2, [r4, #8]
 8009fb2:	6923      	ldr	r3, [r4, #16]
 8009fb4:	440a      	add	r2, r1
 8009fb6:	7561      	strb	r1, [r4, #21]
 8009fb8:	440b      	add	r3, r1
 8009fba:	60a2      	str	r2, [r4, #8]
 8009fbc:	6123      	str	r3, [r4, #16]
 8009fbe:	7da0      	ldrb	r0, [r4, #22]
 8009fc0:	f080 0001 	eor.w	r0, r0, #1
 8009fc4:	b002      	add	sp, #8
 8009fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009fce:	801a      	strh	r2, [r3, #0]
 8009fd0:	e7ed      	b.n	8009fae <ucdr_serialize_int16_t+0x9e>
 8009fd2:	68a2      	ldr	r2, [r4, #8]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	7da0      	ldrb	r0, [r4, #22]
 8009fd8:	1b92      	subs	r2, r2, r6
 8009fda:	1b9e      	subs	r6, r3, r6
 8009fdc:	7567      	strb	r7, [r4, #21]
 8009fde:	f080 0001 	eor.w	r0, r0, #1
 8009fe2:	60a2      	str	r2, [r4, #8]
 8009fe4:	6126      	str	r6, [r4, #16]
 8009fe6:	b002      	add	sp, #8
 8009fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	e7bc      	b.n	8009f70 <ucdr_serialize_int16_t+0x60>
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f10d 0506 	add.w	r5, sp, #6
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	4629      	mov	r1, r5
 800a000:	f008 fa2b 	bl	801245a <memcpy>
 800a004:	4642      	mov	r2, r8
 800a006:	19a9      	adds	r1, r5, r6
 800a008:	68a0      	ldr	r0, [r4, #8]
 800a00a:	f008 fa26 	bl	801245a <memcpy>
 800a00e:	e7af      	b.n	8009f70 <ucdr_serialize_int16_t+0x60>

0800a010 <ucdr_deserialize_int16_t>:
 800a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a014:	4604      	mov	r4, r0
 800a016:	460d      	mov	r5, r1
 800a018:	2102      	movs	r1, #2
 800a01a:	f000 f9f3 	bl	800a404 <ucdr_buffer_alignment>
 800a01e:	4601      	mov	r1, r0
 800a020:	4620      	mov	r0, r4
 800a022:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a026:	f000 fa35 	bl	800a494 <ucdr_advance_buffer>
 800a02a:	4620      	mov	r0, r4
 800a02c:	2102      	movs	r1, #2
 800a02e:	f000 f98b 	bl	800a348 <ucdr_check_buffer_available_for>
 800a032:	bb60      	cbnz	r0, 800a08e <ucdr_deserialize_int16_t+0x7e>
 800a034:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800a038:	42b3      	cmp	r3, r6
 800a03a:	d923      	bls.n	800a084 <ucdr_deserialize_int16_t+0x74>
 800a03c:	1b9f      	subs	r7, r3, r6
 800a03e:	6922      	ldr	r2, [r4, #16]
 800a040:	4620      	mov	r0, r4
 800a042:	60a3      	str	r3, [r4, #8]
 800a044:	443a      	add	r2, r7
 800a046:	f1c7 0902 	rsb	r9, r7, #2
 800a04a:	6122      	str	r2, [r4, #16]
 800a04c:	4649      	mov	r1, r9
 800a04e:	f000 f987 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800a052:	2800      	cmp	r0, #0
 800a054:	d034      	beq.n	800a0c0 <ucdr_deserialize_int16_t+0xb0>
 800a056:	7d23      	ldrb	r3, [r4, #20]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d042      	beq.n	800a0e2 <ucdr_deserialize_int16_t+0xd2>
 800a05c:	7873      	ldrb	r3, [r6, #1]
 800a05e:	702b      	strb	r3, [r5, #0]
 800a060:	2f00      	cmp	r7, #0
 800a062:	d03a      	beq.n	800a0da <ucdr_deserialize_int16_t+0xca>
 800a064:	7833      	ldrb	r3, [r6, #0]
 800a066:	706b      	strb	r3, [r5, #1]
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	2102      	movs	r1, #2
 800a06c:	68a2      	ldr	r2, [r4, #8]
 800a06e:	440b      	add	r3, r1
 800a070:	7da0      	ldrb	r0, [r4, #22]
 800a072:	444a      	add	r2, r9
 800a074:	7561      	strb	r1, [r4, #21]
 800a076:	1bdf      	subs	r7, r3, r7
 800a078:	f080 0001 	eor.w	r0, r0, #1
 800a07c:	60a2      	str	r2, [r4, #8]
 800a07e:	6127      	str	r7, [r4, #16]
 800a080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a084:	2102      	movs	r1, #2
 800a086:	4620      	mov	r0, r4
 800a088:	f000 f96a 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800a08c:	b180      	cbz	r0, 800a0b0 <ucdr_deserialize_int16_t+0xa0>
 800a08e:	7d23      	ldrb	r3, [r4, #20]
 800a090:	2b01      	cmp	r3, #1
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	d011      	beq.n	800a0ba <ucdr_deserialize_int16_t+0xaa>
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	702b      	strb	r3, [r5, #0]
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	706b      	strb	r3, [r5, #1]
 800a0a0:	2102      	movs	r1, #2
 800a0a2:	68a2      	ldr	r2, [r4, #8]
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	7561      	strb	r1, [r4, #21]
 800a0aa:	440b      	add	r3, r1
 800a0ac:	60a2      	str	r2, [r4, #8]
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	7da0      	ldrb	r0, [r4, #22]
 800a0b2:	f080 0001 	eor.w	r0, r0, #1
 800a0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	802b      	strh	r3, [r5, #0]
 800a0be:	e7ef      	b.n	800a0a0 <ucdr_deserialize_int16_t+0x90>
 800a0c0:	68a2      	ldr	r2, [r4, #8]
 800a0c2:	6923      	ldr	r3, [r4, #16]
 800a0c4:	1bd2      	subs	r2, r2, r7
 800a0c6:	7da0      	ldrb	r0, [r4, #22]
 800a0c8:	1bdf      	subs	r7, r3, r7
 800a0ca:	f884 8015 	strb.w	r8, [r4, #21]
 800a0ce:	f080 0001 	eor.w	r0, r0, #1
 800a0d2:	60a2      	str	r2, [r4, #8]
 800a0d4:	6127      	str	r7, [r4, #16]
 800a0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	706b      	strb	r3, [r5, #1]
 800a0e0:	e7c2      	b.n	800a068 <ucdr_deserialize_int16_t+0x58>
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	463a      	mov	r2, r7
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f008 f9b7 	bl	801245a <memcpy>
 800a0ec:	464a      	mov	r2, r9
 800a0ee:	19e8      	adds	r0, r5, r7
 800a0f0:	68a1      	ldr	r1, [r4, #8]
 800a0f2:	f008 f9b2 	bl	801245a <memcpy>
 800a0f6:	e7b7      	b.n	800a068 <ucdr_deserialize_int16_t+0x58>

0800a0f8 <ucdr_serialize_int32_t>:
 800a0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	4604      	mov	r4, r0
 800a100:	9101      	str	r1, [sp, #4]
 800a102:	2104      	movs	r1, #4
 800a104:	f000 f97e 	bl	800a404 <ucdr_buffer_alignment>
 800a108:	4601      	mov	r1, r0
 800a10a:	4620      	mov	r0, r4
 800a10c:	7d67      	ldrb	r7, [r4, #21]
 800a10e:	f000 f9c1 	bl	800a494 <ucdr_advance_buffer>
 800a112:	4620      	mov	r0, r4
 800a114:	2104      	movs	r1, #4
 800a116:	f000 f917 	bl	800a348 <ucdr_check_buffer_available_for>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d139      	bne.n	800a192 <ucdr_serialize_int32_t+0x9a>
 800a11e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a122:	42ab      	cmp	r3, r5
 800a124:	d930      	bls.n	800a188 <ucdr_serialize_int32_t+0x90>
 800a126:	1b5e      	subs	r6, r3, r5
 800a128:	6922      	ldr	r2, [r4, #16]
 800a12a:	4620      	mov	r0, r4
 800a12c:	60a3      	str	r3, [r4, #8]
 800a12e:	4432      	add	r2, r6
 800a130:	f1c6 0804 	rsb	r8, r6, #4
 800a134:	6122      	str	r2, [r4, #16]
 800a136:	4641      	mov	r1, r8
 800a138:	f000 f912 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d04c      	beq.n	800a1da <ucdr_serialize_int32_t+0xe2>
 800a140:	7d23      	ldrb	r3, [r4, #20]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d063      	beq.n	800a20e <ucdr_serialize_int32_t+0x116>
 800a146:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a14a:	702b      	strb	r3, [r5, #0]
 800a14c:	2e00      	cmp	r6, #0
 800a14e:	d051      	beq.n	800a1f4 <ucdr_serialize_int32_t+0xfc>
 800a150:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a154:	2e01      	cmp	r6, #1
 800a156:	706b      	strb	r3, [r5, #1]
 800a158:	d050      	beq.n	800a1fc <ucdr_serialize_int32_t+0x104>
 800a15a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a15e:	2e02      	cmp	r6, #2
 800a160:	70ab      	strb	r3, [r5, #2]
 800a162:	d04f      	beq.n	800a204 <ucdr_serialize_int32_t+0x10c>
 800a164:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a168:	70eb      	strb	r3, [r5, #3]
 800a16a:	6923      	ldr	r3, [r4, #16]
 800a16c:	2104      	movs	r1, #4
 800a16e:	68a2      	ldr	r2, [r4, #8]
 800a170:	440b      	add	r3, r1
 800a172:	7da0      	ldrb	r0, [r4, #22]
 800a174:	4442      	add	r2, r8
 800a176:	7561      	strb	r1, [r4, #21]
 800a178:	1b9e      	subs	r6, r3, r6
 800a17a:	f080 0001 	eor.w	r0, r0, #1
 800a17e:	60a2      	str	r2, [r4, #8]
 800a180:	6126      	str	r6, [r4, #16]
 800a182:	b002      	add	sp, #8
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a188:	2104      	movs	r1, #4
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 f8e8 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800a190:	b1d0      	cbz	r0, 800a1c8 <ucdr_serialize_int32_t+0xd0>
 800a192:	7d23      	ldrb	r3, [r4, #20]
 800a194:	2b01      	cmp	r3, #1
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	d01c      	beq.n	800a1d4 <ucdr_serialize_int32_t+0xdc>
 800a19a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800a19e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a1a2:	7019      	strb	r1, [r3, #0]
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800a1aa:	705a      	strb	r2, [r3, #1]
 800a1ac:	68a3      	ldr	r3, [r4, #8]
 800a1ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a1b2:	7099      	strb	r1, [r3, #2]
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	70da      	strb	r2, [r3, #3]
 800a1b8:	2104      	movs	r1, #4
 800a1ba:	68a2      	ldr	r2, [r4, #8]
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	440a      	add	r2, r1
 800a1c0:	7561      	strb	r1, [r4, #21]
 800a1c2:	440b      	add	r3, r1
 800a1c4:	60a2      	str	r2, [r4, #8]
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	7da0      	ldrb	r0, [r4, #22]
 800a1ca:	f080 0001 	eor.w	r0, r0, #1
 800a1ce:	b002      	add	sp, #8
 800a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d4:	9a01      	ldr	r2, [sp, #4]
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	e7ee      	b.n	800a1b8 <ucdr_serialize_int32_t+0xc0>
 800a1da:	68a2      	ldr	r2, [r4, #8]
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	7da0      	ldrb	r0, [r4, #22]
 800a1e0:	1b92      	subs	r2, r2, r6
 800a1e2:	1b9e      	subs	r6, r3, r6
 800a1e4:	7567      	strb	r7, [r4, #21]
 800a1e6:	f080 0001 	eor.w	r0, r0, #1
 800a1ea:	60a2      	str	r2, [r4, #8]
 800a1ec:	6126      	str	r6, [r4, #16]
 800a1ee:	b002      	add	sp, #8
 800a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f4:	68a3      	ldr	r3, [r4, #8]
 800a1f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	68a3      	ldr	r3, [r4, #8]
 800a206:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a20a:	701a      	strb	r2, [r3, #0]
 800a20c:	e7ad      	b.n	800a16a <ucdr_serialize_int32_t+0x72>
 800a20e:	4628      	mov	r0, r5
 800a210:	ad01      	add	r5, sp, #4
 800a212:	4632      	mov	r2, r6
 800a214:	4629      	mov	r1, r5
 800a216:	f008 f920 	bl	801245a <memcpy>
 800a21a:	4642      	mov	r2, r8
 800a21c:	19a9      	adds	r1, r5, r6
 800a21e:	68a0      	ldr	r0, [r4, #8]
 800a220:	f008 f91b 	bl	801245a <memcpy>
 800a224:	e7a1      	b.n	800a16a <ucdr_serialize_int32_t+0x72>
 800a226:	bf00      	nop

0800a228 <ucdr_deserialize_int32_t>:
 800a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	2104      	movs	r1, #4
 800a232:	f000 f8e7 	bl	800a404 <ucdr_buffer_alignment>
 800a236:	4601      	mov	r1, r0
 800a238:	4620      	mov	r0, r4
 800a23a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a23e:	f000 f929 	bl	800a494 <ucdr_advance_buffer>
 800a242:	4620      	mov	r0, r4
 800a244:	2104      	movs	r1, #4
 800a246:	f000 f87f 	bl	800a348 <ucdr_check_buffer_available_for>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d138      	bne.n	800a2c0 <ucdr_deserialize_int32_t+0x98>
 800a24e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800a252:	42b3      	cmp	r3, r6
 800a254:	d92f      	bls.n	800a2b6 <ucdr_deserialize_int32_t+0x8e>
 800a256:	1b9f      	subs	r7, r3, r6
 800a258:	6922      	ldr	r2, [r4, #16]
 800a25a:	4620      	mov	r0, r4
 800a25c:	60a3      	str	r3, [r4, #8]
 800a25e:	443a      	add	r2, r7
 800a260:	f1c7 0904 	rsb	r9, r7, #4
 800a264:	6122      	str	r2, [r4, #16]
 800a266:	4649      	mov	r1, r9
 800a268:	f000 f87a 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d046      	beq.n	800a2fe <ucdr_deserialize_int32_t+0xd6>
 800a270:	7d23      	ldrb	r3, [r4, #20]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d05c      	beq.n	800a330 <ucdr_deserialize_int32_t+0x108>
 800a276:	78f3      	ldrb	r3, [r6, #3]
 800a278:	702b      	strb	r3, [r5, #0]
 800a27a:	2f00      	cmp	r7, #0
 800a27c:	d04c      	beq.n	800a318 <ucdr_deserialize_int32_t+0xf0>
 800a27e:	78b2      	ldrb	r2, [r6, #2]
 800a280:	2f01      	cmp	r7, #1
 800a282:	f105 0302 	add.w	r3, r5, #2
 800a286:	706a      	strb	r2, [r5, #1]
 800a288:	d04a      	beq.n	800a320 <ucdr_deserialize_int32_t+0xf8>
 800a28a:	7872      	ldrb	r2, [r6, #1]
 800a28c:	2f02      	cmp	r7, #2
 800a28e:	f105 0303 	add.w	r3, r5, #3
 800a292:	70aa      	strb	r2, [r5, #2]
 800a294:	d048      	beq.n	800a328 <ucdr_deserialize_int32_t+0x100>
 800a296:	7833      	ldrb	r3, [r6, #0]
 800a298:	70eb      	strb	r3, [r5, #3]
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	2104      	movs	r1, #4
 800a29e:	68a2      	ldr	r2, [r4, #8]
 800a2a0:	440b      	add	r3, r1
 800a2a2:	7da0      	ldrb	r0, [r4, #22]
 800a2a4:	444a      	add	r2, r9
 800a2a6:	7561      	strb	r1, [r4, #21]
 800a2a8:	1bdf      	subs	r7, r3, r7
 800a2aa:	f080 0001 	eor.w	r0, r0, #1
 800a2ae:	60a2      	str	r2, [r4, #8]
 800a2b0:	6127      	str	r7, [r4, #16]
 800a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b6:	2104      	movs	r1, #4
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f000 f851 	bl	800a360 <ucdr_check_final_buffer_behavior>
 800a2be:	b1b0      	cbz	r0, 800a2ee <ucdr_deserialize_int32_t+0xc6>
 800a2c0:	7d23      	ldrb	r3, [r4, #20]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	d017      	beq.n	800a2f8 <ucdr_deserialize_int32_t+0xd0>
 800a2c8:	78db      	ldrb	r3, [r3, #3]
 800a2ca:	702b      	strb	r3, [r5, #0]
 800a2cc:	68a3      	ldr	r3, [r4, #8]
 800a2ce:	789b      	ldrb	r3, [r3, #2]
 800a2d0:	706b      	strb	r3, [r5, #1]
 800a2d2:	68a3      	ldr	r3, [r4, #8]
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	70ab      	strb	r3, [r5, #2]
 800a2d8:	68a3      	ldr	r3, [r4, #8]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	70eb      	strb	r3, [r5, #3]
 800a2de:	2104      	movs	r1, #4
 800a2e0:	68a2      	ldr	r2, [r4, #8]
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	440a      	add	r2, r1
 800a2e6:	7561      	strb	r1, [r4, #21]
 800a2e8:	440b      	add	r3, r1
 800a2ea:	60a2      	str	r2, [r4, #8]
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	7da0      	ldrb	r0, [r4, #22]
 800a2f0:	f080 0001 	eor.w	r0, r0, #1
 800a2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	e7ef      	b.n	800a2de <ucdr_deserialize_int32_t+0xb6>
 800a2fe:	68a2      	ldr	r2, [r4, #8]
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	1bd2      	subs	r2, r2, r7
 800a304:	7da0      	ldrb	r0, [r4, #22]
 800a306:	1bdf      	subs	r7, r3, r7
 800a308:	f884 8015 	strb.w	r8, [r4, #21]
 800a30c:	f080 0001 	eor.w	r0, r0, #1
 800a310:	60a2      	str	r2, [r4, #8]
 800a312:	6127      	str	r7, [r4, #16]
 800a314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a318:	68a2      	ldr	r2, [r4, #8]
 800a31a:	1cab      	adds	r3, r5, #2
 800a31c:	7892      	ldrb	r2, [r2, #2]
 800a31e:	706a      	strb	r2, [r5, #1]
 800a320:	68a2      	ldr	r2, [r4, #8]
 800a322:	7852      	ldrb	r2, [r2, #1]
 800a324:	f803 2b01 	strb.w	r2, [r3], #1
 800a328:	68a2      	ldr	r2, [r4, #8]
 800a32a:	7812      	ldrb	r2, [r2, #0]
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	e7b4      	b.n	800a29a <ucdr_deserialize_int32_t+0x72>
 800a330:	4631      	mov	r1, r6
 800a332:	463a      	mov	r2, r7
 800a334:	4628      	mov	r0, r5
 800a336:	f008 f890 	bl	801245a <memcpy>
 800a33a:	464a      	mov	r2, r9
 800a33c:	19e8      	adds	r0, r5, r7
 800a33e:	68a1      	ldr	r1, [r4, #8]
 800a340:	f008 f88b 	bl	801245a <memcpy>
 800a344:	e7a9      	b.n	800a29a <ucdr_deserialize_int32_t+0x72>
 800a346:	bf00      	nop

0800a348 <ucdr_check_buffer_available_for>:
 800a348:	7d83      	ldrb	r3, [r0, #22]
 800a34a:	b93b      	cbnz	r3, 800a35c <ucdr_check_buffer_available_for+0x14>
 800a34c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800a350:	4419      	add	r1, r3
 800a352:	4288      	cmp	r0, r1
 800a354:	bf34      	ite	cc
 800a356:	2000      	movcc	r0, #0
 800a358:	2001      	movcs	r0, #1
 800a35a:	4770      	bx	lr
 800a35c:	2000      	movs	r0, #0
 800a35e:	4770      	bx	lr

0800a360 <ucdr_check_final_buffer_behavior>:
 800a360:	7d83      	ldrb	r3, [r0, #22]
 800a362:	b943      	cbnz	r3, 800a376 <ucdr_check_final_buffer_behavior+0x16>
 800a364:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a368:	b510      	push	{r4, lr}
 800a36a:	4291      	cmp	r1, r2
 800a36c:	4604      	mov	r4, r0
 800a36e:	d205      	bcs.n	800a37c <ucdr_check_final_buffer_behavior+0x1c>
 800a370:	2301      	movs	r3, #1
 800a372:	4618      	mov	r0, r3
 800a374:	bd10      	pop	{r4, pc}
 800a376:	2300      	movs	r3, #0
 800a378:	4618      	mov	r0, r3
 800a37a:	4770      	bx	lr
 800a37c:	6982      	ldr	r2, [r0, #24]
 800a37e:	b13a      	cbz	r2, 800a390 <ucdr_check_final_buffer_behavior+0x30>
 800a380:	69c1      	ldr	r1, [r0, #28]
 800a382:	4790      	blx	r2
 800a384:	f080 0301 	eor.w	r3, r0, #1
 800a388:	75a0      	strb	r0, [r4, #22]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4618      	mov	r0, r3
 800a38e:	bd10      	pop	{r4, pc}
 800a390:	2001      	movs	r0, #1
 800a392:	75a0      	strb	r0, [r4, #22]
 800a394:	e7fa      	b.n	800a38c <ucdr_check_final_buffer_behavior+0x2c>
 800a396:	bf00      	nop

0800a398 <ucdr_set_on_full_buffer_callback>:
 800a398:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop

0800a3a0 <ucdr_init_buffer_origin_offset_endian>:
 800a3a0:	b470      	push	{r4, r5, r6}
 800a3a2:	9c03      	ldr	r4, [sp, #12]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800a3aa:	190e      	adds	r6, r1, r4
 800a3ac:	6001      	str	r1, [r0, #0]
 800a3ae:	441c      	add	r4, r3
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	7505      	strb	r5, [r0, #20]
 800a3b4:	6104      	str	r4, [r0, #16]
 800a3b6:	60c3      	str	r3, [r0, #12]
 800a3b8:	7541      	strb	r1, [r0, #21]
 800a3ba:	7581      	strb	r1, [r0, #22]
 800a3bc:	e9c0 2601 	strd	r2, r6, [r0, #4]
 800a3c0:	e9c0 1106 	strd	r1, r1, [r0, #24]
 800a3c4:	bc70      	pop	{r4, r5, r6}
 800a3c6:	4770      	bx	lr

0800a3c8 <ucdr_init_buffer_origin_offset>:
 800a3c8:	b530      	push	{r4, r5, lr}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	2401      	movs	r4, #1
 800a3ce:	9d06      	ldr	r5, [sp, #24]
 800a3d0:	e9cd 5400 	strd	r5, r4, [sp]
 800a3d4:	f7ff ffe4 	bl	800a3a0 <ucdr_init_buffer_origin_offset_endian>
 800a3d8:	b003      	add	sp, #12
 800a3da:	bd30      	pop	{r4, r5, pc}

0800a3dc <ucdr_init_buffer_origin>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	2400      	movs	r4, #0
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	9400      	str	r4, [sp, #0]
 800a3e4:	f7ff fff0 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800a3e8:	b002      	add	sp, #8
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <ucdr_init_buffer>:
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f7ff bff5 	b.w	800a3dc <ucdr_init_buffer_origin>
 800a3f2:	bf00      	nop

0800a3f4 <ucdr_alignment>:
 800a3f4:	fbb0 f3f1 	udiv	r3, r0, r1
 800a3f8:	fb03 0311 	mls	r3, r3, r1, r0
 800a3fc:	1e48      	subs	r0, r1, #1
 800a3fe:	1ac9      	subs	r1, r1, r3
 800a400:	4008      	ands	r0, r1
 800a402:	4770      	bx	lr

0800a404 <ucdr_buffer_alignment>:
 800a404:	7d43      	ldrb	r3, [r0, #21]
 800a406:	428b      	cmp	r3, r1
 800a408:	d209      	bcs.n	800a41e <ucdr_buffer_alignment+0x1a>
 800a40a:	6903      	ldr	r3, [r0, #16]
 800a40c:	1e4a      	subs	r2, r1, #1
 800a40e:	fbb3 f0f1 	udiv	r0, r3, r1
 800a412:	fb01 3010 	mls	r0, r1, r0, r3
 800a416:	1a09      	subs	r1, r1, r0
 800a418:	ea01 0002 	and.w	r0, r1, r2
 800a41c:	4770      	bx	lr
 800a41e:	2000      	movs	r0, #0
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop

0800a424 <ucdr_align_to>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4604      	mov	r4, r0
 800a428:	460e      	mov	r6, r1
 800a42a:	f7ff ffeb 	bl	800a404 <ucdr_buffer_alignment>
 800a42e:	68a5      	ldr	r5, [r4, #8]
 800a430:	6863      	ldr	r3, [r4, #4]
 800a432:	4405      	add	r5, r0
 800a434:	6922      	ldr	r2, [r4, #16]
 800a436:	7566      	strb	r6, [r4, #21]
 800a438:	42ab      	cmp	r3, r5
 800a43a:	4410      	add	r0, r2
 800a43c:	bf28      	it	cs
 800a43e:	462b      	movcs	r3, r5
 800a440:	6120      	str	r0, [r4, #16]
 800a442:	60a3      	str	r3, [r4, #8]
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	bf00      	nop

0800a448 <ucdr_buffer_length>:
 800a448:	6882      	ldr	r2, [r0, #8]
 800a44a:	6800      	ldr	r0, [r0, #0]
 800a44c:	1a10      	subs	r0, r2, r0
 800a44e:	4770      	bx	lr

0800a450 <ucdr_buffer_remaining>:
 800a450:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a454:	1a10      	subs	r0, r2, r0
 800a456:	4770      	bx	lr

0800a458 <ucdr_check_final_buffer_behavior_array>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	7d83      	ldrb	r3, [r0, #22]
 800a45c:	b9a3      	cbnz	r3, 800a488 <ucdr_check_final_buffer_behavior_array+0x30>
 800a45e:	4604      	mov	r4, r0
 800a460:	460d      	mov	r5, r1
 800a462:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a466:	429a      	cmp	r2, r3
 800a468:	d300      	bcc.n	800a46c <ucdr_check_final_buffer_behavior_array+0x14>
 800a46a:	b931      	cbnz	r1, 800a47a <ucdr_check_final_buffer_behavior_array+0x22>
 800a46c:	4620      	mov	r0, r4
 800a46e:	f7ff ffef 	bl	800a450 <ucdr_buffer_remaining>
 800a472:	42a8      	cmp	r0, r5
 800a474:	bf28      	it	cs
 800a476:	4628      	movcs	r0, r5
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	6983      	ldr	r3, [r0, #24]
 800a47c:	b133      	cbz	r3, 800a48c <ucdr_check_final_buffer_behavior_array+0x34>
 800a47e:	69c1      	ldr	r1, [r0, #28]
 800a480:	4798      	blx	r3
 800a482:	75a0      	strb	r0, [r4, #22]
 800a484:	2800      	cmp	r0, #0
 800a486:	d0f1      	beq.n	800a46c <ucdr_check_final_buffer_behavior_array+0x14>
 800a488:	2000      	movs	r0, #0
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	2301      	movs	r3, #1
 800a48e:	7583      	strb	r3, [r0, #22]
 800a490:	e7fa      	b.n	800a488 <ucdr_check_final_buffer_behavior_array+0x30>
 800a492:	bf00      	nop

0800a494 <ucdr_advance_buffer>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	460d      	mov	r5, r1
 800a49a:	f7ff ff55 	bl	800a348 <ucdr_check_buffer_available_for>
 800a49e:	b178      	cbz	r0, 800a4c0 <ucdr_advance_buffer+0x2c>
 800a4a0:	68a3      	ldr	r3, [r4, #8]
 800a4a2:	6921      	ldr	r1, [r4, #16]
 800a4a4:	442b      	add	r3, r5
 800a4a6:	4429      	add	r1, r5
 800a4a8:	60a3      	str	r3, [r4, #8]
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	6121      	str	r1, [r4, #16]
 800a4ae:	7563      	strb	r3, [r4, #21]
 800a4b0:	bd38      	pop	{r3, r4, r5, pc}
 800a4b2:	68a2      	ldr	r2, [r4, #8]
 800a4b4:	1a2d      	subs	r5, r5, r0
 800a4b6:	6923      	ldr	r3, [r4, #16]
 800a4b8:	4402      	add	r2, r0
 800a4ba:	4418      	add	r0, r3
 800a4bc:	60a2      	str	r2, [r4, #8]
 800a4be:	6120      	str	r0, [r4, #16]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff ffc7 	bl	800a458 <ucdr_check_final_buffer_behavior_array>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d1f1      	bne.n	800a4b2 <ucdr_advance_buffer+0x1e>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	7563      	strb	r3, [r4, #21]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}

0800a4d4 <uxr_buffer_delete_entity>:
 800a4d4:	b530      	push	{r4, r5, lr}
 800a4d6:	2403      	movs	r4, #3
 800a4d8:	b08f      	sub	sp, #60	@ 0x3c
 800a4da:	2500      	movs	r5, #0
 800a4dc:	9202      	str	r2, [sp, #8]
 800a4de:	ab06      	add	r3, sp, #24
 800a4e0:	9400      	str	r4, [sp, #0]
 800a4e2:	2204      	movs	r2, #4
 800a4e4:	9501      	str	r5, [sp, #4]
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	9103      	str	r1, [sp, #12]
 800a4ea:	f001 f8a3 	bl	800b634 <uxr_prepare_stream_to_write_submessage>
 800a4ee:	b918      	cbnz	r0, 800a4f8 <uxr_buffer_delete_entity+0x24>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	b00f      	add	sp, #60	@ 0x3c
 800a4f6:	bd30      	pop	{r4, r5, pc}
 800a4f8:	9902      	ldr	r1, [sp, #8]
 800a4fa:	aa05      	add	r2, sp, #20
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f001 f9d5 	bl	800b8ac <uxr_init_base_object_request>
 800a502:	4604      	mov	r4, r0
 800a504:	a905      	add	r1, sp, #20
 800a506:	a806      	add	r0, sp, #24
 800a508:	f002 fb2c 	bl	800cb64 <uxr_serialize_DELETE_Payload>
 800a50c:	4620      	mov	r0, r4
 800a50e:	b00f      	add	sp, #60	@ 0x3c
 800a510:	bd30      	pop	{r4, r5, pc}
 800a512:	bf00      	nop

0800a514 <uxr_common_create_entity>:
 800a514:	b510      	push	{r4, lr}
 800a516:	b08c      	sub	sp, #48	@ 0x30
 800a518:	4604      	mov	r4, r0
 800a51a:	9103      	str	r1, [sp, #12]
 800a51c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800a520:	9202      	str	r2, [sp, #8]
 800a522:	2901      	cmp	r1, #1
 800a524:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 800a528:	f04f 0101 	mov.w	r1, #1
 800a52c:	bf0c      	ite	eq
 800a52e:	f003 0201 	andeq.w	r2, r3, #1
 800a532:	2200      	movne	r2, #0
 800a534:	330e      	adds	r3, #14
 800a536:	9001      	str	r0, [sp, #4]
 800a538:	9100      	str	r1, [sp, #0]
 800a53a:	4620      	mov	r0, r4
 800a53c:	441a      	add	r2, r3
 800a53e:	9903      	ldr	r1, [sp, #12]
 800a540:	ab04      	add	r3, sp, #16
 800a542:	b292      	uxth	r2, r2
 800a544:	f001 f876 	bl	800b634 <uxr_prepare_stream_to_write_submessage>
 800a548:	b918      	cbnz	r0, 800a552 <uxr_common_create_entity+0x3e>
 800a54a:	4604      	mov	r4, r0
 800a54c:	4620      	mov	r0, r4
 800a54e:	b00c      	add	sp, #48	@ 0x30
 800a550:	bd10      	pop	{r4, pc}
 800a552:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a554:	4620      	mov	r0, r4
 800a556:	9902      	ldr	r1, [sp, #8]
 800a558:	f001 f9a8 	bl	800b8ac <uxr_init_base_object_request>
 800a55c:	4604      	mov	r4, r0
 800a55e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a560:	a804      	add	r0, sp, #16
 800a562:	f002 fa51 	bl	800ca08 <uxr_serialize_CREATE_Payload>
 800a566:	4620      	mov	r0, r4
 800a568:	b00c      	add	sp, #48	@ 0x30
 800a56a:	bd10      	pop	{r4, pc}

0800a56c <uxr_buffer_create_participant_bin>:
 800a56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a56e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800a572:	2703      	movs	r7, #3
 800a574:	2601      	movs	r6, #1
 800a576:	4605      	mov	r5, r0
 800a578:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800a57c:	2000      	movs	r0, #0
 800a57e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800a580:	ac11      	add	r4, sp, #68	@ 0x44
 800a582:	f88d 0014 	strb.w	r0, [sp, #20]
 800a586:	7227      	strb	r7, [r4, #8]
 800a588:	7126      	strb	r6, [r4, #4]
 800a58a:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 800a58e:	9103      	str	r1, [sp, #12]
 800a590:	9202      	str	r2, [sp, #8]
 800a592:	b1cb      	cbz	r3, 800a5c8 <uxr_buffer_create_participant_bin+0x5c>
 800a594:	f88d 601c 	strb.w	r6, [sp, #28]
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a59e:	a915      	add	r1, sp, #84	@ 0x54
 800a5a0:	a809      	add	r0, sp, #36	@ 0x24
 800a5a2:	f7ff ff23 	bl	800a3ec <ucdr_init_buffer>
 800a5a6:	a905      	add	r1, sp, #20
 800a5a8:	a809      	add	r0, sp, #36	@ 0x24
 800a5aa:	f001 fee1 	bl	800c370 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800a5ae:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800a5b0:	9401      	str	r4, [sp, #4]
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	b2b3      	uxth	r3, r6
 800a5b6:	9700      	str	r7, [sp, #0]
 800a5b8:	60e6      	str	r6, [r4, #12]
 800a5ba:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a5be:	f7ff ffa9 	bl	800a514 <uxr_common_create_entity>
 800a5c2:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 800a5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c8:	f88d 301c 	strb.w	r3, [sp, #28]
 800a5cc:	e7e5      	b.n	800a59a <uxr_buffer_create_participant_bin+0x2e>
 800a5ce:	bf00      	nop

0800a5d0 <uxr_buffer_create_topic_bin>:
 800a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5d2:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a5d6:	2602      	movs	r6, #2
 800a5d8:	4605      	mov	r5, r0
 800a5da:	4618      	mov	r0, r3
 800a5dc:	9105      	str	r1, [sp, #20]
 800a5de:	a997      	add	r1, sp, #604	@ 0x25c
 800a5e0:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 800a5e4:	ac13      	add	r4, sp, #76	@ 0x4c
 800a5e6:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 800a5ea:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 800a5ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a5f0:	f000 f8ec 	bl	800a7cc <uxr_object_id_to_raw>
 800a5f4:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	9306      	str	r3, [sp, #24]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	a80b      	add	r0, sp, #44	@ 0x2c
 800a600:	7222      	strb	r2, [r4, #8]
 800a602:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800a606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a60a:	a917      	add	r1, sp, #92	@ 0x5c
 800a60c:	f88d 301c 	strb.w	r3, [sp, #28]
 800a610:	960a      	str	r6, [sp, #40]	@ 0x28
 800a612:	f7ff feeb 	bl	800a3ec <ucdr_init_buffer>
 800a616:	a906      	add	r1, sp, #24
 800a618:	a80b      	add	r0, sp, #44	@ 0x2c
 800a61a:	f001 fecb 	bl	800c3b4 <uxr_serialize_OBJK_Topic_Binary>
 800a61e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800a620:	9401      	str	r4, [sp, #4]
 800a622:	4628      	mov	r0, r5
 800a624:	b2b3      	uxth	r3, r6
 800a626:	9700      	str	r7, [sp, #0]
 800a628:	60e6      	str	r6, [r4, #12]
 800a62a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a62e:	f7ff ff71 	bl	800a514 <uxr_common_create_entity>
 800a632:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a636:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a638 <uxr_buffer_create_publisher_bin>:
 800a638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a63a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800a63e:	2603      	movs	r6, #3
 800a640:	4605      	mov	r5, r0
 800a642:	4618      	mov	r0, r3
 800a644:	9105      	str	r1, [sp, #20]
 800a646:	a992      	add	r1, sp, #584	@ 0x248
 800a648:	ac0e      	add	r4, sp, #56	@ 0x38
 800a64a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800a64e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800a652:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a656:	f000 f8b9 	bl	800a7cc <uxr_object_id_to_raw>
 800a65a:	2300      	movs	r3, #0
 800a65c:	a806      	add	r0, sp, #24
 800a65e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a662:	a912      	add	r1, sp, #72	@ 0x48
 800a664:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800a668:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800a66c:	7226      	strb	r6, [r4, #8]
 800a66e:	f7ff febd 	bl	800a3ec <ucdr_init_buffer>
 800a672:	a993      	add	r1, sp, #588	@ 0x24c
 800a674:	a806      	add	r0, sp, #24
 800a676:	f001 ff51 	bl	800c51c <uxr_serialize_OBJK_Publisher_Binary>
 800a67a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a67c:	9700      	str	r7, [sp, #0]
 800a67e:	4628      	mov	r0, r5
 800a680:	b2b3      	uxth	r3, r6
 800a682:	9401      	str	r4, [sp, #4]
 800a684:	60e6      	str	r6, [r4, #12]
 800a686:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a68a:	f7ff ff43 	bl	800a514 <uxr_common_create_entity>
 800a68e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800a692:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a694 <uxr_buffer_create_datawriter_bin>:
 800a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a698:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a69c:	2705      	movs	r7, #5
 800a69e:	4605      	mov	r5, r0
 800a6a0:	2603      	movs	r6, #3
 800a6a2:	ac1d      	add	r4, sp, #116	@ 0x74
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	@ 0x2a8
 800a6aa:	9105      	str	r1, [sp, #20]
 800a6ac:	a9a1      	add	r1, sp, #644	@ 0x284
 800a6ae:	9204      	str	r2, [sp, #16]
 800a6b0:	9303      	str	r3, [sp, #12]
 800a6b2:	7127      	strb	r7, [r4, #4]
 800a6b4:	f89d 72ac 	ldrb.w	r7, [sp, #684]	@ 0x2ac
 800a6b8:	f000 f888 	bl	800a7cc <uxr_object_id_to_raw>
 800a6bc:	a90e      	add	r1, sp, #56	@ 0x38
 800a6be:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800a6c0:	7226      	strb	r6, [r4, #8]
 800a6c2:	f000 f883 	bl	800a7cc <uxr_object_id_to_raw>
 800a6c6:	f1b8 0000 	subs.w	r0, r8, #0
 800a6ca:	f04f 0300 	mov.w	r3, #0
 800a6ce:	f04f 0201 	mov.w	r2, #1
 800a6d2:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 800a6d6:	bf18      	it	ne
 800a6d8:	2001      	movne	r0, #1
 800a6da:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 800a6de:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800a6e2:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
 800a6e6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800a6ea:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800a6ee:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800a6f2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800a6f6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a6fa:	bb89      	cbnz	r1, 800a760 <uxr_buffer_create_datawriter_bin+0xcc>
 800a6fc:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800a700:	f04f 0823 	mov.w	r8, #35	@ 0x23
 800a704:	f04f 0e13 	mov.w	lr, #19
 800a708:	f04f 0c0b 	mov.w	ip, #11
 800a70c:	2221      	movs	r2, #33	@ 0x21
 800a70e:	2111      	movs	r1, #17
 800a710:	2009      	movs	r0, #9
 800a712:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800a716:	b923      	cbnz	r3, 800a722 <uxr_buffer_create_datawriter_bin+0x8e>
 800a718:	4642      	mov	r2, r8
 800a71a:	4671      	mov	r1, lr
 800a71c:	4660      	mov	r0, ip
 800a71e:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 800a722:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800a726:	2b01      	cmp	r3, #1
 800a728:	d025      	beq.n	800a776 <uxr_buffer_create_datawriter_bin+0xe2>
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d029      	beq.n	800a782 <uxr_buffer_create_datawriter_bin+0xee>
 800a72e:	b32b      	cbz	r3, 800a77c <uxr_buffer_create_datawriter_bin+0xe8>
 800a730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a734:	a921      	add	r1, sp, #132	@ 0x84
 800a736:	a806      	add	r0, sp, #24
 800a738:	f7ff fe58 	bl	800a3ec <ucdr_init_buffer>
 800a73c:	a90e      	add	r1, sp, #56	@ 0x38
 800a73e:	a806      	add	r0, sp, #24
 800a740:	f001 ff62 	bl	800c608 <uxr_serialize_OBJK_DataWriter_Binary>
 800a744:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a746:	9401      	str	r4, [sp, #4]
 800a748:	4628      	mov	r0, r5
 800a74a:	b2b3      	uxth	r3, r6
 800a74c:	9700      	str	r7, [sp, #0]
 800a74e:	60e6      	str	r6, [r4, #12]
 800a750:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a754:	f7ff fede 	bl	800a514 <uxr_common_create_entity>
 800a758:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	f04f 0822 	mov.w	r8, #34	@ 0x22
 800a764:	f04f 0e12 	mov.w	lr, #18
 800a768:	f04f 0c0a 	mov.w	ip, #10
 800a76c:	2220      	movs	r2, #32
 800a76e:	2110      	movs	r1, #16
 800a770:	2008      	movs	r0, #8
 800a772:	2602      	movs	r6, #2
 800a774:	e7cd      	b.n	800a712 <uxr_buffer_create_datawriter_bin+0x7e>
 800a776:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800a77a:	e7d9      	b.n	800a730 <uxr_buffer_create_datawriter_bin+0x9c>
 800a77c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800a780:	e7d6      	b.n	800a730 <uxr_buffer_create_datawriter_bin+0x9c>
 800a782:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800a786:	e7d3      	b.n	800a730 <uxr_buffer_create_datawriter_bin+0x9c>

0800a788 <uxr_object_id>:
 800a788:	b082      	sub	sp, #8
 800a78a:	2300      	movs	r3, #0
 800a78c:	f88d 1006 	strb.w	r1, [sp, #6]
 800a790:	f360 030f 	bfi	r3, r0, #0, #16
 800a794:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a798:	f362 431f 	bfi	r3, r2, #16, #16
 800a79c:	4618      	mov	r0, r3
 800a79e:	b002      	add	sp, #8
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop

0800a7a4 <uxr_object_id_from_raw>:
 800a7a4:	7843      	ldrb	r3, [r0, #1]
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	7800      	ldrb	r0, [r0, #0]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	0919      	lsrs	r1, r3, #4
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800a7b6:	f88d 3006 	strb.w	r3, [sp, #6]
 800a7ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a7be:	f361 020f 	bfi	r2, r1, #0, #16
 800a7c2:	f363 421f 	bfi	r2, r3, #16, #16
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	b002      	add	sp, #8
 800a7ca:	4770      	bx	lr

0800a7cc <uxr_object_id_to_raw>:
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800a7d2:	b410      	push	{r4}
 800a7d4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800a7d8:	b083      	sub	sp, #12
 800a7da:	f3c2 140b 	ubfx	r4, r2, #4, #12
 800a7de:	7048      	strb	r0, [r1, #1]
 800a7e0:	700c      	strb	r4, [r1, #0]
 800a7e2:	b003      	add	sp, #12
 800a7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop

0800a7ec <on_get_fragmentation_info>:
 800a7ec:	b500      	push	{lr}
 800a7ee:	b08b      	sub	sp, #44	@ 0x2c
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	2204      	movs	r2, #4
 800a7f4:	a802      	add	r0, sp, #8
 800a7f6:	f7ff fdf9 	bl	800a3ec <ucdr_init_buffer>
 800a7fa:	f10d 0305 	add.w	r3, sp, #5
 800a7fe:	a802      	add	r0, sp, #8
 800a800:	f10d 0206 	add.w	r2, sp, #6
 800a804:	a901      	add	r1, sp, #4
 800a806:	f001 f9d1 	bl	800bbac <uxr_read_submessage_header>
 800a80a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a80e:	2b0d      	cmp	r3, #13
 800a810:	d003      	beq.n	800a81a <on_get_fragmentation_info+0x2e>
 800a812:	2000      	movs	r0, #0
 800a814:	b00b      	add	sp, #44	@ 0x2c
 800a816:	f85d fb04 	ldr.w	pc, [sp], #4
 800a81a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a81e:	f013 0f02 	tst.w	r3, #2
 800a822:	bf14      	ite	ne
 800a824:	2002      	movne	r0, #2
 800a826:	2001      	moveq	r0, #1
 800a828:	b00b      	add	sp, #44	@ 0x2c
 800a82a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a82e:	bf00      	nop

0800a830 <read_submessage_get_info>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	2500      	movs	r5, #0
 800a834:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800a838:	460e      	mov	r6, r1
 800a83a:	4604      	mov	r4, r0
 800a83c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800a840:	4629      	mov	r1, r5
 800a842:	a810      	add	r0, sp, #64	@ 0x40
 800a844:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800a848:	f007 fd3a 	bl	80122c0 <memset>
 800a84c:	a903      	add	r1, sp, #12
 800a84e:	4630      	mov	r0, r6
 800a850:	f002 f972 	bl	800cb38 <uxr_deserialize_GET_INFO_Payload>
 800a854:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a858:	4620      	mov	r0, r4
 800a85a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a85e:	f001 f81d 	bl	800b89c <uxr_session_header_offset>
 800a862:	4602      	mov	r2, r0
 800a864:	462b      	mov	r3, r5
 800a866:	a905      	add	r1, sp, #20
 800a868:	a808      	add	r0, sp, #32
 800a86a:	9200      	str	r2, [sp, #0]
 800a86c:	220c      	movs	r2, #12
 800a86e:	f7ff fdab 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800a872:	a910      	add	r1, sp, #64	@ 0x40
 800a874:	a808      	add	r0, sp, #32
 800a876:	f002 f9d3 	bl	800cc20 <uxr_serialize_INFO_Payload>
 800a87a:	9b08      	ldr	r3, [sp, #32]
 800a87c:	462a      	mov	r2, r5
 800a87e:	4629      	mov	r1, r5
 800a880:	4620      	mov	r0, r4
 800a882:	f000 ffb5 	bl	800b7f0 <uxr_stamp_session_header>
 800a886:	a808      	add	r0, sp, #32
 800a888:	f7ff fdde 	bl	800a448 <ucdr_buffer_length>
 800a88c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a88e:	4602      	mov	r2, r0
 800a890:	a905      	add	r1, sp, #20
 800a892:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a896:	47a0      	blx	r4
 800a898:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	bf00      	nop

0800a8a0 <write_submessage_acknack.isra.0>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	b092      	sub	sp, #72	@ 0x48
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	460e      	mov	r6, r1
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	f000 fff7 	bl	800b89c <uxr_session_header_offset>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	a905      	add	r1, sp, #20
 800a8b2:	a80a      	add	r0, sp, #40	@ 0x28
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	2211      	movs	r2, #17
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f7ff fd85 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800a8be:	2218      	movs	r2, #24
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	a80a      	add	r0, sp, #40	@ 0x28
 800a8c4:	fb02 5404 	mla	r4, r2, r4, r5
 800a8c8:	210a      	movs	r1, #10
 800a8ca:	2205      	movs	r2, #5
 800a8cc:	3450      	adds	r4, #80	@ 0x50
 800a8ce:	f001 f953 	bl	800bb78 <uxr_buffer_submessage_header>
 800a8d2:	a903      	add	r1, sp, #12
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f004 ff73 	bl	800f7c0 <uxr_compute_acknack>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	a903      	add	r1, sp, #12
 800a8de:	a80a      	add	r0, sp, #40	@ 0x28
 800a8e0:	ba5b      	rev16	r3, r3
 800a8e2:	f88d 6010 	strb.w	r6, [sp, #16]
 800a8e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a8ea:	f002 fa0b 	bl	800cd04 <uxr_serialize_ACKNACK_Payload>
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	f000 ff7b 	bl	800b7f0 <uxr_stamp_session_header>
 800a8fa:	a80a      	add	r0, sp, #40	@ 0x28
 800a8fc:	f7ff fda4 	bl	800a448 <ucdr_buffer_length>
 800a900:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a902:	4602      	mov	r2, r0
 800a904:	a905      	add	r1, sp, #20
 800a906:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a90a:	47a0      	blx	r4
 800a90c:	b012      	add	sp, #72	@ 0x48
 800a90e:	bd70      	pop	{r4, r5, r6, pc}

0800a910 <uxr_init_session>:
 800a910:	b5d0      	push	{r4, r6, r7, lr}
 800a912:	2300      	movs	r3, #0
 800a914:	2600      	movs	r6, #0
 800a916:	2700      	movs	r7, #0
 800a918:	4604      	mov	r4, r0
 800a91a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800a91e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800a922:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 800a926:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800a92a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800a92e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800a932:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800a936:	2181      	movs	r1, #129	@ 0x81
 800a938:	f000 fec0 	bl	800b6bc <uxr_init_session_info>
 800a93c:	f104 0008 	add.w	r0, r4, #8
 800a940:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800a944:	f001 b838 	b.w	800b9b8 <uxr_init_stream_storage>

0800a948 <uxr_set_status_callback>:
 800a948:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop

0800a950 <uxr_set_topic_callback>:
 800a950:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop

0800a958 <uxr_set_request_callback>:
 800a958:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop

0800a960 <uxr_set_reply_callback>:
 800a960:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop

0800a968 <uxr_create_output_best_effort_stream>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	b084      	sub	sp, #16
 800a96e:	e9cd 2100 	strd	r2, r1, [sp]
 800a972:	f000 ff93 	bl	800b89c <uxr_session_header_offset>
 800a976:	4603      	mov	r3, r0
 800a978:	f104 0008 	add.w	r0, r4, #8
 800a97c:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a980:	b004      	add	sp, #16
 800a982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a986:	f001 b85d 	b.w	800ba44 <uxr_add_output_best_effort_buffer>
 800a98a:	bf00      	nop

0800a98c <uxr_create_output_reliable_stream>:
 800a98c:	b530      	push	{r4, r5, lr}
 800a98e:	b089      	sub	sp, #36	@ 0x24
 800a990:	4604      	mov	r4, r0
 800a992:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	f000 ff80 	bl	800b89c <uxr_session_header_offset>
 800a99c:	4605      	mov	r5, r0
 800a99e:	9905      	ldr	r1, [sp, #20]
 800a9a0:	f104 0008 	add.w	r0, r4, #8
 800a9a4:	9500      	str	r5, [sp, #0]
 800a9a6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a9aa:	f001 f85d 	bl	800ba68 <uxr_add_output_reliable_buffer>
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	b2c5      	uxtb	r5, r0
 800a9b2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a9b6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a9ba:	0e03      	lsrs	r3, r0, #24
 800a9bc:	f365 0207 	bfi	r2, r5, #0, #8
 800a9c0:	f364 220f 	bfi	r2, r4, #8, #8
 800a9c4:	f361 4217 	bfi	r2, r1, #16, #8
 800a9c8:	f363 621f 	bfi	r2, r3, #24, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	b009      	add	sp, #36	@ 0x24
 800a9d0:	bd30      	pop	{r4, r5, pc}
 800a9d2:	bf00      	nop

0800a9d4 <uxr_create_input_best_effort_stream>:
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	3008      	adds	r0, #8
 800a9d8:	b002      	add	sp, #8
 800a9da:	f001 b85f 	b.w	800ba9c <uxr_add_input_best_effort_buffer>
 800a9de:	bf00      	nop

0800a9e0 <uxr_create_input_reliable_stream>:
 800a9e0:	b530      	push	{r4, r5, lr}
 800a9e2:	4c0c      	ldr	r4, [pc, #48]	@ (800aa14 <uxr_create_input_reliable_stream+0x34>)
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	3008      	adds	r0, #8
 800a9e8:	9400      	str	r4, [sp, #0]
 800a9ea:	f001 f86d 	bl	800bac8 <uxr_add_input_reliable_buffer>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	b2c5      	uxtb	r5, r0
 800a9f2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a9f6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a9fa:	0e03      	lsrs	r3, r0, #24
 800a9fc:	f365 0207 	bfi	r2, r5, #0, #8
 800aa00:	f364 220f 	bfi	r2, r4, #8, #8
 800aa04:	f361 4217 	bfi	r2, r1, #16, #8
 800aa08:	f363 621f 	bfi	r2, r3, #24, #8
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	b005      	add	sp, #20
 800aa10:	bd30      	pop	{r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	0800a7ed 	.word	0x0800a7ed

0800aa18 <uxr_epoch_nanos>:
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	f001 f90e 	bl	800bc3c <uxr_nanos>
 800aa20:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800aa24:	1ac0      	subs	r0, r0, r3
 800aa26:	eb61 0102 	sbc.w	r1, r1, r2
 800aa2a:	bd10      	pop	{r4, pc}

0800aa2c <uxr_flash_output_streams>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	7e03      	ldrb	r3, [r0, #24]
 800aa32:	b084      	sub	sp, #16
 800aa34:	4604      	mov	r4, r0
 800aa36:	b1fb      	cbz	r3, 800aa78 <uxr_flash_output_streams+0x4c>
 800aa38:	f04f 0900 	mov.w	r9, #0
 800aa3c:	f10d 0802 	add.w	r8, sp, #2
 800aa40:	af03      	add	r7, sp, #12
 800aa42:	ae02      	add	r6, sp, #8
 800aa44:	4648      	mov	r0, r9
 800aa46:	2201      	movs	r2, #1
 800aa48:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	3508      	adds	r5, #8
 800aa50:	f000 ff5c 	bl	800b90c <uxr_stream_id>
 800aa54:	4684      	mov	ip, r0
 800aa56:	4643      	mov	r3, r8
 800aa58:	4628      	mov	r0, r5
 800aa5a:	463a      	mov	r2, r7
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	f8cd c004 	str.w	ip, [sp, #4]
 800aa62:	f004 ff37 	bl	800f8d4 <uxr_prepare_best_effort_buffer_to_send>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d13d      	bne.n	800aae6 <uxr_flash_output_streams+0xba>
 800aa6a:	f109 0901 	add.w	r9, r9, #1
 800aa6e:	7e23      	ldrb	r3, [r4, #24]
 800aa70:	fa5f f089 	uxtb.w	r0, r9
 800aa74:	4283      	cmp	r3, r0
 800aa76:	d8e6      	bhi.n	800aa46 <uxr_flash_output_streams+0x1a>
 800aa78:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800aa7c:	b383      	cbz	r3, 800aae0 <uxr_flash_output_streams+0xb4>
 800aa7e:	f04f 0900 	mov.w	r9, #0
 800aa82:	f10d 0802 	add.w	r8, sp, #2
 800aa86:	af03      	add	r7, sp, #12
 800aa88:	ae02      	add	r6, sp, #8
 800aa8a:	4648      	mov	r0, r9
 800aa8c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800aa90:	2201      	movs	r2, #1
 800aa92:	2102      	movs	r1, #2
 800aa94:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800aa98:	f000 ff38 	bl	800b90c <uxr_stream_id>
 800aa9c:	9001      	str	r0, [sp, #4]
 800aa9e:	3520      	adds	r5, #32
 800aaa0:	e00c      	b.n	800aabc <uxr_flash_output_streams+0x90>
 800aaa2:	9b02      	ldr	r3, [sp, #8]
 800aaa4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aaa8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800aaac:	f000 fea0 	bl	800b7f0 <uxr_stamp_session_header>
 800aab0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800aab2:	9a03      	ldr	r2, [sp, #12]
 800aab4:	9902      	ldr	r1, [sp, #8]
 800aab6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800aaba:	47d0      	blx	sl
 800aabc:	4643      	mov	r3, r8
 800aabe:	463a      	mov	r2, r7
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	f005 f926 	bl	800fd14 <uxr_prepare_next_reliable_buffer_to_send>
 800aac8:	4603      	mov	r3, r0
 800aaca:	4620      	mov	r0, r4
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e8      	bne.n	800aaa2 <uxr_flash_output_streams+0x76>
 800aad0:	f109 0901 	add.w	r9, r9, #1
 800aad4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800aad8:	fa5f f089 	uxtb.w	r0, r9
 800aadc:	4283      	cmp	r3, r0
 800aade:	d8d5      	bhi.n	800aa8c <uxr_flash_output_streams+0x60>
 800aae0:	b004      	add	sp, #16
 800aae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae6:	9b02      	ldr	r3, [sp, #8]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aaee:	f109 0901 	add.w	r9, r9, #1
 800aaf2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800aaf6:	f000 fe7b 	bl	800b7f0 <uxr_stamp_session_header>
 800aafa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800aafc:	9a03      	ldr	r2, [sp, #12]
 800aafe:	9902      	ldr	r1, [sp, #8]
 800ab00:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ab04:	47a8      	blx	r5
 800ab06:	7e23      	ldrb	r3, [r4, #24]
 800ab08:	fa5f f089 	uxtb.w	r0, r9
 800ab0c:	4283      	cmp	r3, r0
 800ab0e:	d89a      	bhi.n	800aa46 <uxr_flash_output_streams+0x1a>
 800ab10:	e7b2      	b.n	800aa78 <uxr_flash_output_streams+0x4c>
 800ab12:	bf00      	nop

0800ab14 <read_submessage_info>:
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	460d      	mov	r5, r1
 800ab1a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ab1e:	4607      	mov	r7, r0
 800ab20:	4669      	mov	r1, sp
 800ab22:	4628      	mov	r0, r5
 800ab24:	f001 ff0c 	bl	800c940 <uxr_deserialize_BaseObjectReply>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	a902      	add	r1, sp, #8
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ab32:	f7fe fc95 	bl	8009460 <ucdr_deserialize_bool>
 800ab36:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ab3a:	4004      	ands	r4, r0
 800ab3c:	b2e4      	uxtb	r4, r4
 800ab3e:	b95b      	cbnz	r3, 800ab58 <read_submessage_info+0x44>
 800ab40:	a987      	add	r1, sp, #540	@ 0x21c
 800ab42:	4628      	mov	r0, r5
 800ab44:	f7fe fc8c 	bl	8009460 <ucdr_deserialize_bool>
 800ab48:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	b94b      	cbnz	r3, 800ab64 <read_submessage_info+0x50>
 800ab50:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab58:	a903      	add	r1, sp, #12
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f001 fd80 	bl	800c660 <uxr_deserialize_ObjectVariant>
 800ab60:	4004      	ands	r4, r0
 800ab62:	e7ed      	b.n	800ab40 <read_submessage_info+0x2c>
 800ab64:	a988      	add	r1, sp, #544	@ 0x220
 800ab66:	4628      	mov	r0, r5
 800ab68:	f7fe fca8 	bl	80094bc <ucdr_deserialize_uint8_t>
 800ab6c:	4234      	tst	r4, r6
 800ab6e:	d0ef      	beq.n	800ab50 <read_submessage_info+0x3c>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d0ed      	beq.n	800ab50 <read_submessage_info+0x3c>
 800ab74:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ab78:	2b0d      	cmp	r3, #13
 800ab7a:	d1e9      	bne.n	800ab50 <read_submessage_info+0x3c>
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	a98a      	add	r1, sp, #552	@ 0x228
 800ab80:	f7ff fa46 	bl	800a010 <ucdr_deserialize_int16_t>
 800ab84:	b140      	cbz	r0, 800ab98 <read_submessage_info+0x84>
 800ab86:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dd07      	ble.n	800ab9e <read_submessage_info+0x8a>
 800ab8e:	f1b8 0f00 	cmp.w	r8, #0
 800ab92:	bf14      	ite	ne
 800ab94:	2001      	movne	r0, #1
 800ab96:	2002      	moveq	r0, #2
 800ab98:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ab9c:	e7d8      	b.n	800ab50 <read_submessage_info+0x3c>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e7fa      	b.n	800ab98 <read_submessage_info+0x84>
 800aba2:	bf00      	nop

0800aba4 <read_submessage_list>:
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	4604      	mov	r4, r0
 800abaa:	b09b      	sub	sp, #108	@ 0x6c
 800abac:	460d      	mov	r5, r1
 800abae:	f8df 9324 	ldr.w	r9, [pc, #804]	@ 800aed4 <read_submessage_list+0x330>
 800abb2:	920d      	str	r2, [sp, #52]	@ 0x34
 800abb4:	f10d 033f 	add.w	r3, sp, #63	@ 0x3f
 800abb8:	aa10      	add	r2, sp, #64	@ 0x40
 800abba:	f10d 013e 	add.w	r1, sp, #62	@ 0x3e
 800abbe:	4628      	mov	r0, r5
 800abc0:	f000 fff4 	bl	800bbac <uxr_read_submessage_header>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	f000 8141 	beq.w	800ae4c <read_submessage_list+0x2a8>
 800abca:	f89d 303e 	ldrb.w	r3, [sp, #62]	@ 0x3e
 800abce:	f89d 2036 	ldrb.w	r2, [sp, #54]	@ 0x36
 800abd2:	3b02      	subs	r3, #2
 800abd4:	2b0d      	cmp	r3, #13
 800abd6:	d8ed      	bhi.n	800abb4 <read_submessage_list+0x10>
 800abd8:	a101      	add	r1, pc, #4	@ (adr r1, 800abe0 <read_submessage_list+0x3c>)
 800abda:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abde:	bf00      	nop
 800abe0:	0800ae43 	.word	0x0800ae43
 800abe4:	0800abb5 	.word	0x0800abb5
 800abe8:	0800ae33 	.word	0x0800ae33
 800abec:	0800add5 	.word	0x0800add5
 800abf0:	0800adcb 	.word	0x0800adcb
 800abf4:	0800abb5 	.word	0x0800abb5
 800abf8:	0800abb5 	.word	0x0800abb5
 800abfc:	0800ad2b 	.word	0x0800ad2b
 800ac00:	0800acbb 	.word	0x0800acbb
 800ac04:	0800ac79 	.word	0x0800ac79
 800ac08:	0800abb5 	.word	0x0800abb5
 800ac0c:	0800abb5 	.word	0x0800abb5
 800ac10:	0800abb5 	.word	0x0800abb5
 800ac14:	0800ac19 	.word	0x0800ac19
 800ac18:	a914      	add	r1, sp, #80	@ 0x50
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f002 f8c6 	bl	800cdac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ac20:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 800ac24:	f1b8 0f00 	cmp.w	r8, #0
 800ac28:	f000 8118 	beq.w	800ae5c <read_submessage_list+0x2b8>
 800ac2c:	f001 f806 	bl	800bc3c <uxr_nanos>
 800ac30:	2700      	movs	r7, #0
 800ac32:	460b      	mov	r3, r1
 800ac34:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800ac36:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800ac38:	f04f 0b00 	mov.w	fp, #0
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	4620      	mov	r0, r4
 800ac40:	fbc9 6701 	smlal	r6, r7, r9, r1
 800ac44:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800ac46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac4a:	460e      	mov	r6, r1
 800ac4c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ac4e:	2700      	movs	r7, #0
 800ac50:	468a      	mov	sl, r1
 800ac52:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ac54:	fbc9 6701 	smlal	r6, r7, r9, r1
 800ac58:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800ac5a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ac5e:	fbc9 ab01 	smlal	sl, fp, r9, r1
 800ac62:	f8d4 6094 	ldr.w	r6, [r4, #148]	@ 0x94
 800ac66:	e9cd ab00 	strd	sl, fp, [sp]
 800ac6a:	9606      	str	r6, [sp, #24]
 800ac6c:	47c0      	blx	r8
 800ac6e:	f04f 0301 	mov.w	r3, #1
 800ac72:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800ac76:	e79d      	b.n	800abb4 <read_submessage_list+0x10>
 800ac78:	a914      	add	r1, sp, #80	@ 0x50
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f002 f882 	bl	800cd84 <uxr_deserialize_HEARTBEAT_Payload>
 800ac80:	2100      	movs	r1, #0
 800ac82:	f89d 0054 	ldrb.w	r0, [sp, #84]	@ 0x54
 800ac86:	f000 fe6b 	bl	800b960 <uxr_stream_id_from_raw>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f104 0008 	add.w	r0, r4, #8
 800ac90:	f3c3 2607 	ubfx	r6, r3, #8, #8
 800ac94:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac96:	4631      	mov	r1, r6
 800ac98:	f000 ff4c 	bl	800bb34 <uxr_get_input_reliable_stream>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d089      	beq.n	800abb4 <read_submessage_list+0x10>
 800aca0:	f8bd 2052 	ldrh.w	r2, [sp, #82]	@ 0x52
 800aca4:	f8bd 1050 	ldrh.w	r1, [sp, #80]	@ 0x50
 800aca8:	f004 fd7e 	bl	800f7a8 <uxr_process_heartbeat>
 800acac:	4632      	mov	r2, r6
 800acae:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 800acb2:	4620      	mov	r0, r4
 800acb4:	f7ff fdf4 	bl	800a8a0 <write_submessage_acknack.isra.0>
 800acb8:	e77c      	b.n	800abb4 <read_submessage_list+0x10>
 800acba:	a914      	add	r1, sp, #80	@ 0x50
 800acbc:	4628      	mov	r0, r5
 800acbe:	f002 f839 	bl	800cd34 <uxr_deserialize_ACKNACK_Payload>
 800acc2:	2100      	movs	r1, #0
 800acc4:	f89d 0054 	ldrb.w	r0, [sp, #84]	@ 0x54
 800acc8:	f000 fe4a 	bl	800b960 <uxr_stream_id_from_raw>
 800accc:	4603      	mov	r3, r0
 800acce:	f104 0008 	add.w	r0, r4, #8
 800acd2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800acd6:	9311      	str	r3, [sp, #68]	@ 0x44
 800acd8:	f000 ff16 	bl	800bb08 <uxr_get_output_reliable_stream>
 800acdc:	4606      	mov	r6, r0
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f af68 	beq.w	800abb4 <read_submessage_list+0x10>
 800ace4:	f89d 3052 	ldrb.w	r3, [sp, #82]	@ 0x52
 800ace8:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
 800acec:	f89d 1053 	ldrb.w	r1, [sp, #83]	@ 0x53
 800acf0:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800acf4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800acf8:	b289      	uxth	r1, r1
 800acfa:	f005 f8b9 	bl	800fe70 <uxr_process_acknack>
 800acfe:	4630      	mov	r0, r6
 800ad00:	f005 f87a 	bl	800fdf8 <uxr_begin_output_nack_buffer_it>
 800ad04:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 800ad08:	e005      	b.n	800ad16 <read_submessage_list+0x172>
 800ad0a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ad0c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ad10:	e9d3 0700 	ldrd	r0, r7, [r3]
 800ad14:	47b8      	blx	r7
 800ad16:	f10d 0342 	add.w	r3, sp, #66	@ 0x42
 800ad1a:	aa13      	add	r2, sp, #76	@ 0x4c
 800ad1c:	4641      	mov	r1, r8
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f005 f86c 	bl	800fdfc <uxr_next_reliable_nack_buffer_to_send>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d1f0      	bne.n	800ad0a <read_submessage_list+0x166>
 800ad28:	e744      	b.n	800abb4 <read_submessage_list+0x10>
 800ad2a:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 800ad2e:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
 800ad32:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 800ad36:	4628      	mov	r0, r5
 800ad38:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 800ad42:	f88d 6047 	strb.w	r6, [sp, #71]	@ 0x47
 800ad46:	f8bd 6040 	ldrh.w	r6, [sp, #64]	@ 0x40
 800ad4a:	f89d 703f 	ldrb.w	r7, [sp, #63]	@ 0x3f
 800ad4e:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800ad52:	3e04      	subs	r6, #4
 800ad54:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800ad58:	f001 fd30 	bl	800c7bc <uxr_deserialize_BaseObjectRequest>
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	a913      	add	r1, sp, #76	@ 0x4c
 800ad60:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 800ad64:	f007 070e 	and.w	r7, r7, #14
 800ad68:	f000 fdbe 	bl	800b8e8 <uxr_parse_base_object_request>
 800ad6c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ad6e:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ad72:	b2b6      	uxth	r6, r6
 800ad74:	f8bd 8042 	ldrh.w	r8, [sp, #66]	@ 0x42
 800ad78:	9114      	str	r1, [sp, #80]	@ 0x50
 800ad7a:	f1ba 0f00 	cmp.w	sl, #0
 800ad7e:	d006      	beq.n	800ad8e <read_submessage_list+0x1ea>
 800ad80:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800ad84:	2300      	movs	r3, #0
 800ad86:	4642      	mov	r2, r8
 800ad88:	9000      	str	r0, [sp, #0]
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	47d0      	blx	sl
 800ad8e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ad90:	b168      	cbz	r0, 800adae <read_submessage_list+0x20a>
 800ad92:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800ad94:	2300      	movs	r3, #0
 800ad96:	3902      	subs	r1, #2
 800ad98:	e002      	b.n	800ada0 <read_submessage_list+0x1fc>
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	4283      	cmp	r3, r0
 800ad9e:	d006      	beq.n	800adae <read_submessage_list+0x20a>
 800ada0:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800ada4:	4542      	cmp	r2, r8
 800ada6:	d1f8      	bne.n	800ad9a <read_submessage_list+0x1f6>
 800ada8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800adaa:	2100      	movs	r1, #0
 800adac:	54d1      	strb	r1, [r2, r3]
 800adae:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800adb2:	4632      	mov	r2, r6
 800adb4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800adb6:	463b      	mov	r3, r7
 800adb8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800adba:	9102      	str	r1, [sp, #8]
 800adbc:	4629      	mov	r1, r5
 800adbe:	9001      	str	r0, [sp, #4]
 800adc0:	4620      	mov	r0, r4
 800adc2:	9600      	str	r6, [sp, #0]
 800adc4:	f005 f8de 	bl	800ff84 <read_submessage_format>
 800adc8:	e6f4      	b.n	800abb4 <read_submessage_list+0x10>
 800adca:	4629      	mov	r1, r5
 800adcc:	4620      	mov	r0, r4
 800adce:	f7ff fea1 	bl	800ab14 <read_submessage_info>
 800add2:	e6ef      	b.n	800abb4 <read_submessage_list+0x10>
 800add4:	2a00      	cmp	r2, #0
 800add6:	d03c      	beq.n	800ae52 <read_submessage_list+0x2ae>
 800add8:	a914      	add	r1, sp, #80	@ 0x50
 800adda:	4628      	mov	r0, r5
 800addc:	f001 ff02 	bl	800cbe4 <uxr_deserialize_STATUS_Payload>
 800ade0:	a912      	add	r1, sp, #72	@ 0x48
 800ade2:	aa11      	add	r2, sp, #68	@ 0x44
 800ade4:	a814      	add	r0, sp, #80	@ 0x50
 800ade6:	f000 fd7f 	bl	800b8e8 <uxr_parse_base_object_request>
 800adea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800adec:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800adf0:	f89d 8054 	ldrb.w	r8, [sp, #84]	@ 0x54
 800adf4:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
 800adf8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800adfa:	b136      	cbz	r6, 800ae0a <read_submessage_list+0x266>
 800adfc:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800ae00:	4643      	mov	r3, r8
 800ae02:	463a      	mov	r2, r7
 800ae04:	9000      	str	r0, [sp, #0]
 800ae06:	4620      	mov	r0, r4
 800ae08:	47b0      	blx	r6
 800ae0a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f43f aed1 	beq.w	800abb4 <read_submessage_list+0x10>
 800ae12:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ae14:	2100      	movs	r1, #0
 800ae16:	3802      	subs	r0, #2
 800ae18:	e003      	b.n	800ae22 <read_submessage_list+0x27e>
 800ae1a:	3101      	adds	r1, #1
 800ae1c:	4299      	cmp	r1, r3
 800ae1e:	f43f aec9 	beq.w	800abb4 <read_submessage_list+0x10>
 800ae22:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800ae26:	42ba      	cmp	r2, r7
 800ae28:	d1f7      	bne.n	800ae1a <read_submessage_list+0x276>
 800ae2a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ae2c:	f803 8001 	strb.w	r8, [r3, r1]
 800ae30:	e6c0      	b.n	800abb4 <read_submessage_list+0x10>
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	f47f aebe 	bne.w	800abb4 <read_submessage_list+0x10>
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f000 fc98 	bl	800b770 <uxr_read_create_session_status>
 800ae40:	e6b8      	b.n	800abb4 <read_submessage_list+0x10>
 800ae42:	4629      	mov	r1, r5
 800ae44:	4620      	mov	r0, r4
 800ae46:	f7ff fcf3 	bl	800a830 <read_submessage_get_info>
 800ae4a:	e6b3      	b.n	800abb4 <read_submessage_list+0x10>
 800ae4c:	b01b      	add	sp, #108	@ 0x6c
 800ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae52:	4629      	mov	r1, r5
 800ae54:	4620      	mov	r0, r4
 800ae56:	f000 fc99 	bl	800b78c <uxr_read_delete_session_status>
 800ae5a:	e6ab      	b.n	800abb4 <read_submessage_list+0x10>
 800ae5c:	f000 feee 	bl	800bc3c <uxr_nanos>
 800ae60:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ae62:	2700      	movs	r7, #0
 800ae64:	f04f 0b00 	mov.w	fp, #0
 800ae68:	4692      	mov	sl, r2
 800ae6a:	e9dd 3618 	ldrd	r3, r6, [sp, #96]	@ 0x60
 800ae6e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 800ae72:	fbc9 6703 	smlal	r6, r7, r9, r3
 800ae76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae78:	1830      	adds	r0, r6, r0
 800ae7a:	f04f 0b00 	mov.w	fp, #0
 800ae7e:	469a      	mov	sl, r3
 800ae80:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ae82:	eb47 0101 	adc.w	r1, r7, r1
 800ae86:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae88:	fbc9 ab06 	smlal	sl, fp, r9, r6
 800ae8c:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	@ 0x28
 800ae90:	fbc9 7803 	smlal	r7, r8, r9, r3
 800ae94:	eb17 020a 	adds.w	r2, r7, sl
 800ae98:	eb48 030b 	adc.w	r3, r8, fp
 800ae9c:	1a82      	subs	r2, r0, r2
 800ae9e:	eb61 0303 	sbc.w	r3, r1, r3
 800aea2:	9208      	str	r2, [sp, #32]
 800aea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	f173 0100 	sbcs.w	r1, r3, #0
 800aeb0:	db08      	blt.n	800aec4 <read_submessage_list+0x320>
 800aeb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aeb6:	0843      	lsrs	r3, r0, #1
 800aeb8:	104a      	asrs	r2, r1, #1
 800aeba:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800aebe:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 800aec2:	e6d4      	b.n	800ac6e <read_submessage_list+0xca>
 800aec4:	1c53      	adds	r3, r2, #1
 800aec6:	9308      	str	r3, [sp, #32]
 800aec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeca:	f143 0300 	adc.w	r3, r3, #0
 800aece:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed0:	e7ef      	b.n	800aeb2 <read_submessage_list+0x30e>
 800aed2:	bf00      	nop
 800aed4:	3b9aca00 	.word	0x3b9aca00

0800aed8 <listen_message_reliably>:
 800aed8:	1e0b      	subs	r3, r1, #0
 800aeda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aede:	bfb8      	it	lt
 800aee0:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800aee4:	b09d      	sub	sp, #116	@ 0x74
 800aee6:	4607      	mov	r7, r0
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	f000 fe8b 	bl	800bc04 <uxr_millis>
 800aeee:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800aef2:	4681      	mov	r9, r0
 800aef4:	2a00      	cmp	r2, #0
 800aef6:	f000 809c 	beq.w	800b032 <listen_message_reliably+0x15a>
 800aefa:	2600      	movs	r6, #0
 800aefc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af00:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800af04:	4688      	mov	r8, r1
 800af06:	4630      	mov	r0, r6
 800af08:	46ca      	mov	sl, r9
 800af0a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800af0e:	e00f      	b.n	800af30 <listen_message_reliably+0x58>
 800af10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800af14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af18:	3601      	adds	r6, #1
 800af1a:	42a2      	cmp	r2, r4
 800af1c:	b2f0      	uxtb	r0, r6
 800af1e:	eb73 0105 	sbcs.w	r1, r3, r5
 800af22:	da01      	bge.n	800af28 <listen_message_reliably+0x50>
 800af24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af28:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800af2c:	4283      	cmp	r3, r0
 800af2e:	d95d      	bls.n	800afec <listen_message_reliably+0x114>
 800af30:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800af34:	2201      	movs	r2, #1
 800af36:	2102      	movs	r1, #2
 800af38:	00e4      	lsls	r4, r4, #3
 800af3a:	f000 fce7 	bl	800b90c <uxr_stream_id>
 800af3e:	4601      	mov	r1, r0
 800af40:	f104 0520 	add.w	r5, r4, #32
 800af44:	4643      	mov	r3, r8
 800af46:	4652      	mov	r2, sl
 800af48:	9109      	str	r1, [sp, #36]	@ 0x24
 800af4a:	443d      	add	r5, r7
 800af4c:	4628      	mov	r0, r5
 800af4e:	f004 ff27 	bl	800fda0 <uxr_update_output_stream_heartbeat_timestamp>
 800af52:	193b      	adds	r3, r7, r4
 800af54:	2800      	cmp	r0, #0
 800af56:	d0db      	beq.n	800af10 <listen_message_reliably+0x38>
 800af58:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800af5c:	4638      	mov	r0, r7
 800af5e:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 800af62:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800af66:	3501      	adds	r5, #1
 800af68:	f000 fc98 	bl	800b89c <uxr_session_header_offset>
 800af6c:	4602      	mov	r2, r0
 800af6e:	2300      	movs	r3, #0
 800af70:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800af74:	4658      	mov	r0, fp
 800af76:	a90c      	add	r1, sp, #48	@ 0x30
 800af78:	9200      	str	r2, [sp, #0]
 800af7a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800af7e:	2211      	movs	r2, #17
 800af80:	f7ff fa22 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800af84:	2300      	movs	r3, #0
 800af86:	2205      	movs	r2, #5
 800af88:	210b      	movs	r1, #11
 800af8a:	4658      	mov	r0, fp
 800af8c:	443c      	add	r4, r7
 800af8e:	f000 fdf3 	bl	800bb78 <uxr_buffer_submessage_header>
 800af92:	2101      	movs	r1, #1
 800af94:	8968      	ldrh	r0, [r5, #10]
 800af96:	3601      	adds	r6, #1
 800af98:	f005 f8ae 	bl	80100f8 <uxr_seq_num_add>
 800af9c:	892a      	ldrh	r2, [r5, #8]
 800af9e:	4603      	mov	r3, r0
 800afa0:	a90a      	add	r1, sp, #40	@ 0x28
 800afa2:	4658      	mov	r0, fp
 800afa4:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800afa8:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800afac:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 800afb0:	f001 fed4 	bl	800cd5c <uxr_serialize_HEARTBEAT_Payload>
 800afb4:	2200      	movs	r2, #0
 800afb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afb8:	4638      	mov	r0, r7
 800afba:	4611      	mov	r1, r2
 800afbc:	f000 fc18 	bl	800b7f0 <uxr_stamp_session_header>
 800afc0:	4658      	mov	r0, fp
 800afc2:	f7ff fa41 	bl	800a448 <ucdr_buffer_length>
 800afc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afc8:	4602      	mov	r2, r0
 800afca:	a90c      	add	r1, sp, #48	@ 0x30
 800afcc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800afd0:	47a8      	blx	r5
 800afd2:	b2f0      	uxtb	r0, r6
 800afd4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800afd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800afdc:	42a2      	cmp	r2, r4
 800afde:	eb73 0105 	sbcs.w	r1, r3, r5
 800afe2:	db9f      	blt.n	800af24 <listen_message_reliably+0x4c>
 800afe4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800afe8:	4283      	cmp	r3, r0
 800afea:	d8a1      	bhi.n	800af30 <listen_message_reliably+0x58>
 800afec:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800aff0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800aff4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800aff8:	4294      	cmp	r4, r2
 800affa:	bf08      	it	eq
 800affc:	428b      	cmpeq	r3, r1
 800affe:	d018      	beq.n	800b032 <listen_message_reliably+0x15a>
 800b000:	eba3 030a 	sub.w	r3, r3, sl
 800b004:	2b00      	cmp	r3, #0
 800b006:	9d05      	ldr	r5, [sp, #20]
 800b008:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800b00a:	aa08      	add	r2, sp, #32
 800b00c:	bf08      	it	eq
 800b00e:	2301      	moveq	r3, #1
 800b010:	a907      	add	r1, sp, #28
 800b012:	6884      	ldr	r4, [r0, #8]
 800b014:	429d      	cmp	r5, r3
 800b016:	6800      	ldr	r0, [r0, #0]
 800b018:	bfa8      	it	ge
 800b01a:	461d      	movge	r5, r3
 800b01c:	462b      	mov	r3, r5
 800b01e:	47a0      	blx	r4
 800b020:	b948      	cbnz	r0, 800b036 <listen_message_reliably+0x15e>
 800b022:	9b05      	ldr	r3, [sp, #20]
 800b024:	1b5b      	subs	r3, r3, r5
 800b026:	2b00      	cmp	r3, #0
 800b028:	9305      	str	r3, [sp, #20]
 800b02a:	f73f af5e 	bgt.w	800aeea <listen_message_reliably+0x12>
 800b02e:	4604      	mov	r4, r0
 800b030:	e012      	b.n	800b058 <listen_message_reliably+0x180>
 800b032:	9b05      	ldr	r3, [sp, #20]
 800b034:	e7e6      	b.n	800b004 <listen_message_reliably+0x12c>
 800b036:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b03a:	4604      	mov	r4, r0
 800b03c:	2500      	movs	r5, #0
 800b03e:	a80c      	add	r0, sp, #48	@ 0x30
 800b040:	f7ff f9d4 	bl	800a3ec <ucdr_init_buffer>
 800b044:	a90c      	add	r1, sp, #48	@ 0x30
 800b046:	f10d 031a 	add.w	r3, sp, #26
 800b04a:	aa06      	add	r2, sp, #24
 800b04c:	4638      	mov	r0, r7
 800b04e:	f88d 5018 	strb.w	r5, [sp, #24]
 800b052:	f000 fbe3 	bl	800b81c <uxr_read_session_header>
 800b056:	b918      	cbnz	r0, 800b060 <listen_message_reliably+0x188>
 800b058:	4620      	mov	r0, r4
 800b05a:	b01d      	add	sp, #116	@ 0x74
 800b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b060:	4629      	mov	r1, r5
 800b062:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b066:	f000 fc7b 	bl	800b960 <uxr_stream_id_from_raw>
 800b06a:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b06e:	f8bd 801a 	ldrh.w	r8, [sp, #26]
 800b072:	fa5f fa80 	uxtb.w	sl, r0
 800b076:	2e01      	cmp	r6, #1
 800b078:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b07c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b07e:	d04b      	beq.n	800b118 <listen_message_reliably+0x240>
 800b080:	2e02      	cmp	r6, #2
 800b082:	d00f      	beq.n	800b0a4 <listen_message_reliably+0x1cc>
 800b084:	2e00      	cmp	r6, #0
 800b086:	d1e7      	bne.n	800b058 <listen_message_reliably+0x180>
 800b088:	4631      	mov	r1, r6
 800b08a:	4630      	mov	r0, r6
 800b08c:	f000 fc68 	bl	800b960 <uxr_stream_id_from_raw>
 800b090:	4602      	mov	r2, r0
 800b092:	a90c      	add	r1, sp, #48	@ 0x30
 800b094:	4638      	mov	r0, r7
 800b096:	920a      	str	r2, [sp, #40]	@ 0x28
 800b098:	f7ff fd84 	bl	800aba4 <read_submessage_list>
 800b09c:	4620      	mov	r0, r4
 800b09e:	b01d      	add	sp, #116	@ 0x74
 800b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	f107 0008 	add.w	r0, r7, #8
 800b0aa:	f000 fd43 	bl	800bb34 <uxr_get_input_reliable_stream>
 800b0ae:	4681      	mov	r9, r0
 800b0b0:	b348      	cbz	r0, 800b106 <listen_message_reliably+0x22e>
 800b0b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0b4:	a80c      	add	r0, sp, #48	@ 0x30
 800b0b6:	9202      	str	r2, [sp, #8]
 800b0b8:	f7ff f9ca 	bl	800a450 <ucdr_buffer_remaining>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	f10d 0019 	add.w	r0, sp, #25
 800b0c2:	9a02      	ldr	r2, [sp, #8]
 800b0c4:	4641      	mov	r1, r8
 800b0c6:	9000      	str	r0, [sp, #0]
 800b0c8:	4648      	mov	r0, r9
 800b0ca:	f004 fa69 	bl	800f5a0 <uxr_receive_reliable_message>
 800b0ce:	b1d0      	cbz	r0, 800b106 <listen_message_reliably+0x22e>
 800b0d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d037      	beq.n	800b148 <listen_message_reliably+0x270>
 800b0d8:	ae14      	add	r6, sp, #80	@ 0x50
 800b0da:	f04f 0802 	mov.w	r8, #2
 800b0de:	e008      	b.n	800b0f2 <listen_message_reliably+0x21a>
 800b0e0:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800b0e4:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800b0e8:	f88d 802a 	strb.w	r8, [sp, #42]	@ 0x2a
 800b0ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0ee:	f7ff fd59 	bl	800aba4 <read_submessage_list>
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	2204      	movs	r2, #4
 800b0f6:	4648      	mov	r0, r9
 800b0f8:	f004 fad6 	bl	800f6a8 <uxr_next_input_reliable_buffer_available>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	4631      	mov	r1, r6
 800b100:	4638      	mov	r0, r7
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1ec      	bne.n	800b0e0 <listen_message_reliably+0x208>
 800b106:	4638      	mov	r0, r7
 800b108:	462a      	mov	r2, r5
 800b10a:	4651      	mov	r1, sl
 800b10c:	f7ff fbc8 	bl	800a8a0 <write_submessage_acknack.isra.0>
 800b110:	4620      	mov	r0, r4
 800b112:	b01d      	add	sp, #116	@ 0x74
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	4629      	mov	r1, r5
 800b11a:	f107 0008 	add.w	r0, r7, #8
 800b11e:	f000 fcff 	bl	800bb20 <uxr_get_input_best_effort_stream>
 800b122:	2800      	cmp	r0, #0
 800b124:	d098      	beq.n	800b058 <listen_message_reliably+0x180>
 800b126:	4641      	mov	r1, r8
 800b128:	f004 f9b6 	bl	800f498 <uxr_receive_best_effort_message>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d093      	beq.n	800b058 <listen_message_reliably+0x180>
 800b130:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800b134:	a90c      	add	r1, sp, #48	@ 0x30
 800b136:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800b13a:	4638      	mov	r0, r7
 800b13c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b140:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b142:	f7ff fd2f 	bl	800aba4 <read_submessage_list>
 800b146:	e787      	b.n	800b058 <listen_message_reliably+0x180>
 800b148:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800b14c:	a90c      	add	r1, sp, #48	@ 0x30
 800b14e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800b152:	4638      	mov	r0, r7
 800b154:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b158:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b15a:	f7ff fd23 	bl	800aba4 <read_submessage_list>
 800b15e:	e7bb      	b.n	800b0d8 <listen_message_reliably+0x200>

0800b160 <uxr_run_session_until_confirm_delivery>:
 800b160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b164:	4606      	mov	r6, r0
 800b166:	460d      	mov	r5, r1
 800b168:	f000 fd4c 	bl	800bc04 <uxr_millis>
 800b16c:	4607      	mov	r7, r0
 800b16e:	4630      	mov	r0, r6
 800b170:	f106 0808 	add.w	r8, r6, #8
 800b174:	f7ff fc5a 	bl	800aa2c <uxr_flash_output_streams>
 800b178:	2d00      	cmp	r5, #0
 800b17a:	db10      	blt.n	800b19e <uxr_run_session_until_confirm_delivery+0x3e>
 800b17c:	462c      	mov	r4, r5
 800b17e:	e006      	b.n	800b18e <uxr_run_session_until_confirm_delivery+0x2e>
 800b180:	f7ff feaa 	bl	800aed8 <listen_message_reliably>
 800b184:	f000 fd3e 	bl	800bc04 <uxr_millis>
 800b188:	1bc3      	subs	r3, r0, r7
 800b18a:	1aec      	subs	r4, r5, r3
 800b18c:	d407      	bmi.n	800b19e <uxr_run_session_until_confirm_delivery+0x3e>
 800b18e:	4640      	mov	r0, r8
 800b190:	f000 fcdc 	bl	800bb4c <uxr_output_streams_confirmed>
 800b194:	4603      	mov	r3, r0
 800b196:	4621      	mov	r1, r4
 800b198:	4630      	mov	r0, r6
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d0f0      	beq.n	800b180 <uxr_run_session_until_confirm_delivery+0x20>
 800b19e:	4640      	mov	r0, r8
 800b1a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a4:	f000 bcd2 	b.w	800bb4c <uxr_output_streams_confirmed>

0800b1a8 <uxr_run_session_until_all_status>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	468a      	mov	sl, r1
 800b1b0:	4617      	mov	r7, r2
 800b1b2:	4699      	mov	r9, r3
 800b1b4:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	f7ff fc37 	bl	800aa2c <uxr_flash_output_streams>
 800b1be:	f1bb 0f00 	cmp.w	fp, #0
 800b1c2:	d004      	beq.n	800b1ce <uxr_run_session_until_all_status+0x26>
 800b1c4:	465a      	mov	r2, fp
 800b1c6:	21ff      	movs	r1, #255	@ 0xff
 800b1c8:	4648      	mov	r0, r9
 800b1ca:	f007 f879 	bl	80122c0 <memset>
 800b1ce:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 800b1d2:	f8c8 7074 	str.w	r7, [r8, #116]	@ 0x74
 800b1d6:	e9c8 9b1e 	strd	r9, fp, [r8, #120]	@ 0x78
 800b1da:	9301      	str	r3, [sp, #4]
 800b1dc:	f000 fd12 	bl	800bc04 <uxr_millis>
 800b1e0:	4651      	mov	r1, sl
 800b1e2:	9000      	str	r0, [sp, #0]
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	f7ff fe77 	bl	800aed8 <listen_message_reliably>
 800b1ea:	f000 fd0b 	bl	800bc04 <uxr_millis>
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	1ac0      	subs	r0, r0, r3
 800b1f2:	ebaa 0100 	sub.w	r1, sl, r0
 800b1f6:	f1bb 0f00 	cmp.w	fp, #0
 800b1fa:	d029      	beq.n	800b250 <uxr_run_session_until_all_status+0xa8>
 800b1fc:	9d01      	ldr	r5, [sp, #4]
 800b1fe:	2400      	movs	r4, #0
 800b200:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b204:	2eff      	cmp	r6, #255	@ 0xff
 800b206:	d017      	beq.n	800b238 <uxr_run_session_until_all_status+0x90>
 800b208:	3401      	adds	r4, #1
 800b20a:	45a3      	cmp	fp, r4
 800b20c:	d8f8      	bhi.n	800b200 <uxr_run_session_until_all_status+0x58>
 800b20e:	2300      	movs	r3, #0
 800b210:	9f01      	ldr	r7, [sp, #4]
 800b212:	f8c8 307c 	str.w	r3, [r8, #124]	@ 0x7c
 800b216:	e000      	b.n	800b21a <uxr_run_session_until_all_status+0x72>
 800b218:	b158      	cbz	r0, 800b232 <uxr_run_session_until_all_status+0x8a>
 800b21a:	463b      	mov	r3, r7
 800b21c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 800b220:	3302      	adds	r3, #2
 800b222:	2801      	cmp	r0, #1
 800b224:	eba3 0309 	sub.w	r3, r3, r9
 800b228:	bf8c      	ite	hi
 800b22a:	2000      	movhi	r0, #0
 800b22c:	2001      	movls	r0, #1
 800b22e:	459b      	cmp	fp, r3
 800b230:	d8f2      	bhi.n	800b218 <uxr_run_session_until_all_status+0x70>
 800b232:	b003      	add	sp, #12
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800b23c:	3401      	adds	r4, #1
 800b23e:	455c      	cmp	r4, fp
 800b240:	d201      	bcs.n	800b246 <uxr_run_session_until_all_status+0x9e>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0dc      	beq.n	800b200 <uxr_run_session_until_all_status+0x58>
 800b246:	2900      	cmp	r1, #0
 800b248:	dde1      	ble.n	800b20e <uxr_run_session_until_all_status+0x66>
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1ca      	bne.n	800b1e4 <uxr_run_session_until_all_status+0x3c>
 800b24e:	e7de      	b.n	800b20e <uxr_run_session_until_all_status+0x66>
 800b250:	2001      	movs	r0, #1
 800b252:	f8c8 b07c 	str.w	fp, [r8, #124]	@ 0x7c
 800b256:	b003      	add	sp, #12
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b25c <uxr_create_session>:
 800b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	f100 0808 	add.w	r8, r0, #8
 800b264:	4604      	mov	r4, r0
 800b266:	f04f 090a 	mov.w	r9, #10
 800b26a:	4640      	mov	r0, r8
 800b26c:	46c2      	mov	sl, r8
 800b26e:	ed2d 8b02 	vpush	{d8}
 800b272:	b0a9      	sub	sp, #164	@ 0xa4
 800b274:	f000 fbaa 	bl	800b9cc <uxr_reset_stream_storage>
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fb0f 	bl	800b89c <uxr_session_header_offset>
 800b27e:	4603      	mov	r3, r0
 800b280:	a909      	add	r1, sp, #36	@ 0x24
 800b282:	a810      	add	r0, sp, #64	@ 0x40
 800b284:	221c      	movs	r2, #28
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	2300      	movs	r3, #0
 800b28a:	f7ff f89d 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800b28e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b290:	4620      	mov	r0, r4
 800b292:	a910      	add	r1, sp, #64	@ 0x40
 800b294:	8a1a      	ldrh	r2, [r3, #16]
 800b296:	3a04      	subs	r2, #4
 800b298:	b292      	uxth	r2, r2
 800b29a:	f000 fa21 	bl	800b6e0 <uxr_buffer_create_session>
 800b29e:	4620      	mov	r0, r4
 800b2a0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b2a2:	f000 fa91 	bl	800b7c8 <uxr_stamp_create_session_header>
 800b2a6:	a810      	add	r0, sp, #64	@ 0x40
 800b2a8:	f7ff f8ce 	bl	800a448 <ucdr_buffer_length>
 800b2ac:	23ff      	movs	r3, #255	@ 0xff
 800b2ae:	ee08 0a10 	vmov	s16, r0
 800b2b2:	7163      	strb	r3, [r4, #5]
 800b2b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b2b6:	ee18 2a10 	vmov	r2, s16
 800b2ba:	a909      	add	r1, sp, #36	@ 0x24
 800b2bc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b2c0:	47a8      	blx	r5
 800b2c2:	f000 fc9f 	bl	800bc04 <uxr_millis>
 800b2c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b2ca:	9002      	str	r0, [sp, #8]
 800b2cc:	e00c      	b.n	800b2e8 <uxr_create_session+0x8c>
 800b2ce:	f000 fc99 	bl	800bc04 <uxr_millis>
 800b2d2:	9b02      	ldr	r3, [sp, #8]
 800b2d4:	7962      	ldrb	r2, [r4, #5]
 800b2d6:	1ac0      	subs	r0, r0, r3
 800b2d8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f340 8094 	ble.w	800b40a <uxr_create_session+0x1ae>
 800b2e2:	2aff      	cmp	r2, #255	@ 0xff
 800b2e4:	f040 8097 	bne.w	800b416 <uxr_create_session+0x1ba>
 800b2e8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800b2ea:	aa06      	add	r2, sp, #24
 800b2ec:	a905      	add	r1, sp, #20
 800b2ee:	6885      	ldr	r5, [r0, #8]
 800b2f0:	6800      	ldr	r0, [r0, #0]
 800b2f2:	47a8      	blx	r5
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d0ea      	beq.n	800b2ce <uxr_create_session+0x72>
 800b2f8:	9a06      	ldr	r2, [sp, #24]
 800b2fa:	a818      	add	r0, sp, #96	@ 0x60
 800b2fc:	9905      	ldr	r1, [sp, #20]
 800b2fe:	2500      	movs	r5, #0
 800b300:	f7ff f874 	bl	800a3ec <ucdr_init_buffer>
 800b304:	f10d 0312 	add.w	r3, sp, #18
 800b308:	aa04      	add	r2, sp, #16
 800b30a:	a918      	add	r1, sp, #96	@ 0x60
 800b30c:	4620      	mov	r0, r4
 800b30e:	f88d 5010 	strb.w	r5, [sp, #16]
 800b312:	f000 fa83 	bl	800b81c <uxr_read_session_header>
 800b316:	2800      	cmp	r0, #0
 800b318:	d0d9      	beq.n	800b2ce <uxr_create_session+0x72>
 800b31a:	4629      	mov	r1, r5
 800b31c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800b320:	f000 fb1e 	bl	800b960 <uxr_stream_id_from_raw>
 800b324:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b328:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 800b32c:	fa5f fb80 	uxtb.w	fp, r0
 800b330:	2f01      	cmp	r7, #1
 800b332:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b336:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800b33a:	d04d      	beq.n	800b3d8 <uxr_create_session+0x17c>
 800b33c:	2f02      	cmp	r7, #2
 800b33e:	d00c      	beq.n	800b35a <uxr_create_session+0xfe>
 800b340:	2f00      	cmp	r7, #0
 800b342:	d1c4      	bne.n	800b2ce <uxr_create_session+0x72>
 800b344:	4639      	mov	r1, r7
 800b346:	4638      	mov	r0, r7
 800b348:	f000 fb0a 	bl	800b960 <uxr_stream_id_from_raw>
 800b34c:	4602      	mov	r2, r0
 800b34e:	a918      	add	r1, sp, #96	@ 0x60
 800b350:	4620      	mov	r0, r4
 800b352:	9208      	str	r2, [sp, #32]
 800b354:	f7ff fc26 	bl	800aba4 <read_submessage_list>
 800b358:	e7b9      	b.n	800b2ce <uxr_create_session+0x72>
 800b35a:	4629      	mov	r1, r5
 800b35c:	4650      	mov	r0, sl
 800b35e:	f000 fbe9 	bl	800bb34 <uxr_get_input_reliable_stream>
 800b362:	4606      	mov	r6, r0
 800b364:	b390      	cbz	r0, 800b3cc <uxr_create_session+0x170>
 800b366:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b368:	a818      	add	r0, sp, #96	@ 0x60
 800b36a:	9203      	str	r2, [sp, #12]
 800b36c:	f7ff f870 	bl	800a450 <ucdr_buffer_remaining>
 800b370:	4603      	mov	r3, r0
 800b372:	f10d 0011 	add.w	r0, sp, #17
 800b376:	9a03      	ldr	r2, [sp, #12]
 800b378:	4641      	mov	r1, r8
 800b37a:	9000      	str	r0, [sp, #0]
 800b37c:	4630      	mov	r0, r6
 800b37e:	f004 f90f 	bl	800f5a0 <uxr_receive_reliable_message>
 800b382:	b318      	cbz	r0, 800b3cc <uxr_create_session+0x170>
 800b384:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800b388:	b9b3      	cbnz	r3, 800b3b8 <uxr_create_session+0x15c>
 800b38a:	f88d b020 	strb.w	fp, [sp, #32]
 800b38e:	a918      	add	r1, sp, #96	@ 0x60
 800b390:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800b394:	4620      	mov	r0, r4
 800b396:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800b39a:	9a08      	ldr	r2, [sp, #32]
 800b39c:	f7ff fc02 	bl	800aba4 <read_submessage_list>
 800b3a0:	e00a      	b.n	800b3b8 <uxr_create_session+0x15c>
 800b3a2:	f04f 0302 	mov.w	r3, #2
 800b3a6:	f88d b020 	strb.w	fp, [sp, #32]
 800b3aa:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800b3ae:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 800b3b2:	9a08      	ldr	r2, [sp, #32]
 800b3b4:	f7ff fbf6 	bl	800aba4 <read_submessage_list>
 800b3b8:	a920      	add	r1, sp, #128	@ 0x80
 800b3ba:	2204      	movs	r2, #4
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f004 f973 	bl	800f6a8 <uxr_next_input_reliable_buffer_available>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	a920      	add	r1, sp, #128	@ 0x80
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1ea      	bne.n	800b3a2 <uxr_create_session+0x146>
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4659      	mov	r1, fp
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7ff fa65 	bl	800a8a0 <write_submessage_acknack.isra.0>
 800b3d6:	e77a      	b.n	800b2ce <uxr_create_session+0x72>
 800b3d8:	4629      	mov	r1, r5
 800b3da:	4650      	mov	r0, sl
 800b3dc:	f000 fba0 	bl	800bb20 <uxr_get_input_best_effort_stream>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f43f af74 	beq.w	800b2ce <uxr_create_session+0x72>
 800b3e6:	4641      	mov	r1, r8
 800b3e8:	f004 f856 	bl	800f498 <uxr_receive_best_effort_message>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	f43f af6e 	beq.w	800b2ce <uxr_create_session+0x72>
 800b3f2:	f88d b020 	strb.w	fp, [sp, #32]
 800b3f6:	a918      	add	r1, sp, #96	@ 0x60
 800b3f8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800b402:	9a08      	ldr	r2, [sp, #32]
 800b404:	f7ff fbce 	bl	800aba4 <read_submessage_list>
 800b408:	e761      	b.n	800b2ce <uxr_create_session+0x72>
 800b40a:	f1b9 0901 	subs.w	r9, r9, #1
 800b40e:	d002      	beq.n	800b416 <uxr_create_session+0x1ba>
 800b410:	2aff      	cmp	r2, #255	@ 0xff
 800b412:	f43f af4f 	beq.w	800b2b4 <uxr_create_session+0x58>
 800b416:	b12a      	cbz	r2, 800b424 <uxr_create_session+0x1c8>
 800b418:	2000      	movs	r0, #0
 800b41a:	b029      	add	sp, #164	@ 0xa4
 800b41c:	ecbd 8b02 	vpop	{d8}
 800b420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b424:	4650      	mov	r0, sl
 800b426:	f000 fad1 	bl	800b9cc <uxr_reset_stream_storage>
 800b42a:	2001      	movs	r0, #1
 800b42c:	b029      	add	sp, #164	@ 0xa4
 800b42e:	ecbd 8b02 	vpop	{d8}
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	bf00      	nop

0800b438 <wait_session_status>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	25ff      	movs	r5, #255	@ 0xff
 800b43e:	b09d      	sub	sp, #116	@ 0x74
 800b440:	4604      	mov	r4, r0
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	7145      	strb	r5, [r0, #5]
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 80b8 	beq.w	800b5bc <wait_session_status+0x184>
 800b44c:	2300      	movs	r3, #0
 800b44e:	468b      	mov	fp, r1
 800b450:	4692      	mov	sl, r2
 800b452:	9303      	str	r3, [sp, #12]
 800b454:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b456:	4652      	mov	r2, sl
 800b458:	4659      	mov	r1, fp
 800b45a:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b45e:	47a8      	blx	r5
 800b460:	f000 fbd0 	bl	800bc04 <uxr_millis>
 800b464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b468:	4605      	mov	r5, r0
 800b46a:	e009      	b.n	800b480 <wait_session_status+0x48>
 800b46c:	f000 fbca 	bl	800bc04 <uxr_millis>
 800b470:	1b40      	subs	r0, r0, r5
 800b472:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b476:	2b00      	cmp	r3, #0
 800b478:	dd42      	ble.n	800b500 <wait_session_status+0xc8>
 800b47a:	7960      	ldrb	r0, [r4, #5]
 800b47c:	28ff      	cmp	r0, #255	@ 0xff
 800b47e:	d148      	bne.n	800b512 <wait_session_status+0xda>
 800b480:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800b482:	aa09      	add	r2, sp, #36	@ 0x24
 800b484:	a908      	add	r1, sp, #32
 800b486:	6886      	ldr	r6, [r0, #8]
 800b488:	6800      	ldr	r0, [r0, #0]
 800b48a:	47b0      	blx	r6
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d0ed      	beq.n	800b46c <wait_session_status+0x34>
 800b490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b492:	a80c      	add	r0, sp, #48	@ 0x30
 800b494:	9908      	ldr	r1, [sp, #32]
 800b496:	2600      	movs	r6, #0
 800b498:	f7fe ffa8 	bl	800a3ec <ucdr_init_buffer>
 800b49c:	f10d 031e 	add.w	r3, sp, #30
 800b4a0:	aa07      	add	r2, sp, #28
 800b4a2:	a90c      	add	r1, sp, #48	@ 0x30
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f88d 601c 	strb.w	r6, [sp, #28]
 800b4aa:	f000 f9b7 	bl	800b81c <uxr_read_session_header>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d0dc      	beq.n	800b46c <wait_session_status+0x34>
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b4b8:	f000 fa52 	bl	800b960 <uxr_stream_id_from_raw>
 800b4bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b4c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b4c4:	fa5f f880 	uxtb.w	r8, r0
 800b4c8:	2f01      	cmp	r7, #1
 800b4ca:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b4ce:	9302      	str	r3, [sp, #8]
 800b4d0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800b4d4:	d058      	beq.n	800b588 <wait_session_status+0x150>
 800b4d6:	2f02      	cmp	r7, #2
 800b4d8:	d021      	beq.n	800b51e <wait_session_status+0xe6>
 800b4da:	2f00      	cmp	r7, #0
 800b4dc:	d1c6      	bne.n	800b46c <wait_session_status+0x34>
 800b4de:	4639      	mov	r1, r7
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f000 fa3d 	bl	800b960 <uxr_stream_id_from_raw>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	a90c      	add	r1, sp, #48	@ 0x30
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b4ee:	f7ff fb59 	bl	800aba4 <read_submessage_list>
 800b4f2:	f000 fb87 	bl	800bc04 <uxr_millis>
 800b4f6:	1b40      	subs	r0, r0, r5
 800b4f8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dcbc      	bgt.n	800b47a <wait_session_status+0x42>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	9a04      	ldr	r2, [sp, #16]
 800b504:	3301      	adds	r3, #1
 800b506:	7960      	ldrb	r0, [r4, #5]
 800b508:	429a      	cmp	r2, r3
 800b50a:	9303      	str	r3, [sp, #12]
 800b50c:	d001      	beq.n	800b512 <wait_session_status+0xda>
 800b50e:	28ff      	cmp	r0, #255	@ 0xff
 800b510:	d0a0      	beq.n	800b454 <wait_session_status+0x1c>
 800b512:	38ff      	subs	r0, #255	@ 0xff
 800b514:	bf18      	it	ne
 800b516:	2001      	movne	r0, #1
 800b518:	b01d      	add	sp, #116	@ 0x74
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	4631      	mov	r1, r6
 800b520:	f104 0008 	add.w	r0, r4, #8
 800b524:	f000 fb06 	bl	800bb34 <uxr_get_input_reliable_stream>
 800b528:	4681      	mov	r9, r0
 800b52a:	b338      	cbz	r0, 800b57c <wait_session_status+0x144>
 800b52c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b52e:	a80c      	add	r0, sp, #48	@ 0x30
 800b530:	9205      	str	r2, [sp, #20]
 800b532:	f7fe ff8d 	bl	800a450 <ucdr_buffer_remaining>
 800b536:	4603      	mov	r3, r0
 800b538:	f10d 001d 	add.w	r0, sp, #29
 800b53c:	9a05      	ldr	r2, [sp, #20]
 800b53e:	9000      	str	r0, [sp, #0]
 800b540:	4648      	mov	r0, r9
 800b542:	9902      	ldr	r1, [sp, #8]
 800b544:	f004 f82c 	bl	800f5a0 <uxr_receive_reliable_message>
 800b548:	b1c0      	cbz	r0, 800b57c <wait_session_status+0x144>
 800b54a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b54e:	b95b      	cbnz	r3, 800b568 <wait_session_status+0x130>
 800b550:	e03c      	b.n	800b5cc <wait_session_status+0x194>
 800b552:	f04f 0302 	mov.w	r3, #2
 800b556:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800b55a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b55e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800b562:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b564:	f7ff fb1e 	bl	800aba4 <read_submessage_list>
 800b568:	a914      	add	r1, sp, #80	@ 0x50
 800b56a:	2204      	movs	r2, #4
 800b56c:	4648      	mov	r0, r9
 800b56e:	f004 f89b 	bl	800f6a8 <uxr_next_input_reliable_buffer_available>
 800b572:	4603      	mov	r3, r0
 800b574:	a914      	add	r1, sp, #80	@ 0x50
 800b576:	4620      	mov	r0, r4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1ea      	bne.n	800b552 <wait_session_status+0x11a>
 800b57c:	4632      	mov	r2, r6
 800b57e:	4641      	mov	r1, r8
 800b580:	4620      	mov	r0, r4
 800b582:	f7ff f98d 	bl	800a8a0 <write_submessage_acknack.isra.0>
 800b586:	e771      	b.n	800b46c <wait_session_status+0x34>
 800b588:	4631      	mov	r1, r6
 800b58a:	f104 0008 	add.w	r0, r4, #8
 800b58e:	f000 fac7 	bl	800bb20 <uxr_get_input_best_effort_stream>
 800b592:	2800      	cmp	r0, #0
 800b594:	f43f af6a 	beq.w	800b46c <wait_session_status+0x34>
 800b598:	9902      	ldr	r1, [sp, #8]
 800b59a:	f003 ff7d 	bl	800f498 <uxr_receive_best_effort_message>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f43f af64 	beq.w	800b46c <wait_session_status+0x34>
 800b5a4:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800b5a8:	a90c      	add	r1, sp, #48	@ 0x30
 800b5aa:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b5b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b5b6:	f7ff faf5 	bl	800aba4 <read_submessage_list>
 800b5ba:	e757      	b.n	800b46c <wait_session_status+0x34>
 800b5bc:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800b5be:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b5c2:	47a0      	blx	r4
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	b01d      	add	sp, #116	@ 0x74
 800b5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5cc:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800b5d0:	a90c      	add	r1, sp, #48	@ 0x30
 800b5d2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b5dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b5de:	f7ff fae1 	bl	800aba4 <read_submessage_list>
 800b5e2:	e7c1      	b.n	800b568 <wait_session_status+0x130>

0800b5e4 <uxr_delete_session_retries>:
 800b5e4:	b530      	push	{r4, r5, lr}
 800b5e6:	b08f      	sub	sp, #60	@ 0x3c
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	f000 f956 	bl	800b89c <uxr_session_header_offset>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2210      	movs	r2, #16
 800b5f4:	a902      	add	r1, sp, #8
 800b5f6:	a806      	add	r0, sp, #24
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f7fe fee4 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800b600:	a906      	add	r1, sp, #24
 800b602:	4620      	mov	r0, r4
 800b604:	f000 f898 	bl	800b738 <uxr_buffer_delete_session>
 800b608:	2200      	movs	r2, #0
 800b60a:	9b06      	ldr	r3, [sp, #24]
 800b60c:	4620      	mov	r0, r4
 800b60e:	4611      	mov	r1, r2
 800b610:	f000 f8ee 	bl	800b7f0 <uxr_stamp_session_header>
 800b614:	a806      	add	r0, sp, #24
 800b616:	f7fe ff17 	bl	800a448 <ucdr_buffer_length>
 800b61a:	462b      	mov	r3, r5
 800b61c:	4602      	mov	r2, r0
 800b61e:	a902      	add	r1, sp, #8
 800b620:	4620      	mov	r0, r4
 800b622:	f7ff ff09 	bl	800b438 <wait_session_status>
 800b626:	b118      	cbz	r0, 800b630 <uxr_delete_session_retries+0x4c>
 800b628:	7960      	ldrb	r0, [r4, #5]
 800b62a:	fab0 f080 	clz	r0, r0
 800b62e:	0940      	lsrs	r0, r0, #5
 800b630:	b00f      	add	sp, #60	@ 0x3c
 800b632:	bd30      	pop	{r4, r5, pc}

0800b634 <uxr_prepare_stream_to_write_submessage>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	4682      	mov	sl, r0
 800b63c:	4610      	mov	r0, r2
 800b63e:	4615      	mov	r5, r2
 800b640:	461e      	mov	r6, r3
 800b642:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b646:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800b64a:	f105 0904 	add.w	r9, r5, #4
 800b64e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800b652:	9101      	str	r1, [sp, #4]
 800b654:	f000 fad0 	bl	800bbf8 <uxr_submessage_padding>
 800b658:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b65c:	4481      	add	r9, r0
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d01d      	beq.n	800b69e <uxr_prepare_stream_to_write_submessage+0x6a>
 800b662:	2b02      	cmp	r3, #2
 800b664:	d116      	bne.n	800b694 <uxr_prepare_stream_to_write_submessage+0x60>
 800b666:	4621      	mov	r1, r4
 800b668:	f10a 0008 	add.w	r0, sl, #8
 800b66c:	f000 fa4c 	bl	800bb08 <uxr_get_output_reliable_stream>
 800b670:	4604      	mov	r4, r0
 800b672:	b158      	cbz	r0, 800b68c <uxr_prepare_stream_to_write_submessage+0x58>
 800b674:	4649      	mov	r1, r9
 800b676:	4632      	mov	r2, r6
 800b678:	f004 f9d2 	bl	800fa20 <uxr_prepare_reliable_buffer_to_write>
 800b67c:	4604      	mov	r4, r0
 800b67e:	b12c      	cbz	r4, 800b68c <uxr_prepare_stream_to_write_submessage+0x58>
 800b680:	4643      	mov	r3, r8
 800b682:	b2aa      	uxth	r2, r5
 800b684:	4639      	mov	r1, r7
 800b686:	4630      	mov	r0, r6
 800b688:	f000 fa76 	bl	800bb78 <uxr_buffer_submessage_header>
 800b68c:	4620      	mov	r0, r4
 800b68e:	b002      	add	sp, #8
 800b690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b694:	2400      	movs	r4, #0
 800b696:	4620      	mov	r0, r4
 800b698:	b002      	add	sp, #8
 800b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69e:	4621      	mov	r1, r4
 800b6a0:	f10a 0008 	add.w	r0, sl, #8
 800b6a4:	f000 fa28 	bl	800baf8 <uxr_get_output_best_effort_stream>
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d0ee      	beq.n	800b68c <uxr_prepare_stream_to_write_submessage+0x58>
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	4632      	mov	r2, r6
 800b6b2:	f004 f8ef 	bl	800f894 <uxr_prepare_best_effort_buffer_to_write>
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	e7e1      	b.n	800b67e <uxr_prepare_stream_to_write_submessage+0x4a>
 800b6ba:	bf00      	nop

0800b6bc <uxr_init_session_info>:
 800b6bc:	b430      	push	{r4, r5}
 800b6be:	23ff      	movs	r3, #255	@ 0xff
 800b6c0:	0e15      	lsrs	r5, r2, #24
 800b6c2:	2409      	movs	r4, #9
 800b6c4:	7102      	strb	r2, [r0, #4]
 800b6c6:	7001      	strb	r1, [r0, #0]
 800b6c8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800b6cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800b6d0:	7045      	strb	r5, [r0, #1]
 800b6d2:	80c4      	strh	r4, [r0, #6]
 800b6d4:	7081      	strb	r1, [r0, #2]
 800b6d6:	70c2      	strb	r2, [r0, #3]
 800b6d8:	7143      	strb	r3, [r0, #5]
 800b6da:	bc30      	pop	{r4, r5}
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop

0800b6e0 <uxr_buffer_create_session>:
 800b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	b089      	sub	sp, #36	@ 0x24
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	2701      	movs	r7, #1
 800b6ea:	4e12      	ldr	r6, [pc, #72]	@ (800b734 <uxr_buffer_create_session+0x54>)
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	80c7      	strh	r7, [r0, #6]
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	9307      	str	r3, [sp, #28]
 800b6f4:	f8d4 1001 	ldr.w	r1, [r4, #1]
 800b6f8:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b6fc:	7822      	ldrb	r2, [r4, #0]
 800b6fe:	f8ad 7004 	strh.w	r7, [sp, #4]
 800b702:	88b4      	ldrh	r4, [r6, #4]
 800b704:	6837      	ldr	r7, [r6, #0]
 800b706:	9303      	str	r3, [sp, #12]
 800b708:	9102      	str	r1, [sp, #8]
 800b70a:	4619      	mov	r1, r3
 800b70c:	f88d 200c 	strb.w	r2, [sp, #12]
 800b710:	2210      	movs	r2, #16
 800b712:	f88d 300d 	strb.w	r3, [sp, #13]
 800b716:	9306      	str	r3, [sp, #24]
 800b718:	9700      	str	r7, [sp, #0]
 800b71a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800b71e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800b722:	f000 fa29 	bl	800bb78 <uxr_buffer_submessage_header>
 800b726:	4669      	mov	r1, sp
 800b728:	4628      	mov	r0, r5
 800b72a:	f001 f96b 	bl	800ca04 <uxr_serialize_CREATE_CLIENT_Payload>
 800b72e:	b009      	add	sp, #36	@ 0x24
 800b730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b732:	bf00      	nop
 800b734:	08015814 	.word	0x08015814

0800b738 <uxr_buffer_delete_session>:
 800b738:	4a0c      	ldr	r2, [pc, #48]	@ (800b76c <uxr_buffer_delete_session+0x34>)
 800b73a:	2302      	movs	r3, #2
 800b73c:	b530      	push	{r4, r5, lr}
 800b73e:	460c      	mov	r4, r1
 800b740:	b083      	sub	sp, #12
 800b742:	8911      	ldrh	r1, [r2, #8]
 800b744:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800b748:	2204      	movs	r2, #4
 800b74a:	80c3      	strh	r3, [r0, #6]
 800b74c:	f8ad 1006 	strh.w	r1, [sp, #6]
 800b750:	2300      	movs	r3, #0
 800b752:	4620      	mov	r0, r4
 800b754:	2103      	movs	r1, #3
 800b756:	f8ad 5004 	strh.w	r5, [sp, #4]
 800b75a:	f000 fa0d 	bl	800bb78 <uxr_buffer_submessage_header>
 800b75e:	a901      	add	r1, sp, #4
 800b760:	4620      	mov	r0, r4
 800b762:	f001 f9ff 	bl	800cb64 <uxr_serialize_DELETE_Payload>
 800b766:	b003      	add	sp, #12
 800b768:	bd30      	pop	{r4, r5, pc}
 800b76a:	bf00      	nop
 800b76c:	08015814 	.word	0x08015814

0800b770 <uxr_read_create_session_status>:
 800b770:	b510      	push	{r4, lr}
 800b772:	460b      	mov	r3, r1
 800b774:	b088      	sub	sp, #32
 800b776:	4604      	mov	r4, r0
 800b778:	a901      	add	r1, sp, #4
 800b77a:	4618      	mov	r0, r3
 800b77c:	f001 fa02 	bl	800cb84 <uxr_deserialize_STATUS_AGENT_Payload>
 800b780:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b784:	7163      	strb	r3, [r4, #5]
 800b786:	b008      	add	sp, #32
 800b788:	bd10      	pop	{r4, pc}
 800b78a:	bf00      	nop

0800b78c <uxr_read_delete_session_status>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	4604      	mov	r4, r0
 800b792:	4608      	mov	r0, r1
 800b794:	a902      	add	r1, sp, #8
 800b796:	f001 fa25 	bl	800cbe4 <uxr_deserialize_STATUS_Payload>
 800b79a:	88e3      	ldrh	r3, [r4, #6]
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d001      	beq.n	800b7a4 <uxr_read_delete_session_status+0x18>
 800b7a0:	b004      	add	sp, #16
 800b7a2:	bd10      	pop	{r4, pc}
 800b7a4:	f10d 000a 	add.w	r0, sp, #10
 800b7a8:	f7fe fffc 	bl	800a7a4 <uxr_object_id_from_raw>
 800b7ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b7b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b7b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d1f0      	bne.n	800b7a0 <uxr_read_delete_session_status+0x14>
 800b7be:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b7c2:	7163      	strb	r3, [r4, #5]
 800b7c4:	e7ec      	b.n	800b7a0 <uxr_read_delete_session_status+0x14>
 800b7c6:	bf00      	nop

0800b7c8 <uxr_stamp_create_session_header>:
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	2208      	movs	r2, #8
 800b7cc:	b08a      	sub	sp, #40	@ 0x28
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	eb0d 0002 	add.w	r0, sp, r2
 800b7d4:	f7fe fe0a 	bl	800a3ec <ucdr_init_buffer>
 800b7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7dc:	2300      	movs	r3, #0
 800b7de:	a802      	add	r0, sp, #8
 800b7e0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800b7e4:	9400      	str	r4, [sp, #0]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f000 fbc8 	bl	800bf7c <uxr_serialize_message_header>
 800b7ec:	b00a      	add	sp, #40	@ 0x28
 800b7ee:	bd10      	pop	{r4, pc}

0800b7f0 <uxr_stamp_session_header>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	b08c      	sub	sp, #48	@ 0x30
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4615      	mov	r5, r2
 800b7f8:	460e      	mov	r6, r1
 800b7fa:	a804      	add	r0, sp, #16
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	2208      	movs	r2, #8
 800b800:	9503      	str	r5, [sp, #12]
 800b802:	f7fe fdf3 	bl	800a3ec <ucdr_init_buffer>
 800b806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b80a:	4632      	mov	r2, r6
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	a804      	add	r0, sp, #16
 800b810:	9400      	str	r4, [sp, #0]
 800b812:	f000 fbb3 	bl	800bf7c <uxr_serialize_message_header>
 800b816:	b00c      	add	sp, #48	@ 0x30
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	bf00      	nop

0800b81c <uxr_read_session_header>:
 800b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b820:	4607      	mov	r7, r0
 800b822:	b084      	sub	sp, #16
 800b824:	4608      	mov	r0, r1
 800b826:	460c      	mov	r4, r1
 800b828:	4615      	mov	r5, r2
 800b82a:	461e      	mov	r6, r3
 800b82c:	f7fe fe10 	bl	800a450 <ucdr_buffer_remaining>
 800b830:	2808      	cmp	r0, #8
 800b832:	d803      	bhi.n	800b83c <uxr_read_session_header+0x20>
 800b834:	2000      	movs	r0, #0
 800b836:	b004      	add	sp, #16
 800b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b83c:	f10d 080c 	add.w	r8, sp, #12
 800b840:	4633      	mov	r3, r6
 800b842:	462a      	mov	r2, r5
 800b844:	4620      	mov	r0, r4
 800b846:	f10d 010b 	add.w	r1, sp, #11
 800b84a:	f8cd 8000 	str.w	r8, [sp]
 800b84e:	f000 fbb3 	bl	800bfb8 <uxr_deserialize_message_header>
 800b852:	783a      	ldrb	r2, [r7, #0]
 800b854:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b858:	4293      	cmp	r3, r2
 800b85a:	d1eb      	bne.n	800b834 <uxr_read_session_header+0x18>
 800b85c:	061b      	lsls	r3, r3, #24
 800b85e:	d41b      	bmi.n	800b898 <uxr_read_session_header+0x7c>
 800b860:	f898 2000 	ldrb.w	r2, [r8]
 800b864:	787b      	ldrb	r3, [r7, #1]
 800b866:	429a      	cmp	r2, r3
 800b868:	d003      	beq.n	800b872 <uxr_read_session_header+0x56>
 800b86a:	2001      	movs	r0, #1
 800b86c:	f080 0001 	eor.w	r0, r0, #1
 800b870:	e7e1      	b.n	800b836 <uxr_read_session_header+0x1a>
 800b872:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800b876:	1cb8      	adds	r0, r7, #2
 800b878:	78bb      	ldrb	r3, [r7, #2]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d1f5      	bne.n	800b86a <uxr_read_session_header+0x4e>
 800b87e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b882:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b886:	429a      	cmp	r2, r3
 800b888:	d1ef      	bne.n	800b86a <uxr_read_session_header+0x4e>
 800b88a:	7843      	ldrb	r3, [r0, #1]
 800b88c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b890:	429a      	cmp	r2, r3
 800b892:	d1ea      	bne.n	800b86a <uxr_read_session_header+0x4e>
 800b894:	2000      	movs	r0, #0
 800b896:	e7e9      	b.n	800b86c <uxr_read_session_header+0x50>
 800b898:	2001      	movs	r0, #1
 800b89a:	e7cc      	b.n	800b836 <uxr_read_session_header+0x1a>

0800b89c <uxr_session_header_offset>:
 800b89c:	f990 3000 	ldrsb.w	r3, [r0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	bfac      	ite	ge
 800b8a4:	2008      	movge	r0, #8
 800b8a6:	2004      	movlt	r0, #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop

0800b8ac <uxr_init_base_object_request>:
 800b8ac:	b530      	push	{r4, r5, lr}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800b8b4:	9101      	str	r1, [sp, #4]
 800b8b6:	88c3      	ldrh	r3, [r0, #6]
 800b8b8:	f1a3 010a 	sub.w	r1, r3, #10
 800b8bc:	b289      	uxth	r1, r1
 800b8be:	42a1      	cmp	r1, r4
 800b8c0:	d80e      	bhi.n	800b8e0 <uxr_init_base_object_request+0x34>
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	b29c      	uxth	r4, r3
 800b8c6:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	80c4      	strh	r4, [r0, #6]
 800b8ce:	1c91      	adds	r1, r2, #2
 800b8d0:	9801      	ldr	r0, [sp, #4]
 800b8d2:	7015      	strb	r5, [r2, #0]
 800b8d4:	7053      	strb	r3, [r2, #1]
 800b8d6:	f7fe ff79 	bl	800a7cc <uxr_object_id_to_raw>
 800b8da:	4620      	mov	r0, r4
 800b8dc:	b003      	add	sp, #12
 800b8de:	bd30      	pop	{r4, r5, pc}
 800b8e0:	230a      	movs	r3, #10
 800b8e2:	2500      	movs	r5, #0
 800b8e4:	461c      	mov	r4, r3
 800b8e6:	e7f1      	b.n	800b8cc <uxr_init_base_object_request+0x20>

0800b8e8 <uxr_parse_base_object_request>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	3002      	adds	r0, #2
 800b8ee:	460d      	mov	r5, r1
 800b8f0:	4616      	mov	r6, r2
 800b8f2:	f7fe ff57 	bl	800a7a4 <uxr_object_id_from_raw>
 800b8f6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800b8fa:	8028      	strh	r0, [r5, #0]
 800b8fc:	806b      	strh	r3, [r5, #2]
 800b8fe:	7822      	ldrb	r2, [r4, #0]
 800b900:	7863      	ldrb	r3, [r4, #1]
 800b902:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b906:	8033      	strh	r3, [r6, #0]
 800b908:	bd70      	pop	{r4, r5, r6, pc}
 800b90a:	bf00      	nop

0800b90c <uxr_stream_id>:
 800b90c:	2901      	cmp	r1, #1
 800b90e:	b430      	push	{r4, r5}
 800b910:	4604      	mov	r4, r0
 800b912:	b082      	sub	sp, #8
 800b914:	d01e      	beq.n	800b954 <uxr_stream_id+0x48>
 800b916:	2902      	cmp	r1, #2
 800b918:	f04f 0500 	mov.w	r5, #0
 800b91c:	d01d      	beq.n	800b95a <uxr_stream_id+0x4e>
 800b91e:	2300      	movs	r3, #0
 800b920:	4618      	mov	r0, r3
 800b922:	f365 0307 	bfi	r3, r5, #0, #8
 800b926:	f364 230f 	bfi	r3, r4, #8, #8
 800b92a:	f361 4317 	bfi	r3, r1, #16, #8
 800b92e:	f362 631f 	bfi	r3, r2, #24, #8
 800b932:	b2dc      	uxtb	r4, r3
 800b934:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b938:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b93c:	0e1b      	lsrs	r3, r3, #24
 800b93e:	f364 0007 	bfi	r0, r4, #0, #8
 800b942:	f361 200f 	bfi	r0, r1, #8, #8
 800b946:	f362 4017 	bfi	r0, r2, #16, #8
 800b94a:	f363 601f 	bfi	r0, r3, #24, #8
 800b94e:	b002      	add	sp, #8
 800b950:	bc30      	pop	{r4, r5}
 800b952:	4770      	bx	lr
 800b954:	1c45      	adds	r5, r0, #1
 800b956:	b2ed      	uxtb	r5, r5
 800b958:	e7e1      	b.n	800b91e <uxr_stream_id+0x12>
 800b95a:	f080 0580 	eor.w	r5, r0, #128	@ 0x80
 800b95e:	e7de      	b.n	800b91e <uxr_stream_id+0x12>

0800b960 <uxr_stream_id_from_raw>:
 800b960:	b430      	push	{r4, r5}
 800b962:	b082      	sub	sp, #8
 800b964:	b128      	cbz	r0, 800b972 <uxr_stream_id_from_raw+0x12>
 800b966:	0603      	lsls	r3, r0, #24
 800b968:	d421      	bmi.n	800b9ae <uxr_stream_id_from_raw+0x4e>
 800b96a:	1e44      	subs	r4, r0, #1
 800b96c:	2501      	movs	r5, #1
 800b96e:	b2e4      	uxtb	r4, r4
 800b970:	e001      	b.n	800b976 <uxr_stream_id_from_raw+0x16>
 800b972:	4605      	mov	r5, r0
 800b974:	4604      	mov	r4, r0
 800b976:	2300      	movs	r3, #0
 800b978:	461a      	mov	r2, r3
 800b97a:	f360 0307 	bfi	r3, r0, #0, #8
 800b97e:	f364 230f 	bfi	r3, r4, #8, #8
 800b982:	f365 4317 	bfi	r3, r5, #16, #8
 800b986:	f361 631f 	bfi	r3, r1, #24, #8
 800b98a:	b2dc      	uxtb	r4, r3
 800b98c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b990:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800b994:	0e1b      	lsrs	r3, r3, #24
 800b996:	f364 0207 	bfi	r2, r4, #0, #8
 800b99a:	f360 220f 	bfi	r2, r0, #8, #8
 800b99e:	f361 4217 	bfi	r2, r1, #16, #8
 800b9a2:	f363 621f 	bfi	r2, r3, #24, #8
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	b002      	add	sp, #8
 800b9aa:	bc30      	pop	{r4, r5}
 800b9ac:	4770      	bx	lr
 800b9ae:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 800b9b2:	2502      	movs	r5, #2
 800b9b4:	e7df      	b.n	800b976 <uxr_stream_id_from_raw+0x16>
 800b9b6:	bf00      	nop

0800b9b8 <uxr_init_stream_storage>:
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	7403      	strb	r3, [r0, #16]
 800b9bc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b9c0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800b9c4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop

0800b9cc <uxr_reset_stream_storage>:
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	7c03      	ldrb	r3, [r0, #16]
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	b14b      	cbz	r3, 800b9e8 <uxr_reset_stream_storage+0x1c>
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	2500      	movs	r5, #0
 800b9d8:	4630      	mov	r0, r6
 800b9da:	3501      	adds	r5, #1
 800b9dc:	f003 ff54 	bl	800f888 <uxr_reset_output_best_effort_stream>
 800b9e0:	7c23      	ldrb	r3, [r4, #16]
 800b9e2:	3610      	adds	r6, #16
 800b9e4:	42ab      	cmp	r3, r5
 800b9e6:	d8f7      	bhi.n	800b9d8 <uxr_reset_stream_storage+0xc>
 800b9e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b9ec:	b15b      	cbz	r3, 800ba06 <uxr_reset_stream_storage+0x3a>
 800b9ee:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9f2:	2500      	movs	r5, #0
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	3501      	adds	r5, #1
 800b9f8:	f003 fd4a 	bl	800f490 <uxr_reset_input_best_effort_stream>
 800b9fc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ba00:	3602      	adds	r6, #2
 800ba02:	42ab      	cmp	r3, r5
 800ba04:	d8f6      	bhi.n	800b9f4 <uxr_reset_stream_storage+0x28>
 800ba06:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ba0a:	b15b      	cbz	r3, 800ba24 <uxr_reset_stream_storage+0x58>
 800ba0c:	f104 0618 	add.w	r6, r4, #24
 800ba10:	2500      	movs	r5, #0
 800ba12:	4630      	mov	r0, r6
 800ba14:	3501      	adds	r5, #1
 800ba16:	f003 ffd9 	bl	800f9cc <uxr_reset_output_reliable_stream>
 800ba1a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ba1e:	3628      	adds	r6, #40	@ 0x28
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	d8f6      	bhi.n	800ba12 <uxr_reset_stream_storage+0x46>
 800ba24:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ba28:	b15b      	cbz	r3, 800ba42 <uxr_reset_stream_storage+0x76>
 800ba2a:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ba2e:	2500      	movs	r5, #0
 800ba30:	4630      	mov	r0, r6
 800ba32:	3501      	adds	r5, #1
 800ba34:	f003 fd94 	bl	800f560 <uxr_reset_input_reliable_stream>
 800ba38:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ba3c:	3618      	adds	r6, #24
 800ba3e:	42ab      	cmp	r3, r5
 800ba40:	d8f6      	bhi.n	800ba30 <uxr_reset_stream_storage+0x64>
 800ba42:	bd70      	pop	{r4, r5, r6, pc}

0800ba44 <uxr_add_output_best_effort_buffer>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	7c05      	ldrb	r5, [r0, #16]
 800ba48:	4604      	mov	r4, r0
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	1c6e      	adds	r6, r5, #1
 800ba4e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800ba52:	7426      	strb	r6, [r4, #16]
 800ba54:	f003 ff0c 	bl	800f870 <uxr_init_output_best_effort_stream>
 800ba58:	2201      	movs	r2, #1
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	b002      	add	sp, #8
 800ba60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba64:	f7ff bf52 	b.w	800b90c <uxr_stream_id>

0800ba68 <uxr_add_output_reliable_buffer>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 800ba70:	2528      	movs	r5, #40	@ 0x28
 800ba72:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800ba76:	fb05 0504 	mla	r5, r5, r4, r0
 800ba7a:	9600      	str	r6, [sp, #0]
 800ba7c:	1c66      	adds	r6, r4, #1
 800ba7e:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 800ba82:	f105 0018 	add.w	r0, r5, #24
 800ba86:	f003 ff6f 	bl	800f968 <uxr_init_output_reliable_stream>
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	2102      	movs	r1, #2
 800ba90:	b004      	add	sp, #16
 800ba92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba96:	f7ff bf39 	b.w	800b90c <uxr_stream_id>
 800ba9a:	bf00      	nop

0800ba9c <uxr_add_input_best_effort_buffer>:
 800ba9c:	b510      	push	{r4, lr}
 800ba9e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800baa2:	b082      	sub	sp, #8
 800baa4:	1c62      	adds	r2, r4, #1
 800baa6:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800baaa:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800baae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800bab2:	f003 fce9 	bl	800f488 <uxr_init_input_best_effort_stream>
 800bab6:	4620      	mov	r0, r4
 800bab8:	2200      	movs	r2, #0
 800baba:	2101      	movs	r1, #1
 800babc:	b002      	add	sp, #8
 800babe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bac2:	f7ff bf23 	b.w	800b90c <uxr_stream_id>
 800bac6:	bf00      	nop

0800bac8 <uxr_add_input_reliable_buffer>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800bad0:	2518      	movs	r5, #24
 800bad2:	9e08      	ldr	r6, [sp, #32]
 800bad4:	fb05 0504 	mla	r5, r5, r4, r0
 800bad8:	9600      	str	r6, [sp, #0]
 800bada:	1c66      	adds	r6, r4, #1
 800badc:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 800bae0:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800bae4:	f003 fd18 	bl	800f518 <uxr_init_input_reliable_stream>
 800bae8:	4620      	mov	r0, r4
 800baea:	2200      	movs	r2, #0
 800baec:	2102      	movs	r1, #2
 800baee:	b004      	add	sp, #16
 800baf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800baf4:	f7ff bf0a 	b.w	800b90c <uxr_stream_id>

0800baf8 <uxr_get_output_best_effort_stream>:
 800baf8:	7c03      	ldrb	r3, [r0, #16]
 800bafa:	428b      	cmp	r3, r1
 800bafc:	bf8c      	ite	hi
 800bafe:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800bb02:	2000      	movls	r0, #0
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop

0800bb08 <uxr_get_output_reliable_stream>:
 800bb08:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	d905      	bls.n	800bb1c <uxr_get_output_reliable_stream+0x14>
 800bb10:	2328      	movs	r3, #40	@ 0x28
 800bb12:	fb03 0101 	mla	r1, r3, r1, r0
 800bb16:	f101 0018 	add.w	r0, r1, #24
 800bb1a:	4770      	bx	lr
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	4770      	bx	lr

0800bb20 <uxr_get_input_best_effort_stream>:
 800bb20:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bb24:	428b      	cmp	r3, r1
 800bb26:	d903      	bls.n	800bb30 <uxr_get_input_best_effort_stream+0x10>
 800bb28:	3121      	adds	r1, #33	@ 0x21
 800bb2a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb2e:	4770      	bx	lr
 800bb30:	2000      	movs	r0, #0
 800bb32:	4770      	bx	lr

0800bb34 <uxr_get_input_reliable_stream>:
 800bb34:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800bb38:	428b      	cmp	r3, r1
 800bb3a:	d905      	bls.n	800bb48 <uxr_get_input_reliable_stream+0x14>
 800bb3c:	2318      	movs	r3, #24
 800bb3e:	fb03 0101 	mla	r1, r3, r1, r0
 800bb42:	f101 0048 	add.w	r0, r1, #72	@ 0x48
 800bb46:	4770      	bx	lr
 800bb48:	2000      	movs	r0, #0
 800bb4a:	4770      	bx	lr

0800bb4c <uxr_output_streams_confirmed>:
 800bb4c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bb50:	b183      	cbz	r3, 800bb74 <uxr_output_streams_confirmed+0x28>
 800bb52:	b570      	push	{r4, r5, r6, lr}
 800bb54:	4606      	mov	r6, r0
 800bb56:	f100 0518 	add.w	r5, r0, #24
 800bb5a:	2400      	movs	r4, #0
 800bb5c:	e000      	b.n	800bb60 <uxr_output_streams_confirmed+0x14>
 800bb5e:	b140      	cbz	r0, 800bb72 <uxr_output_streams_confirmed+0x26>
 800bb60:	4628      	mov	r0, r5
 800bb62:	3401      	adds	r4, #1
 800bb64:	f004 f9b8 	bl	800fed8 <uxr_is_output_up_to_date>
 800bb68:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800bb6c:	3528      	adds	r5, #40	@ 0x28
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	d8f5      	bhi.n	800bb5e <uxr_output_streams_confirmed+0x12>
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	2001      	movs	r0, #1
 800bb76:	4770      	bx	lr

0800bb78 <uxr_buffer_submessage_header>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	460e      	mov	r6, r1
 800bb7c:	2104      	movs	r1, #4
 800bb7e:	4604      	mov	r4, r0
 800bb80:	4615      	mov	r5, r2
 800bb82:	461f      	mov	r7, r3
 800bb84:	f7fe fc4e 	bl	800a424 <ucdr_align_to>
 800bb88:	2001      	movs	r0, #1
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	462b      	mov	r3, r5
 800bb8e:	ea47 0200 	orr.w	r2, r7, r0
 800bb92:	7520      	strb	r0, [r4, #20]
 800bb94:	4620      	mov	r0, r4
 800bb96:	f000 fa2f 	bl	800bff8 <uxr_serialize_submessage_header>
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f7fe fc58 	bl	800a450 <ucdr_buffer_remaining>
 800bba0:	42a8      	cmp	r0, r5
 800bba2:	bf34      	ite	cc
 800bba4:	2000      	movcc	r0, #0
 800bba6:	2001      	movcs	r0, #1
 800bba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbaa:	bf00      	nop

0800bbac <uxr_read_submessage_header>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	2104      	movs	r1, #4
 800bbb6:	4616      	mov	r6, r2
 800bbb8:	4698      	mov	r8, r3
 800bbba:	f7fe fc33 	bl	800a424 <ucdr_align_to>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f7fe fc46 	bl	800a450 <ucdr_buffer_remaining>
 800bbc4:	2803      	cmp	r0, #3
 800bbc6:	bf8c      	ite	hi
 800bbc8:	2701      	movhi	r7, #1
 800bbca:	2700      	movls	r7, #0
 800bbcc:	d802      	bhi.n	800bbd4 <uxr_read_submessage_header+0x28>
 800bbce:	4638      	mov	r0, r7
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	4633      	mov	r3, r6
 800bbd6:	4642      	mov	r2, r8
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f000 fa20 	bl	800c020 <uxr_deserialize_submessage_header>
 800bbe0:	f898 3000 	ldrb.w	r3, [r8]
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	f888 2000 	strb.w	r2, [r8]
 800bbf2:	7523      	strb	r3, [r4, #20]
 800bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbf8 <uxr_submessage_padding>:
 800bbf8:	f010 0003 	ands.w	r0, r0, #3
 800bbfc:	bf18      	it	ne
 800bbfe:	f1c0 0004 	rsbne	r0, r0, #4
 800bc02:	4770      	bx	lr

0800bc04 <uxr_millis>:
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	2001      	movs	r0, #1
 800bc0a:	4c0a      	ldr	r4, [pc, #40]	@ (800bc34 <uxr_millis+0x30>)
 800bc0c:	4669      	mov	r1, sp
 800bc0e:	f7f5 fc13 	bl	8001438 <clock_gettime>
 800bc12:	9800      	ldr	r0, [sp, #0]
 800bc14:	9d02      	ldr	r5, [sp, #8]
 800bc16:	2300      	movs	r3, #0
 800bc18:	fba0 0104 	umull	r0, r1, r0, r4
 800bc1c:	9e01      	ldr	r6, [sp, #4]
 800bc1e:	4a06      	ldr	r2, [pc, #24]	@ (800bc38 <uxr_millis+0x34>)
 800bc20:	1940      	adds	r0, r0, r5
 800bc22:	fb04 1106 	mla	r1, r4, r6, r1
 800bc26:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
 800bc2a:	f7f4 fd2d 	bl	8000688 <__aeabi_ldivmod>
 800bc2e:	b004      	add	sp, #16
 800bc30:	bd70      	pop	{r4, r5, r6, pc}
 800bc32:	bf00      	nop
 800bc34:	3b9aca00 	.word	0x3b9aca00
 800bc38:	000f4240 	.word	0x000f4240

0800bc3c <uxr_nanos>:
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	2001      	movs	r0, #1
 800bc42:	4669      	mov	r1, sp
 800bc44:	f7f5 fbf8 	bl	8001438 <clock_gettime>
 800bc48:	4906      	ldr	r1, [pc, #24]	@ (800bc64 <uxr_nanos+0x28>)
 800bc4a:	9802      	ldr	r0, [sp, #8]
 800bc4c:	e9dd 2400 	ldrd	r2, r4, [sp]
 800bc50:	fba2 2301 	umull	r2, r3, r2, r1
 800bc54:	fb01 3304 	mla	r3, r1, r4, r3
 800bc58:	4604      	mov	r4, r0
 800bc5a:	1810      	adds	r0, r2, r0
 800bc5c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800bc60:	b004      	add	sp, #16
 800bc62:	bd10      	pop	{r4, pc}
 800bc64:	3b9aca00 	.word	0x3b9aca00

0800bc68 <on_full_output_buffer_fragmented>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	b08a      	sub	sp, #40	@ 0x28
 800bc70:	4680      	mov	r8, r0
 800bc72:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800bc76:	f104 0008 	add.w	r0, r4, #8
 800bc7a:	f7ff ff45 	bl	800bb08 <uxr_get_output_reliable_stream>
 800bc7e:	4605      	mov	r5, r0
 800bc80:	f004 f934 	bl	800feec <get_available_free_slots>
 800bc84:	b978      	cbnz	r0, 800bca6 <on_full_output_buffer_fragmented+0x3e>
 800bc86:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 800bc90:	4798      	blx	r3
 800bc92:	b918      	cbnz	r0, 800bc9c <on_full_output_buffer_fragmented+0x34>
 800bc94:	2001      	movs	r0, #1
 800bc96:	b00a      	add	sp, #40	@ 0x28
 800bc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	f004 f925 	bl	800feec <get_available_free_slots>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d0f6      	beq.n	800bc94 <on_full_output_buffer_fragmented+0x2c>
 800bca6:	8929      	ldrh	r1, [r5, #8]
 800bca8:	f64f 7afc 	movw	sl, #65532	@ 0xfffc
 800bcac:	89e8      	ldrh	r0, [r5, #14]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	686e      	ldr	r6, [r5, #4]
 800bcb2:	7b2f      	ldrb	r7, [r5, #12]
 800bcb4:	fbb0 f2f1 	udiv	r2, r0, r1
 800bcb8:	fbb6 f6f1 	udiv	r6, r6, r1
 800bcbc:	fb01 0212 	mls	r2, r1, r2, r0
 800bcc0:	f1a6 0904 	sub.w	r9, r6, #4
 800bcc4:	ebaa 0a07 	sub.w	sl, sl, r7
 800bcc8:	6829      	ldr	r1, [r5, #0]
 800bcca:	b292      	uxth	r2, r2
 800bccc:	f8d4 70c4 	ldr.w	r7, [r4, #196]	@ 0xc4
 800bcd0:	44ca      	add	sl, r9
 800bcd2:	a802      	add	r0, sp, #8
 800bcd4:	fb06 f602 	mul.w	r6, r6, r2
 800bcd8:	464a      	mov	r2, r9
 800bcda:	fa1f fa8a 	uxth.w	sl, sl
 800bcde:	3604      	adds	r6, #4
 800bce0:	eba7 070a 	sub.w	r7, r7, sl
 800bce4:	4431      	add	r1, r6
 800bce6:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
 800bcea:	f851 6c04 	ldr.w	r6, [r1, #-4]
 800bcee:	9600      	str	r6, [sp, #0]
 800bcf0:	f7fe fb6a 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800bcf4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800bcf8:	f102 0308 	add.w	r3, r2, #8
 800bcfc:	454b      	cmp	r3, r9
 800bcfe:	d929      	bls.n	800bd54 <on_full_output_buffer_fragmented+0xec>
 800bd00:	4652      	mov	r2, sl
 800bd02:	2300      	movs	r3, #0
 800bd04:	210d      	movs	r1, #13
 800bd06:	a802      	add	r0, sp, #8
 800bd08:	f7ff ff36 	bl	800bb78 <uxr_buffer_submessage_header>
 800bd0c:	8928      	ldrh	r0, [r5, #8]
 800bd0e:	89ee      	ldrh	r6, [r5, #14]
 800bd10:	fbb6 f1f0 	udiv	r1, r6, r0
 800bd14:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd18:	fb00 6111 	mls	r1, r0, r1, r6
 800bd1c:	fbb3 f3f0 	udiv	r3, r3, r0
 800bd20:	b289      	uxth	r1, r1
 800bd22:	fb03 f301 	mul.w	r3, r3, r1
 800bd26:	f842 9003 	str.w	r9, [r2, r3]
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	89e8      	ldrh	r0, [r5, #14]
 800bd2e:	f004 f9e3 	bl	80100f8 <uxr_seq_num_add>
 800bd32:	9904      	ldr	r1, [sp, #16]
 800bd34:	4603      	mov	r3, r0
 800bd36:	9a03      	ldr	r2, [sp, #12]
 800bd38:	4640      	mov	r0, r8
 800bd3a:	1a52      	subs	r2, r2, r1
 800bd3c:	81eb      	strh	r3, [r5, #14]
 800bd3e:	f7fe fb55 	bl	800a3ec <ucdr_init_buffer>
 800bd42:	4640      	mov	r0, r8
 800bd44:	4622      	mov	r2, r4
 800bd46:	490f      	ldr	r1, [pc, #60]	@ (800bd84 <on_full_output_buffer_fragmented+0x11c>)
 800bd48:	f7fe fb26 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	b00a      	add	sp, #40	@ 0x28
 800bd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd54:	b292      	uxth	r2, r2
 800bd56:	2302      	movs	r3, #2
 800bd58:	210d      	movs	r1, #13
 800bd5a:	a802      	add	r0, sp, #8
 800bd5c:	f7ff ff0c 	bl	800bb78 <uxr_buffer_submessage_header>
 800bd60:	8928      	ldrh	r0, [r5, #8]
 800bd62:	89ee      	ldrh	r6, [r5, #14]
 800bd64:	686b      	ldr	r3, [r5, #4]
 800bd66:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800bd6a:	fbb6 f2f0 	udiv	r2, r6, r0
 800bd6e:	fbb3 f3f0 	udiv	r3, r3, r0
 800bd72:	fb00 6212 	mls	r2, r0, r2, r6
 800bd76:	3108      	adds	r1, #8
 800bd78:	6828      	ldr	r0, [r5, #0]
 800bd7a:	b292      	uxth	r2, r2
 800bd7c:	fb03 f302 	mul.w	r3, r3, r2
 800bd80:	50c1      	str	r1, [r0, r3]
 800bd82:	e7d2      	b.n	800bd2a <on_full_output_buffer_fragmented+0xc2>
 800bd84:	0800bc69 	.word	0x0800bc69

0800bd88 <uxr_prepare_output_stream>:
 800bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	2607      	movs	r6, #7
 800bd8e:	2500      	movs	r5, #0
 800bd90:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800bd92:	9202      	str	r2, [sp, #8]
 800bd94:	1d22      	adds	r2, r4, #4
 800bd96:	9103      	str	r1, [sp, #12]
 800bd98:	461c      	mov	r4, r3
 800bd9a:	e9cd 6500 	strd	r6, r5, [sp]
 800bd9e:	4606      	mov	r6, r0
 800bda0:	f7ff fc48 	bl	800b634 <uxr_prepare_stream_to_write_submessage>
 800bda4:	f080 0201 	eor.w	r2, r0, #1
 800bda8:	b2d2      	uxtb	r2, r2
 800bdaa:	75a2      	strb	r2, [r4, #22]
 800bdac:	b112      	cbz	r2, 800bdb4 <uxr_prepare_output_stream+0x2c>
 800bdae:	4628      	mov	r0, r5
 800bdb0:	b007      	add	sp, #28
 800bdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb4:	aa05      	add	r2, sp, #20
 800bdb6:	9902      	ldr	r1, [sp, #8]
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f7ff fd77 	bl	800b8ac <uxr_init_base_object_request>
 800bdbe:	a905      	add	r1, sp, #20
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 ff8e 	bl	800cce4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800bdc8:	68a1      	ldr	r1, [r4, #8]
 800bdca:	6862      	ldr	r2, [r4, #4]
 800bdcc:	4620      	mov	r0, r4
 800bdce:	69a6      	ldr	r6, [r4, #24]
 800bdd0:	69e7      	ldr	r7, [r4, #28]
 800bdd2:	1a52      	subs	r2, r2, r1
 800bdd4:	f7fe fb0a 	bl	800a3ec <ucdr_init_buffer>
 800bdd8:	4620      	mov	r0, r4
 800bdda:	463a      	mov	r2, r7
 800bddc:	4631      	mov	r1, r6
 800bdde:	f7fe fadb 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800bde2:	4628      	mov	r0, r5
 800bde4:	b007      	add	sp, #28
 800bde6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bde8 <uxr_prepare_output_stream_fragmented>:
 800bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	b091      	sub	sp, #68	@ 0x44
 800bdee:	4605      	mov	r5, r0
 800bdf0:	3008      	adds	r0, #8
 800bdf2:	461e      	mov	r6, r3
 800bdf4:	9105      	str	r1, [sp, #20]
 800bdf6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800bdfa:	9204      	str	r2, [sp, #16]
 800bdfc:	f7ff fe84 	bl	800bb08 <uxr_get_output_reliable_stream>
 800be00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800be04:	2b01      	cmp	r3, #1
 800be06:	f000 8092 	beq.w	800bf2e <uxr_prepare_output_stream_fragmented+0x146>
 800be0a:	4604      	mov	r4, r0
 800be0c:	2800      	cmp	r0, #0
 800be0e:	f000 808e 	beq.w	800bf2e <uxr_prepare_output_stream_fragmented+0x146>
 800be12:	f004 f86b 	bl	800feec <get_available_free_slots>
 800be16:	2800      	cmp	r0, #0
 800be18:	f000 8084 	beq.w	800bf24 <uxr_prepare_output_stream_fragmented+0x13c>
 800be1c:	8920      	ldrh	r0, [r4, #8]
 800be1e:	89e7      	ldrh	r7, [r4, #14]
 800be20:	7b21      	ldrb	r1, [r4, #12]
 800be22:	fbb7 f8f0 	udiv	r8, r7, r0
 800be26:	e9d4 3200 	ldrd	r3, r2, [r4]
 800be2a:	fb00 7818 	mls	r8, r0, r8, r7
 800be2e:	fbb2 f2f0 	udiv	r2, r2, r0
 800be32:	fa1f f888 	uxth.w	r8, r8
 800be36:	f1a2 0b04 	sub.w	fp, r2, #4
 800be3a:	9203      	str	r2, [sp, #12]
 800be3c:	fb02 f808 	mul.w	r8, r2, r8
 800be40:	f108 0804 	add.w	r8, r8, #4
 800be44:	4498      	add	r8, r3
 800be46:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800be4a:	4551      	cmp	r1, sl
 800be4c:	d37b      	bcc.n	800bf46 <uxr_prepare_output_stream_fragmented+0x15e>
 800be4e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be50:	f1ab 0904 	sub.w	r9, fp, #4
 800be54:	2300      	movs	r3, #0
 800be56:	a808      	add	r0, sp, #32
 800be58:	3208      	adds	r2, #8
 800be5a:	eba9 0901 	sub.w	r9, r9, r1
 800be5e:	f8cd a000 	str.w	sl, [sp]
 800be62:	4641      	mov	r1, r8
 800be64:	9202      	str	r2, [sp, #8]
 800be66:	465a      	mov	r2, fp
 800be68:	f7fe faae 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800be6c:	9b02      	ldr	r3, [sp, #8]
 800be6e:	fa1f f989 	uxth.w	r9, r9
 800be72:	210d      	movs	r1, #13
 800be74:	455b      	cmp	r3, fp
 800be76:	bf34      	ite	cc
 800be78:	2302      	movcc	r3, #2
 800be7a:	2300      	movcs	r3, #0
 800be7c:	a808      	add	r0, sp, #32
 800be7e:	464a      	mov	r2, r9
 800be80:	f7ff fe7a 	bl	800bb78 <uxr_buffer_submessage_header>
 800be84:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800be88:	6862      	ldr	r2, [r4, #4]
 800be8a:	4638      	mov	r0, r7
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	fbb7 f1fc 	udiv	r1, r7, ip
 800be92:	fbb2 f2fc 	udiv	r2, r2, ip
 800be96:	fb0c 7711 	mls	r7, ip, r1, r7
 800be9a:	2101      	movs	r1, #1
 800be9c:	b2bf      	uxth	r7, r7
 800be9e:	fb07 f702 	mul.w	r7, r7, r2
 800bea2:	f843 b007 	str.w	fp, [r3, r7]
 800bea6:	f004 f927 	bl	80100f8 <uxr_seq_num_add>
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	f10a 0104 	add.w	r1, sl, #4
 800beb0:	4607      	mov	r7, r0
 800beb2:	f1a3 0208 	sub.w	r2, r3, #8
 800beb6:	4630      	mov	r0, r6
 800beb8:	4441      	add	r1, r8
 800beba:	eba2 020a 	sub.w	r2, r2, sl
 800bebe:	f7fe fa95 	bl	800a3ec <ucdr_init_buffer>
 800bec2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800bec4:	2107      	movs	r1, #7
 800bec6:	81e7      	strh	r7, [r4, #14]
 800bec8:	1d1a      	adds	r2, r3, #4
 800beca:	2300      	movs	r3, #0
 800becc:	4630      	mov	r0, r6
 800bece:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800bed2:	bf28      	it	cs
 800bed4:	461a      	movcs	r2, r3
 800bed6:	b292      	uxth	r2, r2
 800bed8:	f7ff fe4e 	bl	800bb78 <uxr_buffer_submessage_header>
 800bedc:	aa07      	add	r2, sp, #28
 800bede:	9904      	ldr	r1, [sp, #16]
 800bee0:	4628      	mov	r0, r5
 800bee2:	f7ff fce3 	bl	800b8ac <uxr_init_base_object_request>
 800bee6:	4604      	mov	r4, r0
 800bee8:	b310      	cbz	r0, 800bf30 <uxr_prepare_output_stream_fragmented+0x148>
 800beea:	a907      	add	r1, sp, #28
 800beec:	4630      	mov	r0, r6
 800beee:	f000 fef9 	bl	800cce4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800bef2:	4630      	mov	r0, r6
 800bef4:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800bef8:	1a52      	subs	r2, r2, r1
 800befa:	f7fe fa77 	bl	800a3ec <ucdr_init_buffer>
 800befe:	9a02      	ldr	r2, [sp, #8]
 800bf00:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800bf02:	4630      	mov	r0, r6
 800bf04:	9b05      	ldr	r3, [sp, #20]
 800bf06:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 800bf0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bf0c:	e9c5 132f 	strd	r1, r3, [r5, #188]	@ 0xbc
 800bf10:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 800bf14:	462a      	mov	r2, r5
 800bf16:	4918      	ldr	r1, [pc, #96]	@ (800bf78 <uxr_prepare_output_stream_fragmented+0x190>)
 800bf18:	f7fe fa3e 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	b011      	add	sp, #68	@ 0x44
 800bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf24:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800bf26:	4628      	mov	r0, r5
 800bf28:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bf2a:	4798      	blx	r3
 800bf2c:	b920      	cbnz	r0, 800bf38 <uxr_prepare_output_stream_fragmented+0x150>
 800bf2e:	2400      	movs	r4, #0
 800bf30:	4620      	mov	r0, r4
 800bf32:	b011      	add	sp, #68	@ 0x44
 800bf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f003 ffd7 	bl	800feec <get_available_free_slots>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f47f af6c 	bne.w	800be1c <uxr_prepare_output_stream_fragmented+0x34>
 800bf44:	e7f3      	b.n	800bf2e <uxr_prepare_output_stream_fragmented+0x146>
 800bf46:	4638      	mov	r0, r7
 800bf48:	2101      	movs	r1, #1
 800bf4a:	f004 f8d5 	bl	80100f8 <uxr_seq_num_add>
 800bf4e:	8921      	ldrh	r1, [r4, #8]
 800bf50:	4607      	mov	r7, r0
 800bf52:	fbb0 f8f1 	udiv	r8, r0, r1
 800bf56:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf5a:	fb01 0818 	mls	r8, r1, r8, r0
 800bf5e:	fbb2 f2f1 	udiv	r2, r2, r1
 800bf62:	fa1f f888 	uxth.w	r8, r8
 800bf66:	7b21      	ldrb	r1, [r4, #12]
 800bf68:	fb08 f802 	mul.w	r8, r8, r2
 800bf6c:	f108 0804 	add.w	r8, r8, #4
 800bf70:	4498      	add	r8, r3
 800bf72:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800bf76:	e76a      	b.n	800be4e <uxr_prepare_output_stream_fragmented+0x66>
 800bf78:	0800bc69 	.word	0x0800bc69

0800bf7c <uxr_serialize_message_header>:
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7e:	4616      	mov	r6, r2
 800bf80:	b083      	sub	sp, #12
 800bf82:	4604      	mov	r4, r0
 800bf84:	460d      	mov	r5, r1
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	9f08      	ldr	r7, [sp, #32]
 800bf8a:	f7fd fa81 	bl	8009490 <ucdr_serialize_uint8_t>
 800bf8e:	4631      	mov	r1, r6
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7fd fa7d 	bl	8009490 <ucdr_serialize_uint8_t>
 800bf96:	9a01      	ldr	r2, [sp, #4]
 800bf98:	4620      	mov	r0, r4
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	f7fd fb24 	bl	80095e8 <ucdr_serialize_endian_uint16_t>
 800bfa0:	062b      	lsls	r3, r5, #24
 800bfa2:	d501      	bpl.n	800bfa8 <uxr_serialize_message_header+0x2c>
 800bfa4:	b003      	add	sp, #12
 800bfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	4620      	mov	r0, r4
 800bfac:	2204      	movs	r2, #4
 800bfae:	b003      	add	sp, #12
 800bfb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bfb4:	f003 b86c 	b.w	800f090 <ucdr_serialize_array_uint8_t>

0800bfb8 <uxr_deserialize_message_header>:
 800bfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfba:	4616      	mov	r6, r2
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	9f08      	ldr	r7, [sp, #32]
 800bfc6:	f7fd fa79 	bl	80094bc <ucdr_deserialize_uint8_t>
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7fd fa75 	bl	80094bc <ucdr_deserialize_uint8_t>
 800bfd2:	9a01      	ldr	r2, [sp, #4]
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	f7fd fbfa 	bl	80097d0 <ucdr_deserialize_endian_uint16_t>
 800bfdc:	f995 3000 	ldrsb.w	r3, [r5]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	da01      	bge.n	800bfe8 <uxr_deserialize_message_header+0x30>
 800bfe4:	b003      	add	sp, #12
 800bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe8:	4639      	mov	r1, r7
 800bfea:	4620      	mov	r0, r4
 800bfec:	2204      	movs	r2, #4
 800bfee:	b003      	add	sp, #12
 800bff0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bff4:	f003 b8b0 	b.w	800f158 <ucdr_deserialize_array_uint8_t>

0800bff8 <uxr_serialize_submessage_header>:
 800bff8:	b530      	push	{r4, r5, lr}
 800bffa:	4615      	mov	r5, r2
 800bffc:	b083      	sub	sp, #12
 800bffe:	4604      	mov	r4, r0
 800c000:	9301      	str	r3, [sp, #4]
 800c002:	f7fd fa45 	bl	8009490 <ucdr_serialize_uint8_t>
 800c006:	4629      	mov	r1, r5
 800c008:	4620      	mov	r0, r4
 800c00a:	f7fd fa41 	bl	8009490 <ucdr_serialize_uint8_t>
 800c00e:	9a01      	ldr	r2, [sp, #4]
 800c010:	4620      	mov	r0, r4
 800c012:	2101      	movs	r1, #1
 800c014:	b003      	add	sp, #12
 800c016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c01a:	f7fd bae5 	b.w	80095e8 <ucdr_serialize_endian_uint16_t>
 800c01e:	bf00      	nop

0800c020 <uxr_deserialize_submessage_header>:
 800c020:	b530      	push	{r4, r5, lr}
 800c022:	4615      	mov	r5, r2
 800c024:	b083      	sub	sp, #12
 800c026:	4604      	mov	r4, r0
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	f7fd fa47 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c02e:	4629      	mov	r1, r5
 800c030:	4620      	mov	r0, r4
 800c032:	f7fd fa43 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c036:	9a01      	ldr	r2, [sp, #4]
 800c038:	4620      	mov	r0, r4
 800c03a:	2101      	movs	r1, #1
 800c03c:	b003      	add	sp, #12
 800c03e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c042:	f7fd bbc5 	b.w	80097d0 <ucdr_deserialize_endian_uint16_t>
 800c046:	bf00      	nop

0800c048 <uxr_serialize_CLIENT_Representation>:
 800c048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c04c:	460c      	mov	r4, r1
 800c04e:	4605      	mov	r5, r0
 800c050:	2204      	movs	r2, #4
 800c052:	f003 f81d 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c056:	1d21      	adds	r1, r4, #4
 800c058:	4680      	mov	r8, r0
 800c05a:	2202      	movs	r2, #2
 800c05c:	4628      	mov	r0, r5
 800c05e:	f003 f817 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c062:	4607      	mov	r7, r0
 800c064:	1da1      	adds	r1, r4, #6
 800c066:	2202      	movs	r2, #2
 800c068:	ea07 0708 	and.w	r7, r7, r8
 800c06c:	4628      	mov	r0, r5
 800c06e:	f003 f80f 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c072:	2204      	movs	r2, #4
 800c074:	fa5f f887 	uxtb.w	r8, r7
 800c078:	4607      	mov	r7, r0
 800c07a:	f104 0108 	add.w	r1, r4, #8
 800c07e:	4628      	mov	r0, r5
 800c080:	f003 f806 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c084:	ea08 0707 	and.w	r7, r8, r7
 800c088:	4680      	mov	r8, r0
 800c08a:	7b21      	ldrb	r1, [r4, #12]
 800c08c:	4628      	mov	r0, r5
 800c08e:	f7fd f9ff 	bl	8009490 <ucdr_serialize_uint8_t>
 800c092:	ea08 0807 	and.w	r8, r8, r7
 800c096:	4607      	mov	r7, r0
 800c098:	7b61      	ldrb	r1, [r4, #13]
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7fd f9ca 	bl	8009434 <ucdr_serialize_bool>
 800c0a0:	ea08 0707 	and.w	r7, r8, r7
 800c0a4:	7b63      	ldrb	r3, [r4, #13]
 800c0a6:	ea07 0600 	and.w	r6, r7, r0
 800c0aa:	b933      	cbnz	r3, 800c0ba <uxr_serialize_CLIENT_Representation+0x72>
 800c0ac:	8ba1      	ldrh	r1, [r4, #28]
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f7fd fa1a 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c0b4:	4030      	ands	r0, r6
 800c0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ba:	6921      	ldr	r1, [r4, #16]
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f7fd fc01 	bl	80098c4 <ucdr_serialize_uint32_t>
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	b1cb      	cbz	r3, 800c0fa <uxr_serialize_CLIENT_Representation+0xb2>
 800c0c6:	b1d0      	cbz	r0, 800c0fe <uxr_serialize_CLIENT_Representation+0xb6>
 800c0c8:	46a0      	mov	r8, r4
 800c0ca:	f04f 0900 	mov.w	r9, #0
 800c0ce:	e000      	b.n	800c0d2 <uxr_serialize_CLIENT_Representation+0x8a>
 800c0d0:	b1a8      	cbz	r0, 800c0fe <uxr_serialize_CLIENT_Representation+0xb6>
 800c0d2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f003 f8fe 	bl	800f2d8 <ucdr_serialize_string>
 800c0dc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c0e0:	4607      	mov	r7, r0
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f003 f8f8 	bl	800f2d8 <ucdr_serialize_string>
 800c0e8:	f109 0901 	add.w	r9, r9, #1
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	4038      	ands	r0, r7
 800c0f0:	f108 0808 	add.w	r8, r8, #8
 800c0f4:	4599      	cmp	r9, r3
 800c0f6:	b2c0      	uxtb	r0, r0
 800c0f8:	d3ea      	bcc.n	800c0d0 <uxr_serialize_CLIENT_Representation+0x88>
 800c0fa:	4006      	ands	r6, r0
 800c0fc:	e7d6      	b.n	800c0ac <uxr_serialize_CLIENT_Representation+0x64>
 800c0fe:	2600      	movs	r6, #0
 800c100:	e7d4      	b.n	800c0ac <uxr_serialize_CLIENT_Representation+0x64>
 800c102:	bf00      	nop

0800c104 <uxr_deserialize_CLIENT_Representation>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	460c      	mov	r4, r1
 800c10a:	4605      	mov	r5, r0
 800c10c:	2204      	movs	r2, #4
 800c10e:	f003 f823 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c112:	1d21      	adds	r1, r4, #4
 800c114:	4680      	mov	r8, r0
 800c116:	2202      	movs	r2, #2
 800c118:	4628      	mov	r0, r5
 800c11a:	f003 f81d 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c11e:	4607      	mov	r7, r0
 800c120:	1da1      	adds	r1, r4, #6
 800c122:	2202      	movs	r2, #2
 800c124:	ea07 0708 	and.w	r7, r7, r8
 800c128:	4628      	mov	r0, r5
 800c12a:	f003 f815 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c12e:	2204      	movs	r2, #4
 800c130:	fa5f f887 	uxtb.w	r8, r7
 800c134:	4607      	mov	r7, r0
 800c136:	f104 0108 	add.w	r1, r4, #8
 800c13a:	4628      	mov	r0, r5
 800c13c:	f003 f80c 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c140:	ea08 0707 	and.w	r7, r8, r7
 800c144:	4680      	mov	r8, r0
 800c146:	f104 010c 	add.w	r1, r4, #12
 800c14a:	4628      	mov	r0, r5
 800c14c:	f7fd f9b6 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c150:	ea08 0807 	and.w	r8, r8, r7
 800c154:	4607      	mov	r7, r0
 800c156:	f104 010d 	add.w	r1, r4, #13
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7fd f980 	bl	8009460 <ucdr_deserialize_bool>
 800c160:	ea08 0707 	and.w	r7, r8, r7
 800c164:	7b63      	ldrb	r3, [r4, #13]
 800c166:	ea07 0600 	and.w	r6, r7, r0
 800c16a:	b93b      	cbnz	r3, 800c17c <uxr_deserialize_CLIENT_Representation+0x78>
 800c16c:	f104 011c 	add.w	r1, r4, #28
 800c170:	4628      	mov	r0, r5
 800c172:	f7fd fab9 	bl	80096e8 <ucdr_deserialize_uint16_t>
 800c176:	4030      	ands	r0, r6
 800c178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c17c:	f104 0110 	add.w	r1, r4, #16
 800c180:	4628      	mov	r0, r5
 800c182:	f7fd fccf 	bl	8009b24 <ucdr_deserialize_uint32_t>
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d903      	bls.n	800c194 <uxr_deserialize_CLIENT_Representation+0x90>
 800c18c:	2301      	movs	r3, #1
 800c18e:	2600      	movs	r6, #0
 800c190:	75ab      	strb	r3, [r5, #22]
 800c192:	e7eb      	b.n	800c16c <uxr_deserialize_CLIENT_Representation+0x68>
 800c194:	b1eb      	cbz	r3, 800c1d2 <uxr_deserialize_CLIENT_Representation+0xce>
 800c196:	b1f0      	cbz	r0, 800c1d6 <uxr_deserialize_CLIENT_Representation+0xd2>
 800c198:	46a0      	mov	r8, r4
 800c19a:	f04f 0900 	mov.w	r9, #0
 800c19e:	e000      	b.n	800c1a2 <uxr_deserialize_CLIENT_Representation+0x9e>
 800c1a0:	b1c8      	cbz	r0, 800c1d6 <uxr_deserialize_CLIENT_Representation+0xd2>
 800c1a2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c1a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f109 0901 	add.w	r9, r9, #1
 800c1b0:	f003 f8a2 	bl	800f2f8 <ucdr_deserialize_string>
 800c1b4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f108 0808 	add.w	r8, r8, #8
 800c1c4:	f003 f898 	bl	800f2f8 <ucdr_deserialize_string>
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	4038      	ands	r0, r7
 800c1cc:	4599      	cmp	r9, r3
 800c1ce:	b2c0      	uxtb	r0, r0
 800c1d0:	d3e6      	bcc.n	800c1a0 <uxr_deserialize_CLIENT_Representation+0x9c>
 800c1d2:	4006      	ands	r6, r0
 800c1d4:	e7ca      	b.n	800c16c <uxr_deserialize_CLIENT_Representation+0x68>
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	e7c8      	b.n	800c16c <uxr_deserialize_CLIENT_Representation+0x68>
 800c1da:	bf00      	nop

0800c1dc <uxr_serialize_AGENT_Representation>:
 800c1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	2204      	movs	r2, #4
 800c1e6:	f002 ff53 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c1ea:	1d21      	adds	r1, r4, #4
 800c1ec:	4607      	mov	r7, r0
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	f002 ff4d 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	1da1      	adds	r1, r4, #6
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	403e      	ands	r6, r7
 800c1fe:	4628      	mov	r0, r5
 800c200:	f002 ff46 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c204:	4603      	mov	r3, r0
 800c206:	b2f6      	uxtb	r6, r6
 800c208:	7a21      	ldrb	r1, [r4, #8]
 800c20a:	4628      	mov	r0, r5
 800c20c:	401e      	ands	r6, r3
 800c20e:	f7fd f911 	bl	8009434 <ucdr_serialize_bool>
 800c212:	7a23      	ldrb	r3, [r4, #8]
 800c214:	ea00 0706 	and.w	r7, r0, r6
 800c218:	b913      	cbnz	r3, 800c220 <uxr_serialize_AGENT_Representation+0x44>
 800c21a:	4638      	mov	r0, r7
 800c21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c220:	68e1      	ldr	r1, [r4, #12]
 800c222:	4628      	mov	r0, r5
 800c224:	f7fd fb4e 	bl	80098c4 <ucdr_serialize_uint32_t>
 800c228:	68e3      	ldr	r3, [r4, #12]
 800c22a:	b313      	cbz	r3, 800c272 <uxr_serialize_AGENT_Representation+0x96>
 800c22c:	b1e8      	cbz	r0, 800c26a <uxr_serialize_AGENT_Representation+0x8e>
 800c22e:	46a0      	mov	r8, r4
 800c230:	f04f 0900 	mov.w	r9, #0
 800c234:	e000      	b.n	800c238 <uxr_serialize_AGENT_Representation+0x5c>
 800c236:	b1c3      	cbz	r3, 800c26a <uxr_serialize_AGENT_Representation+0x8e>
 800c238:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c23c:	4628      	mov	r0, r5
 800c23e:	f003 f84b 	bl	800f2d8 <ucdr_serialize_string>
 800c242:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c246:	4606      	mov	r6, r0
 800c248:	4628      	mov	r0, r5
 800c24a:	f003 f845 	bl	800f2d8 <ucdr_serialize_string>
 800c24e:	f109 0901 	add.w	r9, r9, #1
 800c252:	68e2      	ldr	r2, [r4, #12]
 800c254:	ea06 0300 	and.w	r3, r6, r0
 800c258:	f108 0808 	add.w	r8, r8, #8
 800c25c:	4591      	cmp	r9, r2
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	d3e9      	bcc.n	800c236 <uxr_serialize_AGENT_Representation+0x5a>
 800c262:	401f      	ands	r7, r3
 800c264:	4638      	mov	r0, r7
 800c266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c26a:	2700      	movs	r7, #0
 800c26c:	4638      	mov	r0, r7
 800c26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c272:	4007      	ands	r7, r0
 800c274:	e7d1      	b.n	800c21a <uxr_serialize_AGENT_Representation+0x3e>
 800c276:	bf00      	nop

0800c278 <uxr_serialize_ObjectVariant.part.0>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	780b      	ldrb	r3, [r1, #0]
 800c27c:	460c      	mov	r4, r1
 800c27e:	4605      	mov	r5, r0
 800c280:	3b01      	subs	r3, #1
 800c282:	2b0d      	cmp	r3, #13
 800c284:	d869      	bhi.n	800c35a <uxr_serialize_ObjectVariant.part.0+0xe2>
 800c286:	e8df f003 	tbb	[pc, r3]
 800c28a:	074a      	.short	0x074a
 800c28c:	07073030 	.word	0x07073030
 800c290:	21680707 	.word	0x21680707
 800c294:	45632121 	.word	0x45632121
 800c298:	7909      	ldrb	r1, [r1, #4]
 800c29a:	f7fd f8f9 	bl	8009490 <ucdr_serialize_uint8_t>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	b158      	cbz	r0, 800c2ba <uxr_serialize_ObjectVariant.part.0+0x42>
 800c2a2:	7923      	ldrb	r3, [r4, #4]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d003      	beq.n	800c2b0 <uxr_serialize_ObjectVariant.part.0+0x38>
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d029      	beq.n	800c300 <uxr_serialize_ObjectVariant.part.0+0x88>
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d104      	bne.n	800c2ba <uxr_serialize_ObjectVariant.part.0+0x42>
 800c2b0:	68a1      	ldr	r1, [r4, #8]
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f003 f810 	bl	800f2d8 <ucdr_serialize_string>
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800c2be:	4628      	mov	r0, r5
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	f002 fee5 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c2c6:	4030      	ands	r0, r6
 800c2c8:	b2c0      	uxtb	r0, r0
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	7909      	ldrb	r1, [r1, #4]
 800c2ce:	f7fd f8df 	bl	8009490 <ucdr_serialize_uint8_t>
 800c2d2:	b1e8      	cbz	r0, 800c310 <uxr_serialize_ObjectVariant.part.0+0x98>
 800c2d4:	7923      	ldrb	r3, [r4, #4]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d001      	beq.n	800c2de <uxr_serialize_ObjectVariant.part.0+0x66>
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d13d      	bne.n	800c35a <uxr_serialize_ObjectVariant.part.0+0xe2>
 800c2de:	68a1      	ldr	r1, [r4, #8]
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2e6:	f002 bff7 	b.w	800f2d8 <ucdr_serialize_string>
 800c2ea:	7909      	ldrb	r1, [r1, #4]
 800c2ec:	f7fd f8d0 	bl	8009490 <ucdr_serialize_uint8_t>
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d0e1      	beq.n	800c2ba <uxr_serialize_ObjectVariant.part.0+0x42>
 800c2f6:	7923      	ldrb	r3, [r4, #4]
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d0d9      	beq.n	800c2b0 <uxr_serialize_ObjectVariant.part.0+0x38>
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d1dc      	bne.n	800c2ba <uxr_serialize_ObjectVariant.part.0+0x42>
 800c300:	68a2      	ldr	r2, [r4, #8]
 800c302:	f104 010c 	add.w	r1, r4, #12
 800c306:	4628      	mov	r0, r5
 800c308:	f002 ffba 	bl	800f280 <ucdr_serialize_sequence_uint8_t>
 800c30c:	4606      	mov	r6, r0
 800c30e:	e7d4      	b.n	800c2ba <uxr_serialize_ObjectVariant.part.0+0x42>
 800c310:	2000      	movs	r0, #0
 800c312:	bd70      	pop	{r4, r5, r6, pc}
 800c314:	3104      	adds	r1, #4
 800c316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c31a:	f7ff be95 	b.w	800c048 <uxr_serialize_CLIENT_Representation>
 800c31e:	7909      	ldrb	r1, [r1, #4]
 800c320:	f7fd f8b6 	bl	8009490 <ucdr_serialize_uint8_t>
 800c324:	4606      	mov	r6, r0
 800c326:	b158      	cbz	r0, 800c340 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c328:	7923      	ldrb	r3, [r4, #4]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d003      	beq.n	800c336 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d015      	beq.n	800c35e <uxr_serialize_ObjectVariant.part.0+0xe6>
 800c332:	2b01      	cmp	r3, #1
 800c334:	d104      	bne.n	800c340 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c336:	68a1      	ldr	r1, [r4, #8]
 800c338:	4628      	mov	r0, r5
 800c33a:	f002 ffcd 	bl	800f2d8 <ucdr_serialize_string>
 800c33e:	4606      	mov	r6, r0
 800c340:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800c344:	4628      	mov	r0, r5
 800c346:	f7fd fde3 	bl	8009f10 <ucdr_serialize_int16_t>
 800c34a:	4030      	ands	r0, r6
 800c34c:	b2c0      	uxtb	r0, r0
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	3104      	adds	r1, #4
 800c352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c356:	f7ff bf41 	b.w	800c1dc <uxr_serialize_AGENT_Representation>
 800c35a:	2001      	movs	r0, #1
 800c35c:	bd70      	pop	{r4, r5, r6, pc}
 800c35e:	68a2      	ldr	r2, [r4, #8]
 800c360:	f104 010c 	add.w	r1, r4, #12
 800c364:	4628      	mov	r0, r5
 800c366:	f002 ff8b 	bl	800f280 <ucdr_serialize_sequence_uint8_t>
 800c36a:	4606      	mov	r6, r0
 800c36c:	e7e8      	b.n	800c340 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c36e:	bf00      	nop

0800c370 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	460d      	mov	r5, r1
 800c374:	7809      	ldrb	r1, [r1, #0]
 800c376:	4606      	mov	r6, r0
 800c378:	f7fd f85c 	bl	8009434 <ucdr_serialize_bool>
 800c37c:	782b      	ldrb	r3, [r5, #0]
 800c37e:	4604      	mov	r4, r0
 800c380:	b94b      	cbnz	r3, 800c396 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c382:	7a29      	ldrb	r1, [r5, #8]
 800c384:	4630      	mov	r0, r6
 800c386:	f7fd f855 	bl	8009434 <ucdr_serialize_bool>
 800c38a:	7a2b      	ldrb	r3, [r5, #8]
 800c38c:	4004      	ands	r4, r0
 800c38e:	b2e4      	uxtb	r4, r4
 800c390:	b943      	cbnz	r3, 800c3a4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c392:	4620      	mov	r0, r4
 800c394:	bd70      	pop	{r4, r5, r6, pc}
 800c396:	6869      	ldr	r1, [r5, #4]
 800c398:	4630      	mov	r0, r6
 800c39a:	f002 ff9d 	bl	800f2d8 <ucdr_serialize_string>
 800c39e:	4004      	ands	r4, r0
 800c3a0:	b2e4      	uxtb	r4, r4
 800c3a2:	e7ee      	b.n	800c382 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c3a4:	68e9      	ldr	r1, [r5, #12]
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f002 ff96 	bl	800f2d8 <ucdr_serialize_string>
 800c3ac:	4004      	ands	r4, r0
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	bd70      	pop	{r4, r5, r6, pc}
 800c3b2:	bf00      	nop

0800c3b4 <uxr_serialize_OBJK_Topic_Binary>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	460d      	mov	r5, r1
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	6809      	ldr	r1, [r1, #0]
 800c3bc:	f002 ff8c 	bl	800f2d8 <ucdr_serialize_string>
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	7929      	ldrb	r1, [r5, #4]
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7fd f835 	bl	8009434 <ucdr_serialize_bool>
 800c3ca:	792b      	ldrb	r3, [r5, #4]
 800c3cc:	4004      	ands	r4, r0
 800c3ce:	b2e4      	uxtb	r4, r4
 800c3d0:	b943      	cbnz	r3, 800c3e4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c3d2:	7b29      	ldrb	r1, [r5, #12]
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7fd f82d 	bl	8009434 <ucdr_serialize_bool>
 800c3da:	7b2b      	ldrb	r3, [r5, #12]
 800c3dc:	4004      	ands	r4, r0
 800c3de:	b93b      	cbnz	r3, 800c3f0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	68a9      	ldr	r1, [r5, #8]
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f002 ff76 	bl	800f2d8 <ucdr_serialize_string>
 800c3ec:	4004      	ands	r4, r0
 800c3ee:	e7f0      	b.n	800c3d2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c3f0:	6929      	ldr	r1, [r5, #16]
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f002 ff70 	bl	800f2d8 <ucdr_serialize_string>
 800c3f8:	4004      	ands	r4, r0
 800c3fa:	b2e4      	uxtb	r4, r4
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}

0800c400 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	460c      	mov	r4, r1
 800c406:	7809      	ldrb	r1, [r1, #0]
 800c408:	4606      	mov	r6, r0
 800c40a:	f7fd f813 	bl	8009434 <ucdr_serialize_bool>
 800c40e:	7823      	ldrb	r3, [r4, #0]
 800c410:	4605      	mov	r5, r0
 800c412:	b96b      	cbnz	r3, 800c430 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c414:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800c418:	4630      	mov	r0, r6
 800c41a:	f7fd f80b 	bl	8009434 <ucdr_serialize_bool>
 800c41e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c422:	4005      	ands	r5, r0
 800c424:	b2ed      	uxtb	r5, r5
 800c426:	2b00      	cmp	r3, #0
 800c428:	d169      	bne.n	800c4fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c42a:	4628      	mov	r0, r5
 800c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c430:	6861      	ldr	r1, [r4, #4]
 800c432:	4630      	mov	r0, r6
 800c434:	f7fd fa46 	bl	80098c4 <ucdr_serialize_uint32_t>
 800c438:	6863      	ldr	r3, [r4, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d06b      	beq.n	800c516 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d067      	beq.n	800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c442:	68a1      	ldr	r1, [r4, #8]
 800c444:	4630      	mov	r0, r6
 800c446:	f002 ff47 	bl	800f2d8 <ucdr_serialize_string>
 800c44a:	6863      	ldr	r3, [r4, #4]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d953      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c450:	2800      	cmp	r0, #0
 800c452:	d05e      	beq.n	800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c454:	68e1      	ldr	r1, [r4, #12]
 800c456:	4630      	mov	r0, r6
 800c458:	f002 ff3e 	bl	800f2d8 <ucdr_serialize_string>
 800c45c:	6863      	ldr	r3, [r4, #4]
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d94a      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c462:	2800      	cmp	r0, #0
 800c464:	d055      	beq.n	800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c466:	6921      	ldr	r1, [r4, #16]
 800c468:	4630      	mov	r0, r6
 800c46a:	f002 ff35 	bl	800f2d8 <ucdr_serialize_string>
 800c46e:	6863      	ldr	r3, [r4, #4]
 800c470:	2b03      	cmp	r3, #3
 800c472:	d941      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c474:	2800      	cmp	r0, #0
 800c476:	d04c      	beq.n	800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c478:	6961      	ldr	r1, [r4, #20]
 800c47a:	4630      	mov	r0, r6
 800c47c:	f002 ff2c 	bl	800f2d8 <ucdr_serialize_string>
 800c480:	6863      	ldr	r3, [r4, #4]
 800c482:	2b04      	cmp	r3, #4
 800c484:	d938      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c486:	2800      	cmp	r0, #0
 800c488:	d043      	beq.n	800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c48a:	69a1      	ldr	r1, [r4, #24]
 800c48c:	4630      	mov	r0, r6
 800c48e:	f002 ff23 	bl	800f2d8 <ucdr_serialize_string>
 800c492:	6863      	ldr	r3, [r4, #4]
 800c494:	2b05      	cmp	r3, #5
 800c496:	d92f      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c498:	2800      	cmp	r0, #0
 800c49a:	d03a      	beq.n	800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c49c:	69e1      	ldr	r1, [r4, #28]
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f002 ff1a 	bl	800f2d8 <ucdr_serialize_string>
 800c4a4:	6863      	ldr	r3, [r4, #4]
 800c4a6:	2b06      	cmp	r3, #6
 800c4a8:	d926      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c4aa:	b390      	cbz	r0, 800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c4ac:	6a21      	ldr	r1, [r4, #32]
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f002 ff12 	bl	800f2d8 <ucdr_serialize_string>
 800c4b4:	6863      	ldr	r3, [r4, #4]
 800c4b6:	2b07      	cmp	r3, #7
 800c4b8:	d91e      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c4ba:	b350      	cbz	r0, 800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c4bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f002 ff0a 	bl	800f2d8 <ucdr_serialize_string>
 800c4c4:	6863      	ldr	r3, [r4, #4]
 800c4c6:	2b08      	cmp	r3, #8
 800c4c8:	d916      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c4ca:	b310      	cbz	r0, 800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c4cc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f002 ff02 	bl	800f2d8 <ucdr_serialize_string>
 800c4d4:	6863      	ldr	r3, [r4, #4]
 800c4d6:	2b09      	cmp	r3, #9
 800c4d8:	d90e      	bls.n	800c4f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c4da:	b1d0      	cbz	r0, 800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c4dc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800c4e0:	2709      	movs	r7, #9
 800c4e2:	e000      	b.n	800c4e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c4e4:	b1a8      	cbz	r0, 800c512 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c4e6:	f858 1b04 	ldr.w	r1, [r8], #4
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f002 fef4 	bl	800f2d8 <ucdr_serialize_string>
 800c4f0:	3701      	adds	r7, #1
 800c4f2:	6862      	ldr	r2, [r4, #4]
 800c4f4:	4297      	cmp	r7, r2
 800c4f6:	d3f5      	bcc.n	800c4e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c4f8:	4005      	ands	r5, r0
 800c4fa:	b2ed      	uxtb	r5, r5
 800c4fc:	e78a      	b.n	800c414 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c4fe:	4630      	mov	r0, r6
 800c500:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c502:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c506:	f002 febb 	bl	800f280 <ucdr_serialize_sequence_uint8_t>
 800c50a:	4005      	ands	r5, r0
 800c50c:	4628      	mov	r0, r5
 800c50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c512:	2500      	movs	r5, #0
 800c514:	e77e      	b.n	800c414 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c516:	4028      	ands	r0, r5
 800c518:	b2c5      	uxtb	r5, r0
 800c51a:	e77b      	b.n	800c414 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c51c <uxr_serialize_OBJK_Publisher_Binary>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	460d      	mov	r5, r1
 800c520:	7809      	ldrb	r1, [r1, #0]
 800c522:	4606      	mov	r6, r0
 800c524:	f7fc ff86 	bl	8009434 <ucdr_serialize_bool>
 800c528:	782b      	ldrb	r3, [r5, #0]
 800c52a:	4604      	mov	r4, r0
 800c52c:	b94b      	cbnz	r3, 800c542 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c52e:	7a29      	ldrb	r1, [r5, #8]
 800c530:	4630      	mov	r0, r6
 800c532:	f7fc ff7f 	bl	8009434 <ucdr_serialize_bool>
 800c536:	7a2b      	ldrb	r3, [r5, #8]
 800c538:	4004      	ands	r4, r0
 800c53a:	b2e4      	uxtb	r4, r4
 800c53c:	b943      	cbnz	r3, 800c550 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800c53e:	4620      	mov	r0, r4
 800c540:	bd70      	pop	{r4, r5, r6, pc}
 800c542:	6869      	ldr	r1, [r5, #4]
 800c544:	4630      	mov	r0, r6
 800c546:	f002 fec7 	bl	800f2d8 <ucdr_serialize_string>
 800c54a:	4004      	ands	r4, r0
 800c54c:	b2e4      	uxtb	r4, r4
 800c54e:	e7ee      	b.n	800c52e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800c550:	f105 010c 	add.w	r1, r5, #12
 800c554:	4630      	mov	r0, r6
 800c556:	f7ff ff53 	bl	800c400 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c55a:	4004      	ands	r4, r0
 800c55c:	4620      	mov	r0, r4
 800c55e:	bd70      	pop	{r4, r5, r6, pc}

0800c560 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800c560:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800c564:	4688      	mov	r8, r1
 800c566:	4681      	mov	r9, r0
 800c568:	8809      	ldrh	r1, [r1, #0]
 800c56a:	f7fc ffbd 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c56e:	4606      	mov	r6, r0
 800c570:	f898 1002 	ldrb.w	r1, [r8, #2]
 800c574:	4648      	mov	r0, r9
 800c576:	f7fc ff5d 	bl	8009434 <ucdr_serialize_bool>
 800c57a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c57e:	4030      	ands	r0, r6
 800c580:	b2c5      	uxtb	r5, r0
 800c582:	b9eb      	cbnz	r3, 800c5c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800c584:	f898 1006 	ldrb.w	r1, [r8, #6]
 800c588:	4648      	mov	r0, r9
 800c58a:	f7fc ff53 	bl	8009434 <ucdr_serialize_bool>
 800c58e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c592:	4005      	ands	r5, r0
 800c594:	bb7b      	cbnz	r3, 800c5f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800c596:	f898 100c 	ldrb.w	r1, [r8, #12]
 800c59a:	4648      	mov	r0, r9
 800c59c:	f7fc ff4a 	bl	8009434 <ucdr_serialize_bool>
 800c5a0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800c5a4:	4005      	ands	r5, r0
 800c5a6:	b9f3      	cbnz	r3, 800c5e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800c5a8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800c5ac:	4648      	mov	r0, r9
 800c5ae:	f7fc ff41 	bl	8009434 <ucdr_serialize_bool>
 800c5b2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800c5b6:	4005      	ands	r5, r0
 800c5b8:	b94b      	cbnz	r3, 800c5ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c5c0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	f7fc ff8f 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c5ca:	4005      	ands	r5, r0
 800c5cc:	e7da      	b.n	800c584 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800c5ce:	4648      	mov	r0, r9
 800c5d0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c5d4:	f108 011c 	add.w	r1, r8, #28
 800c5d8:	f002 fe52 	bl	800f280 <ucdr_serialize_sequence_uint8_t>
 800c5dc:	4028      	ands	r0, r5
 800c5de:	b2c5      	uxtb	r5, r0
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c5e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c5ea:	4648      	mov	r0, r9
 800c5ec:	f7fd f96a 	bl	80098c4 <ucdr_serialize_uint32_t>
 800c5f0:	4028      	ands	r0, r5
 800c5f2:	b2c5      	uxtb	r5, r0
 800c5f4:	e7d8      	b.n	800c5a8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800c5f6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	f7fd f962 	bl	80098c4 <ucdr_serialize_uint32_t>
 800c600:	4028      	ands	r0, r5
 800c602:	b2c5      	uxtb	r5, r0
 800c604:	e7c7      	b.n	800c596 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800c606:	bf00      	nop

0800c608 <uxr_serialize_OBJK_DataWriter_Binary>:
 800c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60a:	2202      	movs	r2, #2
 800c60c:	460d      	mov	r5, r1
 800c60e:	4606      	mov	r6, r0
 800c610:	f002 fd3e 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c614:	4604      	mov	r4, r0
 800c616:	78a9      	ldrb	r1, [r5, #2]
 800c618:	4630      	mov	r0, r6
 800c61a:	f7fc ff0b 	bl	8009434 <ucdr_serialize_bool>
 800c61e:	78ab      	ldrb	r3, [r5, #2]
 800c620:	4004      	ands	r4, r0
 800c622:	b2e4      	uxtb	r4, r4
 800c624:	b90b      	cbnz	r3, 800c62a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800c626:	4620      	mov	r0, r4
 800c628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c62a:	f105 0108 	add.w	r1, r5, #8
 800c62e:	4630      	mov	r0, r6
 800c630:	f7ff ff96 	bl	800c560 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800c634:	4607      	mov	r7, r0
 800c636:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7fc fefa 	bl	8009434 <ucdr_serialize_bool>
 800c640:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800c644:	4007      	ands	r7, r0
 800c646:	b2ff      	uxtb	r7, r7
 800c648:	b913      	cbnz	r3, 800c650 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800c64a:	403c      	ands	r4, r7
 800c64c:	4620      	mov	r0, r4
 800c64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c650:	4630      	mov	r0, r6
 800c652:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800c656:	f7fd fb8b 	bl	8009d70 <ucdr_serialize_uint64_t>
 800c65a:	4007      	ands	r7, r0
 800c65c:	e7f5      	b.n	800c64a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800c65e:	bf00      	nop

0800c660 <uxr_deserialize_ObjectVariant>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	4605      	mov	r5, r0
 800c664:	460e      	mov	r6, r1
 800c666:	f7fc ff29 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c66a:	b320      	cbz	r0, 800c6b6 <uxr_deserialize_ObjectVariant+0x56>
 800c66c:	7833      	ldrb	r3, [r6, #0]
 800c66e:	4604      	mov	r4, r0
 800c670:	3b01      	subs	r3, #1
 800c672:	2b0d      	cmp	r3, #13
 800c674:	d81d      	bhi.n	800c6b2 <uxr_deserialize_ObjectVariant+0x52>
 800c676:	e8df f003 	tbb	[pc, r3]
 800c67a:	2107      	.short	0x2107
 800c67c:	21214b4b 	.word	0x21214b4b
 800c680:	381c2121 	.word	0x381c2121
 800c684:	876a3838 	.word	0x876a3838
 800c688:	1d31      	adds	r1, r6, #4
 800c68a:	4628      	mov	r0, r5
 800c68c:	f7fc ff16 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c690:	4607      	mov	r7, r0
 800c692:	b138      	cbz	r0, 800c6a4 <uxr_deserialize_ObjectVariant+0x44>
 800c694:	7933      	ldrb	r3, [r6, #4]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d07c      	beq.n	800c794 <uxr_deserialize_ObjectVariant+0x134>
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	f000 8082 	beq.w	800c7a4 <uxr_deserialize_ObjectVariant+0x144>
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d077      	beq.n	800c794 <uxr_deserialize_ObjectVariant+0x134>
 800c6a4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f7fd fcb1 	bl	800a010 <ucdr_deserialize_int16_t>
 800c6ae:	4038      	ands	r0, r7
 800c6b0:	b2c4      	uxtb	r4, r0
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b6:	2400      	movs	r4, #0
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6bc:	1d31      	adds	r1, r6, #4
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f7fc fefc 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c6c4:	4607      	mov	r7, r0
 800c6c6:	b130      	cbz	r0, 800c6d6 <uxr_deserialize_ObjectVariant+0x76>
 800c6c8:	7933      	ldrb	r3, [r6, #4]
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d037      	beq.n	800c73e <uxr_deserialize_ObjectVariant+0xde>
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	d02a      	beq.n	800c728 <uxr_deserialize_ObjectVariant+0xc8>
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d033      	beq.n	800c73e <uxr_deserialize_ObjectVariant+0xde>
 800c6d6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800c6da:	4628      	mov	r0, r5
 800c6dc:	2202      	movs	r2, #2
 800c6de:	f002 fd3b 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c6e2:	4038      	ands	r0, r7
 800c6e4:	b2c4      	uxtb	r4, r0
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ea:	1d31      	adds	r1, r6, #4
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7fc fee5 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d0df      	beq.n	800c6b6 <uxr_deserialize_ObjectVariant+0x56>
 800c6f6:	7933      	ldrb	r3, [r6, #4]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d001      	beq.n	800c700 <uxr_deserialize_ObjectVariant+0xa0>
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d1d8      	bne.n	800c6b2 <uxr_deserialize_ObjectVariant+0x52>
 800c700:	68b1      	ldr	r1, [r6, #8]
 800c702:	4628      	mov	r0, r5
 800c704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c70c:	f002 bdf4 	b.w	800f2f8 <ucdr_deserialize_string>
 800c710:	1d31      	adds	r1, r6, #4
 800c712:	4628      	mov	r0, r5
 800c714:	f7fc fed2 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c718:	4607      	mov	r7, r0
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d0db      	beq.n	800c6d6 <uxr_deserialize_ObjectVariant+0x76>
 800c71e:	7933      	ldrb	r3, [r6, #4]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d00c      	beq.n	800c73e <uxr_deserialize_ObjectVariant+0xde>
 800c724:	2b03      	cmp	r3, #3
 800c726:	d1d6      	bne.n	800c6d6 <uxr_deserialize_ObjectVariant+0x76>
 800c728:	f106 0308 	add.w	r3, r6, #8
 800c72c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c730:	f106 010c 	add.w	r1, r6, #12
 800c734:	4628      	mov	r0, r5
 800c736:	f002 fdb5 	bl	800f2a4 <ucdr_deserialize_sequence_uint8_t>
 800c73a:	4607      	mov	r7, r0
 800c73c:	e7cb      	b.n	800c6d6 <uxr_deserialize_ObjectVariant+0x76>
 800c73e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c742:	68b1      	ldr	r1, [r6, #8]
 800c744:	4628      	mov	r0, r5
 800c746:	f002 fdd7 	bl	800f2f8 <ucdr_deserialize_string>
 800c74a:	4607      	mov	r7, r0
 800c74c:	e7c3      	b.n	800c6d6 <uxr_deserialize_ObjectVariant+0x76>
 800c74e:	2204      	movs	r2, #4
 800c750:	4628      	mov	r0, r5
 800c752:	18b1      	adds	r1, r6, r2
 800c754:	f002 fd00 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c758:	4604      	mov	r4, r0
 800c75a:	2202      	movs	r2, #2
 800c75c:	f106 0108 	add.w	r1, r6, #8
 800c760:	4628      	mov	r0, r5
 800c762:	f002 fcf9 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c766:	4004      	ands	r4, r0
 800c768:	2202      	movs	r2, #2
 800c76a:	f106 010a 	add.w	r1, r6, #10
 800c76e:	4628      	mov	r0, r5
 800c770:	b2e4      	uxtb	r4, r4
 800c772:	f002 fcf1 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c776:	4603      	mov	r3, r0
 800c778:	f106 010c 	add.w	r1, r6, #12
 800c77c:	4628      	mov	r0, r5
 800c77e:	401c      	ands	r4, r3
 800c780:	f7fc fe6e 	bl	8009460 <ucdr_deserialize_bool>
 800c784:	4004      	ands	r4, r0
 800c786:	e794      	b.n	800c6b2 <uxr_deserialize_ObjectVariant+0x52>
 800c788:	1d31      	adds	r1, r6, #4
 800c78a:	4628      	mov	r0, r5
 800c78c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c790:	f7ff bcb8 	b.w	800c104 <uxr_deserialize_CLIENT_Representation>
 800c794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c798:	68b1      	ldr	r1, [r6, #8]
 800c79a:	4628      	mov	r0, r5
 800c79c:	f002 fdac 	bl	800f2f8 <ucdr_deserialize_string>
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	e77f      	b.n	800c6a4 <uxr_deserialize_ObjectVariant+0x44>
 800c7a4:	f106 0308 	add.w	r3, r6, #8
 800c7a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7ac:	f106 010c 	add.w	r1, r6, #12
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f002 fd77 	bl	800f2a4 <ucdr_deserialize_sequence_uint8_t>
 800c7b6:	4607      	mov	r7, r0
 800c7b8:	e774      	b.n	800c6a4 <uxr_deserialize_ObjectVariant+0x44>
 800c7ba:	bf00      	nop

0800c7bc <uxr_deserialize_BaseObjectRequest>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	2202      	movs	r2, #2
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	460e      	mov	r6, r1
 800c7c4:	f002 fcc8 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	1cb1      	adds	r1, r6, #2
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f002 fcc2 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c7d4:	4020      	ands	r0, r4
 800c7d6:	b2c0      	uxtb	r0, r0
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
 800c7da:	bf00      	nop

0800c7dc <uxr_serialize_AGENT_ActivityInfo>:
 800c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e0:	460e      	mov	r6, r1
 800c7e2:	4607      	mov	r7, r0
 800c7e4:	f9b1 1000 	ldrsh.w	r1, [r1]
 800c7e8:	f7fd fb92 	bl	8009f10 <ucdr_serialize_int16_t>
 800c7ec:	6871      	ldr	r1, [r6, #4]
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	f7fd f867 	bl	80098c4 <ucdr_serialize_uint32_t>
 800c7f6:	6873      	ldr	r3, [r6, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d06a      	beq.n	800c8d2 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800c7fc:	b318      	cbz	r0, 800c846 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800c7fe:	f106 0904 	add.w	r9, r6, #4
 800c802:	2500      	movs	r5, #0
 800c804:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800c808:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800c80c:	7a21      	ldrb	r1, [r4, #8]
 800c80e:	4638      	mov	r0, r7
 800c810:	f7fc fe3e 	bl	8009490 <ucdr_serialize_uint8_t>
 800c814:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c818:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800c81c:	00c9      	lsls	r1, r1, #3
 800c81e:	2800      	cmp	r0, #0
 800c820:	d04c      	beq.n	800c8bc <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800c822:	7a23      	ldrb	r3, [r4, #8]
 800c824:	2b03      	cmp	r3, #3
 800c826:	d859      	bhi.n	800c8dc <uxr_serialize_AGENT_ActivityInfo+0x100>
 800c828:	e8df f003 	tbb	[pc, r3]
 800c82c:	02122436 	.word	0x02122436
 800c830:	4449      	add	r1, r9
 800c832:	4638      	mov	r0, r7
 800c834:	6889      	ldr	r1, [r1, #8]
 800c836:	f002 fd4f 	bl	800f2d8 <ucdr_serialize_string>
 800c83a:	3501      	adds	r5, #1
 800c83c:	6873      	ldr	r3, [r6, #4]
 800c83e:	429d      	cmp	r5, r3
 800c840:	d240      	bcs.n	800c8c4 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800c842:	2800      	cmp	r0, #0
 800c844:	d1de      	bne.n	800c804 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800c846:	f04f 0800 	mov.w	r8, #0
 800c84a:	4640      	mov	r0, r8
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	3108      	adds	r1, #8
 800c852:	44aa      	add	sl, r5
 800c854:	2210      	movs	r2, #16
 800c856:	4638      	mov	r0, r7
 800c858:	4449      	add	r1, r9
 800c85a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c85e:	f002 fc17 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c862:	4604      	mov	r4, r0
 800c864:	f8da 101c 	ldr.w	r1, [sl, #28]
 800c868:	4638      	mov	r0, r7
 800c86a:	f7fd f82b 	bl	80098c4 <ucdr_serialize_uint32_t>
 800c86e:	4020      	ands	r0, r4
 800c870:	b2c0      	uxtb	r0, r0
 800c872:	e7e2      	b.n	800c83a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800c874:	3108      	adds	r1, #8
 800c876:	44aa      	add	sl, r5
 800c878:	2204      	movs	r2, #4
 800c87a:	4638      	mov	r0, r7
 800c87c:	4449      	add	r1, r9
 800c87e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c882:	f002 fc05 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c886:	4604      	mov	r4, r0
 800c888:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800c88c:	4638      	mov	r0, r7
 800c88e:	f7fc fe2b 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c892:	4020      	ands	r0, r4
 800c894:	b2c0      	uxtb	r0, r0
 800c896:	e7d0      	b.n	800c83a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800c898:	3108      	adds	r1, #8
 800c89a:	44aa      	add	sl, r5
 800c89c:	2202      	movs	r2, #2
 800c89e:	4638      	mov	r0, r7
 800c8a0:	4449      	add	r1, r9
 800c8a2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c8a6:	f002 fbf3 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f7fc fded 	bl	8009490 <ucdr_serialize_uint8_t>
 800c8b6:	4020      	ands	r0, r4
 800c8b8:	b2c0      	uxtb	r0, r0
 800c8ba:	e7be      	b.n	800c83a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800c8bc:	3501      	adds	r5, #1
 800c8be:	6873      	ldr	r3, [r6, #4]
 800c8c0:	429d      	cmp	r5, r3
 800c8c2:	d3c0      	bcc.n	800c846 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800c8c4:	ea08 0000 	and.w	r0, r8, r0
 800c8c8:	fa5f f880 	uxtb.w	r8, r0
 800c8cc:	4640      	mov	r0, r8
 800c8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d2:	ea08 0800 	and.w	r8, r8, r0
 800c8d6:	fa5f f888 	uxtb.w	r8, r8
 800c8da:	e7b6      	b.n	800c84a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800c8dc:	3501      	adds	r5, #1
 800c8de:	6873      	ldr	r3, [r6, #4]
 800c8e0:	3418      	adds	r4, #24
 800c8e2:	42ab      	cmp	r3, r5
 800c8e4:	d892      	bhi.n	800c80c <uxr_serialize_AGENT_ActivityInfo+0x30>
 800c8e6:	e7b0      	b.n	800c84a <uxr_serialize_AGENT_ActivityInfo+0x6e>

0800c8e8 <uxr_serialize_ActivityInfoVariant>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	7809      	ldrb	r1, [r1, #0]
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	f7fc fdce 	bl	8009490 <ucdr_serialize_uint8_t>
 800c8f4:	b130      	cbz	r0, 800c904 <uxr_serialize_ActivityInfoVariant+0x1c>
 800c8f6:	782b      	ldrb	r3, [r5, #0]
 800c8f8:	2b06      	cmp	r3, #6
 800c8fa:	d019      	beq.n	800c930 <uxr_serialize_ActivityInfoVariant+0x48>
 800c8fc:	2b0d      	cmp	r3, #13
 800c8fe:	d010      	beq.n	800c922 <uxr_serialize_ActivityInfoVariant+0x3a>
 800c900:	2b05      	cmp	r3, #5
 800c902:	d000      	beq.n	800c906 <uxr_serialize_ActivityInfoVariant+0x1e>
 800c904:	bd70      	pop	{r4, r5, r6, pc}
 800c906:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7fd fb00 	bl	8009f10 <ucdr_serialize_int16_t>
 800c910:	4604      	mov	r4, r0
 800c912:	4630      	mov	r0, r6
 800c914:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800c918:	f7fd fa2a 	bl	8009d70 <ucdr_serialize_uint64_t>
 800c91c:	4020      	ands	r0, r4
 800c91e:	b2c0      	uxtb	r0, r0
 800c920:	bd70      	pop	{r4, r5, r6, pc}
 800c922:	f105 0108 	add.w	r1, r5, #8
 800c926:	4630      	mov	r0, r6
 800c928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c92c:	f7ff bf56 	b.w	800c7dc <uxr_serialize_AGENT_ActivityInfo>
 800c930:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c934:	4630      	mov	r0, r6
 800c936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c93a:	f7fd bae9 	b.w	8009f10 <ucdr_serialize_int16_t>
 800c93e:	bf00      	nop

0800c940 <uxr_deserialize_BaseObjectReply>:
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	4606      	mov	r6, r0
 800c946:	460f      	mov	r7, r1
 800c948:	2202      	movs	r2, #2
 800c94a:	f002 fc05 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c94e:	2202      	movs	r2, #2
 800c950:	1cb9      	adds	r1, r7, #2
 800c952:	4605      	mov	r5, r0
 800c954:	4630      	mov	r0, r6
 800c956:	f002 fbff 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800c95a:	4680      	mov	r8, r0
 800c95c:	1d39      	adds	r1, r7, #4
 800c95e:	4630      	mov	r0, r6
 800c960:	f7fc fdac 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c964:	ea05 0508 	and.w	r5, r5, r8
 800c968:	4604      	mov	r4, r0
 800c96a:	1d79      	adds	r1, r7, #5
 800c96c:	4630      	mov	r0, r6
 800c96e:	402c      	ands	r4, r5
 800c970:	f7fc fda4 	bl	80094bc <ucdr_deserialize_uint8_t>
 800c974:	4020      	ands	r0, r4
 800c976:	b2c0      	uxtb	r0, r0
 800c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c97c <uxr_serialize_ReadSpecification>:
 800c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c980:	460e      	mov	r6, r1
 800c982:	4607      	mov	r7, r0
 800c984:	7809      	ldrb	r1, [r1, #0]
 800c986:	f7fc fd83 	bl	8009490 <ucdr_serialize_uint8_t>
 800c98a:	7871      	ldrb	r1, [r6, #1]
 800c98c:	4604      	mov	r4, r0
 800c98e:	4638      	mov	r0, r7
 800c990:	f7fc fd7e 	bl	8009490 <ucdr_serialize_uint8_t>
 800c994:	4605      	mov	r5, r0
 800c996:	78b1      	ldrb	r1, [r6, #2]
 800c998:	4638      	mov	r0, r7
 800c99a:	402c      	ands	r4, r5
 800c99c:	f7fc fd4a 	bl	8009434 <ucdr_serialize_bool>
 800c9a0:	78b3      	ldrb	r3, [r6, #2]
 800c9a2:	b2e4      	uxtb	r4, r4
 800c9a4:	4004      	ands	r4, r0
 800c9a6:	b94b      	cbnz	r3, 800c9bc <uxr_serialize_ReadSpecification+0x40>
 800c9a8:	7a31      	ldrb	r1, [r6, #8]
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	f7fc fd42 	bl	8009434 <ucdr_serialize_bool>
 800c9b0:	7a33      	ldrb	r3, [r6, #8]
 800c9b2:	4004      	ands	r4, r0
 800c9b4:	b943      	cbnz	r3, 800c9c8 <uxr_serialize_ReadSpecification+0x4c>
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9bc:	6871      	ldr	r1, [r6, #4]
 800c9be:	4638      	mov	r0, r7
 800c9c0:	f002 fc8a 	bl	800f2d8 <ucdr_serialize_string>
 800c9c4:	4004      	ands	r4, r0
 800c9c6:	e7ef      	b.n	800c9a8 <uxr_serialize_ReadSpecification+0x2c>
 800c9c8:	8971      	ldrh	r1, [r6, #10]
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	f7fc fd8c 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c9d0:	89b1      	ldrh	r1, [r6, #12]
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	f7fc fd87 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c9da:	4680      	mov	r8, r0
 800c9dc:	89f1      	ldrh	r1, [r6, #14]
 800c9de:	4638      	mov	r0, r7
 800c9e0:	ea05 0508 	and.w	r5, r5, r8
 800c9e4:	f7fc fd80 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c9e8:	8a31      	ldrh	r1, [r6, #16]
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	b2ed      	uxtb	r5, r5
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	f7fc fd7a 	bl	80094e8 <ucdr_serialize_uint16_t>
 800c9f4:	4025      	ands	r5, r4
 800c9f6:	4035      	ands	r5, r6
 800c9f8:	ea00 0405 	and.w	r4, r0, r5
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca02:	bf00      	nop

0800ca04 <uxr_serialize_CREATE_CLIENT_Payload>:
 800ca04:	f7ff bb20 	b.w	800c048 <uxr_serialize_CLIENT_Representation>

0800ca08 <uxr_serialize_CREATE_Payload>:
 800ca08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	460d      	mov	r5, r1
 800ca0e:	2202      	movs	r2, #2
 800ca10:	f002 fb3e 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800ca14:	1ca9      	adds	r1, r5, #2
 800ca16:	4604      	mov	r4, r0
 800ca18:	2202      	movs	r2, #2
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f002 fb38 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800ca20:	7929      	ldrb	r1, [r5, #4]
 800ca22:	4607      	mov	r7, r0
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7fc fd33 	bl	8009490 <ucdr_serialize_uint8_t>
 800ca2a:	b328      	cbz	r0, 800ca78 <uxr_serialize_CREATE_Payload+0x70>
 800ca2c:	792b      	ldrb	r3, [r5, #4]
 800ca2e:	403c      	ands	r4, r7
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b2e4      	uxtb	r4, r4
 800ca34:	2b0d      	cmp	r3, #13
 800ca36:	d81d      	bhi.n	800ca74 <uxr_serialize_CREATE_Payload+0x6c>
 800ca38:	e8df f003 	tbb	[pc, r3]
 800ca3c:	32320753 	.word	0x32320753
 800ca40:	07070707 	.word	0x07070707
 800ca44:	2121211c 	.word	0x2121211c
 800ca48:	684c      	.short	0x684c
 800ca4a:	7a29      	ldrb	r1, [r5, #8]
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f7fc fd1f 	bl	8009490 <ucdr_serialize_uint8_t>
 800ca52:	4607      	mov	r7, r0
 800ca54:	b130      	cbz	r0, 800ca64 <uxr_serialize_CREATE_Payload+0x5c>
 800ca56:	7a2b      	ldrb	r3, [r5, #8]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d035      	beq.n	800cac8 <uxr_serialize_CREATE_Payload+0xc0>
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d02b      	beq.n	800cab8 <uxr_serialize_CREATE_Payload+0xb0>
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d031      	beq.n	800cac8 <uxr_serialize_CREATE_Payload+0xc0>
 800ca64:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800ca68:	4630      	mov	r0, r6
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	f002 fb10 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800ca70:	4038      	ands	r0, r7
 800ca72:	4004      	ands	r4, r0
 800ca74:	4620      	mov	r0, r4
 800ca76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca78:	2400      	movs	r4, #0
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7e:	7a29      	ldrb	r1, [r5, #8]
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7fc fd05 	bl	8009490 <ucdr_serialize_uint8_t>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d0f6      	beq.n	800ca78 <uxr_serialize_CREATE_Payload+0x70>
 800ca8a:	7a2b      	ldrb	r3, [r5, #8]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d001      	beq.n	800ca94 <uxr_serialize_CREATE_Payload+0x8c>
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d1ef      	bne.n	800ca74 <uxr_serialize_CREATE_Payload+0x6c>
 800ca94:	68e9      	ldr	r1, [r5, #12]
 800ca96:	4630      	mov	r0, r6
 800ca98:	f002 fc1e 	bl	800f2d8 <ucdr_serialize_string>
 800ca9c:	4004      	ands	r4, r0
 800ca9e:	e7e9      	b.n	800ca74 <uxr_serialize_CREATE_Payload+0x6c>
 800caa0:	7a29      	ldrb	r1, [r5, #8]
 800caa2:	4630      	mov	r0, r6
 800caa4:	f7fc fcf4 	bl	8009490 <ucdr_serialize_uint8_t>
 800caa8:	4607      	mov	r7, r0
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0da      	beq.n	800ca64 <uxr_serialize_CREATE_Payload+0x5c>
 800caae:	7a2b      	ldrb	r3, [r5, #8]
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	d009      	beq.n	800cac8 <uxr_serialize_CREATE_Payload+0xc0>
 800cab4:	2b03      	cmp	r3, #3
 800cab6:	d1d5      	bne.n	800ca64 <uxr_serialize_CREATE_Payload+0x5c>
 800cab8:	68ea      	ldr	r2, [r5, #12]
 800caba:	f105 0110 	add.w	r1, r5, #16
 800cabe:	4630      	mov	r0, r6
 800cac0:	f002 fbde 	bl	800f280 <ucdr_serialize_sequence_uint8_t>
 800cac4:	4607      	mov	r7, r0
 800cac6:	e7cd      	b.n	800ca64 <uxr_serialize_CREATE_Payload+0x5c>
 800cac8:	68e9      	ldr	r1, [r5, #12]
 800caca:	4630      	mov	r0, r6
 800cacc:	f002 fc04 	bl	800f2d8 <ucdr_serialize_string>
 800cad0:	4607      	mov	r7, r0
 800cad2:	e7c7      	b.n	800ca64 <uxr_serialize_CREATE_Payload+0x5c>
 800cad4:	f105 0108 	add.w	r1, r5, #8
 800cad8:	4630      	mov	r0, r6
 800cada:	f7ff fb7f 	bl	800c1dc <uxr_serialize_AGENT_Representation>
 800cade:	4004      	ands	r4, r0
 800cae0:	e7c8      	b.n	800ca74 <uxr_serialize_CREATE_Payload+0x6c>
 800cae2:	7a29      	ldrb	r1, [r5, #8]
 800cae4:	4630      	mov	r0, r6
 800cae6:	f7fc fcd3 	bl	8009490 <ucdr_serialize_uint8_t>
 800caea:	4607      	mov	r7, r0
 800caec:	b130      	cbz	r0, 800cafc <uxr_serialize_CREATE_Payload+0xf4>
 800caee:	7a2b      	ldrb	r3, [r5, #8]
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d012      	beq.n	800cb1a <uxr_serialize_CREATE_Payload+0x112>
 800caf4:	2b03      	cmp	r3, #3
 800caf6:	d016      	beq.n	800cb26 <uxr_serialize_CREATE_Payload+0x11e>
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d00e      	beq.n	800cb1a <uxr_serialize_CREATE_Payload+0x112>
 800cafc:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800cb00:	4630      	mov	r0, r6
 800cb02:	f7fd fa05 	bl	8009f10 <ucdr_serialize_int16_t>
 800cb06:	4038      	ands	r0, r7
 800cb08:	4004      	ands	r4, r0
 800cb0a:	e7b3      	b.n	800ca74 <uxr_serialize_CREATE_Payload+0x6c>
 800cb0c:	f105 0108 	add.w	r1, r5, #8
 800cb10:	4630      	mov	r0, r6
 800cb12:	f7ff fa99 	bl	800c048 <uxr_serialize_CLIENT_Representation>
 800cb16:	4004      	ands	r4, r0
 800cb18:	e7ac      	b.n	800ca74 <uxr_serialize_CREATE_Payload+0x6c>
 800cb1a:	68e9      	ldr	r1, [r5, #12]
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f002 fbdb 	bl	800f2d8 <ucdr_serialize_string>
 800cb22:	4607      	mov	r7, r0
 800cb24:	e7ea      	b.n	800cafc <uxr_serialize_CREATE_Payload+0xf4>
 800cb26:	68ea      	ldr	r2, [r5, #12]
 800cb28:	f105 0110 	add.w	r1, r5, #16
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f002 fba7 	bl	800f280 <ucdr_serialize_sequence_uint8_t>
 800cb32:	4607      	mov	r7, r0
 800cb34:	e7e2      	b.n	800cafc <uxr_serialize_CREATE_Payload+0xf4>
 800cb36:	bf00      	nop

0800cb38 <uxr_deserialize_GET_INFO_Payload>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	4605      	mov	r5, r0
 800cb3c:	460e      	mov	r6, r1
 800cb3e:	2202      	movs	r2, #2
 800cb40:	f002 fb0a 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cb44:	1cb1      	adds	r1, r6, #2
 800cb46:	2202      	movs	r2, #2
 800cb48:	4604      	mov	r4, r0
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f002 fb04 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cb50:	4603      	mov	r3, r0
 800cb52:	1d31      	adds	r1, r6, #4
 800cb54:	4628      	mov	r0, r5
 800cb56:	401c      	ands	r4, r3
 800cb58:	f7fc ffe4 	bl	8009b24 <ucdr_deserialize_uint32_t>
 800cb5c:	b2e4      	uxtb	r4, r4
 800cb5e:	4020      	ands	r0, r4
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
 800cb62:	bf00      	nop

0800cb64 <uxr_serialize_DELETE_Payload>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	2202      	movs	r2, #2
 800cb68:	4605      	mov	r5, r0
 800cb6a:	460e      	mov	r6, r1
 800cb6c:	f002 fa90 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800cb70:	4604      	mov	r4, r0
 800cb72:	2202      	movs	r2, #2
 800cb74:	1cb1      	adds	r1, r6, #2
 800cb76:	4628      	mov	r0, r5
 800cb78:	f002 fa8a 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800cb7c:	4020      	ands	r0, r4
 800cb7e:	b2c0      	uxtb	r0, r0
 800cb80:	bd70      	pop	{r4, r5, r6, pc}
 800cb82:	bf00      	nop

0800cb84 <uxr_deserialize_STATUS_AGENT_Payload>:
 800cb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb88:	4606      	mov	r6, r0
 800cb8a:	460f      	mov	r7, r1
 800cb8c:	f7fc fc96 	bl	80094bc <ucdr_deserialize_uint8_t>
 800cb90:	4605      	mov	r5, r0
 800cb92:	1c79      	adds	r1, r7, #1
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7fc fc91 	bl	80094bc <ucdr_deserialize_uint8_t>
 800cb9a:	4682      	mov	sl, r0
 800cb9c:	1d39      	adds	r1, r7, #4
 800cb9e:	4630      	mov	r0, r6
 800cba0:	ea05 050a 	and.w	r5, r5, sl
 800cba4:	2204      	movs	r2, #4
 800cba6:	f002 fad7 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cbaa:	4681      	mov	r9, r0
 800cbac:	b2ec      	uxtb	r4, r5
 800cbae:	f107 0108 	add.w	r1, r7, #8
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	f002 facf 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cbba:	ea04 0409 	and.w	r4, r4, r9
 800cbbe:	4680      	mov	r8, r0
 800cbc0:	f107 010a 	add.w	r1, r7, #10
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	f002 fac6 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cbcc:	ea08 0404 	and.w	r4, r8, r4
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	f107 010c 	add.w	r1, r7, #12
 800cbd6:	4630      	mov	r0, r6
 800cbd8:	4025      	ands	r5, r4
 800cbda:	f7fc fc41 	bl	8009460 <ucdr_deserialize_bool>
 800cbde:	4028      	ands	r0, r5
 800cbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cbe4 <uxr_deserialize_STATUS_Payload>:
 800cbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe8:	4606      	mov	r6, r0
 800cbea:	460f      	mov	r7, r1
 800cbec:	2202      	movs	r2, #2
 800cbee:	f002 fab3 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	1cb9      	adds	r1, r7, #2
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f002 faad 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cbfe:	4680      	mov	r8, r0
 800cc00:	1d39      	adds	r1, r7, #4
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7fc fc5a 	bl	80094bc <ucdr_deserialize_uint8_t>
 800cc08:	ea05 0508 	and.w	r5, r5, r8
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	1d79      	adds	r1, r7, #5
 800cc10:	4630      	mov	r0, r6
 800cc12:	402c      	ands	r4, r5
 800cc14:	f7fc fc52 	bl	80094bc <ucdr_deserialize_uint8_t>
 800cc18:	4020      	ands	r0, r4
 800cc1a:	b2c0      	uxtb	r0, r0
 800cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cc20 <uxr_serialize_INFO_Payload>:
 800cc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc24:	460c      	mov	r4, r1
 800cc26:	4605      	mov	r5, r0
 800cc28:	2202      	movs	r2, #2
 800cc2a:	f002 fa31 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800cc2e:	2202      	movs	r2, #2
 800cc30:	4680      	mov	r8, r0
 800cc32:	1ca1      	adds	r1, r4, #2
 800cc34:	4628      	mov	r0, r5
 800cc36:	f002 fa2b 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800cc3a:	4681      	mov	r9, r0
 800cc3c:	7921      	ldrb	r1, [r4, #4]
 800cc3e:	4628      	mov	r0, r5
 800cc40:	f7fc fc26 	bl	8009490 <ucdr_serialize_uint8_t>
 800cc44:	ea08 0809 	and.w	r8, r8, r9
 800cc48:	4606      	mov	r6, r0
 800cc4a:	7961      	ldrb	r1, [r4, #5]
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	f7fc fc1f 	bl	8009490 <ucdr_serialize_uint8_t>
 800cc52:	ea06 0608 	and.w	r6, r6, r8
 800cc56:	4607      	mov	r7, r0
 800cc58:	7a21      	ldrb	r1, [r4, #8]
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	403e      	ands	r6, r7
 800cc5e:	f7fc fbe9 	bl	8009434 <ucdr_serialize_bool>
 800cc62:	7a23      	ldrb	r3, [r4, #8]
 800cc64:	b2f7      	uxtb	r7, r6
 800cc66:	4606      	mov	r6, r0
 800cc68:	b96b      	cbnz	r3, 800cc86 <uxr_serialize_INFO_Payload+0x66>
 800cc6a:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f7fc fbe0 	bl	8009434 <ucdr_serialize_bool>
 800cc74:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800cc78:	4030      	ands	r0, r6
 800cc7a:	b2c6      	uxtb	r6, r0
 800cc7c:	b983      	cbnz	r3, 800cca0 <uxr_serialize_INFO_Payload+0x80>
 800cc7e:	ea06 0007 	and.w	r0, r6, r7
 800cc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc86:	7b21      	ldrb	r1, [r4, #12]
 800cc88:	4628      	mov	r0, r5
 800cc8a:	f7fc fc01 	bl	8009490 <ucdr_serialize_uint8_t>
 800cc8e:	b188      	cbz	r0, 800ccb4 <uxr_serialize_INFO_Payload+0x94>
 800cc90:	f104 010c 	add.w	r1, r4, #12
 800cc94:	4628      	mov	r0, r5
 800cc96:	f7ff faef 	bl	800c278 <uxr_serialize_ObjectVariant.part.0>
 800cc9a:	4030      	ands	r0, r6
 800cc9c:	b2c6      	uxtb	r6, r0
 800cc9e:	e7e4      	b.n	800cc6a <uxr_serialize_INFO_Payload+0x4a>
 800cca0:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800cca4:	4628      	mov	r0, r5
 800cca6:	f7ff fe1f 	bl	800c8e8 <uxr_serialize_ActivityInfoVariant>
 800ccaa:	4006      	ands	r6, r0
 800ccac:	ea06 0007 	and.w	r0, r6, r7
 800ccb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	e7d8      	b.n	800cc6a <uxr_serialize_INFO_Payload+0x4a>

0800ccb8 <uxr_serialize_READ_DATA_Payload>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	4605      	mov	r5, r0
 800ccbc:	460e      	mov	r6, r1
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	f002 f9e6 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800ccc4:	1cb1      	adds	r1, r6, #2
 800ccc6:	2202      	movs	r2, #2
 800ccc8:	4604      	mov	r4, r0
 800ccca:	4628      	mov	r0, r5
 800cccc:	f002 f9e0 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	1d31      	adds	r1, r6, #4
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	401c      	ands	r4, r3
 800ccd8:	f7ff fe50 	bl	800c97c <uxr_serialize_ReadSpecification>
 800ccdc:	b2e4      	uxtb	r4, r4
 800ccde:	4020      	ands	r0, r4
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
 800cce2:	bf00      	nop

0800cce4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	2202      	movs	r2, #2
 800cce8:	4605      	mov	r5, r0
 800ccea:	460e      	mov	r6, r1
 800ccec:	f002 f9d0 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	1cb1      	adds	r1, r6, #2
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f002 f9ca 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800ccfc:	4020      	ands	r0, r4
 800ccfe:	b2c0      	uxtb	r0, r0
 800cd00:	bd70      	pop	{r4, r5, r6, pc}
 800cd02:	bf00      	nop

0800cd04 <uxr_serialize_ACKNACK_Payload>:
 800cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd06:	460f      	mov	r7, r1
 800cd08:	4605      	mov	r5, r0
 800cd0a:	460e      	mov	r6, r1
 800cd0c:	f837 1b02 	ldrh.w	r1, [r7], #2
 800cd10:	f7fc fbea 	bl	80094e8 <ucdr_serialize_uint16_t>
 800cd14:	2202      	movs	r2, #2
 800cd16:	4639      	mov	r1, r7
 800cd18:	4604      	mov	r4, r0
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f002 f9b8 	bl	800f090 <ucdr_serialize_array_uint8_t>
 800cd20:	4603      	mov	r3, r0
 800cd22:	7931      	ldrb	r1, [r6, #4]
 800cd24:	4628      	mov	r0, r5
 800cd26:	401c      	ands	r4, r3
 800cd28:	f7fc fbb2 	bl	8009490 <ucdr_serialize_uint8_t>
 800cd2c:	b2e4      	uxtb	r4, r4
 800cd2e:	4020      	ands	r0, r4
 800cd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd32:	bf00      	nop

0800cd34 <uxr_deserialize_ACKNACK_Payload>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	4605      	mov	r5, r0
 800cd38:	460e      	mov	r6, r1
 800cd3a:	f7fc fcd5 	bl	80096e8 <ucdr_deserialize_uint16_t>
 800cd3e:	2202      	movs	r2, #2
 800cd40:	1cb1      	adds	r1, r6, #2
 800cd42:	4604      	mov	r4, r0
 800cd44:	4628      	mov	r0, r5
 800cd46:	f002 fa07 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	1d31      	adds	r1, r6, #4
 800cd4e:	4628      	mov	r0, r5
 800cd50:	401c      	ands	r4, r3
 800cd52:	f7fc fbb3 	bl	80094bc <ucdr_deserialize_uint8_t>
 800cd56:	b2e4      	uxtb	r4, r4
 800cd58:	4020      	ands	r0, r4
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}

0800cd5c <uxr_serialize_HEARTBEAT_Payload>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	460d      	mov	r5, r1
 800cd60:	4606      	mov	r6, r0
 800cd62:	8809      	ldrh	r1, [r1, #0]
 800cd64:	f7fc fbc0 	bl	80094e8 <ucdr_serialize_uint16_t>
 800cd68:	8869      	ldrh	r1, [r5, #2]
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	f7fc fbbb 	bl	80094e8 <ucdr_serialize_uint16_t>
 800cd72:	4603      	mov	r3, r0
 800cd74:	7929      	ldrb	r1, [r5, #4]
 800cd76:	4630      	mov	r0, r6
 800cd78:	401c      	ands	r4, r3
 800cd7a:	f7fc fb89 	bl	8009490 <ucdr_serialize_uint8_t>
 800cd7e:	b2e4      	uxtb	r4, r4
 800cd80:	4020      	ands	r0, r4
 800cd82:	bd70      	pop	{r4, r5, r6, pc}

0800cd84 <uxr_deserialize_HEARTBEAT_Payload>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	4605      	mov	r5, r0
 800cd88:	460e      	mov	r6, r1
 800cd8a:	f7fc fcad 	bl	80096e8 <ucdr_deserialize_uint16_t>
 800cd8e:	4604      	mov	r4, r0
 800cd90:	1cb1      	adds	r1, r6, #2
 800cd92:	4628      	mov	r0, r5
 800cd94:	f7fc fca8 	bl	80096e8 <ucdr_deserialize_uint16_t>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	1d31      	adds	r1, r6, #4
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	401c      	ands	r4, r3
 800cda0:	f7fc fb8c 	bl	80094bc <ucdr_deserialize_uint8_t>
 800cda4:	b2e4      	uxtb	r4, r4
 800cda6:	4020      	ands	r0, r4
 800cda8:	bd70      	pop	{r4, r5, r6, pc}
 800cdaa:	bf00      	nop

0800cdac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800cdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	460e      	mov	r6, r1
 800cdb4:	f7fd fa38 	bl	800a228 <ucdr_deserialize_int32_t>
 800cdb8:	4680      	mov	r8, r0
 800cdba:	1d31      	adds	r1, r6, #4
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f7fc feb1 	bl	8009b24 <ucdr_deserialize_uint32_t>
 800cdc2:	4681      	mov	r9, r0
 800cdc4:	f106 0108 	add.w	r1, r6, #8
 800cdc8:	4628      	mov	r0, r5
 800cdca:	f7fd fa2d 	bl	800a228 <ucdr_deserialize_int32_t>
 800cdce:	ea08 0809 	and.w	r8, r8, r9
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	f106 010c 	add.w	r1, r6, #12
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f7fc fea3 	bl	8009b24 <ucdr_deserialize_uint32_t>
 800cdde:	ea07 0708 	and.w	r7, r7, r8
 800cde2:	4604      	mov	r4, r0
 800cde4:	f106 0110 	add.w	r1, r6, #16
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7fd fa1d 	bl	800a228 <ucdr_deserialize_int32_t>
 800cdee:	403c      	ands	r4, r7
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	b2e4      	uxtb	r4, r4
 800cdf6:	f106 0114 	add.w	r1, r6, #20
 800cdfa:	461d      	mov	r5, r3
 800cdfc:	f7fc fe92 	bl	8009b24 <ucdr_deserialize_uint32_t>
 800ce00:	402c      	ands	r4, r5
 800ce02:	4020      	ands	r0, r4
 800ce04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ce08 <uxr_deserialize_SampleIdentity>:
 800ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	460d      	mov	r5, r1
 800ce10:	220c      	movs	r2, #12
 800ce12:	f002 f9a1 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800ce16:	2203      	movs	r2, #3
 800ce18:	f105 010c 	add.w	r1, r5, #12
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f002 f99a 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 800ce24:	f105 010f 	add.w	r1, r5, #15
 800ce28:	4680      	mov	r8, r0
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f7fc fb46 	bl	80094bc <ucdr_deserialize_uint8_t>
 800ce30:	f105 0110 	add.w	r1, r5, #16
 800ce34:	4606      	mov	r6, r0
 800ce36:	4620      	mov	r0, r4
 800ce38:	f7fd f9f6 	bl	800a228 <ucdr_deserialize_int32_t>
 800ce3c:	ea07 0708 	and.w	r7, r7, r8
 800ce40:	4603      	mov	r3, r0
 800ce42:	4620      	mov	r0, r4
 800ce44:	403e      	ands	r6, r7
 800ce46:	f105 0114 	add.w	r1, r5, #20
 800ce4a:	461c      	mov	r4, r3
 800ce4c:	f7fc fe6a 	bl	8009b24 <ucdr_deserialize_uint32_t>
 800ce50:	4034      	ands	r4, r6
 800ce52:	4020      	ands	r0, r4
 800ce54:	b2c0      	uxtb	r0, r0
 800ce56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce5a:	bf00      	nop

0800ce5c <rcl_convert_rmw_ret_to_rcl_ret>:
 800ce5c:	280b      	cmp	r0, #11
 800ce5e:	dc0d      	bgt.n	800ce7c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	db09      	blt.n	800ce78 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ce64:	280b      	cmp	r0, #11
 800ce66:	d807      	bhi.n	800ce78 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ce68:	e8df f000 	tbb	[pc, r0]
 800ce6c:	07060607 	.word	0x07060607
 800ce70:	06060606 	.word	0x06060606
 800ce74:	07070606 	.word	0x07070606
 800ce78:	2001      	movs	r0, #1
 800ce7a:	4770      	bx	lr
 800ce7c:	28cb      	cmp	r0, #203	@ 0xcb
 800ce7e:	bf18      	it	ne
 800ce80:	2001      	movne	r0, #1
 800ce82:	4770      	bx	lr

0800ce84 <rcl_get_zero_initialized_context>:
 800ce84:	4a03      	ldr	r2, [pc, #12]	@ (800ce94 <rcl_get_zero_initialized_context+0x10>)
 800ce86:	4603      	mov	r3, r0
 800ce88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce8c:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce90:	4618      	mov	r0, r3
 800ce92:	4770      	bx	lr
 800ce94:	0801597c 	.word	0x0801597c

0800ce98 <rcl_context_is_valid>:
 800ce98:	b118      	cbz	r0, 800cea2 <rcl_context_is_valid+0xa>
 800ce9a:	6840      	ldr	r0, [r0, #4]
 800ce9c:	3800      	subs	r0, #0
 800ce9e:	bf18      	it	ne
 800cea0:	2001      	movne	r0, #1
 800cea2:	4770      	bx	lr

0800cea4 <__cleanup_context>:
 800cea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea8:	4606      	mov	r6, r0
 800ceaa:	2300      	movs	r3, #0
 800ceac:	6800      	ldr	r0, [r0, #0]
 800ceae:	6073      	str	r3, [r6, #4]
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d04d      	beq.n	800cf50 <__cleanup_context+0xac>
 800ceb4:	6947      	ldr	r7, [r0, #20]
 800ceb6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ceba:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800cebe:	b137      	cbz	r7, 800cece <__cleanup_context+0x2a>
 800cec0:	3014      	adds	r0, #20
 800cec2:	f000 fb0d 	bl	800d4e0 <rcl_init_options_fini>
 800cec6:	4607      	mov	r7, r0
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d148      	bne.n	800cf5e <__cleanup_context+0xba>
 800cecc:	6830      	ldr	r0, [r6, #0]
 800cece:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ced0:	b143      	cbz	r3, 800cee4 <__cleanup_context+0x40>
 800ced2:	3028      	adds	r0, #40	@ 0x28
 800ced4:	f001 fdec 	bl	800eab0 <rmw_context_fini>
 800ced8:	b118      	cbz	r0, 800cee2 <__cleanup_context+0x3e>
 800ceda:	2f00      	cmp	r7, #0
 800cedc:	d042      	beq.n	800cf64 <__cleanup_context+0xc0>
 800cede:	f7fb fc4b 	bl	8008778 <rcutils_reset_error>
 800cee2:	6830      	ldr	r0, [r6, #0]
 800cee4:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800cee8:	f1bc 0f00 	cmp.w	ip, #0
 800ceec:	d01c      	beq.n	800cf28 <__cleanup_context+0x84>
 800ceee:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800cef2:	2a01      	cmp	r2, #1
 800cef4:	f173 0100 	sbcs.w	r1, r3, #0
 800cef8:	db12      	blt.n	800cf20 <__cleanup_context+0x7c>
 800cefa:	2400      	movs	r4, #0
 800cefc:	2500      	movs	r5, #0
 800cefe:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800cf02:	4649      	mov	r1, r9
 800cf04:	b1c0      	cbz	r0, 800cf38 <__cleanup_context+0x94>
 800cf06:	47c0      	blx	r8
 800cf08:	6833      	ldr	r3, [r6, #0]
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	f8d3 c020 	ldr.w	ip, [r3, #32]
 800cf10:	f145 0500 	adc.w	r5, r5, #0
 800cf14:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800cf18:	4294      	cmp	r4, r2
 800cf1a:	eb75 0103 	sbcs.w	r1, r5, r3
 800cf1e:	dbee      	blt.n	800cefe <__cleanup_context+0x5a>
 800cf20:	4660      	mov	r0, ip
 800cf22:	4649      	mov	r1, r9
 800cf24:	47c0      	blx	r8
 800cf26:	6830      	ldr	r0, [r6, #0]
 800cf28:	4649      	mov	r1, r9
 800cf2a:	47c0      	blx	r8
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	4638      	mov	r0, r7
 800cf30:	e9c6 3300 	strd	r3, r3, [r6]
 800cf34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf38:	3401      	adds	r4, #1
 800cf3a:	f145 0500 	adc.w	r5, r5, #0
 800cf3e:	4294      	cmp	r4, r2
 800cf40:	eb75 0103 	sbcs.w	r1, r5, r3
 800cf44:	dbdb      	blt.n	800cefe <__cleanup_context+0x5a>
 800cf46:	4660      	mov	r0, ip
 800cf48:	4649      	mov	r1, r9
 800cf4a:	47c0      	blx	r8
 800cf4c:	6830      	ldr	r0, [r6, #0]
 800cf4e:	e7eb      	b.n	800cf28 <__cleanup_context+0x84>
 800cf50:	4607      	mov	r7, r0
 800cf52:	2300      	movs	r3, #0
 800cf54:	4638      	mov	r0, r7
 800cf56:	e9c6 3300 	strd	r3, r3, [r6]
 800cf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	f7fb fc0b 	bl	8008778 <rcutils_reset_error>
 800cf62:	e7b3      	b.n	800cecc <__cleanup_context+0x28>
 800cf64:	f7ff ff7a 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800cf68:	4607      	mov	r7, r0
 800cf6a:	e7b8      	b.n	800cede <__cleanup_context+0x3a>

0800cf6c <rcl_expand_topic_name>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	b08b      	sub	sp, #44	@ 0x2c
 800cf72:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cf74:	fab4 f584 	clz	r5, r4
 800cf78:	096d      	lsrs	r5, r5, #5
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	bf08      	it	eq
 800cf7e:	2501      	moveq	r5, #1
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	bf08      	it	eq
 800cf84:	2501      	moveq	r5, #1
 800cf86:	2900      	cmp	r1, #0
 800cf88:	bf08      	it	eq
 800cf8a:	2501      	moveq	r5, #1
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	d13d      	bne.n	800d00c <rcl_expand_topic_name+0xa0>
 800cf90:	4616      	mov	r6, r2
 800cf92:	fab0 f280 	clz	r2, r0
 800cf96:	4604      	mov	r4, r0
 800cf98:	0952      	lsrs	r2, r2, #5
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d036      	beq.n	800d00c <rcl_expand_topic_name+0xa0>
 800cf9e:	460f      	mov	r7, r1
 800cfa0:	a909      	add	r1, sp, #36	@ 0x24
 800cfa2:	4698      	mov	r8, r3
 800cfa4:	f000 ff72 	bl	800de8c <rcl_validate_topic_name>
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	bb58      	cbnz	r0, 800d004 <rcl_expand_topic_name+0x98>
 800cfac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d135      	bne.n	800d01e <rcl_expand_topic_name+0xb2>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	a909      	add	r1, sp, #36	@ 0x24
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	f001 fad6 	bl	800e568 <rmw_validate_node_name>
 800cfbc:	bb58      	cbnz	r0, 800d016 <rcl_expand_topic_name+0xaa>
 800cfbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfc0:	bb93      	cbnz	r3, 800d028 <rcl_expand_topic_name+0xbc>
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	a909      	add	r1, sp, #36	@ 0x24
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f001 fab0 	bl	800e52c <rmw_validate_namespace>
 800cfcc:	bb18      	cbnz	r0, 800d016 <rcl_expand_topic_name+0xaa>
 800cfce:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cfd0:	2d00      	cmp	r5, #0
 800cfd2:	f040 809f 	bne.w	800d114 <rcl_expand_topic_name+0x1a8>
 800cfd6:	217b      	movs	r1, #123	@ 0x7b
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f005 f979 	bl	80122d0 <strchr>
 800cfde:	7823      	ldrb	r3, [r4, #0]
 800cfe0:	4681      	mov	r9, r0
 800cfe2:	bb18      	cbnz	r0, 800d02c <rcl_expand_topic_name+0xc0>
 800cfe4:	2b2f      	cmp	r3, #47	@ 0x2f
 800cfe6:	d121      	bne.n	800d02c <rcl_expand_topic_name+0xc0>
 800cfe8:	ab14      	add	r3, sp, #80	@ 0x50
 800cfea:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 800cfee:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cff2:	4620      	mov	r0, r4
 800cff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cff6:	f001 f99f 	bl	800e338 <rcutils_strdup>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cffe:	bf08      	it	eq
 800d000:	250a      	moveq	r5, #10
 800d002:	6018      	str	r0, [r3, #0]
 800d004:	4628      	mov	r0, r5
 800d006:	b00b      	add	sp, #44	@ 0x2c
 800d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00c:	250b      	movs	r5, #11
 800d00e:	4628      	mov	r0, r5
 800d010:	b00b      	add	sp, #44	@ 0x2c
 800d012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d016:	f7ff ff21 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800d01a:	4605      	mov	r5, r0
 800d01c:	e7f2      	b.n	800d004 <rcl_expand_topic_name+0x98>
 800d01e:	2567      	movs	r5, #103	@ 0x67
 800d020:	4628      	mov	r0, r5
 800d022:	b00b      	add	sp, #44	@ 0x2c
 800d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d028:	25c9      	movs	r5, #201	@ 0xc9
 800d02a:	e7eb      	b.n	800d004 <rcl_expand_topic_name+0x98>
 800d02c:	2b7e      	cmp	r3, #126	@ 0x7e
 800d02e:	d073      	beq.n	800d118 <rcl_expand_topic_name+0x1ac>
 800d030:	f1b9 0f00 	cmp.w	r9, #0
 800d034:	f000 80c4 	beq.w	800d1c0 <rcl_expand_topic_name+0x254>
 800d038:	2300      	movs	r3, #0
 800d03a:	46a2      	mov	sl, r4
 800d03c:	469b      	mov	fp, r3
 800d03e:	9506      	str	r5, [sp, #24]
 800d040:	4655      	mov	r5, sl
 800d042:	9407      	str	r4, [sp, #28]
 800d044:	464c      	mov	r4, r9
 800d046:	2c00      	cmp	r4, #0
 800d048:	f000 80b4 	beq.w	800d1b4 <rcl_expand_topic_name+0x248>
 800d04c:	217d      	movs	r1, #125	@ 0x7d
 800d04e:	4628      	mov	r0, r5
 800d050:	f005 f93e 	bl	80122d0 <strchr>
 800d054:	4681      	mov	r9, r0
 800d056:	4621      	mov	r1, r4
 800d058:	486b      	ldr	r0, [pc, #428]	@ (800d208 <rcl_expand_topic_name+0x29c>)
 800d05a:	eba9 0904 	sub.w	r9, r9, r4
 800d05e:	f109 0a01 	add.w	sl, r9, #1
 800d062:	4652      	mov	r2, sl
 800d064:	f005 f941 	bl	80122ea <strncmp>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d051      	beq.n	800d110 <rcl_expand_topic_name+0x1a4>
 800d06c:	4652      	mov	r2, sl
 800d06e:	4621      	mov	r1, r4
 800d070:	4866      	ldr	r0, [pc, #408]	@ (800d20c <rcl_expand_topic_name+0x2a0>)
 800d072:	f005 f93a 	bl	80122ea <strncmp>
 800d076:	b128      	cbz	r0, 800d084 <rcl_expand_topic_name+0x118>
 800d078:	4652      	mov	r2, sl
 800d07a:	4621      	mov	r1, r4
 800d07c:	4864      	ldr	r0, [pc, #400]	@ (800d210 <rcl_expand_topic_name+0x2a4>)
 800d07e:	f005 f934 	bl	80122ea <strncmp>
 800d082:	bb38      	cbnz	r0, 800d0d4 <rcl_expand_topic_name+0x168>
 800d084:	46b1      	mov	r9, r6
 800d086:	ab16      	add	r3, sp, #88	@ 0x58
 800d088:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d08c:	ab14      	add	r3, sp, #80	@ 0x50
 800d08e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d092:	4620      	mov	r0, r4
 800d094:	4651      	mov	r1, sl
 800d096:	cb0c      	ldmia	r3, {r2, r3}
 800d098:	f001 f970 	bl	800e37c <rcutils_strndup>
 800d09c:	4604      	mov	r4, r0
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f000 80a7 	beq.w	800d1f2 <rcl_expand_topic_name+0x286>
 800d0a4:	464a      	mov	r2, r9
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	ab14      	add	r3, sp, #80	@ 0x50
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	f001 f84e 	bl	800e14c <rcutils_repl_str>
 800d0b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4798      	blx	r3
 800d0ba:	4658      	mov	r0, fp
 800d0bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d0be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d0c0:	4798      	blx	r3
 800d0c2:	2d00      	cmp	r5, #0
 800d0c4:	d071      	beq.n	800d1aa <rcl_expand_topic_name+0x23e>
 800d0c6:	217b      	movs	r1, #123	@ 0x7b
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f005 f901 	bl	80122d0 <strchr>
 800d0ce:	46ab      	mov	fp, r5
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	e7b8      	b.n	800d046 <rcl_expand_topic_name+0xda>
 800d0d4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800d0d8:	1c61      	adds	r1, r4, #1
 800d0da:	4640      	mov	r0, r8
 800d0dc:	f7fb fc60 	bl	80089a0 <rcutils_string_map_getn>
 800d0e0:	4681      	mov	r9, r0
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d1cf      	bne.n	800d086 <rcl_expand_topic_name+0x11a>
 800d0e6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800d0e8:	aa16      	add	r2, sp, #88	@ 0x58
 800d0ea:	ab14      	add	r3, sp, #80	@ 0x50
 800d0ec:	2569      	movs	r5, #105	@ 0x69
 800d0ee:	6008      	str	r0, [r1, #0]
 800d0f0:	ca07      	ldmia	r2, {r0, r1, r2}
 800d0f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d0f6:	4651      	mov	r1, sl
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	cb0c      	ldmia	r3, {r2, r3}
 800d0fc:	f001 f93e 	bl	800e37c <rcutils_strndup>
 800d100:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d102:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d104:	4798      	blx	r3
 800d106:	4658      	mov	r0, fp
 800d108:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d10a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d10c:	4798      	blx	r3
 800d10e:	e779      	b.n	800d004 <rcl_expand_topic_name+0x98>
 800d110:	46b9      	mov	r9, r7
 800d112:	e7b8      	b.n	800d086 <rcl_expand_topic_name+0x11a>
 800d114:	25ca      	movs	r5, #202	@ 0xca
 800d116:	e775      	b.n	800d004 <rcl_expand_topic_name+0x98>
 800d118:	4630      	mov	r0, r6
 800d11a:	f7f3 f8f1 	bl	8000300 <strlen>
 800d11e:	4a3d      	ldr	r2, [pc, #244]	@ (800d214 <rcl_expand_topic_name+0x2a8>)
 800d120:	1c63      	adds	r3, r4, #1
 800d122:	f8df c0fc 	ldr.w	ip, [pc, #252]	@ 800d220 <rcl_expand_topic_name+0x2b4>
 800d126:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d12a:	9704      	str	r7, [sp, #16]
 800d12c:	2801      	cmp	r0, #1
 800d12e:	bf0c      	ite	eq
 800d130:	4610      	moveq	r0, r2
 800d132:	4660      	movne	r0, ip
 800d134:	9305      	str	r3, [sp, #20]
 800d136:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d138:	ab14      	add	r3, sp, #80	@ 0x50
 800d13a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800d13e:	e9cd 2100 	strd	r2, r1, [sp]
 800d142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d144:	f000 ffb0 	bl	800e0a8 <rcutils_format_string_limit>
 800d148:	4683      	mov	fp, r0
 800d14a:	b370      	cbz	r0, 800d1aa <rcl_expand_topic_name+0x23e>
 800d14c:	f1b9 0f00 	cmp.w	r9, #0
 800d150:	d005      	beq.n	800d15e <rcl_expand_topic_name+0x1f2>
 800d152:	217b      	movs	r1, #123	@ 0x7b
 800d154:	4682      	mov	sl, r0
 800d156:	f005 f8bb 	bl	80122d0 <strchr>
 800d15a:	4681      	mov	r9, r0
 800d15c:	e76f      	b.n	800d03e <rcl_expand_topic_name+0xd2>
 800d15e:	f89b 3000 	ldrb.w	r3, [fp]
 800d162:	2b2f      	cmp	r3, #47	@ 0x2f
 800d164:	d01d      	beq.n	800d1a2 <rcl_expand_topic_name+0x236>
 800d166:	4630      	mov	r0, r6
 800d168:	f7f3 f8ca 	bl	8000300 <strlen>
 800d16c:	4b2a      	ldr	r3, [pc, #168]	@ (800d218 <rcl_expand_topic_name+0x2ac>)
 800d16e:	492b      	ldr	r1, [pc, #172]	@ (800d21c <rcl_expand_topic_name+0x2b0>)
 800d170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d174:	f8cd b010 	str.w	fp, [sp, #16]
 800d178:	2801      	cmp	r0, #1
 800d17a:	bf0c      	ite	eq
 800d17c:	4618      	moveq	r0, r3
 800d17e:	4608      	movne	r0, r1
 800d180:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d182:	e9cd 3200 	strd	r3, r2, [sp]
 800d186:	ab14      	add	r3, sp, #80	@ 0x50
 800d188:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800d18c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d18e:	f000 ff8b 	bl	800e0a8 <rcutils_format_string_limit>
 800d192:	4604      	mov	r4, r0
 800d194:	4658      	mov	r0, fp
 800d196:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d198:	46a3      	mov	fp, r4
 800d19a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d19c:	4798      	blx	r3
 800d19e:	465b      	mov	r3, fp
 800d1a0:	b11b      	cbz	r3, 800d1aa <rcl_expand_topic_name+0x23e>
 800d1a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1a4:	f8c3 b000 	str.w	fp, [r3]
 800d1a8:	e72c      	b.n	800d004 <rcl_expand_topic_name+0x98>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1ae:	250a      	movs	r5, #10
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	e727      	b.n	800d004 <rcl_expand_topic_name+0x98>
 800d1b4:	465b      	mov	r3, fp
 800d1b6:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1cf      	bne.n	800d15e <rcl_expand_topic_name+0x1f2>
 800d1be:	7823      	ldrb	r3, [r4, #0]
 800d1c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1c2:	d01e      	beq.n	800d202 <rcl_expand_topic_name+0x296>
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	f7f3 f89b 	bl	8000300 <strlen>
 800d1ca:	4b13      	ldr	r3, [pc, #76]	@ (800d218 <rcl_expand_topic_name+0x2ac>)
 800d1cc:	4913      	ldr	r1, [pc, #76]	@ (800d21c <rcl_expand_topic_name+0x2b0>)
 800d1ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1d2:	9404      	str	r4, [sp, #16]
 800d1d4:	2801      	cmp	r0, #1
 800d1d6:	bf0c      	ite	eq
 800d1d8:	4618      	moveq	r0, r3
 800d1da:	4608      	movne	r0, r1
 800d1dc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d1de:	e9cd 3200 	strd	r3, r2, [sp]
 800d1e2:	ab14      	add	r3, sp, #80	@ 0x50
 800d1e4:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800d1e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1ea:	f000 ff5d 	bl	800e0a8 <rcutils_format_string_limit>
 800d1ee:	4683      	mov	fp, r0
 800d1f0:	e7d5      	b.n	800d19e <rcl_expand_topic_name+0x232>
 800d1f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1f4:	4658      	mov	r0, fp
 800d1f6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d1f8:	250a      	movs	r5, #10
 800d1fa:	601c      	str	r4, [r3, #0]
 800d1fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d1fe:	4798      	blx	r3
 800d200:	e700      	b.n	800d004 <rcl_expand_topic_name+0x98>
 800d202:	2300      	movs	r3, #0
 800d204:	469b      	mov	fp, r3
 800d206:	e7cc      	b.n	800d1a2 <rcl_expand_topic_name+0x236>
 800d208:	08015994 	.word	0x08015994
 800d20c:	0801599c 	.word	0x0801599c
 800d210:	080159a4 	.word	0x080159a4
 800d214:	08015948 	.word	0x08015948
 800d218:	08015958 	.word	0x08015958
 800d21c:	0801598c 	.word	0x0801598c
 800d220:	08015984 	.word	0x08015984

0800d224 <rcl_get_default_topic_name_substitutions>:
 800d224:	2800      	cmp	r0, #0
 800d226:	bf0c      	ite	eq
 800d228:	200b      	moveq	r0, #11
 800d22a:	2000      	movne	r0, #0
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop

0800d230 <rcl_init>:
 800d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	f1b0 0b00 	subs.w	fp, r0, #0
 800d238:	b09f      	sub	sp, #124	@ 0x7c
 800d23a:	468a      	mov	sl, r1
 800d23c:	4690      	mov	r8, r2
 800d23e:	461f      	mov	r7, r3
 800d240:	f340 8094 	ble.w	800d36c <rcl_init+0x13c>
 800d244:	2900      	cmp	r1, #0
 800d246:	f000 8094 	beq.w	800d372 <rcl_init+0x142>
 800d24a:	1f0d      	subs	r5, r1, #4
 800d24c:	2400      	movs	r4, #0
 800d24e:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800d252:	3401      	adds	r4, #1
 800d254:	2e00      	cmp	r6, #0
 800d256:	f000 808c 	beq.w	800d372 <rcl_init+0x142>
 800d25a:	45a3      	cmp	fp, r4
 800d25c:	d1f7      	bne.n	800d24e <rcl_init+0x1e>
 800d25e:	f1b8 0f00 	cmp.w	r8, #0
 800d262:	f000 8086 	beq.w	800d372 <rcl_init+0x142>
 800d266:	f8d8 4000 	ldr.w	r4, [r8]
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	f000 8081 	beq.w	800d372 <rcl_init+0x142>
 800d270:	ad19      	add	r5, sp, #100	@ 0x64
 800d272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d274:	6824      	ldr	r4, [r4, #0]
 800d276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d278:	a819      	add	r0, sp, #100	@ 0x64
 800d27a:	602c      	str	r4, [r5, #0]
 800d27c:	f7fb fa58 	bl	8008730 <rcutils_allocator_is_valid>
 800d280:	f080 0001 	eor.w	r0, r0, #1
 800d284:	f010 0fff 	tst.w	r0, #255	@ 0xff
 800d288:	d173      	bne.n	800d372 <rcl_init+0x142>
 800d28a:	2f00      	cmp	r7, #0
 800d28c:	d071      	beq.n	800d372 <rcl_init+0x142>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d173      	bne.n	800d37c <rcl_init+0x14c>
 800d294:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800d296:	2178      	movs	r1, #120	@ 0x78
 800d298:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d29a:	2001      	movs	r0, #1
 800d29c:	4798      	blx	r3
 800d29e:	4604      	mov	r4, r0
 800d2a0:	6038      	str	r0, [r7, #0]
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	f000 80b1 	beq.w	800d40a <rcl_init+0x1da>
 800d2a8:	a802      	add	r0, sp, #8
 800d2aa:	f001 f8d3 	bl	800e454 <rmw_get_zero_initialized_context>
 800d2ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d2b2:	ac19      	add	r4, sp, #100	@ 0x64
 800d2b4:	a902      	add	r1, sp, #8
 800d2b6:	2250      	movs	r2, #80	@ 0x50
 800d2b8:	f005 f8cf 	bl	801245a <memcpy>
 800d2bc:	683e      	ldr	r6, [r7, #0]
 800d2be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2c0:	4635      	mov	r5, r6
 800d2c2:	6824      	ldr	r4, [r4, #0]
 800d2c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d2c6:	f106 0114 	add.w	r1, r6, #20
 800d2ca:	602c      	str	r4, [r5, #0]
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	f000 f92b 	bl	800d528 <rcl_init_options_copy>
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d142      	bne.n	800d35e <rcl_init+0x12e>
 800d2d8:	683d      	ldr	r5, [r7, #0]
 800d2da:	46d8      	mov	r8, fp
 800d2dc:	ea4f 79eb 	mov.w	r9, fp, asr #31
 800d2e0:	6228      	str	r0, [r5, #32]
 800d2e2:	e9c5 8906 	strd	r8, r9, [r5, #24]
 800d2e6:	f1bb 0f00 	cmp.w	fp, #0
 800d2ea:	d04d      	beq.n	800d388 <rcl_init+0x158>
 800d2ec:	f1ba 0f00 	cmp.w	sl, #0
 800d2f0:	d04a      	beq.n	800d388 <rcl_init+0x158>
 800d2f2:	4658      	mov	r0, fp
 800d2f4:	2104      	movs	r1, #4
 800d2f6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800d2fa:	4798      	blx	r3
 800d2fc:	6228      	str	r0, [r5, #32]
 800d2fe:	683d      	ldr	r5, [r7, #0]
 800d300:	6a2b      	ldr	r3, [r5, #32]
 800d302:	46ab      	mov	fp, r5
 800d304:	b353      	cbz	r3, 800d35c <rcl_init+0x12c>
 800d306:	f1b8 0f01 	cmp.w	r8, #1
 800d30a:	f179 0300 	sbcs.w	r3, r9, #0
 800d30e:	db3b      	blt.n	800d388 <rcl_init+0x158>
 800d310:	f1aa 0604 	sub.w	r6, sl, #4
 800d314:	2400      	movs	r4, #0
 800d316:	2500      	movs	r5, #0
 800d318:	e00b      	b.n	800d332 <rcl_init+0x102>
 800d31a:	6831      	ldr	r1, [r6, #0]
 800d31c:	f005 f89d 	bl	801245a <memcpy>
 800d320:	3401      	adds	r4, #1
 800d322:	f145 0500 	adc.w	r5, r5, #0
 800d326:	45a9      	cmp	r9, r5
 800d328:	bf08      	it	eq
 800d32a:	45a0      	cmpeq	r8, r4
 800d32c:	d02b      	beq.n	800d386 <rcl_init+0x156>
 800d32e:	f8d7 b000 	ldr.w	fp, [r7]
 800d332:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800d336:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800d33a:	f7f2 ffe1 	bl	8000300 <strlen>
 800d33e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d340:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800d342:	f8db b020 	ldr.w	fp, [fp, #32]
 800d346:	9001      	str	r0, [sp, #4]
 800d348:	4798      	blx	r3
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	f84b 000a 	str.w	r0, [fp, sl]
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	9a01      	ldr	r2, [sp, #4]
 800d354:	f853 000a 	ldr.w	r0, [r3, sl]
 800d358:	2800      	cmp	r0, #0
 800d35a:	d1de      	bne.n	800d31a <rcl_init+0xea>
 800d35c:	240a      	movs	r4, #10
 800d35e:	4638      	mov	r0, r7
 800d360:	f7ff fda0 	bl	800cea4 <__cleanup_context>
 800d364:	4620      	mov	r0, r4
 800d366:	b01f      	add	sp, #124	@ 0x7c
 800d368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36c:	2900      	cmp	r1, #0
 800d36e:	f43f af76 	beq.w	800d25e <rcl_init+0x2e>
 800d372:	240b      	movs	r4, #11
 800d374:	4620      	mov	r0, r4
 800d376:	b01f      	add	sp, #124	@ 0x7c
 800d378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37c:	2464      	movs	r4, #100	@ 0x64
 800d37e:	4620      	mov	r0, r4
 800d380:	b01f      	add	sp, #124	@ 0x7c
 800d382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d386:	683d      	ldr	r5, [r7, #0]
 800d388:	4a29      	ldr	r2, [pc, #164]	@ (800d430 <rcl_init+0x200>)
 800d38a:	6813      	ldr	r3, [r2, #0]
 800d38c:	3301      	adds	r3, #1
 800d38e:	d036      	beq.n	800d3fe <rcl_init+0x1ce>
 800d390:	4619      	mov	r1, r3
 800d392:	2000      	movs	r0, #0
 800d394:	6013      	str	r3, [r2, #0]
 800d396:	696d      	ldr	r5, [r5, #20]
 800d398:	607b      	str	r3, [r7, #4]
 800d39a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d39c:	3301      	adds	r3, #1
 800d39e:	e9c5 1006 	strd	r1, r0, [r5, #24]
 800d3a2:	d036      	beq.n	800d412 <rcl_init+0x1e2>
 800d3a4:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800d3a8:	b943      	cbnz	r3, 800d3bc <rcl_init+0x18c>
 800d3aa:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800d3ae:	f000 f963 	bl	800d678 <rcl_get_localhost_only>
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d1d2      	bne.n	800d35e <rcl_init+0x12e>
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	695d      	ldr	r5, [r3, #20]
 800d3bc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d3be:	aa18      	add	r2, sp, #96	@ 0x60
 800d3c0:	a917      	add	r1, sp, #92	@ 0x5c
 800d3c2:	f000 fd51 	bl	800de68 <rcl_validate_enclave_name>
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d1c8      	bne.n	800d35e <rcl_init+0x12e>
 800d3cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d3ce:	b9f3      	cbnz	r3, 800d40e <rcl_init+0x1de>
 800d3d0:	6839      	ldr	r1, [r7, #0]
 800d3d2:	694b      	ldr	r3, [r1, #20]
 800d3d4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800d3d8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800d3da:	f000 fbf9 	bl	800dbd0 <rcl_get_security_options_from_environment>
 800d3de:	4604      	mov	r4, r0
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d1bc      	bne.n	800d35e <rcl_init+0x12e>
 800d3e4:	6839      	ldr	r1, [r7, #0]
 800d3e6:	6948      	ldr	r0, [r1, #20]
 800d3e8:	3128      	adds	r1, #40	@ 0x28
 800d3ea:	3018      	adds	r0, #24
 800d3ec:	f001 fa1e 	bl	800e82c <rmw_init>
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d0be      	beq.n	800d374 <rcl_init+0x144>
 800d3f6:	f7ff fd31 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	e7af      	b.n	800d35e <rcl_init+0x12e>
 800d3fe:	2401      	movs	r4, #1
 800d400:	4618      	mov	r0, r3
 800d402:	4621      	mov	r1, r4
 800d404:	4623      	mov	r3, r4
 800d406:	6014      	str	r4, [r2, #0]
 800d408:	e7c5      	b.n	800d396 <rcl_init+0x166>
 800d40a:	240a      	movs	r4, #10
 800d40c:	e7b2      	b.n	800d374 <rcl_init+0x144>
 800d40e:	2401      	movs	r4, #1
 800d410:	e7a5      	b.n	800d35e <rcl_init+0x12e>
 800d412:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d416:	f003 fb0d 	bl	8010a34 <rcl_get_default_domain_id>
 800d41a:	4604      	mov	r4, r0
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d19e      	bne.n	800d35e <rcl_init+0x12e>
 800d420:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d422:	3301      	adds	r3, #1
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	bf08      	it	eq
 800d428:	6268      	streq	r0, [r5, #36]	@ 0x24
 800d42a:	695d      	ldr	r5, [r3, #20]
 800d42c:	e7ba      	b.n	800d3a4 <rcl_init+0x174>
 800d42e:	bf00      	nop
 800d430:	2000c058 	.word	0x2000c058

0800d434 <rcl_get_zero_initialized_init_options>:
 800d434:	2000      	movs	r0, #0
 800d436:	4770      	bx	lr

0800d438 <rcl_init_options_init>:
 800d438:	b084      	sub	sp, #16
 800d43a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43c:	b091      	sub	sp, #68	@ 0x44
 800d43e:	af17      	add	r7, sp, #92	@ 0x5c
 800d440:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800d444:	2800      	cmp	r0, #0
 800d446:	d046      	beq.n	800d4d6 <rcl_init_options_init+0x9e>
 800d448:	6803      	ldr	r3, [r0, #0]
 800d44a:	4606      	mov	r6, r0
 800d44c:	b133      	cbz	r3, 800d45c <rcl_init_options_init+0x24>
 800d44e:	2464      	movs	r4, #100	@ 0x64
 800d450:	4620      	mov	r0, r4
 800d452:	b011      	add	sp, #68	@ 0x44
 800d454:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d458:	b004      	add	sp, #16
 800d45a:	4770      	bx	lr
 800d45c:	4638      	mov	r0, r7
 800d45e:	f7fb f967 	bl	8008730 <rcutils_allocator_is_valid>
 800d462:	2800      	cmp	r0, #0
 800d464:	d037      	beq.n	800d4d6 <rcl_init_options_init+0x9e>
 800d466:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d468:	2050      	movs	r0, #80	@ 0x50
 800d46a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800d46c:	4798      	blx	r3
 800d46e:	4604      	mov	r4, r0
 800d470:	6030      	str	r0, [r6, #0]
 800d472:	2800      	cmp	r0, #0
 800d474:	d031      	beq.n	800d4da <rcl_init_options_init+0xa2>
 800d476:	46bc      	mov	ip, r7
 800d478:	4605      	mov	r5, r0
 800d47a:	3418      	adds	r4, #24
 800d47c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d480:	f8dc c000 	ldr.w	ip, [ip]
 800d484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d486:	f8c5 c000 	str.w	ip, [r5]
 800d48a:	ad02      	add	r5, sp, #8
 800d48c:	a802      	add	r0, sp, #8
 800d48e:	f000 ffe9 	bl	800e464 <rmw_get_zero_initialized_init_options>
 800d492:	f8d6 c000 	ldr.w	ip, [r6]
 800d496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d49a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d49c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d49e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d4a6:	e884 0003 	stmia.w	r4, {r0, r1}
 800d4aa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800d4ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d4b2:	f10c 0018 	add.w	r0, ip, #24
 800d4b6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d4ba:	f001 f8db 	bl	800e674 <rmw_init_options_init>
 800d4be:	4604      	mov	r4, r0
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d0c5      	beq.n	800d450 <rcl_init_options_init+0x18>
 800d4c4:	6830      	ldr	r0, [r6, #0]
 800d4c6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d4c8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800d4ca:	4798      	blx	r3
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f7ff fcc5 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	e7bc      	b.n	800d450 <rcl_init_options_init+0x18>
 800d4d6:	240b      	movs	r4, #11
 800d4d8:	e7ba      	b.n	800d450 <rcl_init_options_init+0x18>
 800d4da:	240a      	movs	r4, #10
 800d4dc:	e7b8      	b.n	800d450 <rcl_init_options_init+0x18>
 800d4de:	bf00      	nop

0800d4e0 <rcl_init_options_fini>:
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	b1c0      	cbz	r0, 800d518 <rcl_init_options_fini+0x38>
 800d4e6:	6804      	ldr	r4, [r0, #0]
 800d4e8:	4606      	mov	r6, r0
 800d4ea:	b1ac      	cbz	r4, 800d518 <rcl_init_options_fini+0x38>
 800d4ec:	ad01      	add	r5, sp, #4
 800d4ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4f0:	6824      	ldr	r4, [r4, #0]
 800d4f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d4f4:	a801      	add	r0, sp, #4
 800d4f6:	602c      	str	r4, [r5, #0]
 800d4f8:	f7fb f91a 	bl	8008730 <rcutils_allocator_is_valid>
 800d4fc:	b160      	cbz	r0, 800d518 <rcl_init_options_fini+0x38>
 800d4fe:	6830      	ldr	r0, [r6, #0]
 800d500:	3018      	adds	r0, #24
 800d502:	f001 f957 	bl	800e7b4 <rmw_init_options_fini>
 800d506:	4604      	mov	r4, r0
 800d508:	b950      	cbnz	r0, 800d520 <rcl_init_options_fini+0x40>
 800d50a:	6830      	ldr	r0, [r6, #0]
 800d50c:	9b02      	ldr	r3, [sp, #8]
 800d50e:	9905      	ldr	r1, [sp, #20]
 800d510:	4798      	blx	r3
 800d512:	4620      	mov	r0, r4
 800d514:	b006      	add	sp, #24
 800d516:	bd70      	pop	{r4, r5, r6, pc}
 800d518:	240b      	movs	r4, #11
 800d51a:	4620      	mov	r0, r4
 800d51c:	b006      	add	sp, #24
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	f7ff fc9c 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800d524:	4604      	mov	r4, r0
 800d526:	e7f8      	b.n	800d51a <rcl_init_options_fini+0x3a>

0800d528 <rcl_init_options_copy>:
 800d528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52c:	b096      	sub	sp, #88	@ 0x58
 800d52e:	2800      	cmp	r0, #0
 800d530:	d064      	beq.n	800d5fc <rcl_init_options_copy+0xd4>
 800d532:	6806      	ldr	r6, [r0, #0]
 800d534:	4605      	mov	r5, r0
 800d536:	2e00      	cmp	r6, #0
 800d538:	d060      	beq.n	800d5fc <rcl_init_options_copy+0xd4>
 800d53a:	460c      	mov	r4, r1
 800d53c:	2900      	cmp	r1, #0
 800d53e:	d05d      	beq.n	800d5fc <rcl_init_options_copy+0xd4>
 800d540:	680b      	ldr	r3, [r1, #0]
 800d542:	b123      	cbz	r3, 800d54e <rcl_init_options_copy+0x26>
 800d544:	2664      	movs	r6, #100	@ 0x64
 800d546:	4630      	mov	r0, r6
 800d548:	b016      	add	sp, #88	@ 0x58
 800d54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54e:	af11      	add	r7, sp, #68	@ 0x44
 800d550:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d552:	46b8      	mov	r8, r7
 800d554:	6836      	ldr	r6, [r6, #0]
 800d556:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d558:	4640      	mov	r0, r8
 800d55a:	603e      	str	r6, [r7, #0]
 800d55c:	f7fb f8e8 	bl	8008730 <rcutils_allocator_is_valid>
 800d560:	2800      	cmp	r0, #0
 800d562:	d04b      	beq.n	800d5fc <rcl_init_options_copy+0xd4>
 800d564:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d566:	2050      	movs	r0, #80	@ 0x50
 800d568:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800d56a:	4798      	blx	r3
 800d56c:	4606      	mov	r6, r0
 800d56e:	6020      	str	r0, [r4, #0]
 800d570:	2800      	cmp	r0, #0
 800d572:	d07a      	beq.n	800d66a <rcl_init_options_copy+0x142>
 800d574:	46c4      	mov	ip, r8
 800d576:	4607      	mov	r7, r0
 800d578:	3618      	adds	r6, #24
 800d57a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d57e:	f8dc c000 	ldr.w	ip, [ip]
 800d582:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d584:	f8c7 c000 	str.w	ip, [r7]
 800d588:	af02      	add	r7, sp, #8
 800d58a:	a802      	add	r0, sp, #8
 800d58c:	f000 ff6a 	bl	800e464 <rmw_get_zero_initialized_init_options>
 800d590:	f8d4 c000 	ldr.w	ip, [r4]
 800d594:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d596:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d598:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d59a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d59c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d59e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d5a0:	ab16      	add	r3, sp, #88	@ 0x58
 800d5a2:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d5a6:	e886 0003 	stmia.w	r6, {r0, r1}
 800d5aa:	e913 0003 	ldmdb	r3, {r0, r1}
 800d5ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d5b2:	f10c 0018 	add.w	r0, ip, #24
 800d5b6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800d5ba:	f001 f85b 	bl	800e674 <rmw_init_options_init>
 800d5be:	4606      	mov	r6, r0
 800d5c0:	bb08      	cbnz	r0, 800d606 <rcl_init_options_copy+0xde>
 800d5c2:	f8d4 c000 	ldr.w	ip, [r4]
 800d5c6:	682f      	ldr	r7, [r5, #0]
 800d5c8:	4666      	mov	r6, ip
 800d5ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d5cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	f10c 0018 	add.w	r0, ip, #24
 800d5d4:	6033      	str	r3, [r6, #0]
 800d5d6:	f001 f8ed 	bl	800e7b4 <rmw_init_options_fini>
 800d5da:	4607      	mov	r7, r0
 800d5dc:	b1f0      	cbz	r0, 800d61c <rcl_init_options_copy+0xf4>
 800d5de:	f7fb f8b5 	bl	800874c <rcutils_get_error_string>
 800d5e2:	f7fb f8c9 	bl	8008778 <rcutils_reset_error>
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f7ff ff7a 	bl	800d4e0 <rcl_init_options_fini>
 800d5ec:	4606      	mov	r6, r0
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d1a9      	bne.n	800d546 <rcl_init_options_copy+0x1e>
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	f7ff fc32 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	e7a4      	b.n	800d546 <rcl_init_options_copy+0x1e>
 800d5fc:	260b      	movs	r6, #11
 800d5fe:	4630      	mov	r0, r6
 800d600:	b016      	add	sp, #88	@ 0x58
 800d602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d606:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d608:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800d60a:	6820      	ldr	r0, [r4, #0]
 800d60c:	4798      	blx	r3
 800d60e:	4630      	mov	r0, r6
 800d610:	f7ff fc24 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800d614:	4606      	mov	r6, r0
 800d616:	2800      	cmp	r0, #0
 800d618:	d0d3      	beq.n	800d5c2 <rcl_init_options_copy+0x9a>
 800d61a:	e794      	b.n	800d546 <rcl_init_options_copy+0x1e>
 800d61c:	6827      	ldr	r7, [r4, #0]
 800d61e:	ae02      	add	r6, sp, #8
 800d620:	a802      	add	r0, sp, #8
 800d622:	f000 ff1f 	bl	800e464 <rmw_get_zero_initialized_init_options>
 800d626:	3718      	adds	r7, #24
 800d628:	f8d5 c000 	ldr.w	ip, [r5]
 800d62c:	6825      	ldr	r5, [r4, #0]
 800d62e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d630:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d632:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d634:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d636:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d638:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d63a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d63e:	e887 0003 	stmia.w	r7, {r0, r1}
 800d642:	f10c 0018 	add.w	r0, ip, #24
 800d646:	f105 0118 	add.w	r1, r5, #24
 800d64a:	f001 f86b 	bl	800e724 <rmw_init_options_copy>
 800d64e:	4606      	mov	r6, r0
 800d650:	2800      	cmp	r0, #0
 800d652:	f43f af78 	beq.w	800d546 <rcl_init_options_copy+0x1e>
 800d656:	f7fb f879 	bl	800874c <rcutils_get_error_string>
 800d65a:	f7fb f88d 	bl	8008778 <rcutils_reset_error>
 800d65e:	4620      	mov	r0, r4
 800d660:	f7ff ff3e 	bl	800d4e0 <rcl_init_options_fini>
 800d664:	b118      	cbz	r0, 800d66e <rcl_init_options_copy+0x146>
 800d666:	4606      	mov	r6, r0
 800d668:	e76d      	b.n	800d546 <rcl_init_options_copy+0x1e>
 800d66a:	260a      	movs	r6, #10
 800d66c:	e76b      	b.n	800d546 <rcl_init_options_copy+0x1e>
 800d66e:	4630      	mov	r0, r6
 800d670:	f7ff fbf4 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800d674:	4606      	mov	r6, r0
 800d676:	e766      	b.n	800d546 <rcl_init_options_copy+0x1e>

0800d678 <rcl_get_localhost_only>:
 800d678:	b510      	push	{r4, lr}
 800d67a:	2300      	movs	r3, #0
 800d67c:	b082      	sub	sp, #8
 800d67e:	9301      	str	r3, [sp, #4]
 800d680:	b1b8      	cbz	r0, 800d6b2 <rcl_get_localhost_only+0x3a>
 800d682:	4604      	mov	r4, r0
 800d684:	a901      	add	r1, sp, #4
 800d686:	480c      	ldr	r0, [pc, #48]	@ (800d6b8 <rcl_get_localhost_only+0x40>)
 800d688:	f000 fd48 	bl	800e11c <rcutils_get_env>
 800d68c:	b110      	cbz	r0, 800d694 <rcl_get_localhost_only+0x1c>
 800d68e:	2001      	movs	r0, #1
 800d690:	b002      	add	sp, #8
 800d692:	bd10      	pop	{r4, pc}
 800d694:	9b01      	ldr	r3, [sp, #4]
 800d696:	b113      	cbz	r3, 800d69e <rcl_get_localhost_only+0x26>
 800d698:	781a      	ldrb	r2, [r3, #0]
 800d69a:	2a31      	cmp	r2, #49	@ 0x31
 800d69c:	d004      	beq.n	800d6a8 <rcl_get_localhost_only+0x30>
 800d69e:	2302      	movs	r3, #2
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	7023      	strb	r3, [r4, #0]
 800d6a4:	b002      	add	sp, #8
 800d6a6:	bd10      	pop	{r4, pc}
 800d6a8:	785b      	ldrb	r3, [r3, #1]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1f7      	bne.n	800d69e <rcl_get_localhost_only+0x26>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e7f6      	b.n	800d6a0 <rcl_get_localhost_only+0x28>
 800d6b2:	200b      	movs	r0, #11
 800d6b4:	b002      	add	sp, #8
 800d6b6:	bd10      	pop	{r4, pc}
 800d6b8:	080159b0 	.word	0x080159b0

0800d6bc <rcl_get_zero_initialized_node>:
 800d6bc:	4a03      	ldr	r2, [pc, #12]	@ (800d6cc <rcl_get_zero_initialized_node+0x10>)
 800d6be:	4603      	mov	r3, r0
 800d6c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d6c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	4770      	bx	lr
 800d6cc:	080159d0 	.word	0x080159d0

0800d6d0 <rcl_node_init>:
 800d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d4:	b09b      	sub	sp, #108	@ 0x6c
 800d6d6:	2400      	movs	r4, #0
 800d6d8:	4605      	mov	r5, r0
 800d6da:	460f      	mov	r7, r1
 800d6dc:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
 800d6e0:	a815      	add	r0, sp, #84	@ 0x54
 800d6e2:	4616      	mov	r6, r2
 800d6e4:	4698      	mov	r8, r3
 800d6e6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d6e8:	f003 fa5c 	bl	8010ba4 <rcl_guard_condition_get_default_options>
 800d6ec:	f1b9 0f00 	cmp.w	r9, #0
 800d6f0:	f000 810b 	beq.w	800d90a <rcl_node_init+0x23a>
 800d6f4:	fab6 f486 	clz	r4, r6
 800d6f8:	f109 0a04 	add.w	sl, r9, #4
 800d6fc:	0964      	lsrs	r4, r4, #5
 800d6fe:	4650      	mov	r0, sl
 800d700:	f7fb f816 	bl	8008730 <rcutils_allocator_is_valid>
 800d704:	f080 0001 	eor.w	r0, r0, #1
 800d708:	2d00      	cmp	r5, #0
 800d70a:	bf08      	it	eq
 800d70c:	2401      	moveq	r4, #1
 800d70e:	2f00      	cmp	r7, #0
 800d710:	bf08      	it	eq
 800d712:	2401      	moveq	r4, #1
 800d714:	4304      	orrs	r4, r0
 800d716:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800d71a:	f040 80f6 	bne.w	800d90a <rcl_node_init+0x23a>
 800d71e:	686a      	ldr	r2, [r5, #4]
 800d720:	9207      	str	r2, [sp, #28]
 800d722:	2a00      	cmp	r2, #0
 800d724:	f040 8115 	bne.w	800d952 <rcl_node_init+0x282>
 800d728:	f1b8 0f00 	cmp.w	r8, #0
 800d72c:	f000 80ed 	beq.w	800d90a <rcl_node_init+0x23a>
 800d730:	4640      	mov	r0, r8
 800d732:	f7ff fbb1 	bl	800ce98 <rcl_context_is_valid>
 800d736:	4683      	mov	fp, r0
 800d738:	2800      	cmp	r0, #0
 800d73a:	f000 80eb 	beq.w	800d914 <rcl_node_init+0x244>
 800d73e:	9a07      	ldr	r2, [sp, #28]
 800d740:	4638      	mov	r0, r7
 800d742:	a914      	add	r1, sp, #80	@ 0x50
 800d744:	9214      	str	r2, [sp, #80]	@ 0x50
 800d746:	f000 ff0f 	bl	800e568 <rmw_validate_node_name>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2800      	cmp	r0, #0
 800d74e:	f040 80dd 	bne.w	800d90c <rcl_node_init+0x23c>
 800d752:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d754:	2800      	cmp	r0, #0
 800d756:	f040 810a 	bne.w	800d96e <rcl_node_init+0x29e>
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7f2 fdd0 	bl	8000300 <strlen>
 800d760:	2800      	cmp	r0, #0
 800d762:	f040 80d9 	bne.w	800d918 <rcl_node_init+0x248>
 800d766:	4e8e      	ldr	r6, [pc, #568]	@ (800d9a0 <rcl_node_init+0x2d0>)
 800d768:	a914      	add	r1, sp, #80	@ 0x50
 800d76a:	2200      	movs	r2, #0
 800d76c:	4630      	mov	r0, r6
 800d76e:	f000 fedd 	bl	800e52c <rmw_validate_namespace>
 800d772:	4603      	mov	r3, r0
 800d774:	2800      	cmp	r0, #0
 800d776:	f040 80c9 	bne.w	800d90c <rcl_node_init+0x23c>
 800d77a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f040 80ed 	bne.w	800d95c <rcl_node_init+0x28c>
 800d782:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d786:	2030      	movs	r0, #48	@ 0x30
 800d788:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800d78c:	9307      	str	r3, [sp, #28]
 800d78e:	4790      	blx	r2
 800d790:	4683      	mov	fp, r0
 800d792:	6068      	str	r0, [r5, #4]
 800d794:	2800      	cmp	r0, #0
 800d796:	f000 80e8 	beq.w	800d96a <rcl_node_init+0x29a>
 800d79a:	9b07      	ldr	r3, [sp, #28]
 800d79c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800d7a0:	6283      	str	r3, [r0, #40]	@ 0x28
 800d7a2:	a80a      	add	r0, sp, #40	@ 0x28
 800d7a4:	f8cb 302c 	str.w	r3, [fp, #44]	@ 0x2c
 800d7a8:	f000 f92a 	bl	800da00 <rcl_node_get_default_options>
 800d7ac:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 800d7b0:	46dc      	mov	ip, fp
 800d7b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d7b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7ba:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800d7be:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800d7c2:	4648      	mov	r0, r9
 800d7c4:	6869      	ldr	r1, [r5, #4]
 800d7c6:	f8c5 8000 	str.w	r8, [r5]
 800d7ca:	f000 f935 	bl	800da38 <rcl_node_options_copy>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d16c      	bne.n	800d8ac <rcl_node_init+0x1dc>
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f7f2 fd94 	bl	8000300 <strlen>
 800d7d8:	4430      	add	r0, r6
 800d7da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d7de:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800d7e2:	2b2f      	cmp	r3, #47	@ 0x2f
 800d7e4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d7e8:	bf0c      	ite	eq
 800d7ea:	496e      	ldreq	r1, [pc, #440]	@ (800d9a4 <rcl_node_init+0x2d4>)
 800d7ec:	496e      	ldrne	r1, [pc, #440]	@ (800d9a8 <rcl_node_init+0x2d8>)
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	e9cd 6703 	strd	r6, r7, [sp, #12]
 800d7f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d7f8:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800d7fc:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800d800:	f000 fc52 	bl	800e0a8 <rcutils_format_string_limit>
 800d804:	f8cb 002c 	str.w	r0, [fp, #44]	@ 0x2c
 800d808:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800d80c:	f8db 3000 	ldr.w	r3, [fp]
 800d810:	1c59      	adds	r1, r3, #1
 800d812:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d814:	f000 80b3 	beq.w	800d97e <rcl_node_init+0x2ae>
 800d818:	f8d8 2000 	ldr.w	r2, [r8]
 800d81c:	4639      	mov	r1, r7
 800d81e:	f8cb 301c 	str.w	r3, [fp, #28]
 800d822:	6957      	ldr	r7, [r2, #20]
 800d824:	4632      	mov	r2, r6
 800d826:	6828      	ldr	r0, [r5, #0]
 800d828:	f897 7030 	ldrb.w	r7, [r7, #48]	@ 0x30
 800d82c:	6800      	ldr	r0, [r0, #0]
 800d82e:	f1a7 0701 	sub.w	r7, r7, #1
 800d832:	3028      	adds	r0, #40	@ 0x28
 800d834:	fab7 f787 	clz	r7, r7
 800d838:	097f      	lsrs	r7, r7, #5
 800d83a:	9700      	str	r7, [sp, #0]
 800d83c:	f001 fa5c 	bl	800ecf8 <rmw_create_node>
 800d840:	686b      	ldr	r3, [r5, #4]
 800d842:	f8cb 0020 	str.w	r0, [fp, #32]
 800d846:	6a18      	ldr	r0, [r3, #32]
 800d848:	2800      	cmp	r0, #0
 800d84a:	d031      	beq.n	800d8b0 <rcl_node_init+0x1e0>
 800d84c:	f001 fae8 	bl	800ee20 <rmw_node_get_graph_guard_condition>
 800d850:	4683      	mov	fp, r0
 800d852:	b358      	cbz	r0, 800d8ac <rcl_node_init+0x1dc>
 800d854:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d858:	2008      	movs	r0, #8
 800d85a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800d85e:	686f      	ldr	r7, [r5, #4]
 800d860:	4798      	blx	r3
 800d862:	686b      	ldr	r3, [r5, #4]
 800d864:	6278      	str	r0, [r7, #36]	@ 0x24
 800d866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d868:	9207      	str	r2, [sp, #28]
 800d86a:	b30a      	cbz	r2, 800d8b0 <rcl_node_init+0x1e0>
 800d86c:	a808      	add	r0, sp, #32
 800d86e:	af15      	add	r7, sp, #84	@ 0x54
 800d870:	f003 f914 	bl	8010a9c <rcl_get_zero_initialized_guard_condition>
 800d874:	a808      	add	r0, sp, #32
 800d876:	686b      	ldr	r3, [r5, #4]
 800d878:	9a07      	ldr	r2, [sp, #28]
 800d87a:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 800d87e:	c803      	ldmia	r0, {r0, r1}
 800d880:	e882 0003 	stmia.w	r2, {r0, r1}
 800d884:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800d888:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d88a:	f8da e000 	ldr.w	lr, [sl]
 800d88e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d890:	f8c7 e000 	str.w	lr, [r7]
 800d894:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800d898:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d89c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d89e:	4660      	mov	r0, ip
 800d8a0:	4642      	mov	r2, r8
 800d8a2:	4659      	mov	r1, fp
 800d8a4:	f003 f904 	bl	8010ab0 <rcl_guard_condition_init_from_rmw>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	b320      	cbz	r0, 800d8f6 <rcl_node_init+0x226>
 800d8ac:	686b      	ldr	r3, [r5, #4]
 800d8ae:	b1f3      	cbz	r3, 800d8ee <rcl_node_init+0x21e>
 800d8b0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d8b2:	b128      	cbz	r0, 800d8c0 <rcl_node_init+0x1f0>
 800d8b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d8b8:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800d8bc:	4798      	blx	r3
 800d8be:	686b      	ldr	r3, [r5, #4]
 800d8c0:	6a18      	ldr	r0, [r3, #32]
 800d8c2:	b110      	cbz	r0, 800d8ca <rcl_node_init+0x1fa>
 800d8c4:	f001 fa2e 	bl	800ed24 <rmw_destroy_node>
 800d8c8:	686b      	ldr	r3, [r5, #4]
 800d8ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d8cc:	b148      	cbz	r0, 800d8e2 <rcl_node_init+0x212>
 800d8ce:	f003 f943 	bl	8010b58 <rcl_guard_condition_fini>
 800d8d2:	686a      	ldr	r2, [r5, #4]
 800d8d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d8d8:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800d8da:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800d8de:	4798      	blx	r3
 800d8e0:	686b      	ldr	r3, [r5, #4]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800d8e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d8ec:	4798      	blx	r3
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e9c5 2200 	strd	r2, r2, [r5]
 800d8f6:	b14c      	cbz	r4, 800d90c <rcl_node_init+0x23c>
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800d8fe:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800d902:	9307      	str	r3, [sp, #28]
 800d904:	4790      	blx	r2
 800d906:	9b07      	ldr	r3, [sp, #28]
 800d908:	e000      	b.n	800d90c <rcl_node_init+0x23c>
 800d90a:	230b      	movs	r3, #11
 800d90c:	4618      	mov	r0, r3
 800d90e:	b01b      	add	sp, #108	@ 0x6c
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d914:	2365      	movs	r3, #101	@ 0x65
 800d916:	e7f9      	b.n	800d90c <rcl_node_init+0x23c>
 800d918:	7833      	ldrb	r3, [r6, #0]
 800d91a:	2b2f      	cmp	r3, #47	@ 0x2f
 800d91c:	f43f af24 	beq.w	800d768 <rcl_node_init+0x98>
 800d920:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d924:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d928:	4920      	ldr	r1, [pc, #128]	@ (800d9ac <rcl_node_init+0x2dc>)
 800d92a:	e9cd 3200 	strd	r3, r2, [sp]
 800d92e:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800d932:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800d936:	f000 fbb7 	bl	800e0a8 <rcutils_format_string_limit>
 800d93a:	4606      	mov	r6, r0
 800d93c:	b1e8      	cbz	r0, 800d97a <rcl_node_init+0x2aa>
 800d93e:	2200      	movs	r2, #0
 800d940:	a914      	add	r1, sp, #80	@ 0x50
 800d942:	9214      	str	r2, [sp, #80]	@ 0x50
 800d944:	f000 fdf2 	bl	800e52c <rmw_validate_namespace>
 800d948:	4603      	mov	r3, r0
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d1d4      	bne.n	800d8f8 <rcl_node_init+0x228>
 800d94e:	465c      	mov	r4, fp
 800d950:	e713      	b.n	800d77a <rcl_node_init+0xaa>
 800d952:	2364      	movs	r3, #100	@ 0x64
 800d954:	4618      	mov	r0, r3
 800d956:	b01b      	add	sp, #108	@ 0x6c
 800d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95c:	4618      	mov	r0, r3
 800d95e:	23ca      	movs	r3, #202	@ 0xca
 800d960:	9307      	str	r3, [sp, #28]
 800d962:	f000 fdf5 	bl	800e550 <rmw_namespace_validation_result_string>
 800d966:	9b07      	ldr	r3, [sp, #28]
 800d968:	e7c5      	b.n	800d8f6 <rcl_node_init+0x226>
 800d96a:	230a      	movs	r3, #10
 800d96c:	e7c3      	b.n	800d8f6 <rcl_node_init+0x226>
 800d96e:	23c9      	movs	r3, #201	@ 0xc9
 800d970:	9307      	str	r3, [sp, #28]
 800d972:	f000 fe49 	bl	800e608 <rmw_node_name_validation_result_string>
 800d976:	9b07      	ldr	r3, [sp, #28]
 800d978:	e7c8      	b.n	800d90c <rcl_node_init+0x23c>
 800d97a:	230a      	movs	r3, #10
 800d97c:	e7c6      	b.n	800d90c <rcl_node_init+0x23c>
 800d97e:	a813      	add	r0, sp, #76	@ 0x4c
 800d980:	f003 f858 	bl	8010a34 <rcl_get_default_domain_id>
 800d984:	2800      	cmp	r0, #0
 800d986:	d191      	bne.n	800d8ac <rcl_node_init+0x1dc>
 800d988:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	d104      	bne.n	800d998 <rcl_node_init+0x2c8>
 800d98e:	4603      	mov	r3, r0
 800d990:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800d994:	9013      	str	r0, [sp, #76]	@ 0x4c
 800d996:	e73f      	b.n	800d818 <rcl_node_init+0x148>
 800d998:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800d99c:	e73c      	b.n	800d818 <rcl_node_init+0x148>
 800d99e:	bf00      	nop
 800d9a0:	080159c8 	.word	0x080159c8
 800d9a4:	08015958 	.word	0x08015958
 800d9a8:	0801598c 	.word	0x0801598c
 800d9ac:	080159cc 	.word	0x080159cc

0800d9b0 <rcl_node_is_valid>:
 800d9b0:	b130      	cbz	r0, 800d9c0 <rcl_node_is_valid+0x10>
 800d9b2:	6843      	ldr	r3, [r0, #4]
 800d9b4:	b123      	cbz	r3, 800d9c0 <rcl_node_is_valid+0x10>
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	b113      	cbz	r3, 800d9c0 <rcl_node_is_valid+0x10>
 800d9ba:	6800      	ldr	r0, [r0, #0]
 800d9bc:	f7ff ba6c 	b.w	800ce98 <rcl_context_is_valid>
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	4770      	bx	lr

0800d9c4 <rcl_node_get_name>:
 800d9c4:	b120      	cbz	r0, 800d9d0 <rcl_node_get_name+0xc>
 800d9c6:	6840      	ldr	r0, [r0, #4]
 800d9c8:	b110      	cbz	r0, 800d9d0 <rcl_node_get_name+0xc>
 800d9ca:	6a00      	ldr	r0, [r0, #32]
 800d9cc:	b100      	cbz	r0, 800d9d0 <rcl_node_get_name+0xc>
 800d9ce:	6880      	ldr	r0, [r0, #8]
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop

0800d9d4 <rcl_node_get_namespace>:
 800d9d4:	b120      	cbz	r0, 800d9e0 <rcl_node_get_namespace+0xc>
 800d9d6:	6840      	ldr	r0, [r0, #4]
 800d9d8:	b110      	cbz	r0, 800d9e0 <rcl_node_get_namespace+0xc>
 800d9da:	6a00      	ldr	r0, [r0, #32]
 800d9dc:	b100      	cbz	r0, 800d9e0 <rcl_node_get_namespace+0xc>
 800d9de:	68c0      	ldr	r0, [r0, #12]
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop

0800d9e4 <rcl_node_get_options>:
 800d9e4:	b128      	cbz	r0, 800d9f2 <rcl_node_get_options+0xe>
 800d9e6:	6840      	ldr	r0, [r0, #4]
 800d9e8:	b118      	cbz	r0, 800d9f2 <rcl_node_get_options+0xe>
 800d9ea:	6a03      	ldr	r3, [r0, #32]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	bf08      	it	eq
 800d9f0:	2000      	moveq	r0, #0
 800d9f2:	4770      	bx	lr

0800d9f4 <rcl_node_get_rmw_handle>:
 800d9f4:	b110      	cbz	r0, 800d9fc <rcl_node_get_rmw_handle+0x8>
 800d9f6:	6840      	ldr	r0, [r0, #4]
 800d9f8:	b100      	cbz	r0, 800d9fc <rcl_node_get_rmw_handle+0x8>
 800d9fa:	6a00      	ldr	r0, [r0, #32]
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop

0800da00 <rcl_node_get_default_options>:
 800da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da04:	b086      	sub	sp, #24
 800da06:	4c0b      	ldr	r4, [pc, #44]	@ (800da34 <rcl_node_get_default_options+0x34>)
 800da08:	4680      	mov	r8, r0
 800da0a:	466d      	mov	r5, sp
 800da0c:	4668      	mov	r0, sp
 800da0e:	f7fa fe81 	bl	8008714 <rcutils_get_default_allocator>
 800da12:	1d27      	adds	r7, r4, #4
 800da14:	4646      	mov	r6, r8
 800da16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da18:	682d      	ldr	r5, [r5, #0]
 800da1a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800da1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da1e:	603d      	str	r5, [r7, #0]
 800da20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da22:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800da26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800da2a:	4640      	mov	r0, r8
 800da2c:	b006      	add	sp, #24
 800da2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da32:	bf00      	nop
 800da34:	20000050 	.word	0x20000050

0800da38 <rcl_node_options_copy>:
 800da38:	2800      	cmp	r0, #0
 800da3a:	bf18      	it	ne
 800da3c:	4288      	cmpne	r0, r1
 800da3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da40:	d019      	beq.n	800da76 <rcl_node_options_copy+0x3e>
 800da42:	fab1 f381 	clz	r3, r1
 800da46:	460c      	mov	r4, r1
 800da48:	095b      	lsrs	r3, r3, #5
 800da4a:	b1a1      	cbz	r1, 800da76 <rcl_node_options_copy+0x3e>
 800da4c:	4606      	mov	r6, r0
 800da4e:	460d      	mov	r5, r1
 800da50:	461f      	mov	r7, r3
 800da52:	f890 e018 	ldrb.w	lr, [r0, #24]
 800da56:	f856 3b04 	ldr.w	r3, [r6], #4
 800da5a:	f890 c019 	ldrb.w	ip, [r0, #25]
 800da5e:	f845 3b04 	str.w	r3, [r5], #4
 800da62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800da64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800da66:	6833      	ldr	r3, [r6, #0]
 800da68:	4638      	mov	r0, r7
 800da6a:	602b      	str	r3, [r5, #0]
 800da6c:	f884 e018 	strb.w	lr, [r4, #24]
 800da70:	f884 c019 	strb.w	ip, [r4, #25]
 800da74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da76:	270b      	movs	r7, #11
 800da78:	4638      	mov	r0, r7
 800da7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da7c <exact_match_lookup>:
 800da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da7e:	f102 0608 	add.w	r6, r2, #8
 800da82:	460b      	mov	r3, r1
 800da84:	b085      	sub	sp, #20
 800da86:	4614      	mov	r4, r2
 800da88:	4607      	mov	r7, r0
 800da8a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800da8e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800da92:	4618      	mov	r0, r3
 800da94:	4918      	ldr	r1, [pc, #96]	@ (800daf8 <exact_match_lookup+0x7c>)
 800da96:	e894 000c 	ldmia.w	r4, {r2, r3}
 800da9a:	f000 faf5 	bl	800e088 <rcutils_join_path>
 800da9e:	783b      	ldrb	r3, [r7, #0]
 800daa0:	4605      	mov	r5, r0
 800daa2:	2b2f      	cmp	r3, #47	@ 0x2f
 800daa4:	d022      	beq.n	800daec <exact_match_lookup+0x70>
 800daa6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800daaa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800daae:	1c78      	adds	r0, r7, #1
 800dab0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800dab4:	f000 faee 	bl	800e094 <rcutils_to_native_path>
 800dab8:	4603      	mov	r3, r0
 800daba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800dabe:	461e      	mov	r6, r3
 800dac0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dac4:	4619      	mov	r1, r3
 800dac6:	4628      	mov	r0, r5
 800dac8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800dacc:	f000 fadc 	bl	800e088 <rcutils_join_path>
 800dad0:	4603      	mov	r3, r0
 800dad2:	4630      	mov	r0, r6
 800dad4:	6862      	ldr	r2, [r4, #4]
 800dad6:	461e      	mov	r6, r3
 800dad8:	6921      	ldr	r1, [r4, #16]
 800dada:	4790      	blx	r2
 800dadc:	4628      	mov	r0, r5
 800dade:	4635      	mov	r5, r6
 800dae0:	6863      	ldr	r3, [r4, #4]
 800dae2:	6921      	ldr	r1, [r4, #16]
 800dae4:	4798      	blx	r3
 800dae6:	4628      	mov	r0, r5
 800dae8:	b005      	add	sp, #20
 800daea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daec:	787b      	ldrb	r3, [r7, #1]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1d9      	bne.n	800daa6 <exact_match_lookup+0x2a>
 800daf2:	4628      	mov	r0, r5
 800daf4:	b005      	add	sp, #20
 800daf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daf8:	08015a14 	.word	0x08015a14

0800dafc <rcl_get_secure_root>:
 800dafc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db00:	b085      	sub	sp, #20
 800db02:	b168      	cbz	r0, 800db20 <rcl_get_secure_root+0x24>
 800db04:	4607      	mov	r7, r0
 800db06:	4608      	mov	r0, r1
 800db08:	460c      	mov	r4, r1
 800db0a:	f7fa fe11 	bl	8008730 <rcutils_allocator_is_valid>
 800db0e:	b138      	cbz	r0, 800db20 <rcl_get_secure_root+0x24>
 800db10:	2300      	movs	r3, #0
 800db12:	482d      	ldr	r0, [pc, #180]	@ (800dbc8 <rcl_get_secure_root+0xcc>)
 800db14:	a903      	add	r1, sp, #12
 800db16:	9303      	str	r3, [sp, #12]
 800db18:	f000 fb00 	bl	800e11c <rcutils_get_env>
 800db1c:	4605      	mov	r5, r0
 800db1e:	b120      	cbz	r0, 800db2a <rcl_get_secure_root+0x2e>
 800db20:	2500      	movs	r5, #0
 800db22:	4628      	mov	r0, r5
 800db24:	b005      	add	sp, #20
 800db26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db2a:	9b03      	ldr	r3, [sp, #12]
 800db2c:	781a      	ldrb	r2, [r3, #0]
 800db2e:	2a00      	cmp	r2, #0
 800db30:	d0f6      	beq.n	800db20 <rcl_get_secure_root+0x24>
 800db32:	f104 090c 	add.w	r9, r4, #12
 800db36:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db3a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db3e:	4618      	mov	r0, r3
 800db40:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800db44:	f000 fbf8 	bl	800e338 <rcutils_strdup>
 800db48:	4680      	mov	r8, r0
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d0e8      	beq.n	800db20 <rcl_get_secure_root+0x24>
 800db4e:	a903      	add	r1, sp, #12
 800db50:	481e      	ldr	r0, [pc, #120]	@ (800dbcc <rcl_get_secure_root+0xd0>)
 800db52:	9503      	str	r5, [sp, #12]
 800db54:	f000 fae2 	bl	800e11c <rcutils_get_env>
 800db58:	b160      	cbz	r0, 800db74 <rcl_get_secure_root+0x78>
 800db5a:	2600      	movs	r6, #0
 800db5c:	4630      	mov	r0, r6
 800db5e:	6863      	ldr	r3, [r4, #4]
 800db60:	6921      	ldr	r1, [r4, #16]
 800db62:	4798      	blx	r3
 800db64:	4640      	mov	r0, r8
 800db66:	6863      	ldr	r3, [r4, #4]
 800db68:	6921      	ldr	r1, [r4, #16]
 800db6a:	4798      	blx	r3
 800db6c:	4628      	mov	r0, r5
 800db6e:	b005      	add	sp, #20
 800db70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	781e      	ldrb	r6, [r3, #0]
 800db78:	b1f6      	cbz	r6, 800dbb8 <rcl_get_secure_root+0xbc>
 800db7a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db82:	4618      	mov	r0, r3
 800db84:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800db88:	f000 fbd6 	bl	800e338 <rcutils_strdup>
 800db8c:	4606      	mov	r6, r0
 800db8e:	2800      	cmp	r0, #0
 800db90:	d0e3      	beq.n	800db5a <rcl_get_secure_root+0x5e>
 800db92:	4622      	mov	r2, r4
 800db94:	4641      	mov	r1, r8
 800db96:	f7ff ff71 	bl	800da7c <exact_match_lookup>
 800db9a:	4605      	mov	r5, r0
 800db9c:	2d00      	cmp	r5, #0
 800db9e:	d0dd      	beq.n	800db5c <rcl_get_secure_root+0x60>
 800dba0:	4628      	mov	r0, r5
 800dba2:	f000 fa6f 	bl	800e084 <rcutils_is_directory>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d1d7      	bne.n	800db5c <rcl_get_secure_root+0x60>
 800dbac:	4628      	mov	r0, r5
 800dbae:	6921      	ldr	r1, [r4, #16]
 800dbb0:	461d      	mov	r5, r3
 800dbb2:	6863      	ldr	r3, [r4, #4]
 800dbb4:	4798      	blx	r3
 800dbb6:	e7d1      	b.n	800db5c <rcl_get_secure_root+0x60>
 800dbb8:	4638      	mov	r0, r7
 800dbba:	4622      	mov	r2, r4
 800dbbc:	4641      	mov	r1, r8
 800dbbe:	f7ff ff5d 	bl	800da7c <exact_match_lookup>
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	e7ea      	b.n	800db9c <rcl_get_secure_root+0xa0>
 800dbc6:	bf00      	nop
 800dbc8:	08015a20 	.word	0x08015a20
 800dbcc:	08015a38 	.word	0x08015a38

0800dbd0 <rcl_get_security_options_from_environment>:
 800dbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd4:	b082      	sub	sp, #8
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	4606      	mov	r6, r0
 800dbda:	460f      	mov	r7, r1
 800dbdc:	4821      	ldr	r0, [pc, #132]	@ (800dc64 <rcl_get_security_options_from_environment+0x94>)
 800dbde:	a901      	add	r1, sp, #4
 800dbe0:	4690      	mov	r8, r2
 800dbe2:	9301      	str	r3, [sp, #4]
 800dbe4:	f000 fa9a 	bl	800e11c <rcutils_get_env>
 800dbe8:	b120      	cbz	r0, 800dbf4 <rcl_get_security_options_from_environment+0x24>
 800dbea:	2501      	movs	r5, #1
 800dbec:	4628      	mov	r0, r5
 800dbee:	b002      	add	sp, #8
 800dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	491c      	ldr	r1, [pc, #112]	@ (800dc68 <rcl_get_security_options_from_environment+0x98>)
 800dbf8:	9801      	ldr	r0, [sp, #4]
 800dbfa:	f7f2 fb21 	bl	8000240 <strcmp>
 800dbfe:	4605      	mov	r5, r0
 800dc00:	b9f0      	cbnz	r0, 800dc40 <rcl_get_security_options_from_environment+0x70>
 800dc02:	9001      	str	r0, [sp, #4]
 800dc04:	f1b8 0f00 	cmp.w	r8, #0
 800dc08:	d021      	beq.n	800dc4e <rcl_get_security_options_from_environment+0x7e>
 800dc0a:	a901      	add	r1, sp, #4
 800dc0c:	4817      	ldr	r0, [pc, #92]	@ (800dc6c <rcl_get_security_options_from_environment+0x9c>)
 800dc0e:	f000 fa85 	bl	800e11c <rcutils_get_env>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d1e9      	bne.n	800dbea <rcl_get_security_options_from_environment+0x1a>
 800dc16:	4916      	ldr	r1, [pc, #88]	@ (800dc70 <rcl_get_security_options_from_environment+0xa0>)
 800dc18:	9801      	ldr	r0, [sp, #4]
 800dc1a:	f7f2 fb11 	bl	8000240 <strcmp>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	4639      	mov	r1, r7
 800dc22:	4630      	mov	r0, r6
 800dc24:	fab3 f383 	clz	r3, r3
 800dc28:	095b      	lsrs	r3, r3, #5
 800dc2a:	f888 3000 	strb.w	r3, [r8]
 800dc2e:	f7ff ff65 	bl	800dafc <rcl_get_secure_root>
 800dc32:	b170      	cbz	r0, 800dc52 <rcl_get_security_options_from_environment+0x82>
 800dc34:	f8c8 0004 	str.w	r0, [r8, #4]
 800dc38:	4628      	mov	r0, r5
 800dc3a:	b002      	add	sp, #8
 800dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc40:	4625      	mov	r5, r4
 800dc42:	f888 4000 	strb.w	r4, [r8]
 800dc46:	4628      	mov	r0, r5
 800dc48:	b002      	add	sp, #8
 800dc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc4e:	250b      	movs	r5, #11
 800dc50:	e7cc      	b.n	800dbec <rcl_get_security_options_from_environment+0x1c>
 800dc52:	f898 5000 	ldrb.w	r5, [r8]
 800dc56:	f1a5 0501 	sub.w	r5, r5, #1
 800dc5a:	fab5 f585 	clz	r5, r5
 800dc5e:	096d      	lsrs	r5, r5, #5
 800dc60:	e7c4      	b.n	800dbec <rcl_get_security_options_from_environment+0x1c>
 800dc62:	bf00      	nop
 800dc64:	080159d8 	.word	0x080159d8
 800dc68:	080159ec 	.word	0x080159ec
 800dc6c:	080159f4 	.word	0x080159f4
 800dc70:	08015a0c 	.word	0x08015a0c

0800dc74 <rcl_get_system_time>:
 800dc74:	4608      	mov	r0, r1
 800dc76:	f000 bb9d 	b.w	800e3b4 <rcutils_system_time_now>
 800dc7a:	bf00      	nop

0800dc7c <rcl_get_steady_time>:
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	f000 bbc1 	b.w	800e404 <rcutils_steady_time_now>
 800dc82:	bf00      	nop

0800dc84 <rcl_get_ros_time>:
 800dc84:	7a03      	ldrb	r3, [r0, #8]
 800dc86:	b510      	push	{r4, lr}
 800dc88:	460c      	mov	r4, r1
 800dc8a:	b143      	cbz	r3, 800dc9e <rcl_get_ros_time+0x1a>
 800dc8c:	2105      	movs	r1, #5
 800dc8e:	f000 f9c5 	bl	800e01c <__atomic_load_8>
 800dc92:	4602      	mov	r2, r0
 800dc94:	460b      	mov	r3, r1
 800dc96:	2000      	movs	r0, #0
 800dc98:	e9c4 2300 	strd	r2, r3, [r4]
 800dc9c:	bd10      	pop	{r4, pc}
 800dc9e:	4608      	mov	r0, r1
 800dca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dca4:	f000 bb86 	b.w	800e3b4 <rcutils_system_time_now>

0800dca8 <rcl_clock_init>:
 800dca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcac:	4605      	mov	r5, r0
 800dcae:	4610      	mov	r0, r2
 800dcb0:	4614      	mov	r4, r2
 800dcb2:	460e      	mov	r6, r1
 800dcb4:	f7fa fd3c 	bl	8008730 <rcutils_allocator_is_valid>
 800dcb8:	b128      	cbz	r0, 800dcc6 <rcl_clock_init+0x1e>
 800dcba:	2d03      	cmp	r5, #3
 800dcbc:	d803      	bhi.n	800dcc6 <rcl_clock_init+0x1e>
 800dcbe:	e8df f005 	tbb	[pc, r5]
 800dcc2:	3321      	.short	0x3321
 800dcc4:	065c      	.short	0x065c
 800dcc6:	250b      	movs	r5, #11
 800dcc8:	4628      	mov	r0, r5
 800dcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcce:	2c00      	cmp	r4, #0
 800dcd0:	d0f9      	beq.n	800dcc6 <rcl_clock_init+0x1e>
 800dcd2:	fab6 f386 	clz	r3, r6
 800dcd6:	095b      	lsrs	r3, r3, #5
 800dcd8:	2e00      	cmp	r6, #0
 800dcda:	d0f4      	beq.n	800dcc6 <rcl_clock_init+0x1e>
 800dcdc:	7033      	strb	r3, [r6, #0]
 800dcde:	461d      	mov	r5, r3
 800dce0:	6133      	str	r3, [r6, #16]
 800dce2:	f106 0714 	add.w	r7, r6, #20
 800dce6:	f04f 0c03 	mov.w	ip, #3
 800dcea:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dcee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcf0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dcf2:	4b30      	ldr	r3, [pc, #192]	@ (800ddb4 <rcl_clock_init+0x10c>)
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	603a      	str	r2, [r7, #0]
 800dcfa:	60f3      	str	r3, [r6, #12]
 800dcfc:	f886 c000 	strb.w	ip, [r6]
 800dd00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd04:	2e00      	cmp	r6, #0
 800dd06:	d0de      	beq.n	800dcc6 <rcl_clock_init+0x1e>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f106 0714 	add.w	r7, r6, #20
 800dd0e:	7033      	strb	r3, [r6, #0]
 800dd10:	461d      	mov	r5, r3
 800dd12:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dd16:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800dd1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd1c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	4628      	mov	r0, r5
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd28:	2c00      	cmp	r4, #0
 800dd2a:	d0cc      	beq.n	800dcc6 <rcl_clock_init+0x1e>
 800dd2c:	fab6 f586 	clz	r5, r6
 800dd30:	096d      	lsrs	r5, r5, #5
 800dd32:	2e00      	cmp	r6, #0
 800dd34:	d0c7      	beq.n	800dcc6 <rcl_clock_init+0x1e>
 800dd36:	46a4      	mov	ip, r4
 800dd38:	7035      	strb	r5, [r6, #0]
 800dd3a:	f106 0714 	add.w	r7, r6, #20
 800dd3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd42:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800dd46:	e9c6 5503 	strd	r5, r5, [r6, #12]
 800dd4a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dd4c:	f8dc 2000 	ldr.w	r2, [ip]
 800dd50:	2010      	movs	r0, #16
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	603a      	str	r2, [r7, #0]
 800dd56:	6921      	ldr	r1, [r4, #16]
 800dd58:	4798      	blx	r3
 800dd5a:	6130      	str	r0, [r6, #16]
 800dd5c:	b340      	cbz	r0, 800ddb0 <rcl_clock_init+0x108>
 800dd5e:	f04f 0800 	mov.w	r8, #0
 800dd62:	f04f 0900 	mov.w	r9, #0
 800dd66:	4a14      	ldr	r2, [pc, #80]	@ (800ddb8 <rcl_clock_init+0x110>)
 800dd68:	2301      	movs	r3, #1
 800dd6a:	7205      	strb	r5, [r0, #8]
 800dd6c:	e9c0 8900 	strd	r8, r9, [r0]
 800dd70:	4628      	mov	r0, r5
 800dd72:	60f2      	str	r2, [r6, #12]
 800dd74:	7033      	strb	r3, [r6, #0]
 800dd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd7a:	2c00      	cmp	r4, #0
 800dd7c:	d0a3      	beq.n	800dcc6 <rcl_clock_init+0x1e>
 800dd7e:	fab6 f386 	clz	r3, r6
 800dd82:	095b      	lsrs	r3, r3, #5
 800dd84:	2e00      	cmp	r6, #0
 800dd86:	d09e      	beq.n	800dcc6 <rcl_clock_init+0x1e>
 800dd88:	7033      	strb	r3, [r6, #0]
 800dd8a:	461d      	mov	r5, r3
 800dd8c:	6133      	str	r3, [r6, #16]
 800dd8e:	f106 0714 	add.w	r7, r6, #20
 800dd92:	f04f 0c02 	mov.w	ip, #2
 800dd96:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dd9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dd9e:	4b07      	ldr	r3, [pc, #28]	@ (800ddbc <rcl_clock_init+0x114>)
 800dda0:	4628      	mov	r0, r5
 800dda2:	6822      	ldr	r2, [r4, #0]
 800dda4:	603a      	str	r2, [r7, #0]
 800dda6:	60f3      	str	r3, [r6, #12]
 800dda8:	f886 c000 	strb.w	ip, [r6]
 800ddac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb0:	250a      	movs	r5, #10
 800ddb2:	e789      	b.n	800dcc8 <rcl_clock_init+0x20>
 800ddb4:	0800dc7d 	.word	0x0800dc7d
 800ddb8:	0800dc85 	.word	0x0800dc85
 800ddbc:	0800dc75 	.word	0x0800dc75

0800ddc0 <rcl_validate_enclave_name_with_size>:
 800ddc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddc2:	b0c3      	sub	sp, #268	@ 0x10c
 800ddc4:	b1a8      	cbz	r0, 800ddf2 <rcl_validate_enclave_name_with_size+0x32>
 800ddc6:	4615      	mov	r5, r2
 800ddc8:	b19a      	cbz	r2, 800ddf2 <rcl_validate_enclave_name_with_size+0x32>
 800ddca:	461f      	mov	r7, r3
 800ddcc:	466a      	mov	r2, sp
 800ddce:	ab01      	add	r3, sp, #4
 800ddd0:	460e      	mov	r6, r1
 800ddd2:	f000 fb5b 	bl	800e48c <rmw_validate_namespace_with_size>
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	b9b0      	cbnz	r0, 800de08 <rcl_validate_enclave_name_with_size+0x48>
 800ddda:	9b00      	ldr	r3, [sp, #0]
 800dddc:	b16b      	cbz	r3, 800ddfa <rcl_validate_enclave_name_with_size+0x3a>
 800ddde:	2b07      	cmp	r3, #7
 800dde0:	d018      	beq.n	800de14 <rcl_validate_enclave_name_with_size+0x54>
 800dde2:	1e5a      	subs	r2, r3, #1
 800dde4:	2a05      	cmp	r2, #5
 800dde6:	d835      	bhi.n	800de54 <rcl_validate_enclave_name_with_size+0x94>
 800dde8:	e8df f002 	tbb	[pc, r2]
 800ddec:	2e2b2825 	.word	0x2e2b2825
 800ddf0:	1c31      	.short	0x1c31
 800ddf2:	240b      	movs	r4, #11
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	b043      	add	sp, #268	@ 0x10c
 800ddf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddfa:	2b07      	cmp	r3, #7
 800ddfc:	d00a      	beq.n	800de14 <rcl_validate_enclave_name_with_size+0x54>
 800ddfe:	2300      	movs	r3, #0
 800de00:	4620      	mov	r0, r4
 800de02:	602b      	str	r3, [r5, #0]
 800de04:	b043      	add	sp, #268	@ 0x10c
 800de06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de08:	f7ff f828 	bl	800ce5c <rcl_convert_rmw_ret_to_rcl_ret>
 800de0c:	4604      	mov	r4, r0
 800de0e:	4620      	mov	r0, r4
 800de10:	b043      	add	sp, #268	@ 0x10c
 800de12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de14:	2eff      	cmp	r6, #255	@ 0xff
 800de16:	d9f2      	bls.n	800ddfe <rcl_validate_enclave_name_with_size+0x3e>
 800de18:	602b      	str	r3, [r5, #0]
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	d0ea      	beq.n	800ddf4 <rcl_validate_enclave_name_with_size+0x34>
 800de1e:	23fe      	movs	r3, #254	@ 0xfe
 800de20:	603b      	str	r3, [r7, #0]
 800de22:	e7e7      	b.n	800ddf4 <rcl_validate_enclave_name_with_size+0x34>
 800de24:	2306      	movs	r3, #6
 800de26:	602b      	str	r3, [r5, #0]
 800de28:	2f00      	cmp	r7, #0
 800de2a:	d0e3      	beq.n	800ddf4 <rcl_validate_enclave_name_with_size+0x34>
 800de2c:	9b01      	ldr	r3, [sp, #4]
 800de2e:	4620      	mov	r0, r4
 800de30:	603b      	str	r3, [r7, #0]
 800de32:	b043      	add	sp, #268	@ 0x10c
 800de34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de36:	2301      	movs	r3, #1
 800de38:	602b      	str	r3, [r5, #0]
 800de3a:	e7f5      	b.n	800de28 <rcl_validate_enclave_name_with_size+0x68>
 800de3c:	2302      	movs	r3, #2
 800de3e:	602b      	str	r3, [r5, #0]
 800de40:	e7f2      	b.n	800de28 <rcl_validate_enclave_name_with_size+0x68>
 800de42:	2303      	movs	r3, #3
 800de44:	602b      	str	r3, [r5, #0]
 800de46:	e7ef      	b.n	800de28 <rcl_validate_enclave_name_with_size+0x68>
 800de48:	2304      	movs	r3, #4
 800de4a:	602b      	str	r3, [r5, #0]
 800de4c:	e7ec      	b.n	800de28 <rcl_validate_enclave_name_with_size+0x68>
 800de4e:	2305      	movs	r3, #5
 800de50:	602b      	str	r3, [r5, #0]
 800de52:	e7e9      	b.n	800de28 <rcl_validate_enclave_name_with_size+0x68>
 800de54:	4a03      	ldr	r2, [pc, #12]	@ (800de64 <rcl_validate_enclave_name_with_size+0xa4>)
 800de56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800de5a:	a802      	add	r0, sp, #8
 800de5c:	2401      	movs	r4, #1
 800de5e:	f000 fa1b 	bl	800e298 <rcutils_snprintf>
 800de62:	e7c7      	b.n	800ddf4 <rcl_validate_enclave_name_with_size+0x34>
 800de64:	08015a58 	.word	0x08015a58

0800de68 <rcl_validate_enclave_name>:
 800de68:	b168      	cbz	r0, 800de86 <rcl_validate_enclave_name+0x1e>
 800de6a:	b570      	push	{r4, r5, r6, lr}
 800de6c:	460d      	mov	r5, r1
 800de6e:	4616      	mov	r6, r2
 800de70:	4604      	mov	r4, r0
 800de72:	f7f2 fa45 	bl	8000300 <strlen>
 800de76:	4633      	mov	r3, r6
 800de78:	4601      	mov	r1, r0
 800de7a:	462a      	mov	r2, r5
 800de7c:	4620      	mov	r0, r4
 800de7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de82:	f7ff bf9d 	b.w	800ddc0 <rcl_validate_enclave_name_with_size>
 800de86:	200b      	movs	r0, #11
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop

0800de8c <rcl_validate_topic_name>:
 800de8c:	2800      	cmp	r0, #0
 800de8e:	f000 8083 	beq.w	800df98 <rcl_validate_topic_name+0x10c>
 800de92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de96:	460e      	mov	r6, r1
 800de98:	2900      	cmp	r1, #0
 800de9a:	f000 8084 	beq.w	800dfa6 <rcl_validate_topic_name+0x11a>
 800de9e:	4617      	mov	r7, r2
 800dea0:	4605      	mov	r5, r0
 800dea2:	f7f2 fa2d 	bl	8000300 <strlen>
 800dea6:	b1b0      	cbz	r0, 800ded6 <rcl_validate_topic_name+0x4a>
 800dea8:	f895 8000 	ldrb.w	r8, [r5]
 800deac:	f8df c168 	ldr.w	ip, [pc, #360]	@ 800e018 <rcl_validate_topic_name+0x18c>
 800deb0:	f81c 3008 	ldrb.w	r3, [ip, r8]
 800deb4:	f013 0304 	ands.w	r3, r3, #4
 800deb8:	d170      	bne.n	800df9c <rcl_validate_topic_name+0x110>
 800deba:	f100 39ff 	add.w	r9, r0, #4294967295	@ 0xffffffff
 800debe:	f815 2009 	ldrb.w	r2, [r5, r9]
 800dec2:	2a2f      	cmp	r2, #47	@ 0x2f
 800dec4:	d10e      	bne.n	800dee4 <rcl_validate_topic_name+0x58>
 800dec6:	2202      	movs	r2, #2
 800dec8:	6032      	str	r2, [r6, #0]
 800deca:	b36f      	cbz	r7, 800df28 <rcl_validate_topic_name+0x9c>
 800decc:	4618      	mov	r0, r3
 800dece:	f8c7 9000 	str.w	r9, [r7]
 800ded2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded6:	2301      	movs	r3, #1
 800ded8:	6033      	str	r3, [r6, #0]
 800deda:	b32f      	cbz	r7, 800df28 <rcl_validate_topic_name+0x9c>
 800dedc:	2000      	movs	r0, #0
 800dede:	6038      	str	r0, [r7, #0]
 800dee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800dee8:	461c      	mov	r4, r3
 800deea:	4619      	mov	r1, r3
 800deec:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800def0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800def4:	f1be 0f09 	cmp.w	lr, #9
 800def8:	d919      	bls.n	800df2e <rcl_validate_topic_name+0xa2>
 800defa:	f022 0e20 	bic.w	lr, r2, #32
 800defe:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800df02:	f1be 0f19 	cmp.w	lr, #25
 800df06:	d912      	bls.n	800df2e <rcl_validate_topic_name+0xa2>
 800df08:	2a5f      	cmp	r2, #95	@ 0x5f
 800df0a:	d01d      	beq.n	800df48 <rcl_validate_topic_name+0xbc>
 800df0c:	2a2f      	cmp	r2, #47	@ 0x2f
 800df0e:	d058      	beq.n	800dfc2 <rcl_validate_topic_name+0x136>
 800df10:	2a7e      	cmp	r2, #126	@ 0x7e
 800df12:	d04a      	beq.n	800dfaa <rcl_validate_topic_name+0x11e>
 800df14:	2a7b      	cmp	r2, #123	@ 0x7b
 800df16:	d05f      	beq.n	800dfd8 <rcl_validate_topic_name+0x14c>
 800df18:	2a7d      	cmp	r2, #125	@ 0x7d
 800df1a:	d16c      	bne.n	800dff6 <rcl_validate_topic_name+0x16a>
 800df1c:	2c00      	cmp	r4, #0
 800df1e:	d160      	bne.n	800dfe2 <rcl_validate_topic_name+0x156>
 800df20:	2305      	movs	r3, #5
 800df22:	6033      	str	r3, [r6, #0]
 800df24:	b107      	cbz	r7, 800df28 <rcl_validate_topic_name+0x9c>
 800df26:	6039      	str	r1, [r7, #0]
 800df28:	2000      	movs	r0, #0
 800df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800df32:	0752      	lsls	r2, r2, #29
 800df34:	d508      	bpl.n	800df48 <rcl_validate_topic_name+0xbc>
 800df36:	2900      	cmp	r1, #0
 800df38:	bf14      	ite	ne
 800df3a:	4622      	movne	r2, r4
 800df3c:	2200      	moveq	r2, #0
 800df3e:	b11a      	cbz	r2, 800df48 <rcl_validate_topic_name+0xbc>
 800df40:	1e4c      	subs	r4, r1, #1
 800df42:	429c      	cmp	r4, r3
 800df44:	d038      	beq.n	800dfb8 <rcl_validate_topic_name+0x12c>
 800df46:	4614      	mov	r4, r2
 800df48:	3101      	adds	r1, #1
 800df4a:	4288      	cmp	r0, r1
 800df4c:	d1ce      	bne.n	800deec <rcl_validate_topic_name+0x60>
 800df4e:	2c00      	cmp	r4, #0
 800df50:	d14c      	bne.n	800dfec <rcl_validate_topic_name+0x160>
 800df52:	4620      	mov	r0, r4
 800df54:	f109 0e01 	add.w	lr, r9, #1
 800df58:	e009      	b.n	800df6e <rcl_validate_topic_name+0xe2>
 800df5a:	f1b8 0f7e 	cmp.w	r8, #126	@ 0x7e
 800df5e:	d101      	bne.n	800df64 <rcl_validate_topic_name+0xd8>
 800df60:	2801      	cmp	r0, #1
 800df62:	d050      	beq.n	800e006 <rcl_validate_topic_name+0x17a>
 800df64:	428a      	cmp	r2, r1
 800df66:	f105 0501 	add.w	r5, r5, #1
 800df6a:	4618      	mov	r0, r3
 800df6c:	d23b      	bcs.n	800dfe6 <rcl_validate_topic_name+0x15a>
 800df6e:	4581      	cmp	r9, r0
 800df70:	f100 0301 	add.w	r3, r0, #1
 800df74:	d02c      	beq.n	800dfd0 <rcl_validate_topic_name+0x144>
 800df76:	782c      	ldrb	r4, [r5, #0]
 800df78:	461a      	mov	r2, r3
 800df7a:	2c2f      	cmp	r4, #47	@ 0x2f
 800df7c:	d1ed      	bne.n	800df5a <rcl_validate_topic_name+0xce>
 800df7e:	786a      	ldrb	r2, [r5, #1]
 800df80:	f81c 0002 	ldrb.w	r0, [ip, r2]
 800df84:	461a      	mov	r2, r3
 800df86:	0740      	lsls	r0, r0, #29
 800df88:	d5ec      	bpl.n	800df64 <rcl_validate_topic_name+0xd8>
 800df8a:	2204      	movs	r2, #4
 800df8c:	6032      	str	r2, [r6, #0]
 800df8e:	2f00      	cmp	r7, #0
 800df90:	d0ca      	beq.n	800df28 <rcl_validate_topic_name+0x9c>
 800df92:	2000      	movs	r0, #0
 800df94:	603b      	str	r3, [r7, #0]
 800df96:	e7a3      	b.n	800dee0 <rcl_validate_topic_name+0x54>
 800df98:	200b      	movs	r0, #11
 800df9a:	4770      	bx	lr
 800df9c:	2304      	movs	r3, #4
 800df9e:	6033      	str	r3, [r6, #0]
 800dfa0:	2f00      	cmp	r7, #0
 800dfa2:	d19b      	bne.n	800dedc <rcl_validate_topic_name+0x50>
 800dfa4:	e7c0      	b.n	800df28 <rcl_validate_topic_name+0x9c>
 800dfa6:	200b      	movs	r0, #11
 800dfa8:	e79a      	b.n	800dee0 <rcl_validate_topic_name+0x54>
 800dfaa:	2900      	cmp	r1, #0
 800dfac:	d0cc      	beq.n	800df48 <rcl_validate_topic_name+0xbc>
 800dfae:	2306      	movs	r3, #6
 800dfb0:	6033      	str	r3, [r6, #0]
 800dfb2:	2f00      	cmp	r7, #0
 800dfb4:	d1b7      	bne.n	800df26 <rcl_validate_topic_name+0x9a>
 800dfb6:	e7b7      	b.n	800df28 <rcl_validate_topic_name+0x9c>
 800dfb8:	2309      	movs	r3, #9
 800dfba:	6033      	str	r3, [r6, #0]
 800dfbc:	2f00      	cmp	r7, #0
 800dfbe:	d1b2      	bne.n	800df26 <rcl_validate_topic_name+0x9a>
 800dfc0:	e7b2      	b.n	800df28 <rcl_validate_topic_name+0x9c>
 800dfc2:	2c00      	cmp	r4, #0
 800dfc4:	d0c0      	beq.n	800df48 <rcl_validate_topic_name+0xbc>
 800dfc6:	2308      	movs	r3, #8
 800dfc8:	6033      	str	r3, [r6, #0]
 800dfca:	2f00      	cmp	r7, #0
 800dfcc:	d1ab      	bne.n	800df26 <rcl_validate_topic_name+0x9a>
 800dfce:	e7ab      	b.n	800df28 <rcl_validate_topic_name+0x9c>
 800dfd0:	4672      	mov	r2, lr
 800dfd2:	f109 0301 	add.w	r3, r9, #1
 800dfd6:	e7c5      	b.n	800df64 <rcl_validate_topic_name+0xd8>
 800dfd8:	2c00      	cmp	r4, #0
 800dfda:	d1f4      	bne.n	800dfc6 <rcl_validate_topic_name+0x13a>
 800dfdc:	460b      	mov	r3, r1
 800dfde:	2401      	movs	r4, #1
 800dfe0:	e7b2      	b.n	800df48 <rcl_validate_topic_name+0xbc>
 800dfe2:	2400      	movs	r4, #0
 800dfe4:	e7b0      	b.n	800df48 <rcl_validate_topic_name+0xbc>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	6030      	str	r0, [r6, #0]
 800dfea:	e779      	b.n	800dee0 <rcl_validate_topic_name+0x54>
 800dfec:	2205      	movs	r2, #5
 800dfee:	6032      	str	r2, [r6, #0]
 800dff0:	2f00      	cmp	r7, #0
 800dff2:	d1ce      	bne.n	800df92 <rcl_validate_topic_name+0x106>
 800dff4:	e798      	b.n	800df28 <rcl_validate_topic_name+0x9c>
 800dff6:	2c00      	cmp	r4, #0
 800dff8:	bf14      	ite	ne
 800dffa:	2308      	movne	r3, #8
 800dffc:	2303      	moveq	r3, #3
 800dffe:	6033      	str	r3, [r6, #0]
 800e000:	2f00      	cmp	r7, #0
 800e002:	d190      	bne.n	800df26 <rcl_validate_topic_name+0x9a>
 800e004:	e790      	b.n	800df28 <rcl_validate_topic_name+0x9c>
 800e006:	2307      	movs	r3, #7
 800e008:	6033      	str	r3, [r6, #0]
 800e00a:	2f00      	cmp	r7, #0
 800e00c:	d08c      	beq.n	800df28 <rcl_validate_topic_name+0x9c>
 800e00e:	2301      	movs	r3, #1
 800e010:	2000      	movs	r0, #0
 800e012:	603b      	str	r3, [r7, #0]
 800e014:	e764      	b.n	800dee0 <rcl_validate_topic_name+0x54>
 800e016:	bf00      	nop
 800e018:	080160ac 	.word	0x080160ac

0800e01c <__atomic_load_8>:
 800e01c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e020:	4b15      	ldr	r3, [pc, #84]	@ (800e078 <__atomic_load_8+0x5c>)
 800e022:	4a16      	ldr	r2, [pc, #88]	@ (800e07c <__atomic_load_8+0x60>)
 800e024:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e028:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e02c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e030:	fb03 f301 	mul.w	r3, r3, r1
 800e034:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 800e038:	fba2 1203 	umull	r1, r2, r2, r3
 800e03c:	0912      	lsrs	r2, r2, #4
 800e03e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e042:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 800e046:	b430      	push	{r4, r5}
 800e048:	1a9b      	subs	r3, r3, r2
 800e04a:	4c0d      	ldr	r4, [pc, #52]	@ (800e080 <__atomic_load_8+0x64>)
 800e04c:	f04f 0501 	mov.w	r5, #1
 800e050:	18e1      	adds	r1, r4, r3
 800e052:	e8d1 2f4f 	ldrexb	r2, [r1]
 800e056:	e8c1 5f4c 	strexb	ip, r5, [r1]
 800e05a:	f1bc 0f00 	cmp.w	ip, #0
 800e05e:	d1f8      	bne.n	800e052 <__atomic_load_8+0x36>
 800e060:	b2d2      	uxtb	r2, r2
 800e062:	f3bf 8f5b 	dmb	ish
 800e066:	2a00      	cmp	r2, #0
 800e068:	d1f3      	bne.n	800e052 <__atomic_load_8+0x36>
 800e06a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e06e:	f3bf 8f5b 	dmb	ish
 800e072:	54e2      	strb	r2, [r4, r3]
 800e074:	bc30      	pop	{r4, r5}
 800e076:	4770      	bx	lr
 800e078:	27d4eb2d 	.word	0x27d4eb2d
 800e07c:	b21642c9 	.word	0xb21642c9
 800e080:	2000c05c 	.word	0x2000c05c

0800e084 <rcutils_is_directory>:
 800e084:	2000      	movs	r0, #0
 800e086:	4770      	bx	lr

0800e088 <rcutils_join_path>:
 800e088:	b082      	sub	sp, #8
 800e08a:	2000      	movs	r0, #0
 800e08c:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e090:	b002      	add	sp, #8
 800e092:	4770      	bx	lr

0800e094 <rcutils_to_native_path>:
 800e094:	b084      	sub	sp, #16
 800e096:	2000      	movs	r0, #0
 800e098:	b410      	push	{r4}
 800e09a:	ac02      	add	r4, sp, #8
 800e09c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0a4:	b004      	add	sp, #16
 800e0a6:	4770      	bx	lr

0800e0a8 <rcutils_format_string_limit>:
 800e0a8:	b40f      	push	{r0, r1, r2, r3}
 800e0aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ac:	b083      	sub	sp, #12
 800e0ae:	ac08      	add	r4, sp, #32
 800e0b0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e0b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e0b6:	b326      	cbz	r6, 800e102 <rcutils_format_string_limit+0x5a>
 800e0b8:	a808      	add	r0, sp, #32
 800e0ba:	f7fa fb39 	bl	8008730 <rcutils_allocator_is_valid>
 800e0be:	b300      	cbz	r0, 800e102 <rcutils_format_string_limit+0x5a>
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	4608      	mov	r0, r1
 800e0c8:	e9cd 3300 	strd	r3, r3, [sp]
 800e0cc:	f000 f912 	bl	800e2f4 <rcutils_vsnprintf>
 800e0d0:	1c43      	adds	r3, r0, #1
 800e0d2:	4605      	mov	r5, r0
 800e0d4:	d015      	beq.n	800e102 <rcutils_format_string_limit+0x5a>
 800e0d6:	1c47      	adds	r7, r0, #1
 800e0d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0da:	429f      	cmp	r7, r3
 800e0dc:	d901      	bls.n	800e0e2 <rcutils_format_string_limit+0x3a>
 800e0de:	1e5d      	subs	r5, r3, #1
 800e0e0:	461f      	mov	r7, r3
 800e0e2:	9b08      	ldr	r3, [sp, #32]
 800e0e4:	4638      	mov	r0, r7
 800e0e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0e8:	4798      	blx	r3
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	b148      	cbz	r0, 800e102 <rcutils_format_string_limit+0x5a>
 800e0ee:	4632      	mov	r2, r6
 800e0f0:	4639      	mov	r1, r7
 800e0f2:	9b01      	ldr	r3, [sp, #4]
 800e0f4:	f000 f8fe 	bl	800e2f4 <rcutils_vsnprintf>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	db09      	blt.n	800e110 <rcutils_format_string_limit+0x68>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	5563      	strb	r3, [r4, r5]
 800e100:	e000      	b.n	800e104 <rcutils_format_string_limit+0x5c>
 800e102:	2400      	movs	r4, #0
 800e104:	4620      	mov	r0, r4
 800e106:	b003      	add	sp, #12
 800e108:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e10c:	b004      	add	sp, #16
 800e10e:	4770      	bx	lr
 800e110:	4620      	mov	r0, r4
 800e112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e114:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e116:	2400      	movs	r4, #0
 800e118:	4798      	blx	r3
 800e11a:	e7f3      	b.n	800e104 <rcutils_format_string_limit+0x5c>

0800e11c <rcutils_get_env>:
 800e11c:	b168      	cbz	r0, 800e13a <rcutils_get_env+0x1e>
 800e11e:	b510      	push	{r4, lr}
 800e120:	460c      	mov	r4, r1
 800e122:	b129      	cbz	r1, 800e130 <rcutils_get_env+0x14>
 800e124:	f002 fec6 	bl	8010eb4 <getenv>
 800e128:	b120      	cbz	r0, 800e134 <rcutils_get_env+0x18>
 800e12a:	6020      	str	r0, [r4, #0]
 800e12c:	2000      	movs	r0, #0
 800e12e:	bd10      	pop	{r4, pc}
 800e130:	4803      	ldr	r0, [pc, #12]	@ (800e140 <rcutils_get_env+0x24>)
 800e132:	bd10      	pop	{r4, pc}
 800e134:	4b03      	ldr	r3, [pc, #12]	@ (800e144 <rcutils_get_env+0x28>)
 800e136:	6023      	str	r3, [r4, #0]
 800e138:	bd10      	pop	{r4, pc}
 800e13a:	4803      	ldr	r0, [pc, #12]	@ (800e148 <rcutils_get_env+0x2c>)
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	08015ad4 	.word	0x08015ad4
 800e144:	08015bf8 	.word	0x08015bf8
 800e148:	08015ab8 	.word	0x08015ab8

0800e14c <rcutils_repl_str>:
 800e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e150:	ed2d 8b02 	vpush	{d8}
 800e154:	b087      	sub	sp, #28
 800e156:	2600      	movs	r6, #0
 800e158:	4680      	mov	r8, r0
 800e15a:	468a      	mov	sl, r1
 800e15c:	9001      	str	r0, [sp, #4]
 800e15e:	4608      	mov	r0, r1
 800e160:	ee08 2a10 	vmov	s16, r2
 800e164:	4699      	mov	r9, r3
 800e166:	4637      	mov	r7, r6
 800e168:	f7f2 f8ca 	bl	8000300 <strlen>
 800e16c:	46b3      	mov	fp, r6
 800e16e:	2510      	movs	r5, #16
 800e170:	9002      	str	r0, [sp, #8]
 800e172:	e01d      	b.n	800e1b0 <rcutils_repl_str+0x64>
 800e174:	f10b 0b01 	add.w	fp, fp, #1
 800e178:	9b02      	ldr	r3, [sp, #8]
 800e17a:	455e      	cmp	r6, fp
 800e17c:	eb04 0803 	add.w	r8, r4, r3
 800e180:	d210      	bcs.n	800e1a4 <rcutils_repl_str+0x58>
 800e182:	442e      	add	r6, r5
 800e184:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e188:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e18c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e190:	00b1      	lsls	r1, r6, #2
 800e192:	4798      	blx	r3
 800e194:	2800      	cmp	r0, #0
 800e196:	d07c      	beq.n	800e292 <rcutils_repl_str+0x146>
 800e198:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e19c:	4607      	mov	r7, r0
 800e19e:	bf28      	it	cs
 800e1a0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e1a4:	9b01      	ldr	r3, [sp, #4]
 800e1a6:	1ae4      	subs	r4, r4, r3
 800e1a8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800e1ac:	f843 4c04 	str.w	r4, [r3, #-4]
 800e1b0:	4651      	mov	r1, sl
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	f004 f8ab 	bl	801230e <strstr>
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	2c00      	cmp	r4, #0
 800e1be:	d1d9      	bne.n	800e174 <rcutils_repl_str+0x28>
 800e1c0:	4640      	mov	r0, r8
 800e1c2:	f7f2 f89d 	bl	8000300 <strlen>
 800e1c6:	9b01      	ldr	r3, [sp, #4]
 800e1c8:	eba8 0803 	sub.w	r8, r8, r3
 800e1cc:	eb08 0500 	add.w	r5, r8, r0
 800e1d0:	9504      	str	r5, [sp, #16]
 800e1d2:	f1bb 0f00 	cmp.w	fp, #0
 800e1d6:	d03b      	beq.n	800e250 <rcutils_repl_str+0x104>
 800e1d8:	ee18 0a10 	vmov	r0, s16
 800e1dc:	f7f2 f890 	bl	8000300 <strlen>
 800e1e0:	9a02      	ldr	r2, [sp, #8]
 800e1e2:	f8d9 3000 	ldr.w	r3, [r9]
 800e1e6:	4606      	mov	r6, r0
 800e1e8:	1a82      	subs	r2, r0, r2
 800e1ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e1ee:	fb0b 5202 	mla	r2, fp, r2, r5
 800e1f2:	1c50      	adds	r0, r2, #1
 800e1f4:	9205      	str	r2, [sp, #20]
 800e1f6:	4798      	blx	r3
 800e1f8:	4682      	mov	sl, r0
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d049      	beq.n	800e292 <rcutils_repl_str+0x146>
 800e1fe:	683a      	ldr	r2, [r7, #0]
 800e200:	46b8      	mov	r8, r7
 800e202:	9901      	ldr	r1, [sp, #4]
 800e204:	f004 f929 	bl	801245a <memcpy>
 800e208:	683d      	ldr	r5, [r7, #0]
 800e20a:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 800e20e:	4455      	add	r5, sl
 800e210:	9303      	str	r3, [sp, #12]
 800e212:	4632      	mov	r2, r6
 800e214:	ee18 1a10 	vmov	r1, s16
 800e218:	4628      	mov	r0, r5
 800e21a:	4435      	add	r5, r6
 800e21c:	f004 f91d 	bl	801245a <memcpy>
 800e220:	9b02      	ldr	r3, [sp, #8]
 800e222:	f858 2b04 	ldr.w	r2, [r8], #4
 800e226:	4628      	mov	r0, r5
 800e228:	441a      	add	r2, r3
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	1899      	adds	r1, r3, r2
 800e22e:	9b03      	ldr	r3, [sp, #12]
 800e230:	429c      	cmp	r4, r3
 800e232:	d025      	beq.n	800e280 <rcutils_repl_str+0x134>
 800e234:	f8d8 3000 	ldr.w	r3, [r8]
 800e238:	3401      	adds	r4, #1
 800e23a:	1a9a      	subs	r2, r3, r2
 800e23c:	4415      	add	r5, r2
 800e23e:	f004 f90c 	bl	801245a <memcpy>
 800e242:	455c      	cmp	r4, fp
 800e244:	d3e5      	bcc.n	800e212 <rcutils_repl_str+0xc6>
 800e246:	2300      	movs	r3, #0
 800e248:	9a05      	ldr	r2, [sp, #20]
 800e24a:	f80a 3002 	strb.w	r3, [sl, r2]
 800e24e:	e00b      	b.n	800e268 <rcutils_repl_str+0x11c>
 800e250:	4628      	mov	r0, r5
 800e252:	f8d9 3000 	ldr.w	r3, [r9]
 800e256:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e25a:	3001      	adds	r0, #1
 800e25c:	4798      	blx	r3
 800e25e:	4682      	mov	sl, r0
 800e260:	b110      	cbz	r0, 800e268 <rcutils_repl_str+0x11c>
 800e262:	9901      	ldr	r1, [sp, #4]
 800e264:	f004 f8f1 	bl	801244a <strcpy>
 800e268:	4638      	mov	r0, r7
 800e26a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e26e:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e272:	4798      	blx	r3
 800e274:	4650      	mov	r0, sl
 800e276:	b007      	add	sp, #28
 800e278:	ecbd 8b02 	vpop	{d8}
 800e27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e280:	9b04      	ldr	r3, [sp, #16]
 800e282:	3401      	adds	r4, #1
 800e284:	1a9a      	subs	r2, r3, r2
 800e286:	4415      	add	r5, r2
 800e288:	f004 f8e7 	bl	801245a <memcpy>
 800e28c:	455c      	cmp	r4, fp
 800e28e:	d3c0      	bcc.n	800e212 <rcutils_repl_str+0xc6>
 800e290:	e7d9      	b.n	800e246 <rcutils_repl_str+0xfa>
 800e292:	f04f 0a00 	mov.w	sl, #0
 800e296:	e7e7      	b.n	800e268 <rcutils_repl_str+0x11c>

0800e298 <rcutils_snprintf>:
 800e298:	b40c      	push	{r2, r3}
 800e29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29c:	b083      	sub	sp, #12
 800e29e:	ab08      	add	r3, sp, #32
 800e2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2a4:	9301      	str	r3, [sp, #4]
 800e2a6:	b1e2      	cbz	r2, 800e2e2 <rcutils_snprintf+0x4a>
 800e2a8:	fab0 f680 	clz	r6, r0
 800e2ac:	fab1 f781 	clz	r7, r1
 800e2b0:	ea50 0401 	orrs.w	r4, r0, r1
 800e2b4:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800e2b8:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800e2bc:	d008      	beq.n	800e2d0 <rcutils_snprintf+0x38>
 800e2be:	b986      	cbnz	r6, 800e2e2 <rcutils_snprintf+0x4a>
 800e2c0:	b97f      	cbnz	r7, 800e2e2 <rcutils_snprintf+0x4a>
 800e2c2:	f003 ffef 	bl	80122a4 <vsniprintf>
 800e2c6:	b003      	add	sp, #12
 800e2c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e2cc:	b002      	add	sp, #8
 800e2ce:	4770      	bx	lr
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f003 ffe6 	bl	80122a4 <vsniprintf>
 800e2d8:	b003      	add	sp, #12
 800e2da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e2de:	b002      	add	sp, #8
 800e2e0:	4770      	bx	lr
 800e2e2:	f004 f885 	bl	80123f0 <__errno>
 800e2e6:	2216      	movs	r2, #22
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2ee:	601a      	str	r2, [r3, #0]
 800e2f0:	e7e9      	b.n	800e2c6 <rcutils_snprintf+0x2e>
 800e2f2:	bf00      	nop

0800e2f4 <rcutils_vsnprintf>:
 800e2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f8:	b1b2      	cbz	r2, 800e328 <rcutils_vsnprintf+0x34>
 800e2fa:	fab0 f680 	clz	r6, r0
 800e2fe:	fab1 f781 	clz	r7, r1
 800e302:	ea50 0401 	orrs.w	r4, r0, r1
 800e306:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800e30a:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800e30e:	d005      	beq.n	800e31c <rcutils_vsnprintf+0x28>
 800e310:	b956      	cbnz	r6, 800e328 <rcutils_vsnprintf+0x34>
 800e312:	b94f      	cbnz	r7, 800e328 <rcutils_vsnprintf+0x34>
 800e314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	f003 bfc4 	b.w	80122a4 <vsniprintf>
 800e31c:	4621      	mov	r1, r4
 800e31e:	4620      	mov	r0, r4
 800e320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e324:	f003 bfbe 	b.w	80122a4 <vsniprintf>
 800e328:	f004 f862 	bl	80123f0 <__errno>
 800e32c:	2316      	movs	r3, #22
 800e32e:	6003      	str	r3, [r0, #0]
 800e330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e338 <rcutils_strdup>:
 800e338:	b084      	sub	sp, #16
 800e33a:	b570      	push	{r4, r5, r6, lr}
 800e33c:	b082      	sub	sp, #8
 800e33e:	4605      	mov	r5, r0
 800e340:	ac07      	add	r4, sp, #28
 800e342:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e346:	b1b0      	cbz	r0, 800e376 <rcutils_strdup+0x3e>
 800e348:	f7f1 ffda 	bl	8000300 <strlen>
 800e34c:	1c42      	adds	r2, r0, #1
 800e34e:	9b07      	ldr	r3, [sp, #28]
 800e350:	4606      	mov	r6, r0
 800e352:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e354:	4610      	mov	r0, r2
 800e356:	9201      	str	r2, [sp, #4]
 800e358:	4798      	blx	r3
 800e35a:	4604      	mov	r4, r0
 800e35c:	b128      	cbz	r0, 800e36a <rcutils_strdup+0x32>
 800e35e:	9a01      	ldr	r2, [sp, #4]
 800e360:	4629      	mov	r1, r5
 800e362:	f004 f87a 	bl	801245a <memcpy>
 800e366:	2300      	movs	r3, #0
 800e368:	55a3      	strb	r3, [r4, r6]
 800e36a:	4620      	mov	r0, r4
 800e36c:	b002      	add	sp, #8
 800e36e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e372:	b004      	add	sp, #16
 800e374:	4770      	bx	lr
 800e376:	4604      	mov	r4, r0
 800e378:	e7f7      	b.n	800e36a <rcutils_strdup+0x32>
 800e37a:	bf00      	nop

0800e37c <rcutils_strndup>:
 800e37c:	b082      	sub	sp, #8
 800e37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e380:	ac06      	add	r4, sp, #24
 800e382:	4605      	mov	r5, r0
 800e384:	e884 000c 	stmia.w	r4, {r2, r3}
 800e388:	b188      	cbz	r0, 800e3ae <rcutils_strndup+0x32>
 800e38a:	1c4f      	adds	r7, r1, #1
 800e38c:	460e      	mov	r6, r1
 800e38e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e390:	4638      	mov	r0, r7
 800e392:	4790      	blx	r2
 800e394:	4604      	mov	r4, r0
 800e396:	b128      	cbz	r0, 800e3a4 <rcutils_strndup+0x28>
 800e398:	463a      	mov	r2, r7
 800e39a:	4629      	mov	r1, r5
 800e39c:	f004 f85d 	bl	801245a <memcpy>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	55a3      	strb	r3, [r4, r6]
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e3aa:	b002      	add	sp, #8
 800e3ac:	4770      	bx	lr
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	e7f8      	b.n	800e3a4 <rcutils_strndup+0x28>
 800e3b2:	bf00      	nop

0800e3b4 <rcutils_system_time_now>:
 800e3b4:	b310      	cbz	r0, 800e3fc <rcutils_system_time_now+0x48>
 800e3b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3b8:	b085      	sub	sp, #20
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	2001      	movs	r0, #1
 800e3be:	4669      	mov	r1, sp
 800e3c0:	f7f3 f83a 	bl	8001438 <clock_gettime>
 800e3c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3c8:	2a00      	cmp	r2, #0
 800e3ca:	f173 0100 	sbcs.w	r1, r3, #0
 800e3ce:	db12      	blt.n	800e3f6 <rcutils_system_time_now+0x42>
 800e3d0:	ea52 0103 	orrs.w	r1, r2, r3
 800e3d4:	9d02      	ldr	r5, [sp, #8]
 800e3d6:	d101      	bne.n	800e3dc <rcutils_system_time_now+0x28>
 800e3d8:	2d00      	cmp	r5, #0
 800e3da:	db0c      	blt.n	800e3f6 <rcutils_system_time_now+0x42>
 800e3dc:	4908      	ldr	r1, [pc, #32]	@ (800e400 <rcutils_system_time_now+0x4c>)
 800e3de:	2000      	movs	r0, #0
 800e3e0:	fba2 6701 	umull	r6, r7, r2, r1
 800e3e4:	1976      	adds	r6, r6, r5
 800e3e6:	fb01 7703 	mla	r7, r1, r3, r7
 800e3ea:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 800e3ee:	e9c4 6700 	strd	r6, r7, [r4]
 800e3f2:	b005      	add	sp, #20
 800e3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3f6:	2002      	movs	r0, #2
 800e3f8:	b005      	add	sp, #20
 800e3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fc:	200b      	movs	r0, #11
 800e3fe:	4770      	bx	lr
 800e400:	3b9aca00 	.word	0x3b9aca00

0800e404 <rcutils_steady_time_now>:
 800e404:	b310      	cbz	r0, 800e44c <rcutils_steady_time_now+0x48>
 800e406:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e408:	b085      	sub	sp, #20
 800e40a:	4604      	mov	r4, r0
 800e40c:	2000      	movs	r0, #0
 800e40e:	4669      	mov	r1, sp
 800e410:	f7f3 f812 	bl	8001438 <clock_gettime>
 800e414:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e418:	2a00      	cmp	r2, #0
 800e41a:	f173 0100 	sbcs.w	r1, r3, #0
 800e41e:	db12      	blt.n	800e446 <rcutils_steady_time_now+0x42>
 800e420:	ea52 0103 	orrs.w	r1, r2, r3
 800e424:	9d02      	ldr	r5, [sp, #8]
 800e426:	d101      	bne.n	800e42c <rcutils_steady_time_now+0x28>
 800e428:	2d00      	cmp	r5, #0
 800e42a:	db0c      	blt.n	800e446 <rcutils_steady_time_now+0x42>
 800e42c:	4908      	ldr	r1, [pc, #32]	@ (800e450 <rcutils_steady_time_now+0x4c>)
 800e42e:	2000      	movs	r0, #0
 800e430:	fba2 6701 	umull	r6, r7, r2, r1
 800e434:	1976      	adds	r6, r6, r5
 800e436:	fb01 7703 	mla	r7, r1, r3, r7
 800e43a:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 800e43e:	e9c4 6700 	strd	r6, r7, [r4]
 800e442:	b005      	add	sp, #20
 800e444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e446:	2002      	movs	r0, #2
 800e448:	b005      	add	sp, #20
 800e44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e44c:	200b      	movs	r0, #11
 800e44e:	4770      	bx	lr
 800e450:	3b9aca00 	.word	0x3b9aca00

0800e454 <rmw_get_zero_initialized_context>:
 800e454:	b510      	push	{r4, lr}
 800e456:	4604      	mov	r4, r0
 800e458:	2250      	movs	r2, #80	@ 0x50
 800e45a:	2100      	movs	r1, #0
 800e45c:	f003 ff30 	bl	80122c0 <memset>
 800e460:	4620      	mov	r0, r4
 800e462:	bd10      	pop	{r4, pc}

0800e464 <rmw_get_zero_initialized_init_options>:
 800e464:	b510      	push	{r4, lr}
 800e466:	4604      	mov	r4, r0
 800e468:	2238      	movs	r2, #56	@ 0x38
 800e46a:	2100      	movs	r1, #0
 800e46c:	f003 ff28 	bl	80122c0 <memset>
 800e470:	f104 0010 	add.w	r0, r4, #16
 800e474:	f000 f806 	bl	800e484 <rmw_get_default_security_options>
 800e478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e47c:	4620      	mov	r0, r4
 800e47e:	60e3      	str	r3, [r4, #12]
 800e480:	bd10      	pop	{r4, pc}
 800e482:	bf00      	nop

0800e484 <rmw_get_default_security_options>:
 800e484:	2200      	movs	r2, #0
 800e486:	7002      	strb	r2, [r0, #0]
 800e488:	6042      	str	r2, [r0, #4]
 800e48a:	4770      	bx	lr

0800e48c <rmw_validate_namespace_with_size>:
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d041      	beq.n	800e514 <rmw_validate_namespace_with_size+0x88>
 800e490:	b5e0      	push	{r5, r6, r7, lr}
 800e492:	4615      	mov	r5, r2
 800e494:	b0c2      	sub	sp, #264	@ 0x108
 800e496:	b35a      	cbz	r2, 800e4f0 <rmw_validate_namespace_with_size+0x64>
 800e498:	2901      	cmp	r1, #1
 800e49a:	460e      	mov	r6, r1
 800e49c:	461f      	mov	r7, r3
 800e49e:	d102      	bne.n	800e4a6 <rmw_validate_namespace_with_size+0x1a>
 800e4a0:	7802      	ldrb	r2, [r0, #0]
 800e4a2:	2a2f      	cmp	r2, #47	@ 0x2f
 800e4a4:	d019      	beq.n	800e4da <rmw_validate_namespace_with_size+0x4e>
 800e4a6:	aa01      	add	r2, sp, #4
 800e4a8:	4669      	mov	r1, sp
 800e4aa:	f7fa fab1 	bl	8008a10 <rmw_validate_full_topic_name>
 800e4ae:	b980      	cbnz	r0, 800e4d2 <rmw_validate_namespace_with_size+0x46>
 800e4b0:	9b00      	ldr	r3, [sp, #0]
 800e4b2:	b183      	cbz	r3, 800e4d6 <rmw_validate_namespace_with_size+0x4a>
 800e4b4:	2b07      	cmp	r3, #7
 800e4b6:	d00e      	beq.n	800e4d6 <rmw_validate_namespace_with_size+0x4a>
 800e4b8:	1e59      	subs	r1, r3, #1
 800e4ba:	2905      	cmp	r1, #5
 800e4bc:	d82c      	bhi.n	800e518 <rmw_validate_namespace_with_size+0x8c>
 800e4be:	e8df f001 	tbb	[pc, r1]
 800e4c2:	201d      	.short	0x201d
 800e4c4:	1a032623 	.word	0x1a032623
 800e4c8:	2305      	movs	r3, #5
 800e4ca:	602b      	str	r3, [r5, #0]
 800e4cc:	b10f      	cbz	r7, 800e4d2 <rmw_validate_namespace_with_size+0x46>
 800e4ce:	9b01      	ldr	r3, [sp, #4]
 800e4d0:	603b      	str	r3, [r7, #0]
 800e4d2:	b042      	add	sp, #264	@ 0x108
 800e4d4:	bde0      	pop	{r5, r6, r7, pc}
 800e4d6:	2ef5      	cmp	r6, #245	@ 0xf5
 800e4d8:	d803      	bhi.n	800e4e2 <rmw_validate_namespace_with_size+0x56>
 800e4da:	2000      	movs	r0, #0
 800e4dc:	6028      	str	r0, [r5, #0]
 800e4de:	b042      	add	sp, #264	@ 0x108
 800e4e0:	bde0      	pop	{r5, r6, r7, pc}
 800e4e2:	2307      	movs	r3, #7
 800e4e4:	602b      	str	r3, [r5, #0]
 800e4e6:	2f00      	cmp	r7, #0
 800e4e8:	d0f3      	beq.n	800e4d2 <rmw_validate_namespace_with_size+0x46>
 800e4ea:	23f4      	movs	r3, #244	@ 0xf4
 800e4ec:	603b      	str	r3, [r7, #0]
 800e4ee:	e7f0      	b.n	800e4d2 <rmw_validate_namespace_with_size+0x46>
 800e4f0:	200b      	movs	r0, #11
 800e4f2:	b042      	add	sp, #264	@ 0x108
 800e4f4:	bde0      	pop	{r5, r6, r7, pc}
 800e4f6:	2306      	movs	r3, #6
 800e4f8:	602b      	str	r3, [r5, #0]
 800e4fa:	e7e7      	b.n	800e4cc <rmw_validate_namespace_with_size+0x40>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	602b      	str	r3, [r5, #0]
 800e500:	e7e4      	b.n	800e4cc <rmw_validate_namespace_with_size+0x40>
 800e502:	2302      	movs	r3, #2
 800e504:	602b      	str	r3, [r5, #0]
 800e506:	e7e1      	b.n	800e4cc <rmw_validate_namespace_with_size+0x40>
 800e508:	2303      	movs	r3, #3
 800e50a:	602b      	str	r3, [r5, #0]
 800e50c:	e7de      	b.n	800e4cc <rmw_validate_namespace_with_size+0x40>
 800e50e:	2304      	movs	r3, #4
 800e510:	602b      	str	r3, [r5, #0]
 800e512:	e7db      	b.n	800e4cc <rmw_validate_namespace_with_size+0x40>
 800e514:	200b      	movs	r0, #11
 800e516:	4770      	bx	lr
 800e518:	4a03      	ldr	r2, [pc, #12]	@ (800e528 <rmw_validate_namespace_with_size+0x9c>)
 800e51a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e51e:	a802      	add	r0, sp, #8
 800e520:	f7ff feba 	bl	800e298 <rcutils_snprintf>
 800e524:	2001      	movs	r0, #1
 800e526:	e7d4      	b.n	800e4d2 <rmw_validate_namespace_with_size+0x46>
 800e528:	08015af0 	.word	0x08015af0

0800e52c <rmw_validate_namespace>:
 800e52c:	b168      	cbz	r0, 800e54a <rmw_validate_namespace+0x1e>
 800e52e:	b570      	push	{r4, r5, r6, lr}
 800e530:	460d      	mov	r5, r1
 800e532:	4616      	mov	r6, r2
 800e534:	4604      	mov	r4, r0
 800e536:	f7f1 fee3 	bl	8000300 <strlen>
 800e53a:	4633      	mov	r3, r6
 800e53c:	4601      	mov	r1, r0
 800e53e:	462a      	mov	r2, r5
 800e540:	4620      	mov	r0, r4
 800e542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e546:	f7ff bfa1 	b.w	800e48c <rmw_validate_namespace_with_size>
 800e54a:	200b      	movs	r0, #11
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop

0800e550 <rmw_namespace_validation_result_string>:
 800e550:	2807      	cmp	r0, #7
 800e552:	d803      	bhi.n	800e55c <rmw_namespace_validation_result_string+0xc>
 800e554:	4b02      	ldr	r3, [pc, #8]	@ (800e560 <rmw_namespace_validation_result_string+0x10>)
 800e556:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e55a:	4770      	bx	lr
 800e55c:	4801      	ldr	r0, [pc, #4]	@ (800e564 <rmw_namespace_validation_result_string+0x14>)
 800e55e:	4770      	bx	lr
 800e560:	08015ce8 	.word	0x08015ce8
 800e564:	08015b40 	.word	0x08015b40

0800e568 <rmw_validate_node_name>:
 800e568:	2800      	cmp	r0, #0
 800e56a:	d039      	beq.n	800e5e0 <rmw_validate_node_name+0x78>
 800e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e570:	460f      	mov	r7, r1
 800e572:	b3b9      	cbz	r1, 800e5e4 <rmw_validate_node_name+0x7c>
 800e574:	4615      	mov	r5, r2
 800e576:	4604      	mov	r4, r0
 800e578:	f7f1 fec2 	bl	8000300 <strlen>
 800e57c:	b308      	cbz	r0, 800e5c2 <rmw_validate_node_name+0x5a>
 800e57e:	1e63      	subs	r3, r4, #1
 800e580:	f1c4 0e01 	rsb	lr, r4, #1
 800e584:	eb03 0c00 	add.w	ip, r3, r0
 800e588:	eb0e 0803 	add.w	r8, lr, r3
 800e58c:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800e590:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 800e594:	f026 0220 	bic.w	r2, r6, #32
 800e598:	2909      	cmp	r1, #9
 800e59a:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 800e59e:	d903      	bls.n	800e5a8 <rmw_validate_node_name+0x40>
 800e5a0:	2a19      	cmp	r2, #25
 800e5a2:	d901      	bls.n	800e5a8 <rmw_validate_node_name+0x40>
 800e5a4:	2e5f      	cmp	r6, #95	@ 0x5f
 800e5a6:	d113      	bne.n	800e5d0 <rmw_validate_node_name+0x68>
 800e5a8:	459c      	cmp	ip, r3
 800e5aa:	d1ed      	bne.n	800e588 <rmw_validate_node_name+0x20>
 800e5ac:	7822      	ldrb	r2, [r4, #0]
 800e5ae:	4b15      	ldr	r3, [pc, #84]	@ (800e604 <rmw_validate_node_name+0x9c>)
 800e5b0:	5cd3      	ldrb	r3, [r2, r3]
 800e5b2:	f013 0304 	ands.w	r3, r3, #4
 800e5b6:	d11f      	bne.n	800e5f8 <rmw_validate_node_name+0x90>
 800e5b8:	28ff      	cmp	r0, #255	@ 0xff
 800e5ba:	d815      	bhi.n	800e5e8 <rmw_validate_node_name+0x80>
 800e5bc:	4618      	mov	r0, r3
 800e5be:	603b      	str	r3, [r7, #0]
 800e5c0:	e00c      	b.n	800e5dc <rmw_validate_node_name+0x74>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	603b      	str	r3, [r7, #0]
 800e5c6:	b145      	cbz	r5, 800e5da <rmw_validate_node_name+0x72>
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	6028      	str	r0, [r5, #0]
 800e5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	603b      	str	r3, [r7, #0]
 800e5d4:	b10d      	cbz	r5, 800e5da <rmw_validate_node_name+0x72>
 800e5d6:	f8c5 8000 	str.w	r8, [r5]
 800e5da:	2000      	movs	r0, #0
 800e5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e0:	200b      	movs	r0, #11
 800e5e2:	4770      	bx	lr
 800e5e4:	200b      	movs	r0, #11
 800e5e6:	e7f9      	b.n	800e5dc <rmw_validate_node_name+0x74>
 800e5e8:	2204      	movs	r2, #4
 800e5ea:	603a      	str	r2, [r7, #0]
 800e5ec:	2d00      	cmp	r5, #0
 800e5ee:	d0f4      	beq.n	800e5da <rmw_validate_node_name+0x72>
 800e5f0:	22fe      	movs	r2, #254	@ 0xfe
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	e7f1      	b.n	800e5dc <rmw_validate_node_name+0x74>
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	603b      	str	r3, [r7, #0]
 800e5fc:	2d00      	cmp	r5, #0
 800e5fe:	d1e3      	bne.n	800e5c8 <rmw_validate_node_name+0x60>
 800e600:	e7eb      	b.n	800e5da <rmw_validate_node_name+0x72>
 800e602:	bf00      	nop
 800e604:	080160ac 	.word	0x080160ac

0800e608 <rmw_node_name_validation_result_string>:
 800e608:	2804      	cmp	r0, #4
 800e60a:	d803      	bhi.n	800e614 <rmw_node_name_validation_result_string+0xc>
 800e60c:	4b02      	ldr	r3, [pc, #8]	@ (800e618 <rmw_node_name_validation_result_string+0x10>)
 800e60e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e612:	4770      	bx	lr
 800e614:	4801      	ldr	r0, [pc, #4]	@ (800e61c <rmw_node_name_validation_result_string+0x14>)
 800e616:	4770      	bx	lr
 800e618:	08015df4 	.word	0x08015df4
 800e61c:	08015d08 	.word	0x08015d08

0800e620 <get_memory>:
 800e620:	4603      	mov	r3, r0
 800e622:	6840      	ldr	r0, [r0, #4]
 800e624:	b158      	cbz	r0, 800e63e <get_memory+0x1e>
 800e626:	6882      	ldr	r2, [r0, #8]
 800e628:	605a      	str	r2, [r3, #4]
 800e62a:	b10a      	cbz	r2, 800e630 <get_memory+0x10>
 800e62c:	2100      	movs	r1, #0
 800e62e:	6051      	str	r1, [r2, #4]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	6082      	str	r2, [r0, #8]
 800e634:	b102      	cbz	r2, 800e638 <get_memory+0x18>
 800e636:	6050      	str	r0, [r2, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	6042      	str	r2, [r0, #4]
 800e63c:	6018      	str	r0, [r3, #0]
 800e63e:	4770      	bx	lr

0800e640 <put_memory>:
 800e640:	684b      	ldr	r3, [r1, #4]
 800e642:	b10b      	cbz	r3, 800e648 <put_memory+0x8>
 800e644:	688a      	ldr	r2, [r1, #8]
 800e646:	609a      	str	r2, [r3, #8]
 800e648:	688a      	ldr	r2, [r1, #8]
 800e64a:	b102      	cbz	r2, 800e64e <put_memory+0xe>
 800e64c:	6053      	str	r3, [r2, #4]
 800e64e:	6803      	ldr	r3, [r0, #0]
 800e650:	428b      	cmp	r3, r1
 800e652:	6843      	ldr	r3, [r0, #4]
 800e654:	bf08      	it	eq
 800e656:	6002      	streq	r2, [r0, #0]
 800e658:	608b      	str	r3, [r1, #8]
 800e65a:	b103      	cbz	r3, 800e65e <put_memory+0x1e>
 800e65c:	6059      	str	r1, [r3, #4]
 800e65e:	2300      	movs	r3, #0
 800e660:	604b      	str	r3, [r1, #4]
 800e662:	6041      	str	r1, [r0, #4]
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop

0800e668 <rmw_get_implementation_identifier>:
 800e668:	4b01      	ldr	r3, [pc, #4]	@ (800e670 <rmw_get_implementation_identifier+0x8>)
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	08015e20 	.word	0x08015e20

0800e674 <rmw_init_options_init>:
 800e674:	b084      	sub	sp, #16
 800e676:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e67a:	ad09      	add	r5, sp, #36	@ 0x24
 800e67c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e680:	b130      	cbz	r0, 800e690 <rmw_init_options_init+0x1c>
 800e682:	4604      	mov	r4, r0
 800e684:	4628      	mov	r0, r5
 800e686:	f7fa f853 	bl	8008730 <rcutils_allocator_is_valid>
 800e68a:	b108      	cbz	r0, 800e690 <rmw_init_options_init+0x1c>
 800e68c:	68a3      	ldr	r3, [r4, #8]
 800e68e:	b123      	cbz	r3, 800e69a <rmw_init_options_init+0x26>
 800e690:	200b      	movs	r0, #11
 800e692:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e696:	b004      	add	sp, #16
 800e698:	4770      	bx	lr
 800e69a:	4b1d      	ldr	r3, [pc, #116]	@ (800e710 <rmw_init_options_init+0x9c>)
 800e69c:	f04f 0800 	mov.w	r8, #0
 800e6a0:	f04f 0900 	mov.w	r9, #0
 800e6a4:	f104 0620 	add.w	r6, r4, #32
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4f1a      	ldr	r7, [pc, #104]	@ (800e714 <rmw_init_options_init+0xa0>)
 800e6ac:	60a3      	str	r3, [r4, #8]
 800e6ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6b0:	682d      	ldr	r5, [r5, #0]
 800e6b2:	e9c4 8900 	strd	r8, r9, [r4]
 800e6b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e6b8:	4817      	ldr	r0, [pc, #92]	@ (800e718 <rmw_init_options_init+0xa4>)
 800e6ba:	2203      	movs	r2, #3
 800e6bc:	6035      	str	r5, [r6, #0]
 800e6be:	4917      	ldr	r1, [pc, #92]	@ (800e71c <rmw_init_options_init+0xa8>)
 800e6c0:	61e7      	str	r7, [r4, #28]
 800e6c2:	f7fa fcd1 	bl	8009068 <rmw_uxrce_init_init_options_impl_memory>
 800e6c6:	4814      	ldr	r0, [pc, #80]	@ (800e718 <rmw_init_options_init+0xa4>)
 800e6c8:	f7ff ffaa 	bl	800e620 <get_memory>
 800e6cc:	b1e8      	cbz	r0, 800e70a <rmw_init_options_init+0x96>
 800e6ce:	4a14      	ldr	r2, [pc, #80]	@ (800e720 <rmw_init_options_init+0xac>)
 800e6d0:	68c3      	ldr	r3, [r0, #12]
 800e6d2:	6851      	ldr	r1, [r2, #4]
 800e6d4:	7810      	ldrb	r0, [r2, #0]
 800e6d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6d8:	7418      	strb	r0, [r3, #16]
 800e6da:	6159      	str	r1, [r3, #20]
 800e6dc:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800e6e0:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800e6e4:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800e6e8:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800e6ec:	f7fd faa6 	bl	800bc3c <uxr_nanos>
 800e6f0:	f002 fce6 	bl	80110c0 <srand>
 800e6f4:	f002 fd12 	bl	801111c <rand>
 800e6f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6fa:	6298      	str	r0, [r3, #40]	@ 0x28
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d0f9      	beq.n	800e6f4 <rmw_init_options_init+0x80>
 800e700:	2000      	movs	r0, #0
 800e702:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e706:	b004      	add	sp, #16
 800e708:	4770      	bx	lr
 800e70a:	2001      	movs	r0, #1
 800e70c:	e7c1      	b.n	800e692 <rmw_init_options_init+0x1e>
 800e70e:	bf00      	nop
 800e710:	08015e20 	.word	0x08015e20
 800e714:	080159c8 	.word	0x080159c8
 800e718:	2000f5ec 	.word	0x2000f5ec
 800e71c:	2000f240 	.word	0x2000f240
 800e720:	2000c2d0 	.word	0x2000c2d0

0800e724 <rmw_init_options_copy>:
 800e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e726:	b158      	cbz	r0, 800e740 <rmw_init_options_copy+0x1c>
 800e728:	460d      	mov	r5, r1
 800e72a:	b149      	cbz	r1, 800e740 <rmw_init_options_copy+0x1c>
 800e72c:	4604      	mov	r4, r0
 800e72e:	6880      	ldr	r0, [r0, #8]
 800e730:	b120      	cbz	r0, 800e73c <rmw_init_options_copy+0x18>
 800e732:	4b1e      	ldr	r3, [pc, #120]	@ (800e7ac <rmw_init_options_copy+0x88>)
 800e734:	6819      	ldr	r1, [r3, #0]
 800e736:	f7f1 fd83 	bl	8000240 <strcmp>
 800e73a:	bb90      	cbnz	r0, 800e7a2 <rmw_init_options_copy+0x7e>
 800e73c:	68ab      	ldr	r3, [r5, #8]
 800e73e:	b113      	cbz	r3, 800e746 <rmw_init_options_copy+0x22>
 800e740:	260b      	movs	r6, #11
 800e742:	4630      	mov	r0, r6
 800e744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e746:	4623      	mov	r3, r4
 800e748:	462a      	mov	r2, r5
 800e74a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800e74e:	681f      	ldr	r7, [r3, #0]
 800e750:	3310      	adds	r3, #16
 800e752:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800e756:	3210      	adds	r2, #16
 800e758:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800e75c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e760:	4563      	cmp	r3, ip
 800e762:	f842 7c10 	str.w	r7, [r2, #-16]
 800e766:	f842 6c0c 	str.w	r6, [r2, #-12]
 800e76a:	f842 0c08 	str.w	r0, [r2, #-8]
 800e76e:	f842 1c04 	str.w	r1, [r2, #-4]
 800e772:	d1ec      	bne.n	800e74e <rmw_init_options_copy+0x2a>
 800e774:	6819      	ldr	r1, [r3, #0]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	480d      	ldr	r0, [pc, #52]	@ (800e7b0 <rmw_init_options_copy+0x8c>)
 800e77a:	6011      	str	r1, [r2, #0]
 800e77c:	6053      	str	r3, [r2, #4]
 800e77e:	f7ff ff4f 	bl	800e620 <get_memory>
 800e782:	b188      	cbz	r0, 800e7a8 <rmw_init_options_copy+0x84>
 800e784:	68c3      	ldr	r3, [r0, #12]
 800e786:	2600      	movs	r6, #0
 800e788:	636b      	str	r3, [r5, #52]	@ 0x34
 800e78a:	f103 0510 	add.w	r5, r3, #16
 800e78e:	6b64      	ldr	r4, [r4, #52]	@ 0x34
 800e790:	3410      	adds	r4, #16
 800e792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e796:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e79a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e79e:	4630      	mov	r0, r6
 800e7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a2:	260c      	movs	r6, #12
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a8:	2601      	movs	r6, #1
 800e7aa:	e7ca      	b.n	800e742 <rmw_init_options_copy+0x1e>
 800e7ac:	08015e20 	.word	0x08015e20
 800e7b0:	2000f5ec 	.word	0x2000f5ec

0800e7b4 <rmw_init_options_fini>:
 800e7b4:	b570      	push	{r4, r5, r6, lr}
 800e7b6:	b08e      	sub	sp, #56	@ 0x38
 800e7b8:	b350      	cbz	r0, 800e810 <rmw_init_options_fini+0x5c>
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	3020      	adds	r0, #32
 800e7be:	f7f9 ffb7 	bl	8008730 <rcutils_allocator_is_valid>
 800e7c2:	b328      	cbz	r0, 800e810 <rmw_init_options_fini+0x5c>
 800e7c4:	68a0      	ldr	r0, [r4, #8]
 800e7c6:	b120      	cbz	r0, 800e7d2 <rmw_init_options_fini+0x1e>
 800e7c8:	4b16      	ldr	r3, [pc, #88]	@ (800e824 <rmw_init_options_fini+0x70>)
 800e7ca:	6819      	ldr	r1, [r3, #0]
 800e7cc:	f7f1 fd38 	bl	8000240 <strcmp>
 800e7d0:	bb30      	cbnz	r0, 800e820 <rmw_init_options_fini+0x6c>
 800e7d2:	4b15      	ldr	r3, [pc, #84]	@ (800e828 <rmw_init_options_fini+0x74>)
 800e7d4:	6819      	ldr	r1, [r3, #0]
 800e7d6:	b1f9      	cbz	r1, 800e818 <rmw_init_options_fini+0x64>
 800e7d8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e7da:	e001      	b.n	800e7e0 <rmw_init_options_fini+0x2c>
 800e7dc:	6889      	ldr	r1, [r1, #8]
 800e7de:	b1d9      	cbz	r1, 800e818 <rmw_init_options_fini+0x64>
 800e7e0:	68cb      	ldr	r3, [r1, #12]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d1fa      	bne.n	800e7dc <rmw_init_options_fini+0x28>
 800e7e6:	4810      	ldr	r0, [pc, #64]	@ (800e828 <rmw_init_options_fini+0x74>)
 800e7e8:	466d      	mov	r5, sp
 800e7ea:	f7ff ff29 	bl	800e640 <put_memory>
 800e7ee:	4668      	mov	r0, sp
 800e7f0:	f7ff fe38 	bl	800e464 <rmw_get_zero_initialized_init_options>
 800e7f4:	2600      	movs	r6, #0
 800e7f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e802:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e806:	e884 0003 	stmia.w	r4, {r0, r1}
 800e80a:	4630      	mov	r0, r6
 800e80c:	b00e      	add	sp, #56	@ 0x38
 800e80e:	bd70      	pop	{r4, r5, r6, pc}
 800e810:	260b      	movs	r6, #11
 800e812:	4630      	mov	r0, r6
 800e814:	b00e      	add	sp, #56	@ 0x38
 800e816:	bd70      	pop	{r4, r5, r6, pc}
 800e818:	2601      	movs	r6, #1
 800e81a:	4630      	mov	r0, r6
 800e81c:	b00e      	add	sp, #56	@ 0x38
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	260c      	movs	r6, #12
 800e822:	e7f2      	b.n	800e80a <rmw_init_options_fini+0x56>
 800e824:	08015e20 	.word	0x08015e20
 800e828:	2000f5ec 	.word	0x2000f5ec

0800e82c <rmw_init>:
 800e82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e830:	b083      	sub	sp, #12
 800e832:	2800      	cmp	r0, #0
 800e834:	f000 80e0 	beq.w	800e9f8 <rmw_init+0x1cc>
 800e838:	460e      	mov	r6, r1
 800e83a:	2900      	cmp	r1, #0
 800e83c:	f000 80dc 	beq.w	800e9f8 <rmw_init+0x1cc>
 800e840:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e842:	4605      	mov	r5, r0
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 80d7 	beq.w	800e9f8 <rmw_init+0x1cc>
 800e84a:	4b7e      	ldr	r3, [pc, #504]	@ (800ea44 <rmw_init+0x218>)
 800e84c:	6880      	ldr	r0, [r0, #8]
 800e84e:	681f      	ldr	r7, [r3, #0]
 800e850:	b128      	cbz	r0, 800e85e <rmw_init+0x32>
 800e852:	4639      	mov	r1, r7
 800e854:	f7f1 fcf4 	bl	8000240 <strcmp>
 800e858:	2800      	cmp	r0, #0
 800e85a:	f040 80d7 	bne.w	800ea0c <rmw_init+0x1e0>
 800e85e:	68eb      	ldr	r3, [r5, #12]
 800e860:	2201      	movs	r2, #1
 800e862:	4979      	ldr	r1, [pc, #484]	@ (800ea48 <rmw_init+0x21c>)
 800e864:	4879      	ldr	r0, [pc, #484]	@ (800ea4c <rmw_init+0x220>)
 800e866:	e9d5 8900 	ldrd	r8, r9, [r5]
 800e86a:	61f3      	str	r3, [r6, #28]
 800e86c:	60b7      	str	r7, [r6, #8]
 800e86e:	e9c6 8900 	strd	r8, r9, [r6]
 800e872:	f7fa fb9f 	bl	8008fb4 <rmw_uxrce_init_session_memory>
 800e876:	4876      	ldr	r0, [pc, #472]	@ (800ea50 <rmw_init+0x224>)
 800e878:	2204      	movs	r2, #4
 800e87a:	4976      	ldr	r1, [pc, #472]	@ (800ea54 <rmw_init+0x228>)
 800e87c:	f7fa fbd6 	bl	800902c <rmw_uxrce_init_static_input_buffer_memory>
 800e880:	4872      	ldr	r0, [pc, #456]	@ (800ea4c <rmw_init+0x220>)
 800e882:	f7ff fecd 	bl	800e620 <get_memory>
 800e886:	2800      	cmp	r0, #0
 800e888:	f000 80bb 	beq.w	800ea02 <rmw_init+0x1d6>
 800e88c:	f8d5 c034 	ldr.w	ip, [r5, #52]	@ 0x34
 800e890:	f04f 0800 	mov.w	r8, #0
 800e894:	68c4      	ldr	r4, [r0, #12]
 800e896:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
 800e89a:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800e89e:	f104 0910 	add.w	r9, r4, #16
 800e8a2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800e8a6:	f89c 1010 	ldrb.w	r1, [ip, #16]
 800e8aa:	9001      	str	r0, [sp, #4]
 800e8ac:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800e8b0:	9000      	str	r0, [sp, #0]
 800e8b2:	4648      	mov	r0, r9
 800e8b4:	f000 fda6 	bl	800f404 <uxr_set_custom_transport_callbacks>
 800e8b8:	f241 5194 	movw	r1, #5524	@ 0x1594
 800e8bc:	f241 5398 	movw	r3, #5528	@ 0x1598
 800e8c0:	f241 529c 	movw	r2, #5532	@ 0x159c
 800e8c4:	f844 8001 	str.w	r8, [r4, r1]
 800e8c8:	f504 50ad 	add.w	r0, r4, #5536	@ 0x15a0
 800e8cc:	f844 8003 	str.w	r8, [r4, r3]
 800e8d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e8d4:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800e8d8:	f844 8002 	str.w	r8, [r4, r2]
 800e8dc:	f8c4 138c 	str.w	r1, [r4, #908]	@ 0x38c
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	f8c4 1390 	str.w	r1, [r4, #912]	@ 0x390
 800e8e6:	495c      	ldr	r1, [pc, #368]	@ (800ea58 <rmw_init+0x22c>)
 800e8e8:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800e8ec:	f8c0 8000 	str.w	r8, [r0]
 800e8f0:	485a      	ldr	r0, [pc, #360]	@ (800ea5c <rmw_init+0x230>)
 800e8f2:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e8f6:	64b4      	str	r4, [r6, #72]	@ 0x48
 800e8f8:	f7fa fb42 	bl	8008f80 <rmw_uxrce_init_node_memory>
 800e8fc:	2205      	movs	r2, #5
 800e8fe:	4958      	ldr	r1, [pc, #352]	@ (800ea60 <rmw_init+0x234>)
 800e900:	4858      	ldr	r0, [pc, #352]	@ (800ea64 <rmw_init+0x238>)
 800e902:	f7fa fb23 	bl	8008f4c <rmw_uxrce_init_subscription_memory>
 800e906:	220a      	movs	r2, #10
 800e908:	4957      	ldr	r1, [pc, #348]	@ (800ea68 <rmw_init+0x23c>)
 800e90a:	4858      	ldr	r0, [pc, #352]	@ (800ea6c <rmw_init+0x240>)
 800e90c:	f7fa fb04 	bl	8008f18 <rmw_uxrce_init_publisher_memory>
 800e910:	2201      	movs	r2, #1
 800e912:	4957      	ldr	r1, [pc, #348]	@ (800ea70 <rmw_init+0x244>)
 800e914:	4857      	ldr	r0, [pc, #348]	@ (800ea74 <rmw_init+0x248>)
 800e916:	f7fa facb 	bl	8008eb0 <rmw_uxrce_init_service_memory>
 800e91a:	2201      	movs	r2, #1
 800e91c:	4956      	ldr	r1, [pc, #344]	@ (800ea78 <rmw_init+0x24c>)
 800e91e:	4857      	ldr	r0, [pc, #348]	@ (800ea7c <rmw_init+0x250>)
 800e920:	f7fa fae0 	bl	8008ee4 <rmw_uxrce_init_client_memory>
 800e924:	220f      	movs	r2, #15
 800e926:	4956      	ldr	r1, [pc, #344]	@ (800ea80 <rmw_init+0x254>)
 800e928:	4856      	ldr	r0, [pc, #344]	@ (800ea84 <rmw_init+0x258>)
 800e92a:	f7fa fb63 	bl	8008ff4 <rmw_uxrce_init_topic_memory>
 800e92e:	2203      	movs	r2, #3
 800e930:	4955      	ldr	r1, [pc, #340]	@ (800ea88 <rmw_init+0x25c>)
 800e932:	4856      	ldr	r0, [pc, #344]	@ (800ea8c <rmw_init+0x260>)
 800e934:	f7fa fb98 	bl	8009068 <rmw_uxrce_init_init_options_impl_memory>
 800e938:	2204      	movs	r2, #4
 800e93a:	4955      	ldr	r1, [pc, #340]	@ (800ea90 <rmw_init+0x264>)
 800e93c:	4855      	ldr	r0, [pc, #340]	@ (800ea94 <rmw_init+0x268>)
 800e93e:	f7fa fbad 	bl	800909c <rmw_uxrce_init_wait_set_memory>
 800e942:	2204      	movs	r2, #4
 800e944:	4954      	ldr	r1, [pc, #336]	@ (800ea98 <rmw_init+0x26c>)
 800e946:	4855      	ldr	r0, [pc, #340]	@ (800ea9c <rmw_init+0x270>)
 800e948:	f7fa fbc4 	bl	80090d4 <rmw_uxrce_init_guard_condition_memory>
 800e94c:	4642      	mov	r2, r8
 800e94e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e950:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800e952:	f000 fb11 	bl	800ef78 <rmw_uxrce_transport_init>
 800e956:	4607      	mov	r7, r0
 800e958:	2800      	cmp	r0, #0
 800e95a:	d15c      	bne.n	800ea16 <rmw_init+0x1ea>
 800e95c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e95e:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e962:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e968:	4628      	mov	r0, r5
 800e96a:	f7fb ffd1 	bl	800a910 <uxr_init_session>
 800e96e:	4622      	mov	r2, r4
 800e970:	4628      	mov	r0, r5
 800e972:	494b      	ldr	r1, [pc, #300]	@ (800eaa0 <rmw_init+0x274>)
 800e974:	f7fb ffec 	bl	800a950 <uxr_set_topic_callback>
 800e978:	463a      	mov	r2, r7
 800e97a:	4628      	mov	r0, r5
 800e97c:	4949      	ldr	r1, [pc, #292]	@ (800eaa4 <rmw_init+0x278>)
 800e97e:	f7fb ffe3 	bl	800a948 <uxr_set_status_callback>
 800e982:	463a      	mov	r2, r7
 800e984:	4628      	mov	r0, r5
 800e986:	4948      	ldr	r1, [pc, #288]	@ (800eaa8 <rmw_init+0x27c>)
 800e988:	f7fb ffe6 	bl	800a958 <uxr_set_request_callback>
 800e98c:	463a      	mov	r2, r7
 800e98e:	4628      	mov	r0, r5
 800e990:	4946      	ldr	r1, [pc, #280]	@ (800eaac <rmw_init+0x280>)
 800e992:	f7fb ffe5 	bl	800a960 <uxr_set_reply_callback>
 800e996:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e99a:	2304      	movs	r3, #4
 800e99c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e9a0:	0092      	lsls	r2, r2, #2
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	f7fc f81c 	bl	800a9e0 <uxr_create_input_reliable_stream>
 800e9a8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e9b2:	0092      	lsls	r2, r2, #2
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800e9ba:	2304      	movs	r3, #4
 800e9bc:	f7fb ffe6 	bl	800a98c <uxr_create_output_reliable_stream>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800e9c8:	f7fc f804 	bl	800a9d4 <uxr_create_input_best_effort_stream>
 800e9cc:	f241 3194 	movw	r1, #5012	@ 0x1394
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	4421      	add	r1, r4
 800e9da:	f8c4 3380 	str.w	r3, [r4, #896]	@ 0x380
 800e9de:	f7fb ffc3 	bl	800a968 <uxr_create_output_best_effort_stream>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
 800e9ea:	f7fc fc37 	bl	800b25c <uxr_create_session>
 800e9ee:	b1f8      	cbz	r0, 800ea30 <rmw_init+0x204>
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	b003      	add	sp, #12
 800e9f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9f8:	270b      	movs	r7, #11
 800e9fa:	4638      	mov	r0, r7
 800e9fc:	b003      	add	sp, #12
 800e9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea02:	2701      	movs	r7, #1
 800ea04:	4638      	mov	r0, r7
 800ea06:	b003      	add	sp, #12
 800ea08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea0c:	270c      	movs	r7, #12
 800ea0e:	4638      	mov	r0, r7
 800ea10:	b003      	add	sp, #12
 800ea12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea16:	4648      	mov	r0, r9
 800ea18:	f000 fd32 	bl	800f480 <uxr_close_custom_transport>
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	480b      	ldr	r0, [pc, #44]	@ (800ea4c <rmw_init+0x220>)
 800ea20:	f7ff fe0e 	bl	800e640 <put_memory>
 800ea24:	4638      	mov	r0, r7
 800ea26:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800ea2a:	b003      	add	sp, #12
 800ea2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea30:	4648      	mov	r0, r9
 800ea32:	f000 fd25 	bl	800f480 <uxr_close_custom_transport>
 800ea36:	4621      	mov	r1, r4
 800ea38:	4804      	ldr	r0, [pc, #16]	@ (800ea4c <rmw_init+0x220>)
 800ea3a:	f7ff fe01 	bl	800e640 <put_memory>
 800ea3e:	64b7      	str	r7, [r6, #72]	@ 0x48
 800ea40:	2701      	movs	r7, #1
 800ea42:	e7d5      	b.n	800e9f0 <rmw_init+0x1c4>
 800ea44:	08015e20 	.word	0x08015e20
 800ea48:	2000f6c8 	.word	0x2000f6c8
 800ea4c:	2000f498 	.word	0x2000f498
 800ea50:	2000c2f0 	.word	0x2000c2f0
 800ea54:	2000d0d0 	.word	0x2000d0d0
 800ea58:	2000f4a8 	.word	0x2000f4a8
 800ea5c:	2000f2c4 	.word	0x2000f2c4
 800ea60:	2000cbf8 	.word	0x2000cbf8
 800ea64:	2000f55c 	.word	0x2000f55c
 800ea68:	2000c310 	.word	0x2000c310
 800ea6c:	2000c300 	.word	0x2000c300
 800ea70:	2000f600 	.word	0x2000f600
 800ea74:	2000f54c 	.word	0x2000f54c
 800ea78:	2000d008 	.word	0x2000d008
 800ea7c:	2000cb80 	.word	0x2000cb80
 800ea80:	2000f2d4 	.word	0x2000f2d4
 800ea84:	2000f488 	.word	0x2000f488
 800ea88:	2000f240 	.word	0x2000f240
 800ea8c:	2000f5ec 	.word	0x2000f5ec
 800ea90:	2000f1d0 	.word	0x2000f1d0
 800ea94:	20010c70 	.word	0x20010c70
 800ea98:	2000f56c 	.word	0x2000f56c
 800ea9c:	2000f478 	.word	0x2000f478
 800eaa0:	08010bdd 	.word	0x08010bdd
 800eaa4:	08010bd5 	.word	0x08010bd5
 800eaa8:	08010c71 	.word	0x08010c71
 800eaac:	08010d0d 	.word	0x08010d0d

0800eab0 <rmw_context_fini>:
 800eab0:	4b17      	ldr	r3, [pc, #92]	@ (800eb10 <rmw_context_fini+0x60>)
 800eab2:	b570      	push	{r4, r5, r6, lr}
 800eab4:	681c      	ldr	r4, [r3, #0]
 800eab6:	4605      	mov	r5, r0
 800eab8:	b33c      	cbz	r4, 800eb0a <rmw_context_fini+0x5a>
 800eaba:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800eabc:	2600      	movs	r6, #0
 800eabe:	e9d4 4002 	ldrd	r4, r0, [r4, #8]
 800eac2:	6902      	ldr	r2, [r0, #16]
 800eac4:	428a      	cmp	r2, r1
 800eac6:	d018      	beq.n	800eafa <rmw_context_fini+0x4a>
 800eac8:	2c00      	cmp	r4, #0
 800eaca:	d1f8      	bne.n	800eabe <rmw_context_fini+0xe>
 800eacc:	b189      	cbz	r1, 800eaf2 <rmw_context_fini+0x42>
 800eace:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800ead2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ead6:	789b      	ldrb	r3, [r3, #2]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	bf14      	ite	ne
 800eadc:	210a      	movne	r1, #10
 800eade:	2100      	moveq	r1, #0
 800eae0:	f7fc fd80 	bl	800b5e4 <uxr_delete_session_retries>
 800eae4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800eae6:	f7fa fb0f 	bl	8009108 <rmw_uxrce_fini_session_memory>
 800eaea:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800eaec:	3010      	adds	r0, #16
 800eaee:	f000 fcc7 	bl	800f480 <uxr_close_custom_transport>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	64ab      	str	r3, [r5, #72]	@ 0x48
 800eaf8:	bd70      	pop	{r4, r5, r6, pc}
 800eafa:	3018      	adds	r0, #24
 800eafc:	f000 f912 	bl	800ed24 <rmw_destroy_node>
 800eb00:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800eb02:	4606      	mov	r6, r0
 800eb04:	2c00      	cmp	r4, #0
 800eb06:	d1da      	bne.n	800eabe <rmw_context_fini+0xe>
 800eb08:	e7e0      	b.n	800eacc <rmw_context_fini+0x1c>
 800eb0a:	4626      	mov	r6, r4
 800eb0c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800eb0e:	e7dd      	b.n	800eacc <rmw_context_fini+0x1c>
 800eb10:	2000f2c4 	.word	0x2000f2c4

0800eb14 <create_topic>:
 800eb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb18:	4605      	mov	r5, r0
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	4822      	ldr	r0, [pc, #136]	@ (800eba8 <create_topic+0x94>)
 800eb1e:	460f      	mov	r7, r1
 800eb20:	4616      	mov	r6, r2
 800eb22:	f7ff fd7d 	bl	800e620 <get_memory>
 800eb26:	4604      	mov	r4, r0
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d039      	beq.n	800eba0 <create_topic+0x8c>
 800eb2c:	692a      	ldr	r2, [r5, #16]
 800eb2e:	f241 5396 	movw	r3, #5526	@ 0x1596
 800eb32:	68c4      	ldr	r4, [r0, #12]
 800eb34:	2102      	movs	r1, #2
 800eb36:	5ad0      	ldrh	r0, [r2, r3]
 800eb38:	61a5      	str	r5, [r4, #24]
 800eb3a:	f100 0c01 	add.w	ip, r0, #1
 800eb3e:	6166      	str	r6, [r4, #20]
 800eb40:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 800ebb0 <create_topic+0x9c>
 800eb44:	f822 c003 	strh.w	ip, [r2, r3]
 800eb48:	f7fb fe1e 	bl	800a788 <uxr_object_id>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	223c      	movs	r2, #60	@ 0x3c
 800eb50:	4638      	mov	r0, r7
 800eb52:	4641      	mov	r1, r8
 800eb54:	6123      	str	r3, [r4, #16]
 800eb56:	f7fa fc0d 	bl	8009374 <generate_topic_name>
 800eb5a:	b1e8      	cbz	r0, 800eb98 <create_topic+0x84>
 800eb5c:	4f13      	ldr	r7, [pc, #76]	@ (800ebac <create_topic+0x98>)
 800eb5e:	4630      	mov	r0, r6
 800eb60:	2264      	movs	r2, #100	@ 0x64
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7fa fbd8 	bl	8009318 <generate_type_name>
 800eb68:	b1b0      	cbz	r0, 800eb98 <create_topic+0x84>
 800eb6a:	6928      	ldr	r0, [r5, #16]
 800eb6c:	2306      	movs	r3, #6
 800eb6e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800eb72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb76:	9302      	str	r3, [sp, #8]
 800eb78:	e9cd 8700 	strd	r8, r7, [sp]
 800eb7c:	6811      	ldr	r1, [r2, #0]
 800eb7e:	696b      	ldr	r3, [r5, #20]
 800eb80:	6922      	ldr	r2, [r4, #16]
 800eb82:	f7fb fd25 	bl	800a5d0 <uxr_buffer_create_topic_bin>
 800eb86:	4602      	mov	r2, r0
 800eb88:	6928      	ldr	r0, [r5, #16]
 800eb8a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb8e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb92:	f7fa fb8b 	bl	80092ac <run_xrce_session>
 800eb96:	b918      	cbnz	r0, 800eba0 <create_topic+0x8c>
 800eb98:	4620      	mov	r0, r4
 800eb9a:	2400      	movs	r4, #0
 800eb9c:	f7fa fb2a 	bl	80091f4 <rmw_uxrce_fini_topic_memory>
 800eba0:	4620      	mov	r0, r4
 800eba2:	b004      	add	sp, #16
 800eba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba8:	2000f488 	.word	0x2000f488
 800ebac:	2000c0b0 	.word	0x2000c0b0
 800ebb0:	2000c074 	.word	0x2000c074

0800ebb4 <destroy_topic>:
 800ebb4:	b538      	push	{r3, r4, r5, lr}
 800ebb6:	6985      	ldr	r5, [r0, #24]
 800ebb8:	b1dd      	cbz	r5, 800ebf2 <destroy_topic+0x3e>
 800ebba:	4604      	mov	r4, r0
 800ebbc:	6928      	ldr	r0, [r5, #16]
 800ebbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebc2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebc6:	6922      	ldr	r2, [r4, #16]
 800ebc8:	6819      	ldr	r1, [r3, #0]
 800ebca:	f7fb fc83 	bl	800a4d4 <uxr_buffer_delete_entity>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	6928      	ldr	r0, [r5, #16]
 800ebd2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ebd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ebda:	f7fa fb67 	bl	80092ac <run_xrce_session>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	bf14      	ite	ne
 800ebe6:	2400      	movne	r4, #0
 800ebe8:	2402      	moveq	r4, #2
 800ebea:	f7fa fb03 	bl	80091f4 <rmw_uxrce_fini_topic_memory>
 800ebee:	4620      	mov	r0, r4
 800ebf0:	bd38      	pop	{r3, r4, r5, pc}
 800ebf2:	2401      	movs	r4, #1
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	bd38      	pop	{r3, r4, r5, pc}

0800ebf8 <create_node>:
 800ebf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d065      	beq.n	800ecce <create_node+0xd6>
 800ec02:	4606      	mov	r6, r0
 800ec04:	4838      	ldr	r0, [pc, #224]	@ (800ece8 <create_node+0xf0>)
 800ec06:	460f      	mov	r7, r1
 800ec08:	4690      	mov	r8, r2
 800ec0a:	461d      	mov	r5, r3
 800ec0c:	f7ff fd08 	bl	800e620 <get_memory>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d05c      	beq.n	800ecce <create_node+0xd6>
 800ec14:	68c4      	ldr	r4, [r0, #12]
 800ec16:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800ec18:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ec1c:	f104 0518 	add.w	r5, r4, #24
 800ec20:	6123      	str	r3, [r4, #16]
 800ec22:	f7ff fd21 	bl	800e668 <rmw_get_implementation_identifier>
 800ec26:	4603      	mov	r3, r0
 800ec28:	61e4      	str	r4, [r4, #28]
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	61a3      	str	r3, [r4, #24]
 800ec2e:	f8c4 9020 	str.w	r9, [r4, #32]
 800ec32:	f7f1 fb65 	bl	8000300 <strlen>
 800ec36:	1c42      	adds	r2, r0, #1
 800ec38:	2a3c      	cmp	r2, #60	@ 0x3c
 800ec3a:	d840      	bhi.n	800ecbe <create_node+0xc6>
 800ec3c:	f104 0a68 	add.w	sl, r4, #104	@ 0x68
 800ec40:	4631      	mov	r1, r6
 800ec42:	4648      	mov	r0, r9
 800ec44:	f003 fc09 	bl	801245a <memcpy>
 800ec48:	4638      	mov	r0, r7
 800ec4a:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 800ec4e:	f7f1 fb57 	bl	8000300 <strlen>
 800ec52:	1c42      	adds	r2, r0, #1
 800ec54:	2a3c      	cmp	r2, #60	@ 0x3c
 800ec56:	d832      	bhi.n	800ecbe <create_node+0xc6>
 800ec58:	4639      	mov	r1, r7
 800ec5a:	4650      	mov	r0, sl
 800ec5c:	f003 fbfd 	bl	801245a <memcpy>
 800ec60:	f241 5394 	movw	r3, #5524	@ 0x1594
 800ec64:	6922      	ldr	r2, [r4, #16]
 800ec66:	2101      	movs	r1, #1
 800ec68:	5ad0      	ldrh	r0, [r2, r3]
 800ec6a:	eb00 0c01 	add.w	ip, r0, r1
 800ec6e:	f822 c003 	strh.w	ip, [r2, r3]
 800ec72:	f7fb fd89 	bl	800a788 <uxr_object_id>
 800ec76:	6160      	str	r0, [r4, #20]
 800ec78:	783b      	ldrb	r3, [r7, #0]
 800ec7a:	2b2f      	cmp	r3, #47	@ 0x2f
 800ec7c:	d12c      	bne.n	800ecd8 <create_node+0xe0>
 800ec7e:	787b      	ldrb	r3, [r7, #1]
 800ec80:	bb53      	cbnz	r3, 800ecd8 <create_node+0xe0>
 800ec82:	4633      	mov	r3, r6
 800ec84:	4a19      	ldr	r2, [pc, #100]	@ (800ecec <create_node+0xf4>)
 800ec86:	213c      	movs	r1, #60	@ 0x3c
 800ec88:	4819      	ldr	r0, [pc, #100]	@ (800ecf0 <create_node+0xf8>)
 800ec8a:	f003 fa49 	bl	8012120 <sniprintf>
 800ec8e:	6920      	ldr	r0, [r4, #16]
 800ec90:	2606      	movs	r6, #6
 800ec92:	4917      	ldr	r1, [pc, #92]	@ (800ecf0 <create_node+0xf8>)
 800ec94:	fa1f f388 	uxth.w	r3, r8
 800ec98:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ec9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eca0:	e9cd 1600 	strd	r1, r6, [sp]
 800eca4:	6811      	ldr	r1, [r2, #0]
 800eca6:	6962      	ldr	r2, [r4, #20]
 800eca8:	f7fb fc60 	bl	800a56c <uxr_buffer_create_participant_bin>
 800ecac:	4602      	mov	r2, r0
 800ecae:	6920      	ldr	r0, [r4, #16]
 800ecb0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ecb4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ecb8:	f7fa faf8 	bl	80092ac <run_xrce_session>
 800ecbc:	b918      	cbnz	r0, 800ecc6 <create_node+0xce>
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	2500      	movs	r5, #0
 800ecc2:	f7fa fa27 	bl	8009114 <rmw_uxrce_fini_node_memory>
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	b002      	add	sp, #8
 800ecca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecce:	2500      	movs	r5, #0
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	b002      	add	sp, #8
 800ecd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd8:	463b      	mov	r3, r7
 800ecda:	4a06      	ldr	r2, [pc, #24]	@ (800ecf4 <create_node+0xfc>)
 800ecdc:	213c      	movs	r1, #60	@ 0x3c
 800ecde:	9600      	str	r6, [sp, #0]
 800ece0:	4803      	ldr	r0, [pc, #12]	@ (800ecf0 <create_node+0xf8>)
 800ece2:	f003 fa1d 	bl	8012120 <sniprintf>
 800ece6:	e7d2      	b.n	800ec8e <create_node+0x96>
 800ece8:	2000f2c4 	.word	0x2000f2c4
 800ecec:	0801594c 	.word	0x0801594c
 800ecf0:	2000c114 	.word	0x2000c114
 800ecf4:	0801598c 	.word	0x0801598c

0800ecf8 <rmw_create_node>:
 800ecf8:	b410      	push	{r4}
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	b171      	cbz	r1, 800ed1c <rmw_create_node+0x24>
 800ecfe:	4611      	mov	r1, r2
 800ed00:	461a      	mov	r2, r3
 800ed02:	7823      	ldrb	r3, [r4, #0]
 800ed04:	b153      	cbz	r3, 800ed1c <rmw_create_node+0x24>
 800ed06:	b149      	cbz	r1, 800ed1c <rmw_create_node+0x24>
 800ed08:	780b      	ldrb	r3, [r1, #0]
 800ed0a:	b13b      	cbz	r3, 800ed1c <rmw_create_node+0x24>
 800ed0c:	b902      	cbnz	r2, 800ed10 <rmw_create_node+0x18>
 800ed0e:	69c2      	ldr	r2, [r0, #28]
 800ed10:	4603      	mov	r3, r0
 800ed12:	4620      	mov	r0, r4
 800ed14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed18:	f7ff bf6e 	b.w	800ebf8 <create_node>
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <rmw_destroy_node>:
 800ed24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed26:	b328      	cbz	r0, 800ed74 <rmw_destroy_node+0x50>
 800ed28:	4607      	mov	r7, r0
 800ed2a:	6800      	ldr	r0, [r0, #0]
 800ed2c:	b120      	cbz	r0, 800ed38 <rmw_destroy_node+0x14>
 800ed2e:	4b37      	ldr	r3, [pc, #220]	@ (800ee0c <rmw_destroy_node+0xe8>)
 800ed30:	6819      	ldr	r1, [r3, #0]
 800ed32:	f7f1 fa85 	bl	8000240 <strcmp>
 800ed36:	b9e8      	cbnz	r0, 800ed74 <rmw_destroy_node+0x50>
 800ed38:	687d      	ldr	r5, [r7, #4]
 800ed3a:	b1dd      	cbz	r5, 800ed74 <rmw_destroy_node+0x50>
 800ed3c:	4b34      	ldr	r3, [pc, #208]	@ (800ee10 <rmw_destroy_node+0xec>)
 800ed3e:	681c      	ldr	r4, [r3, #0]
 800ed40:	2c00      	cmp	r4, #0
 800ed42:	d060      	beq.n	800ee06 <rmw_destroy_node+0xe2>
 800ed44:	2600      	movs	r6, #0
 800ed46:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800ed4a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800ed4e:	429d      	cmp	r5, r3
 800ed50:	d013      	beq.n	800ed7a <rmw_destroy_node+0x56>
 800ed52:	2c00      	cmp	r4, #0
 800ed54:	d1f7      	bne.n	800ed46 <rmw_destroy_node+0x22>
 800ed56:	4b2f      	ldr	r3, [pc, #188]	@ (800ee14 <rmw_destroy_node+0xf0>)
 800ed58:	681c      	ldr	r4, [r3, #0]
 800ed5a:	b1c4      	cbz	r4, 800ed8e <rmw_destroy_node+0x6a>
 800ed5c:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800ed60:	6a0b      	ldr	r3, [r1, #32]
 800ed62:	429d      	cmp	r5, r3
 800ed64:	d1f9      	bne.n	800ed5a <rmw_destroy_node+0x36>
 800ed66:	317c      	adds	r1, #124	@ 0x7c
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f000 f8a3 	bl	800eeb4 <rmw_destroy_subscription>
 800ed6e:	2801      	cmp	r0, #1
 800ed70:	4606      	mov	r6, r0
 800ed72:	d1f2      	bne.n	800ed5a <rmw_destroy_node+0x36>
 800ed74:	2601      	movs	r6, #1
 800ed76:	4630      	mov	r0, r6
 800ed78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed7a:	3184      	adds	r1, #132	@ 0x84
 800ed7c:	4638      	mov	r0, r7
 800ed7e:	f7fa f843 	bl	8008e08 <rmw_destroy_publisher>
 800ed82:	2801      	cmp	r0, #1
 800ed84:	4606      	mov	r6, r0
 800ed86:	d0f5      	beq.n	800ed74 <rmw_destroy_node+0x50>
 800ed88:	2c00      	cmp	r4, #0
 800ed8a:	d1dc      	bne.n	800ed46 <rmw_destroy_node+0x22>
 800ed8c:	e7e3      	b.n	800ed56 <rmw_destroy_node+0x32>
 800ed8e:	4b22      	ldr	r3, [pc, #136]	@ (800ee18 <rmw_destroy_node+0xf4>)
 800ed90:	681c      	ldr	r4, [r3, #0]
 800ed92:	b16c      	cbz	r4, 800edb0 <rmw_destroy_node+0x8c>
 800ed94:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800ed98:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ed9a:	429d      	cmp	r5, r3
 800ed9c:	d1f9      	bne.n	800ed92 <rmw_destroy_node+0x6e>
 800ed9e:	317c      	adds	r1, #124	@ 0x7c
 800eda0:	4638      	mov	r0, r7
 800eda2:	f000 f843 	bl	800ee2c <rmw_destroy_service>
 800eda6:	2801      	cmp	r0, #1
 800eda8:	4606      	mov	r6, r0
 800edaa:	d0e3      	beq.n	800ed74 <rmw_destroy_node+0x50>
 800edac:	2c00      	cmp	r4, #0
 800edae:	d1f1      	bne.n	800ed94 <rmw_destroy_node+0x70>
 800edb0:	4b1a      	ldr	r3, [pc, #104]	@ (800ee1c <rmw_destroy_node+0xf8>)
 800edb2:	681c      	ldr	r4, [r3, #0]
 800edb4:	b16c      	cbz	r4, 800edd2 <rmw_destroy_node+0xae>
 800edb6:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800edba:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800edbc:	429d      	cmp	r5, r3
 800edbe:	d1f9      	bne.n	800edb4 <rmw_destroy_node+0x90>
 800edc0:	317c      	adds	r1, #124	@ 0x7c
 800edc2:	4638      	mov	r0, r7
 800edc4:	f001 ffec 	bl	8010da0 <rmw_destroy_client>
 800edc8:	2801      	cmp	r0, #1
 800edca:	4606      	mov	r6, r0
 800edcc:	d0d2      	beq.n	800ed74 <rmw_destroy_node+0x50>
 800edce:	2c00      	cmp	r4, #0
 800edd0:	d1f1      	bne.n	800edb6 <rmw_destroy_node+0x92>
 800edd2:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800edd6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800edda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800edde:	6819      	ldr	r1, [r3, #0]
 800ede0:	f7fb fb78 	bl	800a4d4 <uxr_buffer_delete_entity>
 800ede4:	4602      	mov	r2, r0
 800ede6:	6928      	ldr	r0, [r5, #16]
 800ede8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800edec:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800edf0:	f7fa fa5c 	bl	80092ac <run_xrce_session>
 800edf4:	4603      	mov	r3, r0
 800edf6:	4638      	mov	r0, r7
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	bf08      	it	eq
 800edfc:	2602      	moveq	r6, #2
 800edfe:	f7fa f989 	bl	8009114 <rmw_uxrce_fini_node_memory>
 800ee02:	4630      	mov	r0, r6
 800ee04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee06:	4626      	mov	r6, r4
 800ee08:	e7a5      	b.n	800ed56 <rmw_destroy_node+0x32>
 800ee0a:	bf00      	nop
 800ee0c:	08015e20 	.word	0x08015e20
 800ee10:	2000c300 	.word	0x2000c300
 800ee14:	2000f55c 	.word	0x2000f55c
 800ee18:	2000f54c 	.word	0x2000f54c
 800ee1c:	2000cb80 	.word	0x2000cb80

0800ee20 <rmw_node_get_graph_guard_condition>:
 800ee20:	6843      	ldr	r3, [r0, #4]
 800ee22:	6918      	ldr	r0, [r3, #16]
 800ee24:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop

0800ee2c <rmw_destroy_service>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	b128      	cbz	r0, 800ee3c <rmw_destroy_service+0x10>
 800ee30:	4604      	mov	r4, r0
 800ee32:	6800      	ldr	r0, [r0, #0]
 800ee34:	460d      	mov	r5, r1
 800ee36:	f7fa fab3 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 800ee3a:	b910      	cbnz	r0, 800ee42 <rmw_destroy_service+0x16>
 800ee3c:	2401      	movs	r4, #1
 800ee3e:	4620      	mov	r0, r4
 800ee40:	bd70      	pop	{r4, r5, r6, pc}
 800ee42:	6863      	ldr	r3, [r4, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d0f9      	beq.n	800ee3c <rmw_destroy_service+0x10>
 800ee48:	2d00      	cmp	r5, #0
 800ee4a:	d0f7      	beq.n	800ee3c <rmw_destroy_service+0x10>
 800ee4c:	6828      	ldr	r0, [r5, #0]
 800ee4e:	f7fa faa7 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d0f2      	beq.n	800ee3c <rmw_destroy_service+0x10>
 800ee56:	686e      	ldr	r6, [r5, #4]
 800ee58:	2e00      	cmp	r6, #0
 800ee5a:	d0ef      	beq.n	800ee3c <rmw_destroy_service+0x10>
 800ee5c:	6864      	ldr	r4, [r4, #4]
 800ee5e:	6932      	ldr	r2, [r6, #16]
 800ee60:	6920      	ldr	r0, [r4, #16]
 800ee62:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ee66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee6a:	6819      	ldr	r1, [r3, #0]
 800ee6c:	f001 f85e 	bl	800ff2c <uxr_buffer_cancel_data>
 800ee70:	4602      	mov	r2, r0
 800ee72:	6920      	ldr	r0, [r4, #16]
 800ee74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ee78:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ee7c:	f7fa fa16 	bl	80092ac <run_xrce_session>
 800ee80:	6920      	ldr	r0, [r4, #16]
 800ee82:	6932      	ldr	r2, [r6, #16]
 800ee84:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ee88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee8c:	6819      	ldr	r1, [r3, #0]
 800ee8e:	f7fb fb21 	bl	800a4d4 <uxr_buffer_delete_entity>
 800ee92:	4602      	mov	r2, r0
 800ee94:	6920      	ldr	r0, [r4, #16]
 800ee96:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ee9a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ee9e:	f7fa fa05 	bl	80092ac <run_xrce_session>
 800eea2:	4603      	mov	r3, r0
 800eea4:	4628      	mov	r0, r5
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	bf14      	ite	ne
 800eeaa:	2400      	movne	r4, #0
 800eeac:	2402      	moveq	r4, #2
 800eeae:	f7fa f975 	bl	800919c <rmw_uxrce_fini_service_memory>
 800eeb2:	e7c4      	b.n	800ee3e <rmw_destroy_service+0x12>

0800eeb4 <rmw_destroy_subscription>:
 800eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb6:	b128      	cbz	r0, 800eec4 <rmw_destroy_subscription+0x10>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	6800      	ldr	r0, [r0, #0]
 800eebc:	460d      	mov	r5, r1
 800eebe:	f7fa fa6f 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 800eec2:	b910      	cbnz	r0, 800eeca <rmw_destroy_subscription+0x16>
 800eec4:	2401      	movs	r4, #1
 800eec6:	4620      	mov	r0, r4
 800eec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeca:	6863      	ldr	r3, [r4, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d0f9      	beq.n	800eec4 <rmw_destroy_subscription+0x10>
 800eed0:	fab5 f485 	clz	r4, r5
 800eed4:	0964      	lsrs	r4, r4, #5
 800eed6:	2d00      	cmp	r5, #0
 800eed8:	d0f4      	beq.n	800eec4 <rmw_destroy_subscription+0x10>
 800eeda:	6828      	ldr	r0, [r5, #0]
 800eedc:	f7fa fa60 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d0ef      	beq.n	800eec4 <rmw_destroy_subscription+0x10>
 800eee4:	686e      	ldr	r6, [r5, #4]
 800eee6:	2e00      	cmp	r6, #0
 800eee8:	d0ec      	beq.n	800eec4 <rmw_destroy_subscription+0x10>
 800eeea:	6a37      	ldr	r7, [r6, #32]
 800eeec:	6972      	ldr	r2, [r6, #20]
 800eeee:	6938      	ldr	r0, [r7, #16]
 800eef0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eef4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eef8:	6819      	ldr	r1, [r3, #0]
 800eefa:	f001 f817 	bl	800ff2c <uxr_buffer_cancel_data>
 800eefe:	4602      	mov	r2, r0
 800ef00:	6938      	ldr	r0, [r7, #16]
 800ef02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ef06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ef0a:	f7fa f9cf 	bl	80092ac <run_xrce_session>
 800ef0e:	69f0      	ldr	r0, [r6, #28]
 800ef10:	f7ff fe50 	bl	800ebb4 <destroy_topic>
 800ef14:	6a33      	ldr	r3, [r6, #32]
 800ef16:	6972      	ldr	r2, [r6, #20]
 800ef18:	6918      	ldr	r0, [r3, #16]
 800ef1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ef1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef22:	6819      	ldr	r1, [r3, #0]
 800ef24:	f7fb fad6 	bl	800a4d4 <uxr_buffer_delete_entity>
 800ef28:	6a33      	ldr	r3, [r6, #32]
 800ef2a:	6932      	ldr	r2, [r6, #16]
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	6918      	ldr	r0, [r3, #16]
 800ef30:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ef34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef38:	6819      	ldr	r1, [r3, #0]
 800ef3a:	f7fb facb 	bl	800a4d4 <uxr_buffer_delete_entity>
 800ef3e:	6939      	ldr	r1, [r7, #16]
 800ef40:	4632      	mov	r2, r6
 800ef42:	4606      	mov	r6, r0
 800ef44:	f8d1 3390 	ldr.w	r3, [r1, #912]	@ 0x390
 800ef48:	4608      	mov	r0, r1
 800ef4a:	f8d1 1388 	ldr.w	r1, [r1, #904]	@ 0x388
 800ef4e:	f7fa f9ad 	bl	80092ac <run_xrce_session>
 800ef52:	6939      	ldr	r1, [r7, #16]
 800ef54:	4632      	mov	r2, r6
 800ef56:	4606      	mov	r6, r0
 800ef58:	f8d1 3390 	ldr.w	r3, [r1, #912]	@ 0x390
 800ef5c:	4608      	mov	r0, r1
 800ef5e:	f8d1 1388 	ldr.w	r1, [r1, #904]	@ 0x388
 800ef62:	f7fa f9a3 	bl	80092ac <run_xrce_session>
 800ef66:	b126      	cbz	r6, 800ef72 <rmw_destroy_subscription+0xbe>
 800ef68:	b118      	cbz	r0, 800ef72 <rmw_destroy_subscription+0xbe>
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	f7fa f900 	bl	8009170 <rmw_uxrce_fini_subscription_memory>
 800ef70:	e7a9      	b.n	800eec6 <rmw_destroy_subscription+0x12>
 800ef72:	2402      	movs	r4, #2
 800ef74:	e7f9      	b.n	800ef6a <rmw_destroy_subscription+0xb6>
 800ef76:	bf00      	nop

0800ef78 <rmw_uxrce_transport_init>:
 800ef78:	b508      	push	{r3, lr}
 800ef7a:	b108      	cbz	r0, 800ef80 <rmw_uxrce_transport_init+0x8>
 800ef7c:	f100 0210 	add.w	r2, r0, #16
 800ef80:	b139      	cbz	r1, 800ef92 <rmw_uxrce_transport_init+0x1a>
 800ef82:	6949      	ldr	r1, [r1, #20]
 800ef84:	4610      	mov	r0, r2
 800ef86:	f000 fa49 	bl	800f41c <uxr_init_custom_transport>
 800ef8a:	f080 0001 	eor.w	r0, r0, #1
 800ef8e:	b2c0      	uxtb	r0, r0
 800ef90:	bd08      	pop	{r3, pc}
 800ef92:	4b04      	ldr	r3, [pc, #16]	@ (800efa4 <rmw_uxrce_transport_init+0x2c>)
 800ef94:	4610      	mov	r0, r2
 800ef96:	6859      	ldr	r1, [r3, #4]
 800ef98:	f000 fa40 	bl	800f41c <uxr_init_custom_transport>
 800ef9c:	f080 0001 	eor.w	r0, r0, #1
 800efa0:	b2c0      	uxtb	r0, r0
 800efa2:	bd08      	pop	{r3, pc}
 800efa4:	2000c2d0 	.word	0x2000c2d0

0800efa8 <rmw_uros_epoch_nanos>:
 800efa8:	4b05      	ldr	r3, [pc, #20]	@ (800efc0 <rmw_uros_epoch_nanos+0x18>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	b123      	cbz	r3, 800efb8 <rmw_uros_epoch_nanos+0x10>
 800efae:	68d8      	ldr	r0, [r3, #12]
 800efb0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efb4:	f7fb bd30 	b.w	800aa18 <uxr_epoch_nanos>
 800efb8:	2000      	movs	r0, #0
 800efba:	2100      	movs	r1, #0
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	2000f498 	.word	0x2000f498

0800efc4 <ucdr_serialize_endian_array_char>:
 800efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	4619      	mov	r1, r3
 800efca:	461e      	mov	r6, r3
 800efcc:	4690      	mov	r8, r2
 800efce:	4604      	mov	r4, r0
 800efd0:	f7fb f9ba 	bl	800a348 <ucdr_check_buffer_available_for>
 800efd4:	b9e0      	cbnz	r0, 800f010 <ucdr_serialize_endian_array_char+0x4c>
 800efd6:	4637      	mov	r7, r6
 800efd8:	e00b      	b.n	800eff2 <ucdr_serialize_endian_array_char+0x2e>
 800efda:	4441      	add	r1, r8
 800efdc:	68a0      	ldr	r0, [r4, #8]
 800efde:	462a      	mov	r2, r5
 800efe0:	1b7f      	subs	r7, r7, r5
 800efe2:	f003 fa3a 	bl	801245a <memcpy>
 800efe6:	68a3      	ldr	r3, [r4, #8]
 800efe8:	6920      	ldr	r0, [r4, #16]
 800efea:	442b      	add	r3, r5
 800efec:	4428      	add	r0, r5
 800efee:	60a3      	str	r3, [r4, #8]
 800eff0:	6120      	str	r0, [r4, #16]
 800eff2:	4639      	mov	r1, r7
 800eff4:	2201      	movs	r2, #1
 800eff6:	4620      	mov	r0, r4
 800eff8:	f7fb fa2e 	bl	800a458 <ucdr_check_final_buffer_behavior_array>
 800effc:	1bf1      	subs	r1, r6, r7
 800effe:	4605      	mov	r5, r0
 800f000:	2800      	cmp	r0, #0
 800f002:	d1ea      	bne.n	800efda <ucdr_serialize_endian_array_char+0x16>
 800f004:	2301      	movs	r3, #1
 800f006:	7da0      	ldrb	r0, [r4, #22]
 800f008:	7563      	strb	r3, [r4, #21]
 800f00a:	4058      	eors	r0, r3
 800f00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f010:	4632      	mov	r2, r6
 800f012:	4641      	mov	r1, r8
 800f014:	68a0      	ldr	r0, [r4, #8]
 800f016:	f003 fa20 	bl	801245a <memcpy>
 800f01a:	68a2      	ldr	r2, [r4, #8]
 800f01c:	6923      	ldr	r3, [r4, #16]
 800f01e:	4432      	add	r2, r6
 800f020:	4433      	add	r3, r6
 800f022:	60a2      	str	r2, [r4, #8]
 800f024:	6123      	str	r3, [r4, #16]
 800f026:	e7ed      	b.n	800f004 <ucdr_serialize_endian_array_char+0x40>

0800f028 <ucdr_deserialize_endian_array_char>:
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	4619      	mov	r1, r3
 800f02e:	461e      	mov	r6, r3
 800f030:	4690      	mov	r8, r2
 800f032:	4604      	mov	r4, r0
 800f034:	f7fb f988 	bl	800a348 <ucdr_check_buffer_available_for>
 800f038:	b9e8      	cbnz	r0, 800f076 <ucdr_deserialize_endian_array_char+0x4e>
 800f03a:	4637      	mov	r7, r6
 800f03c:	e00c      	b.n	800f058 <ucdr_deserialize_endian_array_char+0x30>
 800f03e:	eb08 0003 	add.w	r0, r8, r3
 800f042:	68a1      	ldr	r1, [r4, #8]
 800f044:	462a      	mov	r2, r5
 800f046:	1b7f      	subs	r7, r7, r5
 800f048:	f003 fa07 	bl	801245a <memcpy>
 800f04c:	68a3      	ldr	r3, [r4, #8]
 800f04e:	6920      	ldr	r0, [r4, #16]
 800f050:	442b      	add	r3, r5
 800f052:	4428      	add	r0, r5
 800f054:	60a3      	str	r3, [r4, #8]
 800f056:	6120      	str	r0, [r4, #16]
 800f058:	2201      	movs	r2, #1
 800f05a:	4639      	mov	r1, r7
 800f05c:	4620      	mov	r0, r4
 800f05e:	f7fb f9fb 	bl	800a458 <ucdr_check_final_buffer_behavior_array>
 800f062:	1bf3      	subs	r3, r6, r7
 800f064:	4605      	mov	r5, r0
 800f066:	2800      	cmp	r0, #0
 800f068:	d1e9      	bne.n	800f03e <ucdr_deserialize_endian_array_char+0x16>
 800f06a:	2301      	movs	r3, #1
 800f06c:	7da0      	ldrb	r0, [r4, #22]
 800f06e:	7563      	strb	r3, [r4, #21]
 800f070:	4058      	eors	r0, r3
 800f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f076:	4632      	mov	r2, r6
 800f078:	4640      	mov	r0, r8
 800f07a:	68a1      	ldr	r1, [r4, #8]
 800f07c:	f003 f9ed 	bl	801245a <memcpy>
 800f080:	68a2      	ldr	r2, [r4, #8]
 800f082:	6923      	ldr	r3, [r4, #16]
 800f084:	4432      	add	r2, r6
 800f086:	4433      	add	r3, r6
 800f088:	60a2      	str	r2, [r4, #8]
 800f08a:	6123      	str	r3, [r4, #16]
 800f08c:	e7ed      	b.n	800f06a <ucdr_deserialize_endian_array_char+0x42>
 800f08e:	bf00      	nop

0800f090 <ucdr_serialize_array_uint8_t>:
 800f090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f094:	4688      	mov	r8, r1
 800f096:	4611      	mov	r1, r2
 800f098:	4616      	mov	r6, r2
 800f09a:	4604      	mov	r4, r0
 800f09c:	f7fb f954 	bl	800a348 <ucdr_check_buffer_available_for>
 800f0a0:	b9e0      	cbnz	r0, 800f0dc <ucdr_serialize_array_uint8_t+0x4c>
 800f0a2:	4637      	mov	r7, r6
 800f0a4:	e00b      	b.n	800f0be <ucdr_serialize_array_uint8_t+0x2e>
 800f0a6:	4441      	add	r1, r8
 800f0a8:	68a0      	ldr	r0, [r4, #8]
 800f0aa:	462a      	mov	r2, r5
 800f0ac:	1b7f      	subs	r7, r7, r5
 800f0ae:	f003 f9d4 	bl	801245a <memcpy>
 800f0b2:	68a3      	ldr	r3, [r4, #8]
 800f0b4:	6920      	ldr	r0, [r4, #16]
 800f0b6:	442b      	add	r3, r5
 800f0b8:	4428      	add	r0, r5
 800f0ba:	60a3      	str	r3, [r4, #8]
 800f0bc:	6120      	str	r0, [r4, #16]
 800f0be:	4639      	mov	r1, r7
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f7fb f9c8 	bl	800a458 <ucdr_check_final_buffer_behavior_array>
 800f0c8:	1bf1      	subs	r1, r6, r7
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d1ea      	bne.n	800f0a6 <ucdr_serialize_array_uint8_t+0x16>
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	7da0      	ldrb	r0, [r4, #22]
 800f0d4:	7563      	strb	r3, [r4, #21]
 800f0d6:	4058      	eors	r0, r3
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0dc:	4632      	mov	r2, r6
 800f0de:	4641      	mov	r1, r8
 800f0e0:	68a0      	ldr	r0, [r4, #8]
 800f0e2:	f003 f9ba 	bl	801245a <memcpy>
 800f0e6:	68a3      	ldr	r3, [r4, #8]
 800f0e8:	6922      	ldr	r2, [r4, #16]
 800f0ea:	4433      	add	r3, r6
 800f0ec:	4432      	add	r2, r6
 800f0ee:	60a3      	str	r3, [r4, #8]
 800f0f0:	6122      	str	r2, [r4, #16]
 800f0f2:	e7ed      	b.n	800f0d0 <ucdr_serialize_array_uint8_t+0x40>

0800f0f4 <ucdr_serialize_endian_array_uint8_t>:
 800f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	461e      	mov	r6, r3
 800f0fc:	4690      	mov	r8, r2
 800f0fe:	4604      	mov	r4, r0
 800f100:	f7fb f922 	bl	800a348 <ucdr_check_buffer_available_for>
 800f104:	b9e0      	cbnz	r0, 800f140 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f106:	4637      	mov	r7, r6
 800f108:	e00b      	b.n	800f122 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800f10a:	4441      	add	r1, r8
 800f10c:	68a0      	ldr	r0, [r4, #8]
 800f10e:	462a      	mov	r2, r5
 800f110:	1b7f      	subs	r7, r7, r5
 800f112:	f003 f9a2 	bl	801245a <memcpy>
 800f116:	68a3      	ldr	r3, [r4, #8]
 800f118:	6920      	ldr	r0, [r4, #16]
 800f11a:	442b      	add	r3, r5
 800f11c:	4428      	add	r0, r5
 800f11e:	60a3      	str	r3, [r4, #8]
 800f120:	6120      	str	r0, [r4, #16]
 800f122:	4639      	mov	r1, r7
 800f124:	2201      	movs	r2, #1
 800f126:	4620      	mov	r0, r4
 800f128:	f7fb f996 	bl	800a458 <ucdr_check_final_buffer_behavior_array>
 800f12c:	1bf1      	subs	r1, r6, r7
 800f12e:	4605      	mov	r5, r0
 800f130:	2800      	cmp	r0, #0
 800f132:	d1ea      	bne.n	800f10a <ucdr_serialize_endian_array_uint8_t+0x16>
 800f134:	2301      	movs	r3, #1
 800f136:	7da0      	ldrb	r0, [r4, #22]
 800f138:	7563      	strb	r3, [r4, #21]
 800f13a:	4058      	eors	r0, r3
 800f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f140:	4632      	mov	r2, r6
 800f142:	4641      	mov	r1, r8
 800f144:	68a0      	ldr	r0, [r4, #8]
 800f146:	f003 f988 	bl	801245a <memcpy>
 800f14a:	68a2      	ldr	r2, [r4, #8]
 800f14c:	6923      	ldr	r3, [r4, #16]
 800f14e:	4432      	add	r2, r6
 800f150:	4433      	add	r3, r6
 800f152:	60a2      	str	r2, [r4, #8]
 800f154:	6123      	str	r3, [r4, #16]
 800f156:	e7ed      	b.n	800f134 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f158 <ucdr_deserialize_array_uint8_t>:
 800f158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15c:	4688      	mov	r8, r1
 800f15e:	4611      	mov	r1, r2
 800f160:	4616      	mov	r6, r2
 800f162:	4604      	mov	r4, r0
 800f164:	f7fb f8f0 	bl	800a348 <ucdr_check_buffer_available_for>
 800f168:	b9e8      	cbnz	r0, 800f1a6 <ucdr_deserialize_array_uint8_t+0x4e>
 800f16a:	4637      	mov	r7, r6
 800f16c:	e00c      	b.n	800f188 <ucdr_deserialize_array_uint8_t+0x30>
 800f16e:	eb08 0003 	add.w	r0, r8, r3
 800f172:	68a1      	ldr	r1, [r4, #8]
 800f174:	462a      	mov	r2, r5
 800f176:	1b7f      	subs	r7, r7, r5
 800f178:	f003 f96f 	bl	801245a <memcpy>
 800f17c:	68a3      	ldr	r3, [r4, #8]
 800f17e:	6920      	ldr	r0, [r4, #16]
 800f180:	442b      	add	r3, r5
 800f182:	4428      	add	r0, r5
 800f184:	60a3      	str	r3, [r4, #8]
 800f186:	6120      	str	r0, [r4, #16]
 800f188:	2201      	movs	r2, #1
 800f18a:	4639      	mov	r1, r7
 800f18c:	4620      	mov	r0, r4
 800f18e:	f7fb f963 	bl	800a458 <ucdr_check_final_buffer_behavior_array>
 800f192:	1bf3      	subs	r3, r6, r7
 800f194:	4605      	mov	r5, r0
 800f196:	2800      	cmp	r0, #0
 800f198:	d1e9      	bne.n	800f16e <ucdr_deserialize_array_uint8_t+0x16>
 800f19a:	2301      	movs	r3, #1
 800f19c:	7da0      	ldrb	r0, [r4, #22]
 800f19e:	7563      	strb	r3, [r4, #21]
 800f1a0:	4058      	eors	r0, r3
 800f1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a6:	4632      	mov	r2, r6
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	68a1      	ldr	r1, [r4, #8]
 800f1ac:	f003 f955 	bl	801245a <memcpy>
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	6922      	ldr	r2, [r4, #16]
 800f1b4:	4433      	add	r3, r6
 800f1b6:	4432      	add	r2, r6
 800f1b8:	60a3      	str	r3, [r4, #8]
 800f1ba:	6122      	str	r2, [r4, #16]
 800f1bc:	e7ed      	b.n	800f19a <ucdr_deserialize_array_uint8_t+0x42>
 800f1be:	bf00      	nop

0800f1c0 <ucdr_deserialize_endian_array_uint8_t>:
 800f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	461e      	mov	r6, r3
 800f1c8:	4690      	mov	r8, r2
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	f7fb f8bc 	bl	800a348 <ucdr_check_buffer_available_for>
 800f1d0:	b9e8      	cbnz	r0, 800f20e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800f1d2:	4637      	mov	r7, r6
 800f1d4:	e00c      	b.n	800f1f0 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800f1d6:	eb08 0003 	add.w	r0, r8, r3
 800f1da:	68a1      	ldr	r1, [r4, #8]
 800f1dc:	462a      	mov	r2, r5
 800f1de:	1b7f      	subs	r7, r7, r5
 800f1e0:	f003 f93b 	bl	801245a <memcpy>
 800f1e4:	68a3      	ldr	r3, [r4, #8]
 800f1e6:	6920      	ldr	r0, [r4, #16]
 800f1e8:	442b      	add	r3, r5
 800f1ea:	4428      	add	r0, r5
 800f1ec:	60a3      	str	r3, [r4, #8]
 800f1ee:	6120      	str	r0, [r4, #16]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f7fb f92f 	bl	800a458 <ucdr_check_final_buffer_behavior_array>
 800f1fa:	1bf3      	subs	r3, r6, r7
 800f1fc:	4605      	mov	r5, r0
 800f1fe:	2800      	cmp	r0, #0
 800f200:	d1e9      	bne.n	800f1d6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f202:	2301      	movs	r3, #1
 800f204:	7da0      	ldrb	r0, [r4, #22]
 800f206:	7563      	strb	r3, [r4, #21]
 800f208:	4058      	eors	r0, r3
 800f20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f20e:	4632      	mov	r2, r6
 800f210:	4640      	mov	r0, r8
 800f212:	68a1      	ldr	r1, [r4, #8]
 800f214:	f003 f921 	bl	801245a <memcpy>
 800f218:	68a2      	ldr	r2, [r4, #8]
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	4432      	add	r2, r6
 800f21e:	4433      	add	r3, r6
 800f220:	60a2      	str	r2, [r4, #8]
 800f222:	6123      	str	r3, [r4, #16]
 800f224:	e7ed      	b.n	800f202 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800f226:	bf00      	nop

0800f228 <ucdr_serialize_sequence_char>:
 800f228:	b570      	push	{r4, r5, r6, lr}
 800f22a:	4615      	mov	r5, r2
 800f22c:	460e      	mov	r6, r1
 800f22e:	7d01      	ldrb	r1, [r0, #20]
 800f230:	4604      	mov	r4, r0
 800f232:	f7fa fbdf 	bl	80099f4 <ucdr_serialize_endian_uint32_t>
 800f236:	b90d      	cbnz	r5, 800f23c <ucdr_serialize_sequence_char+0x14>
 800f238:	2001      	movs	r0, #1
 800f23a:	bd70      	pop	{r4, r5, r6, pc}
 800f23c:	462b      	mov	r3, r5
 800f23e:	4632      	mov	r2, r6
 800f240:	7d21      	ldrb	r1, [r4, #20]
 800f242:	4620      	mov	r0, r4
 800f244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f248:	f7ff bebc 	b.w	800efc4 <ucdr_serialize_endian_array_char>

0800f24c <ucdr_deserialize_sequence_char>:
 800f24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f250:	461d      	mov	r5, r3
 800f252:	4616      	mov	r6, r2
 800f254:	460f      	mov	r7, r1
 800f256:	461a      	mov	r2, r3
 800f258:	7d01      	ldrb	r1, [r0, #20]
 800f25a:	4604      	mov	r4, r0
 800f25c:	f7fa fcf2 	bl	8009c44 <ucdr_deserialize_endian_uint32_t>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	429e      	cmp	r6, r3
 800f264:	d201      	bcs.n	800f26a <ucdr_deserialize_sequence_char+0x1e>
 800f266:	2201      	movs	r2, #1
 800f268:	75a2      	strb	r2, [r4, #22]
 800f26a:	b913      	cbnz	r3, 800f272 <ucdr_deserialize_sequence_char+0x26>
 800f26c:	2001      	movs	r0, #1
 800f26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f272:	463a      	mov	r2, r7
 800f274:	7d21      	ldrb	r1, [r4, #20]
 800f276:	4620      	mov	r0, r4
 800f278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f27c:	f7ff bed4 	b.w	800f028 <ucdr_deserialize_endian_array_char>

0800f280 <ucdr_serialize_sequence_uint8_t>:
 800f280:	b570      	push	{r4, r5, r6, lr}
 800f282:	4615      	mov	r5, r2
 800f284:	460e      	mov	r6, r1
 800f286:	7d01      	ldrb	r1, [r0, #20]
 800f288:	4604      	mov	r4, r0
 800f28a:	f7fa fbb3 	bl	80099f4 <ucdr_serialize_endian_uint32_t>
 800f28e:	b90d      	cbnz	r5, 800f294 <ucdr_serialize_sequence_uint8_t+0x14>
 800f290:	2001      	movs	r0, #1
 800f292:	bd70      	pop	{r4, r5, r6, pc}
 800f294:	462b      	mov	r3, r5
 800f296:	4632      	mov	r2, r6
 800f298:	7d21      	ldrb	r1, [r4, #20]
 800f29a:	4620      	mov	r0, r4
 800f29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2a0:	f7ff bf28 	b.w	800f0f4 <ucdr_serialize_endian_array_uint8_t>

0800f2a4 <ucdr_deserialize_sequence_uint8_t>:
 800f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	461d      	mov	r5, r3
 800f2aa:	4616      	mov	r6, r2
 800f2ac:	460f      	mov	r7, r1
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	7d01      	ldrb	r1, [r0, #20]
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	f7fa fcc6 	bl	8009c44 <ucdr_deserialize_endian_uint32_t>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	429e      	cmp	r6, r3
 800f2bc:	d201      	bcs.n	800f2c2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f2be:	2201      	movs	r2, #1
 800f2c0:	75a2      	strb	r2, [r4, #22]
 800f2c2:	b913      	cbnz	r3, 800f2ca <ucdr_deserialize_sequence_uint8_t+0x26>
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ca:	463a      	mov	r2, r7
 800f2cc:	7d21      	ldrb	r1, [r4, #20]
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d4:	f7ff bf74 	b.w	800f1c0 <ucdr_deserialize_endian_array_uint8_t>

0800f2d8 <ucdr_serialize_string>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	4604      	mov	r4, r0
 800f2de:	4608      	mov	r0, r1
 800f2e0:	9101      	str	r1, [sp, #4]
 800f2e2:	f7f1 f80d 	bl	8000300 <strlen>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	9901      	ldr	r1, [sp, #4]
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	3201      	adds	r2, #1
 800f2ee:	b002      	add	sp, #8
 800f2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2f4:	f7ff bf98 	b.w	800f228 <ucdr_serialize_sequence_char>

0800f2f8 <ucdr_deserialize_string>:
 800f2f8:	b500      	push	{lr}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	ab01      	add	r3, sp, #4
 800f2fe:	f7ff ffa5 	bl	800f24c <ucdr_deserialize_sequence_char>
 800f302:	b003      	add	sp, #12
 800f304:	f85d fb04 	ldr.w	pc, [sp], #4

0800f308 <get_custom_error>:
 800f308:	4b01      	ldr	r3, [pc, #4]	@ (800f310 <get_custom_error+0x8>)
 800f30a:	7818      	ldrb	r0, [r3, #0]
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	2000c150 	.word	0x2000c150

0800f314 <recv_custom_msg>:
 800f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f318:	2500      	movs	r5, #0
 800f31a:	b089      	sub	sp, #36	@ 0x24
 800f31c:	4693      	mov	fp, r2
 800f31e:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800f322:	4604      	mov	r4, r0
 800f324:	468a      	mov	sl, r1
 800f326:	9305      	str	r3, [sp, #20]
 800f328:	f88d 501e 	strb.w	r5, [sp, #30]
 800f32c:	b32a      	cbz	r2, 800f37a <recv_custom_msg+0x66>
 800f32e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800f332:	f10d 081f 	add.w	r8, sp, #31
 800f336:	af05      	add	r7, sp, #20
 800f338:	f10d 061e 	add.w	r6, sp, #30
 800f33c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800f340:	e002      	b.n	800f348 <recv_custom_msg+0x34>
 800f342:	9b05      	ldr	r3, [sp, #20]
 800f344:	2b00      	cmp	r3, #0
 800f346:	dd10      	ble.n	800f36a <recv_custom_msg+0x56>
 800f348:	f8cd 800c 	str.w	r8, [sp, #12]
 800f34c:	4623      	mov	r3, r4
 800f34e:	9702      	str	r7, [sp, #8]
 800f350:	4622      	mov	r2, r4
 800f352:	9601      	str	r6, [sp, #4]
 800f354:	4648      	mov	r0, r9
 800f356:	9500      	str	r5, [sp, #0]
 800f358:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800f35c:	f001 f8ce 	bl	80104fc <uxr_read_framed_msg>
 800f360:	2800      	cmp	r0, #0
 800f362:	d0ee      	beq.n	800f342 <recv_custom_msg+0x2e>
 800f364:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f368:	b1b3      	cbz	r3, 800f398 <recv_custom_msg+0x84>
 800f36a:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a8 <recv_custom_msg+0x94>)
 800f36c:	2000      	movs	r0, #0
 800f36e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f372:	701a      	strb	r2, [r3, #0]
 800f374:	b009      	add	sp, #36	@ 0x24
 800f376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37a:	f10d 061f 	add.w	r6, sp, #31
 800f37e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800f382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f386:	4601      	mov	r1, r0
 800f388:	9600      	str	r6, [sp, #0]
 800f38a:	47a8      	blx	r5
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0ec      	beq.n	800f36a <recv_custom_msg+0x56>
 800f390:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1e8      	bne.n	800f36a <recv_custom_msg+0x56>
 800f398:	f8cb 0000 	str.w	r0, [fp]
 800f39c:	2001      	movs	r0, #1
 800f39e:	f8ca 4000 	str.w	r4, [sl]
 800f3a2:	b009      	add	sp, #36	@ 0x24
 800f3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a8:	2000c150 	.word	0x2000c150

0800f3ac <send_custom_msg>:
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	f890 6200 	ldrb.w	r6, [r0, #512]	@ 0x200
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	4605      	mov	r5, r0
 800f3b6:	4614      	mov	r4, r2
 800f3b8:	b99e      	cbnz	r6, 800f3e2 <send_custom_msg+0x36>
 800f3ba:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 800f3be:	f10d 0317 	add.w	r3, sp, #23
 800f3c2:	47a8      	blx	r5
 800f3c4:	1b04      	subs	r4, r0, r4
 800f3c6:	fab4 f484 	clz	r4, r4
 800f3ca:	0964      	lsrs	r4, r4, #5
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	bf14      	ite	ne
 800f3d0:	4620      	movne	r0, r4
 800f3d2:	2000      	moveq	r0, #0
 800f3d4:	b918      	cbnz	r0, 800f3de <send_custom_msg+0x32>
 800f3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f400 <send_custom_msg+0x54>)
 800f3d8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f3dc:	701a      	strb	r2, [r3, #0]
 800f3de:	b006      	add	sp, #24
 800f3e0:	bd70      	pop	{r4, r5, r6, pc}
 800f3e2:	f10d 0217 	add.w	r2, sp, #23
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	9400      	str	r4, [sp, #0]
 800f3ec:	9202      	str	r2, [sp, #8]
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	9101      	str	r1, [sp, #4]
 800f3f2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800f3f6:	f8d5 1270 	ldr.w	r1, [r5, #624]	@ 0x270
 800f3fa:	f000 fea3 	bl	8010144 <uxr_write_framed_msg>
 800f3fe:	e7e1      	b.n	800f3c4 <send_custom_msg+0x18>
 800f400:	2000c150 	.word	0x2000c150

0800f404 <uxr_set_custom_transport_callbacks>:
 800f404:	b430      	push	{r4, r5}
 800f406:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800f40a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800f40e:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 800f412:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800f416:	bc30      	pop	{r4, r5}
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop

0800f41c <uxr_init_custom_transport>:
 800f41c:	b538      	push	{r3, r4, r5, lr}
 800f41e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800f422:	b1f3      	cbz	r3, 800f462 <uxr_init_custom_transport+0x46>
 800f424:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800f428:	4604      	mov	r4, r0
 800f42a:	b1d2      	cbz	r2, 800f462 <uxr_init_custom_transport+0x46>
 800f42c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800f430:	b1ba      	cbz	r2, 800f462 <uxr_init_custom_transport+0x46>
 800f432:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800f436:	b1a2      	cbz	r2, 800f462 <uxr_init_custom_transport+0x46>
 800f438:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800f43c:	4798      	blx	r3
 800f43e:	4605      	mov	r5, r0
 800f440:	b178      	cbz	r0, 800f462 <uxr_init_custom_transport+0x46>
 800f442:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800f446:	b97b      	cbnz	r3, 800f468 <uxr_init_custom_transport+0x4c>
 800f448:	480a      	ldr	r0, [pc, #40]	@ (800f474 <uxr_init_custom_transport+0x58>)
 800f44a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f44e:	490a      	ldr	r1, [pc, #40]	@ (800f478 <uxr_init_custom_transport+0x5c>)
 800f450:	4a0a      	ldr	r2, [pc, #40]	@ (800f47c <uxr_init_custom_transport+0x60>)
 800f452:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800f456:	e9c4 409e 	strd	r4, r0, [r4, #632]	@ 0x278
 800f45a:	e9c4 12a0 	strd	r1, r2, [r4, #640]	@ 0x280
 800f45e:	4628      	mov	r0, r5
 800f460:	bd38      	pop	{r3, r4, r5, pc}
 800f462:	2500      	movs	r5, #0
 800f464:	4628      	mov	r0, r5
 800f466:	bd38      	pop	{r3, r4, r5, pc}
 800f468:	2100      	movs	r1, #0
 800f46a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800f46e:	f000 fe63 	bl	8010138 <uxr_init_framing_io>
 800f472:	e7e9      	b.n	800f448 <uxr_init_custom_transport+0x2c>
 800f474:	0800f3ad 	.word	0x0800f3ad
 800f478:	0800f315 	.word	0x0800f315
 800f47c:	0800f309 	.word	0x0800f309

0800f480 <uxr_close_custom_transport>:
 800f480:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800f484:	4718      	bx	r3
 800f486:	bf00      	nop

0800f488 <uxr_init_input_best_effort_stream>:
 800f488:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f48c:	8003      	strh	r3, [r0, #0]
 800f48e:	4770      	bx	lr

0800f490 <uxr_reset_input_best_effort_stream>:
 800f490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f494:	8003      	strh	r3, [r0, #0]
 800f496:	4770      	bx	lr

0800f498 <uxr_receive_best_effort_message>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4604      	mov	r4, r0
 800f49c:	8800      	ldrh	r0, [r0, #0]
 800f49e:	460d      	mov	r5, r1
 800f4a0:	f000 fe32 	bl	8010108 <uxr_seq_num_cmp>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	0fc0      	lsrs	r0, r0, #31
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	bfb8      	it	lt
 800f4ac:	8025      	strhlt	r5, [r4, #0]
 800f4ae:	bd38      	pop	{r3, r4, r5, pc}

0800f4b0 <on_full_input_buffer>:
 800f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b2:	4605      	mov	r5, r0
 800f4b4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800f4b8:	460c      	mov	r4, r1
 800f4ba:	7d0f      	ldrb	r7, [r1, #20]
 800f4bc:	682a      	ldr	r2, [r5, #0]
 800f4be:	e9d1 6000 	ldrd	r6, r0, [r1]
 800f4c2:	1b93      	subs	r3, r2, r6
 800f4c4:	fbb0 f2fc 	udiv	r2, r0, ip
 800f4c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	fbb3 f1fc 	udiv	r1, r3, ip
 800f4d4:	fb0c 3311 	mls	r3, ip, r1, r3
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	fb02 f203 	mul.w	r2, r2, r3
 800f4de:	1d13      	adds	r3, r2, #4
 800f4e0:	4433      	add	r3, r6
 800f4e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f4e6:	b117      	cbz	r7, 800f4ee <on_full_input_buffer+0x3e>
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	f843 1c04 	str.w	r1, [r3, #-4]
 800f4ee:	2803      	cmp	r0, #3
 800f4f0:	d801      	bhi.n	800f4f6 <on_full_input_buffer+0x46>
 800f4f2:	2001      	movs	r0, #1
 800f4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f6:	f102 0108 	add.w	r1, r2, #8
 800f4fa:	692b      	ldr	r3, [r5, #16]
 800f4fc:	1f02      	subs	r2, r0, #4
 800f4fe:	4628      	mov	r0, r5
 800f500:	4431      	add	r1, r6
 800f502:	f7fa ff6b 	bl	800a3dc <ucdr_init_buffer_origin>
 800f506:	4628      	mov	r0, r5
 800f508:	4622      	mov	r2, r4
 800f50a:	4902      	ldr	r1, [pc, #8]	@ (800f514 <on_full_input_buffer+0x64>)
 800f50c:	f7fa ff44 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800f510:	2000      	movs	r0, #0
 800f512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f514:	0800f4b1 	.word	0x0800f4b1

0800f518 <uxr_init_input_reliable_stream>:
 800f518:	b4f0      	push	{r4, r5, r6, r7}
 800f51a:	9c04      	ldr	r4, [sp, #16]
 800f51c:	2700      	movs	r7, #0
 800f51e:	6001      	str	r1, [r0, #0]
 800f520:	8103      	strh	r3, [r0, #8]
 800f522:	6042      	str	r2, [r0, #4]
 800f524:	6104      	str	r4, [r0, #16]
 800f526:	7507      	strb	r7, [r0, #20]
 800f528:	b1ab      	cbz	r3, 800f556 <uxr_init_input_reliable_stream+0x3e>
 800f52a:	600f      	str	r7, [r1, #0]
 800f52c:	8902      	ldrh	r2, [r0, #8]
 800f52e:	2a01      	cmp	r2, #1
 800f530:	d911      	bls.n	800f556 <uxr_init_input_reliable_stream+0x3e>
 800f532:	2101      	movs	r1, #1
 800f534:	6845      	ldr	r5, [r0, #4]
 800f536:	1c4e      	adds	r6, r1, #1
 800f538:	6804      	ldr	r4, [r0, #0]
 800f53a:	fbb1 f3f2 	udiv	r3, r1, r2
 800f53e:	fbb5 f5f2 	udiv	r5, r5, r2
 800f542:	fb02 1313 	mls	r3, r2, r3, r1
 800f546:	b2b1      	uxth	r1, r6
 800f548:	b29b      	uxth	r3, r3
 800f54a:	fb03 f305 	mul.w	r3, r3, r5
 800f54e:	50e7      	str	r7, [r4, r3]
 800f550:	8902      	ldrh	r2, [r0, #8]
 800f552:	428a      	cmp	r2, r1
 800f554:	d8ee      	bhi.n	800f534 <uxr_init_input_reliable_stream+0x1c>
 800f556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f55a:	bcf0      	pop	{r4, r5, r6, r7}
 800f55c:	60c3      	str	r3, [r0, #12]
 800f55e:	4770      	bx	lr

0800f560 <uxr_reset_input_reliable_stream>:
 800f560:	8902      	ldrh	r2, [r0, #8]
 800f562:	b1ca      	cbz	r2, 800f598 <uxr_reset_input_reliable_stream+0x38>
 800f564:	b4f0      	push	{r4, r5, r6, r7}
 800f566:	2600      	movs	r6, #0
 800f568:	4631      	mov	r1, r6
 800f56a:	4637      	mov	r7, r6
 800f56c:	6844      	ldr	r4, [r0, #4]
 800f56e:	3601      	adds	r6, #1
 800f570:	6805      	ldr	r5, [r0, #0]
 800f572:	fbb1 f3f2 	udiv	r3, r1, r2
 800f576:	fbb4 f4f2 	udiv	r4, r4, r2
 800f57a:	fb02 1313 	mls	r3, r2, r3, r1
 800f57e:	b2b1      	uxth	r1, r6
 800f580:	b29b      	uxth	r3, r3
 800f582:	fb03 f304 	mul.w	r3, r3, r4
 800f586:	50ef      	str	r7, [r5, r3]
 800f588:	8902      	ldrh	r2, [r0, #8]
 800f58a:	428a      	cmp	r2, r1
 800f58c:	d8ee      	bhi.n	800f56c <uxr_reset_input_reliable_stream+0xc>
 800f58e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f592:	bcf0      	pop	{r4, r5, r6, r7}
 800f594:	60c3      	str	r3, [r0, #12]
 800f596:	4770      	bx	lr
 800f598:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f59c:	60c3      	str	r3, [r0, #12]
 800f59e:	4770      	bx	lr

0800f5a0 <uxr_receive_reliable_message>:
 800f5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	460d      	mov	r5, r1
 800f5a8:	8901      	ldrh	r1, [r0, #8]
 800f5aa:	4617      	mov	r7, r2
 800f5ac:	8980      	ldrh	r0, [r0, #12]
 800f5ae:	4698      	mov	r8, r3
 800f5b0:	f000 fda2 	bl	80100f8 <uxr_seq_num_add>
 800f5b4:	4629      	mov	r1, r5
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	89a0      	ldrh	r0, [r4, #12]
 800f5ba:	f000 fda5 	bl	8010108 <uxr_seq_num_cmp>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	db0a      	blt.n	800f5d8 <uxr_receive_reliable_message+0x38>
 800f5c2:	2600      	movs	r6, #0
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	89e0      	ldrh	r0, [r4, #14]
 800f5c8:	f000 fd9e 	bl	8010108 <uxr_seq_num_cmp>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	bfb8      	it	lt
 800f5d2:	81e5      	strhlt	r5, [r4, #14]
 800f5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5d8:	4630      	mov	r0, r6
 800f5da:	4629      	mov	r1, r5
 800f5dc:	f000 fd94 	bl	8010108 <uxr_seq_num_cmp>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	dbee      	blt.n	800f5c2 <uxr_receive_reliable_message+0x22>
 800f5e4:	6923      	ldr	r3, [r4, #16]
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	4798      	blx	r3
 800f5ea:	2101      	movs	r1, #1
 800f5ec:	4681      	mov	r9, r0
 800f5ee:	89a0      	ldrh	r0, [r4, #12]
 800f5f0:	f000 fd82 	bl	80100f8 <uxr_seq_num_add>
 800f5f4:	1a2e      	subs	r6, r5, r0
 800f5f6:	fab6 f686 	clz	r6, r6
 800f5fa:	0976      	lsrs	r6, r6, #5
 800f5fc:	f1b9 0f00 	cmp.w	r9, #0
 800f600:	bf18      	it	ne
 800f602:	2600      	movne	r6, #0
 800f604:	b126      	cbz	r6, 800f610 <uxr_receive_reliable_message+0x70>
 800f606:	2300      	movs	r3, #0
 800f608:	9a08      	ldr	r2, [sp, #32]
 800f60a:	81a0      	strh	r0, [r4, #12]
 800f60c:	7013      	strb	r3, [r2, #0]
 800f60e:	e7d9      	b.n	800f5c4 <uxr_receive_reliable_message+0x24>
 800f610:	8921      	ldrh	r1, [r4, #8]
 800f612:	fbb5 f3f1 	udiv	r3, r5, r1
 800f616:	e9d4 0200 	ldrd	r0, r2, [r4]
 800f61a:	fb01 5313 	mls	r3, r1, r3, r5
 800f61e:	fbb2 f2f1 	udiv	r2, r2, r1
 800f622:	b29b      	uxth	r3, r3
 800f624:	fb03 f302 	mul.w	r3, r3, r2
 800f628:	3304      	adds	r3, #4
 800f62a:	4418      	add	r0, r3
 800f62c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1c6      	bne.n	800f5c2 <uxr_receive_reliable_message+0x22>
 800f634:	4639      	mov	r1, r7
 800f636:	4642      	mov	r2, r8
 800f638:	f002 ff0f 	bl	801245a <memcpy>
 800f63c:	8921      	ldrh	r1, [r4, #8]
 800f63e:	6862      	ldr	r2, [r4, #4]
 800f640:	2001      	movs	r0, #1
 800f642:	fbb5 f3f1 	udiv	r3, r5, r1
 800f646:	fbb2 f2f1 	udiv	r2, r2, r1
 800f64a:	fb01 5313 	mls	r3, r1, r3, r5
 800f64e:	6821      	ldr	r1, [r4, #0]
 800f650:	b29b      	uxth	r3, r3
 800f652:	fb03 f302 	mul.w	r3, r3, r2
 800f656:	f841 8003 	str.w	r8, [r1, r3]
 800f65a:	9b08      	ldr	r3, [sp, #32]
 800f65c:	7018      	strb	r0, [r3, #0]
 800f65e:	f1b9 0f00 	cmp.w	r9, #0
 800f662:	d0ae      	beq.n	800f5c2 <uxr_receive_reliable_message+0x22>
 800f664:	89a6      	ldrh	r6, [r4, #12]
 800f666:	e001      	b.n	800f66c <uxr_receive_reliable_message+0xcc>
 800f668:	2801      	cmp	r0, #1
 800f66a:	d1aa      	bne.n	800f5c2 <uxr_receive_reliable_message+0x22>
 800f66c:	4630      	mov	r0, r6
 800f66e:	2101      	movs	r1, #1
 800f670:	f000 fd42 	bl	80100f8 <uxr_seq_num_add>
 800f674:	8927      	ldrh	r7, [r4, #8]
 800f676:	4606      	mov	r6, r0
 800f678:	fbb0 f3f7 	udiv	r3, r0, r7
 800f67c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f680:	fb07 0313 	mls	r3, r7, r3, r0
 800f684:	fbb1 f1f7 	udiv	r1, r1, r7
 800f688:	b29b      	uxth	r3, r3
 800f68a:	fb03 f301 	mul.w	r3, r3, r1
 800f68e:	3304      	adds	r3, #4
 800f690:	18d0      	adds	r0, r2, r3
 800f692:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d093      	beq.n	800f5c2 <uxr_receive_reliable_message+0x22>
 800f69a:	6923      	ldr	r3, [r4, #16]
 800f69c:	4798      	blx	r3
 800f69e:	2802      	cmp	r0, #2
 800f6a0:	d1e2      	bne.n	800f668 <uxr_receive_reliable_message+0xc8>
 800f6a2:	2601      	movs	r6, #1
 800f6a4:	e78e      	b.n	800f5c4 <uxr_receive_reliable_message+0x24>
 800f6a6:	bf00      	nop

0800f6a8 <uxr_next_input_reliable_buffer_available>:
 800f6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	460f      	mov	r7, r1
 800f6b0:	8980      	ldrh	r0, [r0, #12]
 800f6b2:	2101      	movs	r1, #1
 800f6b4:	4690      	mov	r8, r2
 800f6b6:	f000 fd1f 	bl	80100f8 <uxr_seq_num_add>
 800f6ba:	8921      	ldrh	r1, [r4, #8]
 800f6bc:	fbb0 f5f1 	udiv	r5, r0, r1
 800f6c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800f6c4:	fb01 0515 	mls	r5, r1, r5, r0
 800f6c8:	fbb2 f2f1 	udiv	r2, r2, r1
 800f6cc:	b2ad      	uxth	r5, r5
 800f6ce:	fb05 f502 	mul.w	r5, r5, r2
 800f6d2:	3504      	adds	r5, #4
 800f6d4:	441d      	add	r5, r3
 800f6d6:	f855 9c04 	ldr.w	r9, [r5, #-4]
 800f6da:	f1b9 0f00 	cmp.w	r9, #0
 800f6de:	d025      	beq.n	800f72c <uxr_next_input_reliable_buffer_available+0x84>
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	6923      	ldr	r3, [r4, #16]
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	4798      	blx	r3
 800f6e8:	4682      	mov	sl, r0
 800f6ea:	b310      	cbz	r0, 800f732 <uxr_next_input_reliable_buffer_available+0x8a>
 800f6ec:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800f6f0:	e005      	b.n	800f6fe <uxr_next_input_reliable_buffer_available+0x56>
 800f6f2:	6923      	ldr	r3, [r4, #16]
 800f6f4:	4798      	blx	r3
 800f6f6:	2802      	cmp	r0, #2
 800f6f8:	d032      	beq.n	800f760 <uxr_next_input_reliable_buffer_available+0xb8>
 800f6fa:	2801      	cmp	r0, #1
 800f6fc:	d116      	bne.n	800f72c <uxr_next_input_reliable_buffer_available+0x84>
 800f6fe:	4650      	mov	r0, sl
 800f700:	2101      	movs	r1, #1
 800f702:	f000 fcf9 	bl	80100f8 <uxr_seq_num_add>
 800f706:	8921      	ldrh	r1, [r4, #8]
 800f708:	4682      	mov	sl, r0
 800f70a:	fbba f3f1 	udiv	r3, sl, r1
 800f70e:	e9d4 0200 	ldrd	r0, r2, [r4]
 800f712:	fb01 a313 	mls	r3, r1, r3, sl
 800f716:	fbb2 f2f1 	udiv	r2, r2, r1
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	fb03 f302 	mul.w	r3, r3, r2
 800f720:	3304      	adds	r3, #4
 800f722:	4418      	add	r0, r3
 800f724:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1e2      	bne.n	800f6f2 <uxr_next_input_reliable_buffer_available+0x4a>
 800f72c:	2000      	movs	r0, #0
 800f72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f732:	464a      	mov	r2, r9
 800f734:	4629      	mov	r1, r5
 800f736:	4638      	mov	r0, r7
 800f738:	f7fa fe58 	bl	800a3ec <ucdr_init_buffer>
 800f73c:	8921      	ldrh	r1, [r4, #8]
 800f73e:	6862      	ldr	r2, [r4, #4]
 800f740:	2001      	movs	r0, #1
 800f742:	fbb6 f3f1 	udiv	r3, r6, r1
 800f746:	fbb2 f2f1 	udiv	r2, r2, r1
 800f74a:	fb01 6313 	mls	r3, r1, r3, r6
 800f74e:	6821      	ldr	r1, [r4, #0]
 800f750:	b29b      	uxth	r3, r3
 800f752:	fb03 f302 	mul.w	r3, r3, r2
 800f756:	f841 a003 	str.w	sl, [r1, r3]
 800f75a:	81a6      	strh	r6, [r4, #12]
 800f75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f760:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 800f764:	eb05 0108 	add.w	r1, r5, r8
 800f768:	6863      	ldr	r3, [r4, #4]
 800f76a:	f04f 0c00 	mov.w	ip, #0
 800f76e:	eba9 0208 	sub.w	r2, r9, r8
 800f772:	fbb6 f0fe 	udiv	r0, r6, lr
 800f776:	fbb3 f5fe 	udiv	r5, r3, lr
 800f77a:	fb0e 6610 	mls	r6, lr, r0, r6
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	4638      	mov	r0, r7
 800f782:	b2b6      	uxth	r6, r6
 800f784:	fb06 f605 	mul.w	r6, r6, r5
 800f788:	f843 c006 	str.w	ip, [r3, r6]
 800f78c:	f7fa fe2e 	bl	800a3ec <ucdr_init_buffer>
 800f790:	4638      	mov	r0, r7
 800f792:	4622      	mov	r2, r4
 800f794:	4903      	ldr	r1, [pc, #12]	@ (800f7a4 <uxr_next_input_reliable_buffer_available+0xfc>)
 800f796:	f7fa fdff 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800f79a:	2001      	movs	r0, #1
 800f79c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800f7a0:	e7c5      	b.n	800f72e <uxr_next_input_reliable_buffer_available+0x86>
 800f7a2:	bf00      	nop
 800f7a4:	0800f4b1 	.word	0x0800f4b1

0800f7a8 <uxr_process_heartbeat>:
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	89c0      	ldrh	r0, [r0, #14]
 800f7b0:	4615      	mov	r5, r2
 800f7b2:	f000 fca9 	bl	8010108 <uxr_seq_num_cmp>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	bfb8      	it	lt
 800f7ba:	81e5      	strhlt	r5, [r4, #14]
 800f7bc:	bd38      	pop	{r3, r4, r5, pc}
 800f7be:	bf00      	nop

0800f7c0 <uxr_compute_acknack>:
 800f7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c4:	8903      	ldrh	r3, [r0, #8]
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	460f      	mov	r7, r1
 800f7ca:	8985      	ldrh	r5, [r0, #12]
 800f7cc:	b1db      	cbz	r3, 800f806 <uxr_compute_acknack+0x46>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	2601      	movs	r6, #1
 800f7d2:	e004      	b.n	800f7de <uxr_compute_acknack+0x1e>
 800f7d4:	4566      	cmp	r6, ip
 800f7d6:	f106 0601 	add.w	r6, r6, #1
 800f7da:	d214      	bcs.n	800f806 <uxr_compute_acknack+0x46>
 800f7dc:	89a0      	ldrh	r0, [r4, #12]
 800f7de:	b2b1      	uxth	r1, r6
 800f7e0:	f000 fc8a 	bl	80100f8 <uxr_seq_num_add>
 800f7e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f7e8:	fbb0 f2fc 	udiv	r2, r0, ip
 800f7ec:	e9d4 1300 	ldrd	r1, r3, [r4]
 800f7f0:	fb0c 0212 	mls	r2, ip, r2, r0
 800f7f4:	fbb3 f3fc 	udiv	r3, r3, ip
 800f7f8:	b292      	uxth	r2, r2
 800f7fa:	fb02 1303 	mla	r3, r2, r3, r1
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d1e7      	bne.n	800f7d4 <uxr_compute_acknack+0x14>
 800f804:	4605      	mov	r5, r0
 800f806:	4628      	mov	r0, r5
 800f808:	803d      	strh	r5, [r7, #0]
 800f80a:	89e5      	ldrh	r5, [r4, #14]
 800f80c:	2101      	movs	r1, #1
 800f80e:	f000 fc77 	bl	8010100 <uxr_seq_num_sub>
 800f812:	4601      	mov	r1, r0
 800f814:	4628      	mov	r0, r5
 800f816:	f000 fc73 	bl	8010100 <uxr_seq_num_sub>
 800f81a:	4606      	mov	r6, r0
 800f81c:	b320      	cbz	r0, 800f868 <uxr_compute_acknack+0xa8>
 800f81e:	f04f 0900 	mov.w	r9, #0
 800f822:	f04f 0801 	mov.w	r8, #1
 800f826:	464d      	mov	r5, r9
 800f828:	fa1f f189 	uxth.w	r1, r9
 800f82c:	8838      	ldrh	r0, [r7, #0]
 800f82e:	f000 fc63 	bl	80100f8 <uxr_seq_num_add>
 800f832:	8923      	ldrh	r3, [r4, #8]
 800f834:	fa08 fc09 	lsl.w	ip, r8, r9
 800f838:	f109 0901 	add.w	r9, r9, #1
 800f83c:	fbb0 fef3 	udiv	lr, r0, r3
 800f840:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f844:	ea4c 0c05 	orr.w	ip, ip, r5
 800f848:	fbb1 f1f3 	udiv	r1, r1, r3
 800f84c:	fb0e 0313 	mls	r3, lr, r3, r0
 800f850:	b29b      	uxth	r3, r3
 800f852:	fb03 2101 	mla	r1, r3, r1, r2
 800f856:	680b      	ldr	r3, [r1, #0]
 800f858:	b90b      	cbnz	r3, 800f85e <uxr_compute_acknack+0x9e>
 800f85a:	fa1f f58c 	uxth.w	r5, ip
 800f85e:	454e      	cmp	r6, r9
 800f860:	d1e2      	bne.n	800f828 <uxr_compute_acknack+0x68>
 800f862:	4628      	mov	r0, r5
 800f864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f868:	4605      	mov	r5, r0
 800f86a:	4628      	mov	r0, r5
 800f86c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f870 <uxr_init_output_best_effort_stream>:
 800f870:	b410      	push	{r4}
 800f872:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800f876:	7303      	strb	r3, [r0, #12]
 800f878:	6082      	str	r2, [r0, #8]
 800f87a:	81c4      	strh	r4, [r0, #14]
 800f87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f880:	e9c0 1300 	strd	r1, r3, [r0]
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop

0800f888 <uxr_reset_output_best_effort_stream>:
 800f888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f88c:	7b03      	ldrb	r3, [r0, #12]
 800f88e:	81c2      	strh	r2, [r0, #14]
 800f890:	6043      	str	r3, [r0, #4]
 800f892:	4770      	bx	lr

0800f894 <uxr_prepare_best_effort_buffer_to_write>:
 800f894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f896:	4604      	mov	r4, r0
 800f898:	b083      	sub	sp, #12
 800f89a:	6840      	ldr	r0, [r0, #4]
 800f89c:	460d      	mov	r5, r1
 800f89e:	4616      	mov	r6, r2
 800f8a0:	f7fc f9aa 	bl	800bbf8 <uxr_submessage_padding>
 800f8a4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800f8a8:	4410      	add	r0, r2
 800f8aa:	1942      	adds	r2, r0, r5
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	bf2c      	ite	cs
 800f8b0:	2701      	movcs	r7, #1
 800f8b2:	2700      	movcc	r7, #0
 800f8b4:	d202      	bcs.n	800f8bc <uxr_prepare_best_effort_buffer_to_write+0x28>
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	b003      	add	sp, #12
 800f8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8bc:	9000      	str	r0, [sp, #0]
 800f8be:	2300      	movs	r3, #0
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	6821      	ldr	r1, [r4, #0]
 800f8c4:	f7fa fd80 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800f8c8:	6861      	ldr	r1, [r4, #4]
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	4429      	add	r1, r5
 800f8ce:	6061      	str	r1, [r4, #4]
 800f8d0:	b003      	add	sp, #12
 800f8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f8d4 <uxr_prepare_best_effort_buffer_to_send>:
 800f8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d8:	6845      	ldr	r5, [r0, #4]
 800f8da:	4604      	mov	r4, r0
 800f8dc:	7b00      	ldrb	r0, [r0, #12]
 800f8de:	4285      	cmp	r5, r0
 800f8e0:	bf8c      	ite	hi
 800f8e2:	2501      	movhi	r5, #1
 800f8e4:	2500      	movls	r5, #0
 800f8e6:	d802      	bhi.n	800f8ee <uxr_prepare_best_effort_buffer_to_send+0x1a>
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ee:	4688      	mov	r8, r1
 800f8f0:	89e0      	ldrh	r0, [r4, #14]
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	4617      	mov	r7, r2
 800f8f6:	461e      	mov	r6, r3
 800f8f8:	f000 fbfe 	bl	80100f8 <uxr_seq_num_add>
 800f8fc:	81e0      	strh	r0, [r4, #14]
 800f8fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f902:	8030      	strh	r0, [r6, #0]
 800f904:	4628      	mov	r0, r5
 800f906:	f8c8 2000 	str.w	r2, [r8]
 800f90a:	603b      	str	r3, [r7, #0]
 800f90c:	7b23      	ldrb	r3, [r4, #12]
 800f90e:	6063      	str	r3, [r4, #4]
 800f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f914 <on_full_output_buffer>:
 800f914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f916:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800f91a:	460d      	mov	r5, r1
 800f91c:	6803      	ldr	r3, [r0, #0]
 800f91e:	4606      	mov	r6, r0
 800f920:	7b2a      	ldrb	r2, [r5, #12]
 800f922:	e9d1 1700 	ldrd	r1, r7, [r1]
 800f926:	fbb7 f7fc 	udiv	r7, r7, ip
 800f92a:	1a5c      	subs	r4, r3, r1
 800f92c:	6903      	ldr	r3, [r0, #16]
 800f92e:	fbb4 f4f7 	udiv	r4, r4, r7
 800f932:	3401      	adds	r4, #1
 800f934:	b2a4      	uxth	r4, r4
 800f936:	fbb4 fefc 	udiv	lr, r4, ip
 800f93a:	fb0c 441e 	mls	r4, ip, lr, r4
 800f93e:	b2a4      	uxth	r4, r4
 800f940:	fb07 f404 	mul.w	r4, r7, r4
 800f944:	590f      	ldr	r7, [r1, r4]
 800f946:	4414      	add	r4, r2
 800f948:	1aba      	subs	r2, r7, r2
 800f94a:	3408      	adds	r4, #8
 800f94c:	3a04      	subs	r2, #4
 800f94e:	4421      	add	r1, r4
 800f950:	f7fa fd44 	bl	800a3dc <ucdr_init_buffer_origin>
 800f954:	4630      	mov	r0, r6
 800f956:	462a      	mov	r2, r5
 800f958:	4902      	ldr	r1, [pc, #8]	@ (800f964 <on_full_output_buffer+0x50>)
 800f95a:	f7fa fd1d 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800f95e:	2000      	movs	r0, #0
 800f960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f962:	bf00      	nop
 800f964:	0800f915 	.word	0x0800f915

0800f968 <uxr_init_output_reliable_stream>:
 800f968:	b4f0      	push	{r4, r5, r6, r7}
 800f96a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f96e:	6001      	str	r1, [r0, #0]
 800f970:	8103      	strh	r3, [r0, #8]
 800f972:	6042      	str	r2, [r0, #4]
 800f974:	7304      	strb	r4, [r0, #12]
 800f976:	b1b3      	cbz	r3, 800f9a6 <uxr_init_output_reliable_stream+0x3e>
 800f978:	600c      	str	r4, [r1, #0]
 800f97a:	8902      	ldrh	r2, [r0, #8]
 800f97c:	2a01      	cmp	r2, #1
 800f97e:	d912      	bls.n	800f9a6 <uxr_init_output_reliable_stream+0x3e>
 800f980:	2101      	movs	r1, #1
 800f982:	6845      	ldr	r5, [r0, #4]
 800f984:	1c4f      	adds	r7, r1, #1
 800f986:	7b06      	ldrb	r6, [r0, #12]
 800f988:	6804      	ldr	r4, [r0, #0]
 800f98a:	fbb1 f3f2 	udiv	r3, r1, r2
 800f98e:	fbb5 f5f2 	udiv	r5, r5, r2
 800f992:	fb02 1313 	mls	r3, r2, r3, r1
 800f996:	b2b9      	uxth	r1, r7
 800f998:	b29b      	uxth	r3, r3
 800f99a:	fb03 f305 	mul.w	r3, r3, r5
 800f99e:	50e6      	str	r6, [r4, r3]
 800f9a0:	8902      	ldrh	r2, [r0, #8]
 800f9a2:	428a      	cmp	r2, r1
 800f9a4:	d8ed      	bhi.n	800f982 <uxr_init_output_reliable_stream+0x1a>
 800f9a6:	4d08      	ldr	r5, [pc, #32]	@ (800f9c8 <uxr_init_output_reliable_stream+0x60>)
 800f9a8:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800f9ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	f8c0 500e 	str.w	r5, [r0, #14]
 800f9ba:	8244      	strh	r4, [r0, #18]
 800f9bc:	8401      	strh	r1, [r0, #32]
 800f9be:	bcf0      	pop	{r4, r5, r6, r7}
 800f9c0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop
 800f9c8:	ffff0000 	.word	0xffff0000

0800f9cc <uxr_reset_output_reliable_stream>:
 800f9cc:	8902      	ldrh	r2, [r0, #8]
 800f9ce:	b4f0      	push	{r4, r5, r6, r7}
 800f9d0:	b19a      	cbz	r2, 800f9fa <uxr_reset_output_reliable_stream+0x2e>
 800f9d2:	2600      	movs	r6, #0
 800f9d4:	4631      	mov	r1, r6
 800f9d6:	6845      	ldr	r5, [r0, #4]
 800f9d8:	3601      	adds	r6, #1
 800f9da:	7b07      	ldrb	r7, [r0, #12]
 800f9dc:	6804      	ldr	r4, [r0, #0]
 800f9de:	fbb1 f3f2 	udiv	r3, r1, r2
 800f9e2:	fbb5 f5f2 	udiv	r5, r5, r2
 800f9e6:	fb02 1313 	mls	r3, r2, r3, r1
 800f9ea:	b2b1      	uxth	r1, r6
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	fb03 f305 	mul.w	r3, r3, r5
 800f9f2:	50e7      	str	r7, [r4, r3]
 800f9f4:	8902      	ldrh	r2, [r0, #8]
 800f9f6:	428a      	cmp	r2, r1
 800f9f8:	d8ed      	bhi.n	800f9d6 <uxr_reset_output_reliable_stream+0xa>
 800f9fa:	4d08      	ldr	r5, [pc, #32]	@ (800fa1c <uxr_reset_output_reliable_stream+0x50>)
 800f9fc:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800fa00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa04:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fa08:	2100      	movs	r1, #0
 800fa0a:	f8c0 500e 	str.w	r5, [r0, #14]
 800fa0e:	8244      	strh	r4, [r0, #18]
 800fa10:	8401      	strh	r1, [r0, #32]
 800fa12:	bcf0      	pop	{r4, r5, r6, r7}
 800fa14:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	ffff0000 	.word	0xffff0000

0800fa20 <uxr_prepare_reliable_buffer_to_write>:
 800fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	4605      	mov	r5, r0
 800fa26:	89c4      	ldrh	r4, [r0, #14]
 800fa28:	b091      	sub	sp, #68	@ 0x44
 800fa2a:	8900      	ldrh	r0, [r0, #8]
 800fa2c:	4688      	mov	r8, r1
 800fa2e:	f895 b00c 	ldrb.w	fp, [r5, #12]
 800fa32:	9204      	str	r2, [sp, #16]
 800fa34:	fbb4 f2f0 	udiv	r2, r4, r0
 800fa38:	e9d5 3600 	ldrd	r3, r6, [r5]
 800fa3c:	fb00 4212 	mls	r2, r0, r2, r4
 800fa40:	fbb6 f6f0 	udiv	r6, r6, r0
 800fa44:	b292      	uxth	r2, r2
 800fa46:	f1a6 0904 	sub.w	r9, r6, #4
 800fa4a:	fb06 3202 	mla	r2, r6, r2, r3
 800fa4e:	1d11      	adds	r1, r2, #4
 800fa50:	f8d2 a000 	ldr.w	sl, [r2]
 800fa54:	9103      	str	r1, [sp, #12]
 800fa56:	2800      	cmp	r0, #0
 800fa58:	f000 8156 	beq.w	800fd08 <uxr_prepare_reliable_buffer_to_write+0x2e8>
 800fa5c:	f04f 0c00 	mov.w	ip, #0
 800fa60:	4667      	mov	r7, ip
 800fa62:	4662      	mov	r2, ip
 800fa64:	f10c 0c01 	add.w	ip, ip, #1
 800fa68:	fbb2 f1f0 	udiv	r1, r2, r0
 800fa6c:	fb00 2111 	mls	r1, r0, r1, r2
 800fa70:	fa1f f28c 	uxth.w	r2, ip
 800fa74:	b289      	uxth	r1, r1
 800fa76:	fb06 3101 	mla	r1, r6, r1, r3
 800fa7a:	6809      	ldr	r1, [r1, #0]
 800fa7c:	4559      	cmp	r1, fp
 800fa7e:	d101      	bne.n	800fa84 <uxr_prepare_reliable_buffer_to_write+0x64>
 800fa80:	3701      	adds	r7, #1
 800fa82:	b2bf      	uxth	r7, r7
 800fa84:	4282      	cmp	r2, r0
 800fa86:	d3ed      	bcc.n	800fa64 <uxr_prepare_reliable_buffer_to_write+0x44>
 800fa88:	4650      	mov	r0, sl
 800fa8a:	2104      	movs	r1, #4
 800fa8c:	9705      	str	r7, [sp, #20]
 800fa8e:	f7fa fcb1 	bl	800a3f4 <ucdr_alignment>
 800fa92:	4482      	add	sl, r0
 800fa94:	eb0a 0208 	add.w	r2, sl, r8
 800fa98:	454a      	cmp	r2, r9
 800fa9a:	f240 80d7 	bls.w	800fc4c <uxr_prepare_reliable_buffer_to_write+0x22c>
 800fa9e:	7b2a      	ldrb	r2, [r5, #12]
 800faa0:	4442      	add	r2, r8
 800faa2:	454a      	cmp	r2, r9
 800faa4:	f240 80bf 	bls.w	800fc26 <uxr_prepare_reliable_buffer_to_write+0x206>
 800faa8:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 800faac:	fa1f f289 	uxth.w	r2, r9
 800fab0:	eba1 010b 	sub.w	r1, r1, fp
 800fab4:	4411      	add	r1, r2
 800fab6:	b28b      	uxth	r3, r1
 800fab8:	fb07 fb03 	mul.w	fp, r7, r3
 800fabc:	9305      	str	r3, [sp, #20]
 800fabe:	45c3      	cmp	fp, r8
 800fac0:	9306      	str	r3, [sp, #24]
 800fac2:	f0c0 80bf 	bcc.w	800fc44 <uxr_prepare_reliable_buffer_to_write+0x224>
 800fac6:	f10a 0304 	add.w	r3, sl, #4
 800faca:	454b      	cmp	r3, r9
 800facc:	f080 80e7 	bcs.w	800fc9e <uxr_prepare_reliable_buffer_to_write+0x27e>
 800fad0:	f1a2 0b04 	sub.w	fp, r2, #4
 800fad4:	9b05      	ldr	r3, [sp, #20]
 800fad6:	ebab 0b0a 	sub.w	fp, fp, sl
 800fada:	fa1f fb8b 	uxth.w	fp, fp
 800fade:	eba8 080b 	sub.w	r8, r8, fp
 800fae2:	fbb8 f2f3 	udiv	r2, r8, r3
 800fae6:	fb03 8312 	mls	r3, r3, r2, r8
 800faea:	2b00      	cmp	r3, #0
 800faec:	f040 80d1 	bne.w	800fc92 <uxr_prepare_reliable_buffer_to_write+0x272>
 800faf0:	b293      	uxth	r3, r2
 800faf2:	42bb      	cmp	r3, r7
 800faf4:	f200 80a6 	bhi.w	800fc44 <uxr_prepare_reliable_buffer_to_write+0x224>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	f000 8107 	beq.w	800fd0c <uxr_prepare_reliable_buffer_to_write+0x2ec>
 800fafe:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb02:	f04f 0800 	mov.w	r8, #0
 800fb06:	f8dd a014 	ldr.w	sl, [sp, #20]
 800fb0a:	af08      	add	r7, sp, #32
 800fb0c:	9605      	str	r6, [sp, #20]
 800fb0e:	461e      	mov	r6, r3
 800fb10:	8928      	ldrh	r0, [r5, #8]
 800fb12:	2300      	movs	r3, #0
 800fb14:	686a      	ldr	r2, [r5, #4]
 800fb16:	f108 0801 	add.w	r8, r8, #1
 800fb1a:	6829      	ldr	r1, [r5, #0]
 800fb1c:	fbb4 fcf0 	udiv	ip, r4, r0
 800fb20:	fbb2 fef0 	udiv	lr, r2, r0
 800fb24:	fb00 4c1c 	mls	ip, r0, ip, r4
 800fb28:	464a      	mov	r2, r9
 800fb2a:	4638      	mov	r0, r7
 800fb2c:	fa1f fc8c 	uxth.w	ip, ip
 800fb30:	fb0c fc0e 	mul.w	ip, ip, lr
 800fb34:	f10c 0c04 	add.w	ip, ip, #4
 800fb38:	4461      	add	r1, ip
 800fb3a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 800fb3e:	f8cd c000 	str.w	ip, [sp]
 800fb42:	f7fa fc41 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800fb46:	465a      	mov	r2, fp
 800fb48:	2300      	movs	r3, #0
 800fb4a:	210d      	movs	r1, #13
 800fb4c:	4638      	mov	r0, r7
 800fb4e:	46d3      	mov	fp, sl
 800fb50:	f7fc f812 	bl	800bb78 <uxr_buffer_submessage_header>
 800fb54:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fb58:	686a      	ldr	r2, [r5, #4]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	682b      	ldr	r3, [r5, #0]
 800fb5e:	fbb4 f1fc 	udiv	r1, r4, ip
 800fb62:	fbb2 f2fc 	udiv	r2, r2, ip
 800fb66:	fb0c 4411 	mls	r4, ip, r1, r4
 800fb6a:	2101      	movs	r1, #1
 800fb6c:	b2a4      	uxth	r4, r4
 800fb6e:	fb04 f402 	mul.w	r4, r4, r2
 800fb72:	f843 9004 	str.w	r9, [r3, r4]
 800fb76:	f000 fabf 	bl	80100f8 <uxr_seq_num_add>
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	fa1f f388 	uxth.w	r3, r8
 800fb80:	429e      	cmp	r6, r3
 800fb82:	d8c5      	bhi.n	800fb10 <uxr_prepare_reliable_buffer_to_write+0xf0>
 800fb84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fb88:	9e05      	ldr	r6, [sp, #20]
 800fb8a:	8928      	ldrh	r0, [r5, #8]
 800fb8c:	464a      	mov	r2, r9
 800fb8e:	6869      	ldr	r1, [r5, #4]
 800fb90:	2300      	movs	r3, #0
 800fb92:	fbb4 fcf0 	udiv	ip, r4, r0
 800fb96:	fbb1 fef0 	udiv	lr, r1, r0
 800fb9a:	fb00 4c1c 	mls	ip, r0, ip, r4
 800fb9e:	6829      	ldr	r1, [r5, #0]
 800fba0:	4638      	mov	r0, r7
 800fba2:	fa1f fc8c 	uxth.w	ip, ip
 800fba6:	fb0c fc0e 	mul.w	ip, ip, lr
 800fbaa:	f10c 0c04 	add.w	ip, ip, #4
 800fbae:	4461      	add	r1, ip
 800fbb0:	f851 cc04 	ldr.w	ip, [r1, #-4]
 800fbb4:	f8cd c000 	str.w	ip, [sp]
 800fbb8:	f7fa fc06 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800fbbc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	2302      	movs	r3, #2
 800fbc4:	fa1f f289 	uxth.w	r2, r9
 800fbc8:	210d      	movs	r1, #13
 800fbca:	f7fb ffd5 	bl	800bb78 <uxr_buffer_submessage_header>
 800fbce:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fbd2:	f1a6 0208 	sub.w	r2, r6, #8
 800fbd6:	686f      	ldr	r7, [r5, #4]
 800fbd8:	f895 e00c 	ldrb.w	lr, [r5, #12]
 800fbdc:	f10a 0104 	add.w	r1, sl, #4
 800fbe0:	9803      	ldr	r0, [sp, #12]
 800fbe2:	eba2 020a 	sub.w	r2, r2, sl
 800fbe6:	f10e 0e04 	add.w	lr, lr, #4
 800fbea:	682b      	ldr	r3, [r5, #0]
 800fbec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fbf0:	4408      	add	r0, r1
 800fbf2:	44ce      	add	lr, r9
 800fbf4:	4601      	mov	r1, r0
 800fbf6:	4640      	mov	r0, r8
 800fbf8:	fbb4 f6fc 	udiv	r6, r4, ip
 800fbfc:	fbb7 f7fc 	udiv	r7, r7, ip
 800fc00:	fb0c 4616 	mls	r6, ip, r6, r4
 800fc04:	b2b6      	uxth	r6, r6
 800fc06:	fb06 f607 	mul.w	r6, r6, r7
 800fc0a:	f843 e006 	str.w	lr, [r3, r6]
 800fc0e:	f7fa fbed 	bl	800a3ec <ucdr_init_buffer>
 800fc12:	4640      	mov	r0, r8
 800fc14:	462a      	mov	r2, r5
 800fc16:	493e      	ldr	r1, [pc, #248]	@ (800fd10 <uxr_prepare_reliable_buffer_to_write+0x2f0>)
 800fc18:	f7fa fbbe 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800fc1c:	2001      	movs	r0, #1
 800fc1e:	81ec      	strh	r4, [r5, #14]
 800fc20:	b011      	add	sp, #68	@ 0x44
 800fc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc26:	2101      	movs	r1, #1
 800fc28:	89e8      	ldrh	r0, [r5, #14]
 800fc2a:	f000 fa65 	bl	80100f8 <uxr_seq_num_add>
 800fc2e:	4604      	mov	r4, r0
 800fc30:	8929      	ldrh	r1, [r5, #8]
 800fc32:	8a68      	ldrh	r0, [r5, #18]
 800fc34:	f000 fa60 	bl	80100f8 <uxr_seq_num_add>
 800fc38:	4601      	mov	r1, r0
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 fa64 	bl	8010108 <uxr_seq_num_cmp>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	dd46      	ble.n	800fcd2 <uxr_prepare_reliable_buffer_to_write+0x2b2>
 800fc44:	2000      	movs	r0, #0
 800fc46:	b011      	add	sp, #68	@ 0x44
 800fc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc4c:	8929      	ldrh	r1, [r5, #8]
 800fc4e:	8a68      	ldrh	r0, [r5, #18]
 800fc50:	9205      	str	r2, [sp, #20]
 800fc52:	f000 fa51 	bl	80100f8 <uxr_seq_num_add>
 800fc56:	4601      	mov	r1, r0
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f000 fa55 	bl	8010108 <uxr_seq_num_cmp>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	9a05      	ldr	r2, [sp, #20]
 800fc62:	dcef      	bgt.n	800fc44 <uxr_prepare_reliable_buffer_to_write+0x224>
 800fc64:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fc68:	fbb4 f3fc 	udiv	r3, r4, ip
 800fc6c:	e9d5 7600 	ldrd	r7, r6, [r5]
 800fc70:	fb0c 4413 	mls	r4, ip, r3, r4
 800fc74:	2300      	movs	r3, #0
 800fc76:	fbb6 f5fc 	udiv	r5, r6, ip
 800fc7a:	b2a4      	uxth	r4, r4
 800fc7c:	fb04 f405 	mul.w	r4, r4, r5
 800fc80:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800fc84:	513a      	str	r2, [r7, r4]
 800fc86:	f8cd a000 	str.w	sl, [sp]
 800fc8a:	f7fa fb9d 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800fc8e:	2001      	movs	r0, #1
 800fc90:	e7d9      	b.n	800fc46 <uxr_prepare_reliable_buffer_to_write+0x226>
 800fc92:	3201      	adds	r2, #1
 800fc94:	9306      	str	r3, [sp, #24]
 800fc96:	b293      	uxth	r3, r2
 800fc98:	42bb      	cmp	r3, r7
 800fc9a:	d8d3      	bhi.n	800fc44 <uxr_prepare_reliable_buffer_to_write+0x224>
 800fc9c:	e72c      	b.n	800faf8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800fc9e:	4620      	mov	r0, r4
 800fca0:	2101      	movs	r1, #1
 800fca2:	9207      	str	r2, [sp, #28]
 800fca4:	f000 fa28 	bl	80100f8 <uxr_seq_num_add>
 800fca8:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fcac:	4604      	mov	r4, r0
 800fcae:	9a07      	ldr	r2, [sp, #28]
 800fcb0:	fbb0 f0fc 	udiv	r0, r0, ip
 800fcb4:	e9d5 1300 	ldrd	r1, r3, [r5]
 800fcb8:	fb0c 4010 	mls	r0, ip, r0, r4
 800fcbc:	fbb3 f3fc 	udiv	r3, r3, ip
 800fcc0:	b280      	uxth	r0, r0
 800fcc2:	fb00 f303 	mul.w	r3, r0, r3
 800fcc6:	3304      	adds	r3, #4
 800fcc8:	18cb      	adds	r3, r1, r3
 800fcca:	f853 ac04 	ldr.w	sl, [r3, #-4]
 800fcce:	9303      	str	r3, [sp, #12]
 800fcd0:	e6fe      	b.n	800fad0 <uxr_prepare_reliable_buffer_to_write+0xb0>
 800fcd2:	892e      	ldrh	r6, [r5, #8]
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	686a      	ldr	r2, [r5, #4]
 800fcd8:	9804      	ldr	r0, [sp, #16]
 800fcda:	fbb4 f1f6 	udiv	r1, r4, r6
 800fcde:	fbb2 f7f6 	udiv	r7, r2, r6
 800fce2:	fb06 4111 	mls	r1, r6, r1, r4
 800fce6:	7b2a      	ldrb	r2, [r5, #12]
 800fce8:	682e      	ldr	r6, [r5, #0]
 800fcea:	b289      	uxth	r1, r1
 800fcec:	4442      	add	r2, r8
 800fcee:	fb01 f107 	mul.w	r1, r1, r7
 800fcf2:	3104      	adds	r1, #4
 800fcf4:	4431      	add	r1, r6
 800fcf6:	f841 2c04 	str.w	r2, [r1, #-4]
 800fcfa:	7b2e      	ldrb	r6, [r5, #12]
 800fcfc:	9600      	str	r6, [sp, #0]
 800fcfe:	f7fa fb63 	bl	800a3c8 <ucdr_init_buffer_origin_offset>
 800fd02:	2001      	movs	r0, #1
 800fd04:	81ec      	strh	r4, [r5, #14]
 800fd06:	e79e      	b.n	800fc46 <uxr_prepare_reliable_buffer_to_write+0x226>
 800fd08:	4607      	mov	r7, r0
 800fd0a:	e6bd      	b.n	800fa88 <uxr_prepare_reliable_buffer_to_write+0x68>
 800fd0c:	af08      	add	r7, sp, #32
 800fd0e:	e73c      	b.n	800fb8a <uxr_prepare_reliable_buffer_to_write+0x16a>
 800fd10:	0800f915 	.word	0x0800f915

0800fd14 <uxr_prepare_next_reliable_buffer_to_send>:
 800fd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd18:	4606      	mov	r6, r0
 800fd1a:	461f      	mov	r7, r3
 800fd1c:	4689      	mov	r9, r1
 800fd1e:	8a00      	ldrh	r0, [r0, #16]
 800fd20:	2101      	movs	r1, #1
 800fd22:	4690      	mov	r8, r2
 800fd24:	f000 f9e8 	bl	80100f8 <uxr_seq_num_add>
 800fd28:	6872      	ldr	r2, [r6, #4]
 800fd2a:	6833      	ldr	r3, [r6, #0]
 800fd2c:	8038      	strh	r0, [r7, #0]
 800fd2e:	8931      	ldrh	r1, [r6, #8]
 800fd30:	fbb0 f5f1 	udiv	r5, r0, r1
 800fd34:	fbb2 f2f1 	udiv	r2, r2, r1
 800fd38:	fb01 0415 	mls	r4, r1, r5, r0
 800fd3c:	89f1      	ldrh	r1, [r6, #14]
 800fd3e:	b2a4      	uxth	r4, r4
 800fd40:	fb04 f402 	mul.w	r4, r4, r2
 800fd44:	3404      	adds	r4, #4
 800fd46:	4423      	add	r3, r4
 800fd48:	f8c9 3000 	str.w	r3, [r9]
 800fd4c:	6833      	ldr	r3, [r6, #0]
 800fd4e:	441c      	add	r4, r3
 800fd50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fd54:	f8c8 3000 	str.w	r3, [r8]
 800fd58:	f000 f9d6 	bl	8010108 <uxr_seq_num_cmp>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	dd02      	ble.n	800fd66 <uxr_prepare_next_reliable_buffer_to_send+0x52>
 800fd60:	2000      	movs	r0, #0
 800fd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd66:	f8d8 2000 	ldr.w	r2, [r8]
 800fd6a:	7b33      	ldrb	r3, [r6, #12]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d9f7      	bls.n	800fd60 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 800fd70:	8a71      	ldrh	r1, [r6, #18]
 800fd72:	8a30      	ldrh	r0, [r6, #16]
 800fd74:	f000 f9c4 	bl	8010100 <uxr_seq_num_sub>
 800fd78:	8933      	ldrh	r3, [r6, #8]
 800fd7a:	4283      	cmp	r3, r0
 800fd7c:	d0f0      	beq.n	800fd60 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 800fd7e:	8838      	ldrh	r0, [r7, #0]
 800fd80:	89f3      	ldrh	r3, [r6, #14]
 800fd82:	8230      	strh	r0, [r6, #16]
 800fd84:	4298      	cmp	r0, r3
 800fd86:	d002      	beq.n	800fd8e <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 800fd88:	2001      	movs	r0, #1
 800fd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8e:	2101      	movs	r1, #1
 800fd90:	f000 f9b2 	bl	80100f8 <uxr_seq_num_add>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2001      	movs	r0, #1
 800fd98:	81f3      	strh	r3, [r6, #14]
 800fd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd9e:	bf00      	nop

0800fda0 <uxr_update_output_stream_heartbeat_timestamp>:
 800fda0:	b5d0      	push	{r4, r6, r7, lr}
 800fda2:	8a01      	ldrh	r1, [r0, #16]
 800fda4:	4604      	mov	r4, r0
 800fda6:	8a40      	ldrh	r0, [r0, #18]
 800fda8:	4616      	mov	r6, r2
 800fdaa:	461f      	mov	r7, r3
 800fdac:	f000 f9ac 	bl	8010108 <uxr_seq_num_cmp>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	db07      	blt.n	800fdc4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800fdb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fdb8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800fdc2:	bdd0      	pop	{r4, r6, r7, pc}
 800fdc4:	f894 0020 	ldrb.w	r0, [r4, #32]
 800fdc8:	b948      	cbnz	r0, 800fdde <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	f884 3020 	strb.w	r3, [r4, #32]
 800fdd0:	f116 0264 	adds.w	r2, r6, #100	@ 0x64
 800fdd4:	f147 0300 	adc.w	r3, r7, #0
 800fdd8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800fddc:	bdd0      	pop	{r4, r6, r7, pc}
 800fdde:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800fde2:	4296      	cmp	r6, r2
 800fde4:	eb77 0303 	sbcs.w	r3, r7, r3
 800fde8:	db04      	blt.n	800fdf4 <uxr_update_output_stream_heartbeat_timestamp+0x54>
 800fdea:	1c43      	adds	r3, r0, #1
 800fdec:	2001      	movs	r0, #1
 800fdee:	f884 3020 	strb.w	r3, [r4, #32]
 800fdf2:	e7ed      	b.n	800fdd0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	e7eb      	b.n	800fdd0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800fdf8 <uxr_begin_output_nack_buffer_it>:
 800fdf8:	8a40      	ldrh	r0, [r0, #18]
 800fdfa:	4770      	bx	lr

0800fdfc <uxr_next_reliable_nack_buffer_to_send>:
 800fdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe00:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 800fe04:	f1b9 0f00 	cmp.w	r9, #0
 800fe08:	d012      	beq.n	800fe30 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800fe0a:	4682      	mov	sl, r0
 800fe0c:	460f      	mov	r7, r1
 800fe0e:	4690      	mov	r8, r2
 800fe10:	461e      	mov	r6, r3
 800fe12:	8818      	ldrh	r0, [r3, #0]
 800fe14:	2101      	movs	r1, #1
 800fe16:	f000 f96f 	bl	80100f8 <uxr_seq_num_add>
 800fe1a:	8030      	strh	r0, [r6, #0]
 800fe1c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800fe20:	f000 f972 	bl	8010108 <uxr_seq_num_cmp>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	dd06      	ble.n	800fe36 <uxr_next_reliable_nack_buffer_to_send+0x3a>
 800fe28:	2300      	movs	r3, #0
 800fe2a:	4699      	mov	r9, r3
 800fe2c:	f88a 3021 	strb.w	r3, [sl, #33]	@ 0x21
 800fe30:	4648      	mov	r0, r9
 800fe32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe36:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 800fe3a:	8830      	ldrh	r0, [r6, #0]
 800fe3c:	fbb0 f4f2 	udiv	r4, r0, r2
 800fe40:	e9da 5300 	ldrd	r5, r3, [sl]
 800fe44:	fb02 0414 	mls	r4, r2, r4, r0
 800fe48:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe4c:	b2a4      	uxth	r4, r4
 800fe4e:	fb04 f403 	mul.w	r4, r4, r3
 800fe52:	3404      	adds	r4, #4
 800fe54:	4425      	add	r5, r4
 800fe56:	603d      	str	r5, [r7, #0]
 800fe58:	f8da 3000 	ldr.w	r3, [sl]
 800fe5c:	441c      	add	r4, r3
 800fe5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fe62:	f8c8 3000 	str.w	r3, [r8]
 800fe66:	f89a 200c 	ldrb.w	r2, [sl, #12]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d0d2      	beq.n	800fe14 <uxr_next_reliable_nack_buffer_to_send+0x18>
 800fe6e:	e7df      	b.n	800fe30 <uxr_next_reliable_nack_buffer_to_send+0x34>

0800fe70 <uxr_process_acknack>:
 800fe70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe74:	4604      	mov	r4, r0
 800fe76:	460f      	mov	r7, r1
 800fe78:	4610      	mov	r0, r2
 800fe7a:	2101      	movs	r1, #1
 800fe7c:	f000 f940 	bl	8010100 <uxr_seq_num_sub>
 800fe80:	8a61      	ldrh	r1, [r4, #18]
 800fe82:	f000 f93d 	bl	8010100 <uxr_seq_num_sub>
 800fe86:	b1d8      	cbz	r0, 800fec0 <uxr_process_acknack+0x50>
 800fe88:	4606      	mov	r6, r0
 800fe8a:	f04f 0800 	mov.w	r8, #0
 800fe8e:	2101      	movs	r1, #1
 800fe90:	8a60      	ldrh	r0, [r4, #18]
 800fe92:	f000 f931 	bl	80100f8 <uxr_seq_num_add>
 800fe96:	8923      	ldrh	r3, [r4, #8]
 800fe98:	6861      	ldr	r1, [r4, #4]
 800fe9a:	f108 0801 	add.w	r8, r8, #1
 800fe9e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800fea2:	6825      	ldr	r5, [r4, #0]
 800fea4:	4546      	cmp	r6, r8
 800fea6:	8260      	strh	r0, [r4, #18]
 800fea8:	fbb0 f2f3 	udiv	r2, r0, r3
 800feac:	fbb1 f1f3 	udiv	r1, r1, r3
 800feb0:	fb03 0312 	mls	r3, r3, r2, r0
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	fb03 f301 	mul.w	r3, r3, r1
 800feba:	f845 c003 	str.w	ip, [r5, r3]
 800febe:	d1e6      	bne.n	800fe8e <uxr_process_acknack+0x1e>
 800fec0:	3f00      	subs	r7, #0
 800fec2:	f04f 0300 	mov.w	r3, #0
 800fec6:	bf18      	it	ne
 800fec8:	2701      	movne	r7, #1
 800feca:	f884 3020 	strb.w	r3, [r4, #32]
 800fece:	f884 7021 	strb.w	r7, [r4, #33]	@ 0x21
 800fed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed6:	bf00      	nop

0800fed8 <uxr_is_output_up_to_date>:
 800fed8:	8a01      	ldrh	r1, [r0, #16]
 800feda:	8a40      	ldrh	r0, [r0, #18]
 800fedc:	b508      	push	{r3, lr}
 800fede:	f000 f913 	bl	8010108 <uxr_seq_num_cmp>
 800fee2:	fab0 f080 	clz	r0, r0
 800fee6:	0940      	lsrs	r0, r0, #5
 800fee8:	bd08      	pop	{r3, pc}
 800feea:	bf00      	nop

0800feec <get_available_free_slots>:
 800feec:	8901      	ldrh	r1, [r0, #8]
 800feee:	b1d9      	cbz	r1, 800ff28 <get_available_free_slots+0x3c>
 800fef0:	4603      	mov	r3, r0
 800fef2:	b4f0      	push	{r4, r5, r6, r7}
 800fef4:	6845      	ldr	r5, [r0, #4]
 800fef6:	2400      	movs	r4, #0
 800fef8:	6807      	ldr	r7, [r0, #0]
 800fefa:	4622      	mov	r2, r4
 800fefc:	4620      	mov	r0, r4
 800fefe:	7b1e      	ldrb	r6, [r3, #12]
 800ff00:	fbb5 f5f1 	udiv	r5, r5, r1
 800ff04:	fbb2 f3f1 	udiv	r3, r2, r1
 800ff08:	fb01 2313 	mls	r3, r1, r3, r2
 800ff0c:	3401      	adds	r4, #1
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	b2a2      	uxth	r2, r4
 800ff12:	fb05 7303 	mla	r3, r5, r3, r7
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	429e      	cmp	r6, r3
 800ff1a:	d101      	bne.n	800ff20 <get_available_free_slots+0x34>
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	b280      	uxth	r0, r0
 800ff20:	428a      	cmp	r2, r1
 800ff22:	d3ef      	bcc.n	800ff04 <get_available_free_slots+0x18>
 800ff24:	bcf0      	pop	{r4, r5, r6, r7}
 800ff26:	4770      	bx	lr
 800ff28:	4608      	mov	r0, r1
 800ff2a:	4770      	bx	lr

0800ff2c <uxr_buffer_cancel_data>:
 800ff2c:	b570      	push	{r4, r5, r6, lr}
 800ff2e:	2308      	movs	r3, #8
 800ff30:	b094      	sub	sp, #80	@ 0x50
 800ff32:	2400      	movs	r4, #0
 800ff34:	2601      	movs	r6, #1
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff3a:	9205      	str	r2, [sp, #20]
 800ff3c:	4605      	mov	r5, r0
 800ff3e:	9103      	str	r1, [sp, #12]
 800ff40:	f8ad 401c 	strh.w	r4, [sp, #28]
 800ff44:	f88d 401e 	strb.w	r4, [sp, #30]
 800ff48:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 800ff4c:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 800ff50:	f88d 6024 	strb.w	r6, [sp, #36]	@ 0x24
 800ff54:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800ff58:	2210      	movs	r2, #16
 800ff5a:	f7fb fb6b 	bl	800b634 <uxr_prepare_stream_to_write_submessage>
 800ff5e:	b918      	cbnz	r0, 800ff68 <uxr_buffer_cancel_data+0x3c>
 800ff60:	4604      	mov	r4, r0
 800ff62:	4620      	mov	r0, r4
 800ff64:	b014      	add	sp, #80	@ 0x50
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	9905      	ldr	r1, [sp, #20]
 800ff6a:	aa06      	add	r2, sp, #24
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	f7fb fc9d 	bl	800b8ac <uxr_init_base_object_request>
 800ff72:	4604      	mov	r4, r0
 800ff74:	a906      	add	r1, sp, #24
 800ff76:	a80c      	add	r0, sp, #48	@ 0x30
 800ff78:	f7fc fe9e 	bl	800ccb8 <uxr_serialize_READ_DATA_Payload>
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	b014      	add	sp, #80	@ 0x50
 800ff80:	bd70      	pop	{r4, r5, r6, pc}
 800ff82:	bf00      	nop

0800ff84 <read_submessage_format>:
 800ff84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff88:	b095      	sub	sp, #84	@ 0x54
 800ff8a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 800ff8e:	b113      	cbz	r3, 800ff96 <read_submessage_format+0x12>
 800ff90:	b015      	add	sp, #84	@ 0x54
 800ff92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff96:	460c      	mov	r4, r1
 800ff98:	4690      	mov	r8, r2
 800ff9a:	461d      	mov	r5, r3
 800ff9c:	4606      	mov	r6, r0
 800ff9e:	a80c      	add	r0, sp, #48	@ 0x30
 800ffa0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ffa4:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	@ 0x70
 800ffa8:	1a52      	subs	r2, r2, r1
 800ffaa:	e9cd 7304 	strd	r7, r3, [sp, #16]
 800ffae:	f89d 7076 	ldrb.w	r7, [sp, #118]	@ 0x76
 800ffb2:	f7fa fa1b 	bl	800a3ec <ucdr_init_buffer>
 800ffb6:	a80c      	add	r0, sp, #48	@ 0x30
 800ffb8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ffbc:	f7fa f9ec 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 800ffc0:	69e3      	ldr	r3, [r4, #28]
 800ffc2:	b17b      	cbz	r3, 800ffe4 <read_submessage_format+0x60>
 800ffc4:	2f07      	cmp	r7, #7
 800ffc6:	751d      	strb	r5, [r3, #20]
 800ffc8:	d03a      	beq.n	8010040 <read_submessage_format+0xbc>
 800ffca:	2f08      	cmp	r7, #8
 800ffcc:	d029      	beq.n	8010022 <read_submessage_format+0x9e>
 800ffce:	2f06      	cmp	r7, #6
 800ffd0:	d00e      	beq.n	800fff0 <read_submessage_format+0x6c>
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	751a      	strb	r2, [r3, #20]
 800ffd6:	4641      	mov	r1, r8
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f7fa fa5b 	bl	800a494 <ucdr_advance_buffer>
 800ffde:	b015      	add	sp, #84	@ 0x54
 800ffe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffe4:	2f07      	cmp	r7, #7
 800ffe6:	d02b      	beq.n	8010040 <read_submessage_format+0xbc>
 800ffe8:	2f08      	cmp	r7, #8
 800ffea:	d01a      	beq.n	8010022 <read_submessage_format+0x9e>
 800ffec:	2f06      	cmp	r7, #6
 800ffee:	d1f2      	bne.n	800ffd6 <read_submessage_format+0x52>
 800fff0:	f8d6 5088 	ldr.w	r5, [r6, #136]	@ 0x88
 800fff4:	b195      	cbz	r5, 801001c <read_submessage_format+0x98>
 800fff6:	2106      	movs	r1, #6
 800fff8:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800fffc:	464a      	mov	r2, r9
 800fffe:	4630      	mov	r0, r6
 8010000:	f88d 1016 	strb.w	r1, [sp, #22]
 8010004:	a90c      	add	r1, sp, #48	@ 0x30
 8010006:	9302      	str	r3, [sp, #8]
 8010008:	9100      	str	r1, [sp, #0]
 801000a:	9b04      	ldr	r3, [sp, #16]
 801000c:	9905      	ldr	r1, [sp, #20]
 801000e:	f8cd 8004 	str.w	r8, [sp, #4]
 8010012:	47a8      	blx	r5
 8010014:	2201      	movs	r2, #1
 8010016:	69e3      	ldr	r3, [r4, #28]
 8010018:	f886 20b4 	strb.w	r2, [r6, #180]	@ 0xb4
 801001c:	2b00      	cmp	r3, #0
 801001e:	d1d8      	bne.n	800ffd2 <read_submessage_format+0x4e>
 8010020:	e7d9      	b.n	800ffd6 <read_submessage_format+0x52>
 8010022:	f8d6 20a4 	ldr.w	r2, [r6, #164]	@ 0xa4
 8010026:	2a00      	cmp	r2, #0
 8010028:	d0f8      	beq.n	801001c <read_submessage_format+0x98>
 801002a:	a80c      	add	r0, sp, #48	@ 0x30
 801002c:	a906      	add	r1, sp, #24
 801002e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010030:	f7fc feea 	bl	800ce08 <uxr_deserialize_SampleIdentity>
 8010034:	2800      	cmp	r0, #0
 8010036:	d13c      	bne.n	80100b2 <read_submessage_format+0x12e>
 8010038:	69e3      	ldr	r3, [r4, #28]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d1c9      	bne.n	800ffd2 <read_submessage_format+0x4e>
 801003e:	e7ca      	b.n	800ffd6 <read_submessage_format+0x52>
 8010040:	f8d6 20ac 	ldr.w	r2, [r6, #172]	@ 0xac
 8010044:	b132      	cbz	r2, 8010054 <read_submessage_format+0xd0>
 8010046:	a906      	add	r1, sp, #24
 8010048:	a80c      	add	r0, sp, #48	@ 0x30
 801004a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801004c:	f7fc fbb6 	bl	800c7bc <uxr_deserialize_BaseObjectRequest>
 8010050:	b930      	cbnz	r0, 8010060 <read_submessage_format+0xdc>
 8010052:	69e3      	ldr	r3, [r4, #28]
 8010054:	68a2      	ldr	r2, [r4, #8]
 8010056:	4442      	add	r2, r8
 8010058:	60a2      	str	r2, [r4, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1b9      	bne.n	800ffd2 <read_submessage_format+0x4e>
 801005e:	e7ba      	b.n	800ffd6 <read_submessage_format+0x52>
 8010060:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010062:	a80c      	add	r0, sp, #48	@ 0x30
 8010064:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010066:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010068:	1aed      	subs	r5, r5, r3
 801006a:	1a52      	subs	r2, r2, r1
 801006c:	4445      	add	r5, r8
 801006e:	f7fa f9bd 	bl	800a3ec <ucdr_init_buffer>
 8010072:	a80c      	add	r0, sp, #48	@ 0x30
 8010074:	b2ad      	uxth	r5, r5
 8010076:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801007a:	f7fa f98d 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 801007e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010082:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010086:	2107      	movs	r1, #7
 8010088:	f8d6 70b0 	ldr.w	r7, [r6, #176]	@ 0xb0
 801008c:	464a      	mov	r2, r9
 801008e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010092:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8010096:	a90c      	add	r1, sp, #48	@ 0x30
 8010098:	9501      	str	r5, [sp, #4]
 801009a:	b29b      	uxth	r3, r3
 801009c:	9702      	str	r7, [sp, #8]
 801009e:	9100      	str	r1, [sp, #0]
 80100a0:	4630      	mov	r0, r6
 80100a2:	9905      	ldr	r1, [sp, #20]
 80100a4:	f8d6 50ac 	ldr.w	r5, [r6, #172]	@ 0xac
 80100a8:	47a8      	blx	r5
 80100aa:	2301      	movs	r3, #1
 80100ac:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80100b0:	e7cf      	b.n	8010052 <read_submessage_format+0xce>
 80100b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80100b4:	a80c      	add	r0, sp, #48	@ 0x30
 80100b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80100b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80100ba:	1aed      	subs	r5, r5, r3
 80100bc:	1a52      	subs	r2, r2, r1
 80100be:	4445      	add	r5, r8
 80100c0:	f7fa f994 	bl	800a3ec <ucdr_init_buffer>
 80100c4:	a80c      	add	r0, sp, #48	@ 0x30
 80100c6:	b2ad      	uxth	r5, r5
 80100c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80100cc:	f7fa f964 	bl	800a398 <ucdr_set_on_full_buffer_callback>
 80100d0:	2208      	movs	r2, #8
 80100d2:	f8d6 70a8 	ldr.w	r7, [r6, #168]	@ 0xa8
 80100d6:	a90c      	add	r1, sp, #48	@ 0x30
 80100d8:	f88d 2016 	strb.w	r2, [sp, #22]
 80100dc:	ab06      	add	r3, sp, #24
 80100de:	9100      	str	r1, [sp, #0]
 80100e0:	464a      	mov	r2, r9
 80100e2:	9501      	str	r5, [sp, #4]
 80100e4:	4630      	mov	r0, r6
 80100e6:	9702      	str	r7, [sp, #8]
 80100e8:	9905      	ldr	r1, [sp, #20]
 80100ea:	f8d6 50a4 	ldr.w	r5, [r6, #164]	@ 0xa4
 80100ee:	47a8      	blx	r5
 80100f0:	2301      	movs	r3, #1
 80100f2:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80100f6:	e79f      	b.n	8010038 <read_submessage_format+0xb4>

080100f8 <uxr_seq_num_add>:
 80100f8:	4408      	add	r0, r1
 80100fa:	b280      	uxth	r0, r0
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop

08010100 <uxr_seq_num_sub>:
 8010100:	1a40      	subs	r0, r0, r1
 8010102:	b280      	uxth	r0, r0
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop

08010108 <uxr_seq_num_cmp>:
 8010108:	4288      	cmp	r0, r1
 801010a:	d011      	beq.n	8010130 <uxr_seq_num_cmp+0x28>
 801010c:	d309      	bcc.n	8010122 <uxr_seq_num_cmp+0x1a>
 801010e:	4288      	cmp	r0, r1
 8010110:	d910      	bls.n	8010134 <uxr_seq_num_cmp+0x2c>
 8010112:	1a40      	subs	r0, r0, r1
 8010114:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010118:	bfd4      	ite	le
 801011a:	2001      	movle	r0, #1
 801011c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8010120:	4770      	bx	lr
 8010122:	1a0b      	subs	r3, r1, r0
 8010124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010128:	daf1      	bge.n	801010e <uxr_seq_num_cmp+0x6>
 801012a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801012e:	4770      	bx	lr
 8010130:	2000      	movs	r0, #0
 8010132:	4770      	bx	lr
 8010134:	2001      	movs	r0, #1
 8010136:	4770      	bx	lr

08010138 <uxr_init_framing_io>:
 8010138:	2300      	movs	r3, #0
 801013a:	7041      	strb	r1, [r0, #1]
 801013c:	7003      	strb	r3, [r0, #0]
 801013e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop

08010144 <uxr_write_framed_msg>:
 8010144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010148:	4604      	mov	r4, r0
 801014a:	4617      	mov	r7, r2
 801014c:	460e      	mov	r6, r1
 801014e:	b083      	sub	sp, #12
 8010150:	7862      	ldrb	r2, [r4, #1]
 8010152:	207e      	movs	r0, #126	@ 0x7e
 8010154:	469b      	mov	fp, r3
 8010156:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801015a:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801015e:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
 8010162:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8010166:	2901      	cmp	r1, #1
 8010168:	f240 8112 	bls.w	8010390 <uxr_write_framed_msg+0x24c>
 801016c:	f1a0 057d 	sub.w	r5, r0, #125	@ 0x7d
 8010170:	2102      	movs	r1, #2
 8010172:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8010176:	2d01      	cmp	r5, #1
 8010178:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801017c:	d952      	bls.n	8010224 <uxr_write_framed_msg+0xe0>
 801017e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010180:	2103      	movs	r1, #3
 8010182:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8010186:	b2dd      	uxtb	r5, r3
 8010188:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801018c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8010190:	2a01      	cmp	r2, #1
 8010192:	d95e      	bls.n	8010252 <uxr_write_framed_msg+0x10e>
 8010194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010196:	1862      	adds	r2, r4, r1
 8010198:	3101      	adds	r1, #1
 801019a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801019e:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80101a2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80101a6:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80101aa:	2a01      	cmp	r2, #1
 80101ac:	d963      	bls.n	8010276 <uxr_write_framed_msg+0x132>
 80101ae:	1c4a      	adds	r2, r1, #1
 80101b0:	4421      	add	r1, r4
 80101b2:	b2d2      	uxtb	r2, r2
 80101b4:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80101b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d068      	beq.n	8010292 <uxr_write_framed_msg+0x14e>
 80101c0:	f04f 0800 	mov.w	r8, #0
 80101c4:	46c1      	mov	r9, r8
 80101c6:	e016      	b.n	80101f6 <uxr_write_framed_msg+0xb2>
 80101c8:	2a29      	cmp	r2, #41	@ 0x29
 80101ca:	d866      	bhi.n	801029a <uxr_write_framed_msg+0x156>
 80101cc:	18a0      	adds	r0, r4, r2
 80101ce:	3201      	adds	r2, #1
 80101d0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80101d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80101d8:	ea88 0101 	eor.w	r1, r8, r1
 80101dc:	4b7d      	ldr	r3, [pc, #500]	@ (80103d4 <uxr_write_framed_msg+0x290>)
 80101de:	f109 0901 	add.w	r9, r9, #1
 80101e2:	b2c9      	uxtb	r1, r1
 80101e4:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80101e8:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80101ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101ee:	454b      	cmp	r3, r9
 80101f0:	d967      	bls.n	80102c2 <uxr_write_framed_msg+0x17e>
 80101f2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80101f6:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80101fa:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80101fe:	2801      	cmp	r0, #1
 8010200:	d8e2      	bhi.n	80101c8 <uxr_write_framed_msg+0x84>
 8010202:	1c50      	adds	r0, r2, #1
 8010204:	b2c0      	uxtb	r0, r0
 8010206:	2829      	cmp	r0, #41	@ 0x29
 8010208:	d847      	bhi.n	801029a <uxr_write_framed_msg+0x156>
 801020a:	18a5      	adds	r5, r4, r2
 801020c:	f081 0020 	eor.w	r0, r1, #32
 8010210:	3202      	adds	r2, #2
 8010212:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010216:	f885 0039 	strb.w	r0, [r5, #57]	@ 0x39
 801021a:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801021e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010222:	e7d9      	b.n	80101d8 <uxr_write_framed_msg+0x94>
 8010224:	460a      	mov	r2, r1
 8010226:	f04f 0c03 	mov.w	ip, #3
 801022a:	2104      	movs	r1, #4
 801022c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801022e:	4422      	add	r2, r4
 8010230:	44a4      	add	ip, r4
 8010232:	f080 0020 	eor.w	r0, r0, #32
 8010236:	b2dd      	uxtb	r5, r3
 8010238:	f04f 087d 	mov.w	r8, #125	@ 0x7d
 801023c:	f1a5 0e7d 	sub.w	lr, r5, #125	@ 0x7d
 8010240:	f882 8038 	strb.w	r8, [r2, #56]	@ 0x38
 8010244:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8010248:	f1be 0f01 	cmp.w	lr, #1
 801024c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8010250:	d8a0      	bhi.n	8010194 <uxr_write_framed_msg+0x50>
 8010252:	1862      	adds	r2, r4, r1
 8010254:	207d      	movs	r0, #125	@ 0x7d
 8010256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010258:	f085 0520 	eor.w	r5, r5, #32
 801025c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8010260:	3102      	adds	r1, #2
 8010262:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8010266:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801026a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801026e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8010272:	2a01      	cmp	r2, #1
 8010274:	d89b      	bhi.n	80101ae <uxr_write_framed_msg+0x6a>
 8010276:	1c8a      	adds	r2, r1, #2
 8010278:	f080 0020 	eor.w	r0, r0, #32
 801027c:	4421      	add	r1, r4
 801027e:	257d      	movs	r5, #125	@ 0x7d
 8010280:	b2d2      	uxtb	r2, r2
 8010282:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 8010286:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801028a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801028e:	2b00      	cmp	r3, #0
 8010290:	d196      	bne.n	80101c0 <uxr_write_framed_msg+0x7c>
 8010292:	4619      	mov	r1, r3
 8010294:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010298:	e019      	b.n	80102ce <uxr_write_framed_msg+0x18a>
 801029a:	2500      	movs	r5, #0
 801029c:	e000      	b.n	80102a0 <uxr_write_framed_msg+0x15c>
 801029e:	b160      	cbz	r0, 80102ba <uxr_write_framed_msg+0x176>
 80102a0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80102a4:	1b52      	subs	r2, r2, r5
 80102a6:	4653      	mov	r3, sl
 80102a8:	4638      	mov	r0, r7
 80102aa:	4421      	add	r1, r4
 80102ac:	47b0      	blx	r6
 80102ae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80102b2:	4405      	add	r5, r0
 80102b4:	4295      	cmp	r5, r2
 80102b6:	d3f2      	bcc.n	801029e <uxr_write_framed_msg+0x15a>
 80102b8:	d065      	beq.n	8010386 <uxr_write_framed_msg+0x242>
 80102ba:	2000      	movs	r0, #0
 80102bc:	b003      	add	sp, #12
 80102be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c2:	fa5f f188 	uxtb.w	r1, r8
 80102c6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80102ca:	f8ad 8004 	strh.w	r8, [sp, #4]
 80102ce:	f04f 0900 	mov.w	r9, #0
 80102d2:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 80102d6:	46c8      	mov	r8, r9
 80102d8:	e012      	b.n	8010300 <uxr_write_framed_msg+0x1bc>
 80102da:	2a29      	cmp	r2, #41	@ 0x29
 80102dc:	d823      	bhi.n	8010326 <uxr_write_framed_msg+0x1e2>
 80102de:	18a3      	adds	r3, r4, r2
 80102e0:	3201      	adds	r2, #1
 80102e2:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 80102e6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80102ea:	f109 0901 	add.w	r9, r9, #1
 80102ee:	f1b9 0f02 	cmp.w	r9, #2
 80102f2:	d02c      	beq.n	801034e <uxr_write_framed_msg+0x20a>
 80102f4:	ab02      	add	r3, sp, #8
 80102f6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80102fa:	444b      	add	r3, r9
 80102fc:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8010300:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8010304:	2b01      	cmp	r3, #1
 8010306:	d8e8      	bhi.n	80102da <uxr_write_framed_msg+0x196>
 8010308:	1c53      	adds	r3, r2, #1
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b29      	cmp	r3, #41	@ 0x29
 801030e:	d80a      	bhi.n	8010326 <uxr_write_framed_msg+0x1e2>
 8010310:	18a3      	adds	r3, r4, r2
 8010312:	f081 0120 	eor.w	r1, r1, #32
 8010316:	3202      	adds	r2, #2
 8010318:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801031c:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8010320:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010324:	e7e1      	b.n	80102ea <uxr_write_framed_msg+0x1a6>
 8010326:	2500      	movs	r5, #0
 8010328:	e001      	b.n	801032e <uxr_write_framed_msg+0x1ea>
 801032a:	2800      	cmp	r0, #0
 801032c:	d0c5      	beq.n	80102ba <uxr_write_framed_msg+0x176>
 801032e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010332:	1b52      	subs	r2, r2, r5
 8010334:	4653      	mov	r3, sl
 8010336:	4638      	mov	r0, r7
 8010338:	4421      	add	r1, r4
 801033a:	47b0      	blx	r6
 801033c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010340:	4405      	add	r5, r0
 8010342:	4295      	cmp	r5, r2
 8010344:	d3f1      	bcc.n	801032a <uxr_write_framed_msg+0x1e6>
 8010346:	d1b8      	bne.n	80102ba <uxr_write_framed_msg+0x176>
 8010348:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801034c:	e7d2      	b.n	80102f4 <uxr_write_framed_msg+0x1b0>
 801034e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010352:	b19a      	cbz	r2, 801037c <uxr_write_framed_msg+0x238>
 8010354:	2500      	movs	r5, #0
 8010356:	e001      	b.n	801035c <uxr_write_framed_msg+0x218>
 8010358:	2800      	cmp	r0, #0
 801035a:	d0ae      	beq.n	80102ba <uxr_write_framed_msg+0x176>
 801035c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010360:	1b52      	subs	r2, r2, r5
 8010362:	4653      	mov	r3, sl
 8010364:	4638      	mov	r0, r7
 8010366:	4421      	add	r1, r4
 8010368:	47b0      	blx	r6
 801036a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801036e:	4405      	add	r5, r0
 8010370:	4295      	cmp	r5, r2
 8010372:	d3f1      	bcc.n	8010358 <uxr_write_framed_msg+0x214>
 8010374:	d1a1      	bne.n	80102ba <uxr_write_framed_msg+0x176>
 8010376:	2300      	movs	r3, #0
 8010378:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801037c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801037e:	b298      	uxth	r0, r3
 8010380:	b003      	add	sp, #12
 8010382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010386:	f04f 0300 	mov.w	r3, #0
 801038a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801038e:	e72d      	b.n	80101ec <uxr_write_framed_msg+0xa8>
 8010390:	f1a0 057d 	sub.w	r5, r0, #125	@ 0x7d
 8010394:	f082 0220 	eor.w	r2, r2, #32
 8010398:	2103      	movs	r1, #3
 801039a:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801039e:	2d01      	cmp	r5, #1
 80103a0:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80103a4:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80103a8:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 80103ac:	d804      	bhi.n	80103b8 <uxr_write_framed_msg+0x274>
 80103ae:	460a      	mov	r2, r1
 80103b0:	f04f 0c04 	mov.w	ip, #4
 80103b4:	2105      	movs	r1, #5
 80103b6:	e739      	b.n	801022c <uxr_write_framed_msg+0xe8>
 80103b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103ba:	2104      	movs	r1, #4
 80103bc:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80103c0:	b2dd      	uxtb	r5, r3
 80103c2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80103c6:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80103ca:	2a01      	cmp	r2, #1
 80103cc:	f63f aee2 	bhi.w	8010194 <uxr_write_framed_msg+0x50>
 80103d0:	e73f      	b.n	8010252 <uxr_write_framed_msg+0x10e>
 80103d2:	bf00      	nop
 80103d4:	08015e24 	.word	0x08015e24

080103d8 <uxr_framing_read_transport>:
 80103d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103dc:	4604      	mov	r4, r0
 80103de:	b085      	sub	sp, #20
 80103e0:	4692      	mov	sl, r2
 80103e2:	4689      	mov	r9, r1
 80103e4:	461d      	mov	r5, r3
 80103e6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80103e8:	f7fb fc0c 	bl	800bc04 <uxr_millis>
 80103ec:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80103f0:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 80103f4:	4680      	mov	r8, r0
 80103f6:	42ba      	cmp	r2, r7
 80103f8:	d05e      	beq.n	80104b8 <uxr_framing_read_transport+0xe0>
 80103fa:	d817      	bhi.n	801042c <uxr_framing_read_transport+0x54>
 80103fc:	1e7b      	subs	r3, r7, #1
 80103fe:	2700      	movs	r7, #0
 8010400:	1a9a      	subs	r2, r3, r2
 8010402:	b2d2      	uxtb	r2, r2
 8010404:	42b2      	cmp	r2, r6
 8010406:	d81a      	bhi.n	801043e <uxr_framing_read_transport+0x66>
 8010408:	19d3      	adds	r3, r2, r7
 801040a:	42b3      	cmp	r3, r6
 801040c:	d851      	bhi.n	80104b2 <uxr_framing_read_transport+0xda>
 801040e:	b9d2      	cbnz	r2, 8010446 <uxr_framing_read_transport+0x6e>
 8010410:	2600      	movs	r6, #0
 8010412:	f7fb fbf7 	bl	800bc04 <uxr_millis>
 8010416:	682b      	ldr	r3, [r5, #0]
 8010418:	eba0 0008 	sub.w	r0, r0, r8
 801041c:	1a1b      	subs	r3, r3, r0
 801041e:	4630      	mov	r0, r6
 8010420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010424:	602b      	str	r3, [r5, #0]
 8010426:	b005      	add	sp, #20
 8010428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042c:	2f00      	cmp	r7, #0
 801042e:	d05f      	beq.n	80104f0 <uxr_framing_read_transport+0x118>
 8010430:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8010434:	3f01      	subs	r7, #1
 8010436:	b2d2      	uxtb	r2, r2
 8010438:	b2ff      	uxtb	r7, r7
 801043a:	42b2      	cmp	r2, r6
 801043c:	d9e4      	bls.n	8010408 <uxr_framing_read_transport+0x30>
 801043e:	b2f2      	uxtb	r2, r6
 8010440:	2700      	movs	r7, #0
 8010442:	2a00      	cmp	r2, #0
 8010444:	d0e4      	beq.n	8010410 <uxr_framing_read_transport+0x38>
 8010446:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801044a:	4650      	mov	r0, sl
 801044c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801044e:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8010452:	3102      	adds	r1, #2
 8010454:	9203      	str	r2, [sp, #12]
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	4421      	add	r1, r4
 801045a:	682b      	ldr	r3, [r5, #0]
 801045c:	47c8      	blx	r9
 801045e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010462:	4a25      	ldr	r2, [pc, #148]	@ (80104f8 <uxr_framing_read_transport+0x120>)
 8010464:	4606      	mov	r6, r0
 8010466:	4403      	add	r3, r0
 8010468:	0859      	lsrs	r1, r3, #1
 801046a:	fba2 0101 	umull	r0, r1, r2, r1
 801046e:	0889      	lsrs	r1, r1, #2
 8010470:	fb0b 3111 	mls	r1, fp, r1, r3
 8010474:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8010478:	2e00      	cmp	r6, #0
 801047a:	d0c9      	beq.n	8010410 <uxr_framing_read_transport+0x38>
 801047c:	9a03      	ldr	r2, [sp, #12]
 801047e:	4296      	cmp	r6, r2
 8010480:	d1c7      	bne.n	8010412 <uxr_framing_read_transport+0x3a>
 8010482:	2f00      	cmp	r7, #0
 8010484:	d0c5      	beq.n	8010412 <uxr_framing_read_transport+0x3a>
 8010486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010488:	3102      	adds	r1, #2
 801048a:	463a      	mov	r2, r7
 801048c:	4650      	mov	r0, sl
 801048e:	4421      	add	r1, r4
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	2300      	movs	r3, #0
 8010494:	47c8      	blx	r9
 8010496:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801049a:	4917      	ldr	r1, [pc, #92]	@ (80104f8 <uxr_framing_read_transport+0x120>)
 801049c:	4406      	add	r6, r0
 801049e:	181a      	adds	r2, r3, r0
 80104a0:	0853      	lsrs	r3, r2, #1
 80104a2:	fba1 1303 	umull	r1, r3, r1, r3
 80104a6:	089b      	lsrs	r3, r3, #2
 80104a8:	fb0b 2313 	mls	r3, fp, r3, r2
 80104ac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80104b0:	e7af      	b.n	8010412 <uxr_framing_read_transport+0x3a>
 80104b2:	1ab7      	subs	r7, r6, r2
 80104b4:	b2ff      	uxtb	r7, r7
 80104b6:	e7aa      	b.n	801040e <uxr_framing_read_transport+0x36>
 80104b8:	2300      	movs	r3, #0
 80104ba:	2e28      	cmp	r6, #40	@ 0x28
 80104bc:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80104be:	d9be      	bls.n	801043e <uxr_framing_read_transport+0x66>
 80104c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104c2:	2229      	movs	r2, #41	@ 0x29
 80104c4:	1ca1      	adds	r1, r4, #2
 80104c6:	4650      	mov	r0, sl
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	682b      	ldr	r3, [r5, #0]
 80104cc:	47c8      	blx	r9
 80104ce:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80104d2:	4606      	mov	r6, r0
 80104d4:	4808      	ldr	r0, [pc, #32]	@ (80104f8 <uxr_framing_read_transport+0x120>)
 80104d6:	212a      	movs	r1, #42	@ 0x2a
 80104d8:	4432      	add	r2, r6
 80104da:	0853      	lsrs	r3, r2, #1
 80104dc:	fba0 0303 	umull	r0, r3, r0, r3
 80104e0:	089b      	lsrs	r3, r3, #2
 80104e2:	fb01 2313 	mls	r3, r1, r3, r2
 80104e6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80104ea:	2e00      	cmp	r6, #0
 80104ec:	d191      	bne.n	8010412 <uxr_framing_read_transport+0x3a>
 80104ee:	e78f      	b.n	8010410 <uxr_framing_read_transport+0x38>
 80104f0:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 80104f4:	b2d2      	uxtb	r2, r2
 80104f6:	e785      	b.n	8010404 <uxr_framing_read_transport+0x2c>
 80104f8:	30c30c31 	.word	0x30c30c31

080104fc <uxr_read_framed_msg>:
 80104fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010500:	461f      	mov	r7, r3
 8010502:	4604      	mov	r4, r0
 8010504:	4689      	mov	r9, r1
 8010506:	4692      	mov	sl, r2
 8010508:	ed2d 8b02 	vpush	{d8}
 801050c:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8010510:	b083      	sub	sp, #12
 8010512:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8010516:	429d      	cmp	r5, r3
 8010518:	f000 818a 	beq.w	8010830 <uxr_read_framed_msg+0x334>
 801051c:	7823      	ldrb	r3, [r4, #0]
 801051e:	ee08 9a10 	vmov	s16, r9
 8010522:	4ecd      	ldr	r6, [pc, #820]	@ (8010858 <uxr_read_framed_msg+0x35c>)
 8010524:	f8df 8334 	ldr.w	r8, [pc, #820]	@ 801085c <uxr_read_framed_msg+0x360>
 8010528:	2b07      	cmp	r3, #7
 801052a:	d8fd      	bhi.n	8010528 <uxr_read_framed_msg+0x2c>
 801052c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010530:	00fb011c 	.word	0x00fb011c
 8010534:	00ba00d9 	.word	0x00ba00d9
 8010538:	0053008d 	.word	0x0053008d
 801053c:	00080034 	.word	0x00080034
 8010540:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010544:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010548:	4298      	cmp	r0, r3
 801054a:	f000 814a 	beq.w	80107e2 <uxr_read_framed_msg+0x2e6>
 801054e:	18e2      	adds	r2, r4, r3
 8010550:	7891      	ldrb	r1, [r2, #2]
 8010552:	297d      	cmp	r1, #125	@ 0x7d
 8010554:	f000 81c3 	beq.w	80108de <uxr_read_framed_msg+0x3e2>
 8010558:	3301      	adds	r3, #1
 801055a:	202a      	movs	r0, #42	@ 0x2a
 801055c:	297e      	cmp	r1, #126	@ 0x7e
 801055e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8010562:	fba6 5202 	umull	r5, r2, r6, r2
 8010566:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801056a:	fb00 3312 	mls	r3, r0, r2, r3
 801056e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010572:	f000 825b 	beq.w	8010a2c <uxr_read_framed_msg+0x530>
 8010576:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010578:	2000      	movs	r0, #0
 801057a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801057c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010580:	7020      	strb	r0, [r4, #0]
 8010582:	b29b      	uxth	r3, r3
 8010584:	429a      	cmp	r2, r3
 8010586:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010588:	f000 8182 	beq.w	8010890 <uxr_read_framed_msg+0x394>
 801058c:	2000      	movs	r0, #0
 801058e:	b003      	add	sp, #12
 8010590:	ecbd 8b02 	vpop	{d8}
 8010594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010598:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801059c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80105a0:	4298      	cmp	r0, r3
 80105a2:	f000 812e 	beq.w	8010802 <uxr_read_framed_msg+0x306>
 80105a6:	18e2      	adds	r2, r4, r3
 80105a8:	7891      	ldrb	r1, [r2, #2]
 80105aa:	297d      	cmp	r1, #125	@ 0x7d
 80105ac:	f000 817a 	beq.w	80108a4 <uxr_read_framed_msg+0x3a8>
 80105b0:	3301      	adds	r3, #1
 80105b2:	202a      	movs	r0, #42	@ 0x2a
 80105b4:	297e      	cmp	r1, #126	@ 0x7e
 80105b6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80105ba:	fba6 5202 	umull	r5, r2, r6, r2
 80105be:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80105c2:	fb00 3312 	mls	r3, r0, r2, r3
 80105c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80105ca:	f000 821e 	beq.w	8010a0a <uxr_read_framed_msg+0x50e>
 80105ce:	2307      	movs	r3, #7
 80105d0:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80105d2:	7023      	strb	r3, [r4, #0]
 80105d4:	e7a8      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 80105d6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80105d8:	f8b4 b030 	ldrh.w	fp, [r4, #48]	@ 0x30
 80105dc:	459b      	cmp	fp, r3
 80105de:	d92f      	bls.n	8010640 <uxr_read_framed_msg+0x144>
 80105e0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80105e4:	e020      	b.n	8010628 <uxr_read_framed_msg+0x12c>
 80105e6:	fba6 5101 	umull	r5, r1, r6, r1
 80105ea:	7895      	ldrb	r5, [r2, #2]
 80105ec:	088a      	lsrs	r2, r1, #2
 80105ee:	2d7d      	cmp	r5, #125	@ 0x7d
 80105f0:	fb0c 9212 	mls	r2, ip, r2, r9
 80105f4:	f000 80d4 	beq.w	80107a0 <uxr_read_framed_msg+0x2a4>
 80105f8:	2d7e      	cmp	r5, #126	@ 0x7e
 80105fa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80105fe:	f000 80cc 	beq.w	801079a <uxr_read_framed_msg+0x29e>
 8010602:	54fd      	strb	r5, [r7, r3]
 8010604:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8010606:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010608:	ea80 0105 	eor.w	r1, r0, r5
 801060c:	f8b4 b030 	ldrh.w	fp, [r4, #48]	@ 0x30
 8010610:	3301      	adds	r3, #1
 8010612:	b2c9      	uxtb	r1, r1
 8010614:	b29b      	uxth	r3, r3
 8010616:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 801061a:	455b      	cmp	r3, fp
 801061c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801061e:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8010622:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010624:	f080 811c 	bcs.w	8010860 <uxr_read_framed_msg+0x364>
 8010628:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801062c:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 8010630:	f100 0901 	add.w	r9, r0, #1
 8010634:	1822      	adds	r2, r4, r0
 8010636:	4586      	cmp	lr, r0
 8010638:	ea4f 0159 	mov.w	r1, r9, lsr #1
 801063c:	d1d3      	bne.n	80105e6 <uxr_read_framed_msg+0xea>
 801063e:	459b      	cmp	fp, r3
 8010640:	f040 8112 	bne.w	8010868 <uxr_read_framed_msg+0x36c>
 8010644:	2306      	movs	r3, #6
 8010646:	7023      	strb	r3, [r4, #0]
 8010648:	e76e      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 801064a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801064e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010652:	4298      	cmp	r0, r3
 8010654:	f000 80c5 	beq.w	80107e2 <uxr_read_framed_msg+0x2e6>
 8010658:	18e2      	adds	r2, r4, r3
 801065a:	7891      	ldrb	r1, [r2, #2]
 801065c:	297d      	cmp	r1, #125	@ 0x7d
 801065e:	f000 819a 	beq.w	8010996 <uxr_read_framed_msg+0x49a>
 8010662:	3301      	adds	r3, #1
 8010664:	202a      	movs	r0, #42	@ 0x2a
 8010666:	297e      	cmp	r1, #126	@ 0x7e
 8010668:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801066c:	fba6 5202 	umull	r5, r2, r6, r2
 8010670:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010674:	fb00 3212 	mls	r2, r0, r2, r3
 8010678:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801067c:	f000 81d6 	beq.w	8010a2c <uxr_read_framed_msg+0x530>
 8010680:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8010682:	2000      	movs	r0, #0
 8010684:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010688:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801068a:	8660      	strh	r0, [r4, #50]	@ 0x32
 801068c:	b29b      	uxth	r3, r3
 801068e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8010690:	428b      	cmp	r3, r1
 8010692:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010694:	f240 80dd 	bls.w	8010852 <uxr_read_framed_msg+0x356>
 8010698:	7020      	strb	r0, [r4, #0]
 801069a:	b003      	add	sp, #12
 801069c:	ecbd 8b02 	vpop	{d8}
 80106a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80106a8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80106ac:	4298      	cmp	r0, r3
 80106ae:	f000 80a8 	beq.w	8010802 <uxr_read_framed_msg+0x306>
 80106b2:	18e2      	adds	r2, r4, r3
 80106b4:	7891      	ldrb	r1, [r2, #2]
 80106b6:	297d      	cmp	r1, #125	@ 0x7d
 80106b8:	f000 818a 	beq.w	80109d0 <uxr_read_framed_msg+0x4d4>
 80106bc:	3301      	adds	r3, #1
 80106be:	202a      	movs	r0, #42	@ 0x2a
 80106c0:	297e      	cmp	r1, #126	@ 0x7e
 80106c2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80106c6:	fba6 5202 	umull	r5, r2, r6, r2
 80106ca:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80106ce:	fb00 3312 	mls	r3, r0, r2, r3
 80106d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80106d6:	f000 8198 	beq.w	8010a0a <uxr_read_framed_msg+0x50e>
 80106da:	2304      	movs	r3, #4
 80106dc:	8621      	strh	r1, [r4, #48]	@ 0x30
 80106de:	7023      	strb	r3, [r4, #0]
 80106e0:	e722      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 80106e2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80106e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80106ea:	4290      	cmp	r0, r2
 80106ec:	f000 80af 	beq.w	801084e <uxr_read_framed_msg+0x352>
 80106f0:	18a3      	adds	r3, r4, r2
 80106f2:	7899      	ldrb	r1, [r3, #2]
 80106f4:	297d      	cmp	r1, #125	@ 0x7d
 80106f6:	f000 8110 	beq.w	801091a <uxr_read_framed_msg+0x41e>
 80106fa:	3201      	adds	r2, #1
 80106fc:	232a      	movs	r3, #42	@ 0x2a
 80106fe:	297e      	cmp	r1, #126	@ 0x7e
 8010700:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8010704:	fba6 5000 	umull	r5, r0, r6, r0
 8010708:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801070c:	fb03 2210 	mls	r2, r3, r0, r2
 8010710:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010714:	f000 818c 	beq.w	8010a30 <uxr_read_framed_msg+0x534>
 8010718:	7863      	ldrb	r3, [r4, #1]
 801071a:	428b      	cmp	r3, r1
 801071c:	bf0c      	ite	eq
 801071e:	2303      	moveq	r3, #3
 8010720:	2300      	movne	r3, #0
 8010722:	7023      	strb	r3, [r4, #0]
 8010724:	e700      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 8010726:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801072a:	2200      	movs	r2, #0
 801072c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010730:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8010734:	4299      	cmp	r1, r3
 8010736:	d066      	beq.n	8010806 <uxr_read_framed_msg+0x30a>
 8010738:	18e2      	adds	r2, r4, r3
 801073a:	7892      	ldrb	r2, [r2, #2]
 801073c:	2a7d      	cmp	r2, #125	@ 0x7d
 801073e:	f000 8108 	beq.w	8010952 <uxr_read_framed_msg+0x456>
 8010742:	1c59      	adds	r1, r3, #1
 8010744:	202a      	movs	r0, #42	@ 0x2a
 8010746:	2a7e      	cmp	r2, #126	@ 0x7e
 8010748:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801074c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8010750:	fba6 5303 	umull	r5, r3, r6, r3
 8010754:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8010758:	fb00 1313 	mls	r3, r0, r3, r1
 801075c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010760:	d051      	beq.n	8010806 <uxr_read_framed_msg+0x30a>
 8010762:	2302      	movs	r3, #2
 8010764:	7023      	strb	r3, [r4, #0]
 8010766:	e6df      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 8010768:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801076c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8010770:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010774:	1c59      	adds	r1, r3, #1
 8010776:	459c      	cmp	ip, r3
 8010778:	eb04 0003 	add.w	r0, r4, r3
 801077c:	ea4f 0251 	mov.w	r2, r1, lsr #1
 8010780:	f43f af04 	beq.w	801058c <uxr_read_framed_msg+0x90>
 8010784:	fba6 2302 	umull	r2, r3, r6, r2
 8010788:	7882      	ldrb	r2, [r0, #2]
 801078a:	089b      	lsrs	r3, r3, #2
 801078c:	2a7e      	cmp	r2, #126	@ 0x7e
 801078e:	fb0e 1313 	mls	r3, lr, r3, r1
 8010792:	b2db      	uxtb	r3, r3
 8010794:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010798:	d1ec      	bne.n	8010774 <uxr_read_framed_msg+0x278>
 801079a:	2301      	movs	r3, #1
 801079c:	7023      	strb	r3, [r4, #0]
 801079e:	e6c3      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 80107a0:	1c45      	adds	r5, r0, #1
 80107a2:	3002      	adds	r0, #2
 80107a4:	086a      	lsrs	r2, r5, #1
 80107a6:	0841      	lsrs	r1, r0, #1
 80107a8:	fba6 9202 	umull	r9, r2, r6, r2
 80107ac:	fba6 9101 	umull	r9, r1, r6, r1
 80107b0:	0892      	lsrs	r2, r2, #2
 80107b2:	0889      	lsrs	r1, r1, #2
 80107b4:	fb0c 5212 	mls	r2, ip, r2, r5
 80107b8:	fb0c 0111 	mls	r1, ip, r1, r0
 80107bc:	18a0      	adds	r0, r4, r2
 80107be:	b2d2      	uxtb	r2, r2
 80107c0:	4596      	cmp	lr, r2
 80107c2:	f43f af3c 	beq.w	801063e <uxr_read_framed_msg+0x142>
 80107c6:	7885      	ldrb	r5, [r0, #2]
 80107c8:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 80107cc:	2d7e      	cmp	r5, #126	@ 0x7e
 80107ce:	f085 0520 	eor.w	r5, r5, #32
 80107d2:	f47f af16 	bne.w	8010602 <uxr_read_framed_msg+0x106>
 80107d6:	459b      	cmp	fp, r3
 80107d8:	f43f af34 	beq.w	8010644 <uxr_read_framed_msg+0x148>
 80107dc:	2301      	movs	r3, #1
 80107de:	7023      	strb	r3, [r4, #0]
 80107e0:	e6a2      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 80107e2:	2101      	movs	r1, #1
 80107e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107e6:	4652      	mov	r2, sl
 80107e8:	9101      	str	r1, [sp, #4]
 80107ea:	4620      	mov	r0, r4
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	ee18 1a10 	vmov	r1, s16
 80107f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107f4:	f7ff fdf0 	bl	80103d8 <uxr_framing_read_transport>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	f43f aec7 	beq.w	801058c <uxr_read_framed_msg+0x90>
 80107fe:	7823      	ldrb	r3, [r4, #0]
 8010800:	e692      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 8010802:	2102      	movs	r1, #2
 8010804:	e7ee      	b.n	80107e4 <uxr_read_framed_msg+0x2e8>
 8010806:	2104      	movs	r1, #4
 8010808:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801080a:	4652      	mov	r2, sl
 801080c:	4620      	mov	r0, r4
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	9101      	str	r1, [sp, #4]
 8010812:	ee18 1a10 	vmov	r1, s16
 8010816:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010818:	f7ff fdde 	bl	80103d8 <uxr_framing_read_transport>
 801081c:	2800      	cmp	r0, #0
 801081e:	d1ee      	bne.n	80107fe <uxr_read_framed_msg+0x302>
 8010820:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8010824:	387e      	subs	r0, #126	@ 0x7e
 8010826:	bf18      	it	ne
 8010828:	2001      	movne	r0, #1
 801082a:	2800      	cmp	r0, #0
 801082c:	d0e7      	beq.n	80107fe <uxr_read_framed_msg+0x302>
 801082e:	e6ad      	b.n	801058c <uxr_read_framed_msg+0x90>
 8010830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010832:	2505      	movs	r5, #5
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	9501      	str	r5, [sp, #4]
 8010838:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801083a:	f7ff fdcd 	bl	80103d8 <uxr_framing_read_transport>
 801083e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010842:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010846:	429a      	cmp	r2, r3
 8010848:	f43f aea0 	beq.w	801058c <uxr_read_framed_msg+0x90>
 801084c:	e666      	b.n	801051c <uxr_read_framed_msg+0x20>
 801084e:	2103      	movs	r1, #3
 8010850:	e7c8      	b.n	80107e4 <uxr_read_framed_msg+0x2e8>
 8010852:	2305      	movs	r3, #5
 8010854:	7023      	strb	r3, [r4, #0]
 8010856:	e667      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 8010858:	30c30c31 	.word	0x30c30c31
 801085c:	08015e24 	.word	0x08015e24
 8010860:	f43f aef0 	beq.w	8010644 <uxr_read_framed_msg+0x148>
 8010864:	2d7e      	cmp	r5, #126	@ 0x7e
 8010866:	d098      	beq.n	801079a <uxr_read_framed_msg+0x29e>
 8010868:	ebab 0b03 	sub.w	fp, fp, r3
 801086c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801086e:	4652      	mov	r2, sl
 8010870:	ee18 1a10 	vmov	r1, s16
 8010874:	f10b 0502 	add.w	r5, fp, #2
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	4620      	mov	r0, r4
 801087c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801087e:	9501      	str	r5, [sp, #4]
 8010880:	f7ff fdaa 	bl	80103d8 <uxr_framing_read_transport>
 8010884:	fab0 f080 	clz	r0, r0
 8010888:	0940      	lsrs	r0, r0, #5
 801088a:	2800      	cmp	r0, #0
 801088c:	d0b7      	beq.n	80107fe <uxr_read_framed_msg+0x302>
 801088e:	e67d      	b.n	801058c <uxr_read_framed_msg+0x90>
 8010890:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010894:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010896:	7013      	strb	r3, [r2, #0]
 8010898:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801089a:	b003      	add	sp, #12
 801089c:	ecbd 8b02 	vpop	{d8}
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	1c59      	adds	r1, r3, #1
 80108a6:	252a      	movs	r5, #42	@ 0x2a
 80108a8:	084a      	lsrs	r2, r1, #1
 80108aa:	fba6 c202 	umull	ip, r2, r6, r2
 80108ae:	0892      	lsrs	r2, r2, #2
 80108b0:	fb05 1212 	mls	r2, r5, r2, r1
 80108b4:	b2d1      	uxtb	r1, r2
 80108b6:	4288      	cmp	r0, r1
 80108b8:	d0a3      	beq.n	8010802 <uxr_read_framed_msg+0x306>
 80108ba:	3302      	adds	r3, #2
 80108bc:	4422      	add	r2, r4
 80108be:	0858      	lsrs	r0, r3, #1
 80108c0:	7891      	ldrb	r1, [r2, #2]
 80108c2:	fba6 0200 	umull	r0, r2, r6, r0
 80108c6:	297e      	cmp	r1, #126	@ 0x7e
 80108c8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80108cc:	fb05 3312 	mls	r3, r5, r2, r3
 80108d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80108d4:	f000 8099 	beq.w	8010a0a <uxr_read_framed_msg+0x50e>
 80108d8:	f081 0120 	eor.w	r1, r1, #32
 80108dc:	e677      	b.n	80105ce <uxr_read_framed_msg+0xd2>
 80108de:	1c59      	adds	r1, r3, #1
 80108e0:	252a      	movs	r5, #42	@ 0x2a
 80108e2:	084a      	lsrs	r2, r1, #1
 80108e4:	fba6 c202 	umull	ip, r2, r6, r2
 80108e8:	0892      	lsrs	r2, r2, #2
 80108ea:	fb05 1212 	mls	r2, r5, r2, r1
 80108ee:	b2d1      	uxtb	r1, r2
 80108f0:	4288      	cmp	r0, r1
 80108f2:	f43f af76 	beq.w	80107e2 <uxr_read_framed_msg+0x2e6>
 80108f6:	3302      	adds	r3, #2
 80108f8:	4422      	add	r2, r4
 80108fa:	0858      	lsrs	r0, r3, #1
 80108fc:	7891      	ldrb	r1, [r2, #2]
 80108fe:	fba6 0200 	umull	r0, r2, r6, r0
 8010902:	297e      	cmp	r1, #126	@ 0x7e
 8010904:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010908:	fb05 3312 	mls	r3, r5, r2, r3
 801090c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010910:	f000 808c 	beq.w	8010a2c <uxr_read_framed_msg+0x530>
 8010914:	f081 0120 	eor.w	r1, r1, #32
 8010918:	e62d      	b.n	8010576 <uxr_read_framed_msg+0x7a>
 801091a:	1c51      	adds	r1, r2, #1
 801091c:	252a      	movs	r5, #42	@ 0x2a
 801091e:	084b      	lsrs	r3, r1, #1
 8010920:	fba6 c303 	umull	ip, r3, r6, r3
 8010924:	089b      	lsrs	r3, r3, #2
 8010926:	fb05 1313 	mls	r3, r5, r3, r1
 801092a:	b2d9      	uxtb	r1, r3
 801092c:	4288      	cmp	r0, r1
 801092e:	d08e      	beq.n	801084e <uxr_read_framed_msg+0x352>
 8010930:	3202      	adds	r2, #2
 8010932:	4423      	add	r3, r4
 8010934:	0850      	lsrs	r0, r2, #1
 8010936:	789b      	ldrb	r3, [r3, #2]
 8010938:	fba6 1000 	umull	r1, r0, r6, r0
 801093c:	2b7e      	cmp	r3, #126	@ 0x7e
 801093e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8010942:	fb05 2210 	mls	r2, r5, r0, r2
 8010946:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801094a:	d071      	beq.n	8010a30 <uxr_read_framed_msg+0x534>
 801094c:	f083 0120 	eor.w	r1, r3, #32
 8010950:	e6e2      	b.n	8010718 <uxr_read_framed_msg+0x21c>
 8010952:	1c5d      	adds	r5, r3, #1
 8010954:	202a      	movs	r0, #42	@ 0x2a
 8010956:	086a      	lsrs	r2, r5, #1
 8010958:	fba6 c202 	umull	ip, r2, r6, r2
 801095c:	0892      	lsrs	r2, r2, #2
 801095e:	fb00 5212 	mls	r2, r0, r2, r5
 8010962:	b2d5      	uxtb	r5, r2
 8010964:	42a9      	cmp	r1, r5
 8010966:	f43f af4e 	beq.w	8010806 <uxr_read_framed_msg+0x30a>
 801096a:	3302      	adds	r3, #2
 801096c:	4422      	add	r2, r4
 801096e:	0859      	lsrs	r1, r3, #1
 8010970:	7895      	ldrb	r5, [r2, #2]
 8010972:	fba6 1201 	umull	r1, r2, r6, r1
 8010976:	2d7e      	cmp	r5, #126	@ 0x7e
 8010978:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 801097c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010980:	fb00 3312 	mls	r3, r0, r2, r3
 8010984:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010988:	f43f af3d 	beq.w	8010806 <uxr_read_framed_msg+0x30a>
 801098c:	f085 0520 	eor.w	r5, r5, #32
 8010990:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8010994:	e6e5      	b.n	8010762 <uxr_read_framed_msg+0x266>
 8010996:	1c59      	adds	r1, r3, #1
 8010998:	252a      	movs	r5, #42	@ 0x2a
 801099a:	084a      	lsrs	r2, r1, #1
 801099c:	fba6 c202 	umull	ip, r2, r6, r2
 80109a0:	0892      	lsrs	r2, r2, #2
 80109a2:	fb05 1212 	mls	r2, r5, r2, r1
 80109a6:	b2d1      	uxtb	r1, r2
 80109a8:	4288      	cmp	r0, r1
 80109aa:	f43f af1a 	beq.w	80107e2 <uxr_read_framed_msg+0x2e6>
 80109ae:	3302      	adds	r3, #2
 80109b0:	4422      	add	r2, r4
 80109b2:	0858      	lsrs	r0, r3, #1
 80109b4:	7891      	ldrb	r1, [r2, #2]
 80109b6:	fba6 0200 	umull	r0, r2, r6, r0
 80109ba:	297e      	cmp	r1, #126	@ 0x7e
 80109bc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80109c0:	fb05 3312 	mls	r3, r5, r2, r3
 80109c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80109c8:	d030      	beq.n	8010a2c <uxr_read_framed_msg+0x530>
 80109ca:	f081 0120 	eor.w	r1, r1, #32
 80109ce:	e657      	b.n	8010680 <uxr_read_framed_msg+0x184>
 80109d0:	1c59      	adds	r1, r3, #1
 80109d2:	252a      	movs	r5, #42	@ 0x2a
 80109d4:	084a      	lsrs	r2, r1, #1
 80109d6:	fba6 c202 	umull	ip, r2, r6, r2
 80109da:	0892      	lsrs	r2, r2, #2
 80109dc:	fb05 1212 	mls	r2, r5, r2, r1
 80109e0:	b2d1      	uxtb	r1, r2
 80109e2:	4288      	cmp	r0, r1
 80109e4:	f43f af0d 	beq.w	8010802 <uxr_read_framed_msg+0x306>
 80109e8:	3302      	adds	r3, #2
 80109ea:	4422      	add	r2, r4
 80109ec:	0858      	lsrs	r0, r3, #1
 80109ee:	7891      	ldrb	r1, [r2, #2]
 80109f0:	fba6 0200 	umull	r0, r2, r6, r0
 80109f4:	297e      	cmp	r1, #126	@ 0x7e
 80109f6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80109fa:	fb05 3312 	mls	r3, r5, r2, r3
 80109fe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a02:	d002      	beq.n	8010a0a <uxr_read_framed_msg+0x50e>
 8010a04:	f081 0120 	eor.w	r1, r1, #32
 8010a08:	e667      	b.n	80106da <uxr_read_framed_msg+0x1de>
 8010a0a:	2102      	movs	r1, #2
 8010a0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010a0e:	4652      	mov	r2, sl
 8010a10:	9101      	str	r1, [sp, #4]
 8010a12:	4620      	mov	r0, r4
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	ee18 1a10 	vmov	r1, s16
 8010a1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a1c:	f7ff fcdc 	bl	80103d8 <uxr_framing_read_transport>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	f47f aeec 	bne.w	80107fe <uxr_read_framed_msg+0x302>
 8010a26:	2301      	movs	r3, #1
 8010a28:	7023      	strb	r3, [r4, #0]
 8010a2a:	e57d      	b.n	8010528 <uxr_read_framed_msg+0x2c>
 8010a2c:	2101      	movs	r1, #1
 8010a2e:	e7ed      	b.n	8010a0c <uxr_read_framed_msg+0x510>
 8010a30:	2103      	movs	r1, #3
 8010a32:	e7eb      	b.n	8010a0c <uxr_read_framed_msg+0x510>

08010a34 <rcl_get_default_domain_id>:
 8010a34:	b530      	push	{r4, r5, lr}
 8010a36:	2300      	movs	r3, #0
 8010a38:	b083      	sub	sp, #12
 8010a3a:	9300      	str	r3, [sp, #0]
 8010a3c:	b1d0      	cbz	r0, 8010a74 <rcl_get_default_domain_id+0x40>
 8010a3e:	4604      	mov	r4, r0
 8010a40:	4669      	mov	r1, sp
 8010a42:	4815      	ldr	r0, [pc, #84]	@ (8010a98 <rcl_get_default_domain_id+0x64>)
 8010a44:	f7fd fb6a 	bl	800e11c <rcutils_get_env>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	b110      	cbz	r0, 8010a52 <rcl_get_default_domain_id+0x1e>
 8010a4c:	2001      	movs	r0, #1
 8010a4e:	b003      	add	sp, #12
 8010a50:	bd30      	pop	{r4, r5, pc}
 8010a52:	9b00      	ldr	r3, [sp, #0]
 8010a54:	b18b      	cbz	r3, 8010a7a <rcl_get_default_domain_id+0x46>
 8010a56:	7818      	ldrb	r0, [r3, #0]
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d0f8      	beq.n	8010a4e <rcl_get_default_domain_id+0x1a>
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	a901      	add	r1, sp, #4
 8010a60:	9201      	str	r2, [sp, #4]
 8010a62:	f000 fc3d 	bl	80112e0 <strtoul>
 8010a66:	4605      	mov	r5, r0
 8010a68:	b150      	cbz	r0, 8010a80 <rcl_get_default_domain_id+0x4c>
 8010a6a:	1c43      	adds	r3, r0, #1
 8010a6c:	d00d      	beq.n	8010a8a <rcl_get_default_domain_id+0x56>
 8010a6e:	2000      	movs	r0, #0
 8010a70:	6025      	str	r5, [r4, #0]
 8010a72:	e7ec      	b.n	8010a4e <rcl_get_default_domain_id+0x1a>
 8010a74:	200b      	movs	r0, #11
 8010a76:	b003      	add	sp, #12
 8010a78:	bd30      	pop	{r4, r5, pc}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	b003      	add	sp, #12
 8010a7e:	bd30      	pop	{r4, r5, pc}
 8010a80:	9b01      	ldr	r3, [sp, #4]
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d0f2      	beq.n	8010a6e <rcl_get_default_domain_id+0x3a>
 8010a88:	e7e0      	b.n	8010a4c <rcl_get_default_domain_id+0x18>
 8010a8a:	f001 fcb1 	bl	80123f0 <__errno>
 8010a8e:	6803      	ldr	r3, [r0, #0]
 8010a90:	2b22      	cmp	r3, #34	@ 0x22
 8010a92:	d1ec      	bne.n	8010a6e <rcl_get_default_domain_id+0x3a>
 8010a94:	e7da      	b.n	8010a4c <rcl_get_default_domain_id+0x18>
 8010a96:	bf00      	nop
 8010a98:	08016024 	.word	0x08016024

08010a9c <rcl_get_zero_initialized_guard_condition>:
 8010a9c:	4a03      	ldr	r2, [pc, #12]	@ (8010aac <rcl_get_zero_initialized_guard_condition+0x10>)
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	4770      	bx	lr
 8010aac:	08016034 	.word	0x08016034

08010ab0 <rcl_guard_condition_init_from_rmw>:
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	4606      	mov	r6, r0
 8010aba:	4688      	mov	r8, r1
 8010abc:	4617      	mov	r7, r2
 8010abe:	ac0c      	add	r4, sp, #48	@ 0x30
 8010ac0:	ad01      	add	r5, sp, #4
 8010ac2:	f844 3f04 	str.w	r3, [r4, #4]!
 8010ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ac8:	6824      	ldr	r4, [r4, #0]
 8010aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010acc:	a801      	add	r0, sp, #4
 8010ace:	602c      	str	r4, [r5, #0]
 8010ad0:	f7f7 fe2e 	bl	8008730 <rcutils_allocator_is_valid>
 8010ad4:	f080 0001 	eor.w	r0, r0, #1
 8010ad8:	f010 0fff 	tst.w	r0, #255	@ 0xff
 8010adc:	d123      	bne.n	8010b26 <rcl_guard_condition_init_from_rmw+0x76>
 8010ade:	b316      	cbz	r6, 8010b26 <rcl_guard_condition_init_from_rmw+0x76>
 8010ae0:	6874      	ldr	r4, [r6, #4]
 8010ae2:	b9cc      	cbnz	r4, 8010b18 <rcl_guard_condition_init_from_rmw+0x68>
 8010ae4:	b1ff      	cbz	r7, 8010b26 <rcl_guard_condition_init_from_rmw+0x76>
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	f7fc f9d6 	bl	800ce98 <rcl_context_is_valid>
 8010aec:	b1e8      	cbz	r0, 8010b2a <rcl_guard_condition_init_from_rmw+0x7a>
 8010aee:	9b01      	ldr	r3, [sp, #4]
 8010af0:	201c      	movs	r0, #28
 8010af2:	9905      	ldr	r1, [sp, #20]
 8010af4:	4798      	blx	r3
 8010af6:	4605      	mov	r5, r0
 8010af8:	6070      	str	r0, [r6, #4]
 8010afa:	b318      	cbz	r0, 8010b44 <rcl_guard_condition_init_from_rmw+0x94>
 8010afc:	f1b8 0f00 	cmp.w	r8, #0
 8010b00:	d015      	beq.n	8010b2e <rcl_guard_condition_init_from_rmw+0x7e>
 8010b02:	f8c0 8000 	str.w	r8, [r0]
 8010b06:	7104      	strb	r4, [r0, #4]
 8010b08:	ac01      	add	r4, sp, #4
 8010b0a:	3508      	adds	r5, #8
 8010b0c:	2600      	movs	r6, #0
 8010b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b10:	6824      	ldr	r4, [r4, #0]
 8010b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b14:	602c      	str	r4, [r5, #0]
 8010b16:	e000      	b.n	8010b1a <rcl_guard_condition_init_from_rmw+0x6a>
 8010b18:	2664      	movs	r6, #100	@ 0x64
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	b006      	add	sp, #24
 8010b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b22:	b002      	add	sp, #8
 8010b24:	4770      	bx	lr
 8010b26:	260b      	movs	r6, #11
 8010b28:	e7f7      	b.n	8010b1a <rcl_guard_condition_init_from_rmw+0x6a>
 8010b2a:	2665      	movs	r6, #101	@ 0x65
 8010b2c:	e7f5      	b.n	8010b1a <rcl_guard_condition_init_from_rmw+0x6a>
 8010b2e:	6838      	ldr	r0, [r7, #0]
 8010b30:	3028      	adds	r0, #40	@ 0x28
 8010b32:	f000 f979 	bl	8010e28 <rmw_create_guard_condition>
 8010b36:	6028      	str	r0, [r5, #0]
 8010b38:	6875      	ldr	r5, [r6, #4]
 8010b3a:	682c      	ldr	r4, [r5, #0]
 8010b3c:	b124      	cbz	r4, 8010b48 <rcl_guard_condition_init_from_rmw+0x98>
 8010b3e:	2301      	movs	r3, #1
 8010b40:	712b      	strb	r3, [r5, #4]
 8010b42:	e7e1      	b.n	8010b08 <rcl_guard_condition_init_from_rmw+0x58>
 8010b44:	260a      	movs	r6, #10
 8010b46:	e7e8      	b.n	8010b1a <rcl_guard_condition_init_from_rmw+0x6a>
 8010b48:	4628      	mov	r0, r5
 8010b4a:	9b02      	ldr	r3, [sp, #8]
 8010b4c:	9905      	ldr	r1, [sp, #20]
 8010b4e:	4798      	blx	r3
 8010b50:	6074      	str	r4, [r6, #4]
 8010b52:	2601      	movs	r6, #1
 8010b54:	e7e1      	b.n	8010b1a <rcl_guard_condition_init_from_rmw+0x6a>
 8010b56:	bf00      	nop

08010b58 <rcl_guard_condition_fini>:
 8010b58:	b570      	push	{r4, r5, r6, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	b1f0      	cbz	r0, 8010b9c <rcl_guard_condition_fini+0x44>
 8010b5e:	6843      	ldr	r3, [r0, #4]
 8010b60:	4604      	mov	r4, r0
 8010b62:	b163      	cbz	r3, 8010b7e <rcl_guard_condition_fini+0x26>
 8010b64:	6818      	ldr	r0, [r3, #0]
 8010b66:	68de      	ldr	r6, [r3, #12]
 8010b68:	6999      	ldr	r1, [r3, #24]
 8010b6a:	b160      	cbz	r0, 8010b86 <rcl_guard_condition_fini+0x2e>
 8010b6c:	791d      	ldrb	r5, [r3, #4]
 8010b6e:	b965      	cbnz	r5, 8010b8a <rcl_guard_condition_fini+0x32>
 8010b70:	4618      	mov	r0, r3
 8010b72:	47b0      	blx	r6
 8010b74:	2300      	movs	r3, #0
 8010b76:	4628      	mov	r0, r5
 8010b78:	6063      	str	r3, [r4, #4]
 8010b7a:	b002      	add	sp, #8
 8010b7c:	bd70      	pop	{r4, r5, r6, pc}
 8010b7e:	461d      	mov	r5, r3
 8010b80:	4628      	mov	r0, r5
 8010b82:	b002      	add	sp, #8
 8010b84:	bd70      	pop	{r4, r5, r6, pc}
 8010b86:	4605      	mov	r5, r0
 8010b88:	e7f2      	b.n	8010b70 <rcl_guard_condition_fini+0x18>
 8010b8a:	9101      	str	r1, [sp, #4]
 8010b8c:	f000 f962 	bl	8010e54 <rmw_destroy_guard_condition>
 8010b90:	1e05      	subs	r5, r0, #0
 8010b92:	6863      	ldr	r3, [r4, #4]
 8010b94:	9901      	ldr	r1, [sp, #4]
 8010b96:	bf18      	it	ne
 8010b98:	2501      	movne	r5, #1
 8010b9a:	e7e9      	b.n	8010b70 <rcl_guard_condition_fini+0x18>
 8010b9c:	250b      	movs	r5, #11
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	b002      	add	sp, #8
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}

08010ba4 <rcl_guard_condition_get_default_options>:
 8010ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba8:	b086      	sub	sp, #24
 8010baa:	4c09      	ldr	r4, [pc, #36]	@ (8010bd0 <rcl_guard_condition_get_default_options+0x2c>)
 8010bac:	4680      	mov	r8, r0
 8010bae:	466d      	mov	r5, sp
 8010bb0:	4668      	mov	r0, sp
 8010bb2:	f7f7 fdaf 	bl	8008714 <rcutils_get_default_allocator>
 8010bb6:	4627      	mov	r7, r4
 8010bb8:	4646      	mov	r6, r8
 8010bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010bbc:	682d      	ldr	r5, [r5, #0]
 8010bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010bc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010bc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010bc4:	4640      	mov	r0, r8
 8010bc6:	6025      	str	r5, [r4, #0]
 8010bc8:	6035      	str	r5, [r6, #0]
 8010bca:	b006      	add	sp, #24
 8010bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd0:	2000c154 	.word	0x2000c154

08010bd4 <on_status>:
 8010bd4:	b082      	sub	sp, #8
 8010bd6:	b002      	add	sp, #8
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop

08010bdc <on_topic>:
 8010bdc:	4a22      	ldr	r2, [pc, #136]	@ (8010c68 <on_topic+0x8c>)
 8010bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010be2:	6812      	ldr	r2, [r2, #0]
 8010be4:	b094      	sub	sp, #80	@ 0x50
 8010be6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010be8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8010bec:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010bee:	9312      	str	r3, [sp, #72]	@ 0x48
 8010bf0:	b3ba      	cbz	r2, 8010c62 <on_topic+0x86>
 8010bf2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8010bf6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8010bfa:	e001      	b.n	8010c00 <on_topic+0x24>
 8010bfc:	6892      	ldr	r2, [r2, #8]
 8010bfe:	b382      	cbz	r2, 8010c62 <on_topic+0x86>
 8010c00:	68d4      	ldr	r4, [r2, #12]
 8010c02:	8aa3      	ldrh	r3, [r4, #20]
 8010c04:	428b      	cmp	r3, r1
 8010c06:	d1f9      	bne.n	8010bfc <on_topic+0x20>
 8010c08:	7da3      	ldrb	r3, [r4, #22]
 8010c0a:	4283      	cmp	r3, r0
 8010c0c:	d1f6      	bne.n	8010bfc <on_topic+0x20>
 8010c0e:	2248      	movs	r2, #72	@ 0x48
 8010c10:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010c14:	4668      	mov	r0, sp
 8010c16:	f001 fc20 	bl	801245a <memcpy>
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8010c20:	f7f8 faf4 	bl	800920c <rmw_uxrce_get_static_input_buffer_for_entity>
 8010c24:	4607      	mov	r7, r0
 8010c26:	b1e0      	cbz	r0, 8010c62 <on_topic+0x86>
 8010c28:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010c2c:	462a      	mov	r2, r5
 8010c2e:	4630      	mov	r0, r6
 8010c30:	f108 0110 	add.w	r1, r8, #16
 8010c34:	f7fe fa90 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 8010c38:	b930      	cbnz	r0, 8010c48 <on_topic+0x6c>
 8010c3a:	4639      	mov	r1, r7
 8010c3c:	480b      	ldr	r0, [pc, #44]	@ (8010c6c <on_topic+0x90>)
 8010c3e:	b014      	add	sp, #80	@ 0x50
 8010c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c44:	f7fd bcfc 	b.w	800e640 <put_memory>
 8010c48:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8010c4c:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8010c50:	f7fe f9aa 	bl	800efa8 <rmw_uros_epoch_nanos>
 8010c54:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 8010c58:	2305      	movs	r3, #5
 8010c5a:	e9c2 0100 	strd	r0, r1, [r2]
 8010c5e:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8010c62:	b014      	add	sp, #80	@ 0x50
 8010c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c68:	2000f55c 	.word	0x2000f55c
 8010c6c:	2000c2f0 	.word	0x2000c2f0

08010c70 <on_request>:
 8010c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c74:	4823      	ldr	r0, [pc, #140]	@ (8010d04 <on_request+0x94>)
 8010c76:	b095      	sub	sp, #84	@ 0x54
 8010c78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010c7a:	6801      	ldr	r1, [r0, #0]
 8010c7c:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8010c80:	f8bd 7074 	ldrh.w	r7, [sp, #116]	@ 0x74
 8010c84:	2900      	cmp	r1, #0
 8010c86:	d039      	beq.n	8010cfc <on_request+0x8c>
 8010c88:	461d      	mov	r5, r3
 8010c8a:	e001      	b.n	8010c90 <on_request+0x20>
 8010c8c:	6889      	ldr	r1, [r1, #8]
 8010c8e:	b3a9      	cbz	r1, 8010cfc <on_request+0x8c>
 8010c90:	68cc      	ldr	r4, [r1, #12]
 8010c92:	8b20      	ldrh	r0, [r4, #24]
 8010c94:	4290      	cmp	r0, r2
 8010c96:	d1f9      	bne.n	8010c8c <on_request+0x1c>
 8010c98:	2248      	movs	r2, #72	@ 0x48
 8010c9a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010c9e:	4668      	mov	r0, sp
 8010ca0:	f001 fbdb 	bl	801245a <memcpy>
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8010caa:	f7f8 faaf 	bl	800920c <rmw_uxrce_get_static_input_buffer_for_entity>
 8010cae:	4606      	mov	r6, r0
 8010cb0:	b320      	cbz	r0, 8010cfc <on_request+0x8c>
 8010cb2:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8010cb6:	463a      	mov	r2, r7
 8010cb8:	4640      	mov	r0, r8
 8010cba:	f109 0110 	add.w	r1, r9, #16
 8010cbe:	f7fe fa4b 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 8010cc2:	b930      	cbnz	r0, 8010cd2 <on_request+0x62>
 8010cc4:	4631      	mov	r1, r6
 8010cc6:	4810      	ldr	r0, [pc, #64]	@ (8010d08 <on_request+0x98>)
 8010cc8:	b015      	add	sp, #84	@ 0x54
 8010cca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cce:	f7fd bcb7 	b.w	800e640 <put_memory>
 8010cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cd4:	f609 0628 	addw	r6, r9, #2088	@ 0x828
 8010cd8:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8010cdc:	f8c9 7810 	str.w	r7, [r9, #2064]	@ 0x810
 8010ce0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010ce2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010ce6:	e886 0003 	stmia.w	r6, {r0, r1}
 8010cea:	f7fe f95d 	bl	800efa8 <rmw_uros_epoch_nanos>
 8010cee:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8010cf2:	2303      	movs	r3, #3
 8010cf4:	e9c2 0100 	strd	r0, r1, [r2]
 8010cf8:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8010cfc:	b015      	add	sp, #84	@ 0x54
 8010cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d02:	bf00      	nop
 8010d04:	2000f54c 	.word	0x2000f54c
 8010d08:	2000c2f0 	.word	0x2000c2f0

08010d0c <on_reply>:
 8010d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d10:	4821      	ldr	r0, [pc, #132]	@ (8010d98 <on_reply+0x8c>)
 8010d12:	b095      	sub	sp, #84	@ 0x54
 8010d14:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010d16:	6801      	ldr	r1, [r0, #0]
 8010d18:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8010d1c:	f8bd 7074 	ldrh.w	r7, [sp, #116]	@ 0x74
 8010d20:	b3b9      	cbz	r1, 8010d92 <on_reply+0x86>
 8010d22:	461d      	mov	r5, r3
 8010d24:	e001      	b.n	8010d2a <on_reply+0x1e>
 8010d26:	6889      	ldr	r1, [r1, #8]
 8010d28:	b399      	cbz	r1, 8010d92 <on_reply+0x86>
 8010d2a:	68cc      	ldr	r4, [r1, #12]
 8010d2c:	8b20      	ldrh	r0, [r4, #24]
 8010d2e:	4290      	cmp	r0, r2
 8010d30:	d1f9      	bne.n	8010d26 <on_reply+0x1a>
 8010d32:	2248      	movs	r2, #72	@ 0x48
 8010d34:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010d38:	4668      	mov	r0, sp
 8010d3a:	f001 fb8e 	bl	801245a <memcpy>
 8010d3e:	4620      	mov	r0, r4
 8010d40:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8010d44:	f7f8 fa62 	bl	800920c <rmw_uxrce_get_static_input_buffer_for_entity>
 8010d48:	4606      	mov	r6, r0
 8010d4a:	b310      	cbz	r0, 8010d92 <on_reply+0x86>
 8010d4c:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8010d50:	463a      	mov	r2, r7
 8010d52:	4640      	mov	r0, r8
 8010d54:	f109 0110 	add.w	r1, r9, #16
 8010d58:	f7fe f9fe 	bl	800f158 <ucdr_deserialize_array_uint8_t>
 8010d5c:	b930      	cbnz	r0, 8010d6c <on_reply+0x60>
 8010d5e:	4631      	mov	r1, r6
 8010d60:	480e      	ldr	r0, [pc, #56]	@ (8010d9c <on_reply+0x90>)
 8010d62:	b015      	add	sp, #84	@ 0x54
 8010d64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d68:	f7fd bc6a 	b.w	800e640 <put_memory>
 8010d6c:	b2aa      	uxth	r2, r5
 8010d6e:	2300      	movs	r3, #0
 8010d70:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 8010d74:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8010d78:	f8c9 7810 	str.w	r7, [r9, #2064]	@ 0x810
 8010d7c:	e9c1 2300 	strd	r2, r3, [r1]
 8010d80:	f7fe f912 	bl	800efa8 <rmw_uros_epoch_nanos>
 8010d84:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8010d88:	2304      	movs	r3, #4
 8010d8a:	e9c2 0100 	strd	r0, r1, [r2]
 8010d8e:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8010d92:	b015      	add	sp, #84	@ 0x54
 8010d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d98:	2000cb80 	.word	0x2000cb80
 8010d9c:	2000c2f0 	.word	0x2000c2f0

08010da0 <rmw_destroy_client>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	b128      	cbz	r0, 8010db0 <rmw_destroy_client+0x10>
 8010da4:	4604      	mov	r4, r0
 8010da6:	6800      	ldr	r0, [r0, #0]
 8010da8:	460d      	mov	r5, r1
 8010daa:	f7f8 faf9 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 8010dae:	b910      	cbnz	r0, 8010db6 <rmw_destroy_client+0x16>
 8010db0:	2401      	movs	r4, #1
 8010db2:	4620      	mov	r0, r4
 8010db4:	bd70      	pop	{r4, r5, r6, pc}
 8010db6:	6863      	ldr	r3, [r4, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d0f9      	beq.n	8010db0 <rmw_destroy_client+0x10>
 8010dbc:	2d00      	cmp	r5, #0
 8010dbe:	d0f7      	beq.n	8010db0 <rmw_destroy_client+0x10>
 8010dc0:	6828      	ldr	r0, [r5, #0]
 8010dc2:	f7f8 faed 	bl	80093a0 <is_uxrce_rmw_identifier_valid>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d0f2      	beq.n	8010db0 <rmw_destroy_client+0x10>
 8010dca:	686e      	ldr	r6, [r5, #4]
 8010dcc:	2e00      	cmp	r6, #0
 8010dce:	d0ef      	beq.n	8010db0 <rmw_destroy_client+0x10>
 8010dd0:	6864      	ldr	r4, [r4, #4]
 8010dd2:	6932      	ldr	r2, [r6, #16]
 8010dd4:	6920      	ldr	r0, [r4, #16]
 8010dd6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010dda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010dde:	6819      	ldr	r1, [r3, #0]
 8010de0:	f7ff f8a4 	bl	800ff2c <uxr_buffer_cancel_data>
 8010de4:	4602      	mov	r2, r0
 8010de6:	6920      	ldr	r0, [r4, #16]
 8010de8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010dec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010df0:	f7f8 fa5c 	bl	80092ac <run_xrce_session>
 8010df4:	6920      	ldr	r0, [r4, #16]
 8010df6:	6932      	ldr	r2, [r6, #16]
 8010df8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010dfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e00:	6819      	ldr	r1, [r3, #0]
 8010e02:	f7f9 fb67 	bl	800a4d4 <uxr_buffer_delete_entity>
 8010e06:	4602      	mov	r2, r0
 8010e08:	6920      	ldr	r0, [r4, #16]
 8010e0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010e0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010e12:	f7f8 fa4b 	bl	80092ac <run_xrce_session>
 8010e16:	4603      	mov	r3, r0
 8010e18:	4628      	mov	r0, r5
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	bf14      	ite	ne
 8010e1e:	2400      	movne	r4, #0
 8010e20:	2402      	moveq	r4, #2
 8010e22:	f7f8 f9d1 	bl	80091c8 <rmw_uxrce_fini_client_memory>
 8010e26:	e7c4      	b.n	8010db2 <rmw_destroy_client+0x12>

08010e28 <rmw_create_guard_condition>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	4808      	ldr	r0, [pc, #32]	@ (8010e50 <rmw_create_guard_condition+0x28>)
 8010e2e:	f7fd fbf7 	bl	800e620 <get_memory>
 8010e32:	4603      	mov	r3, r0
 8010e34:	b148      	cbz	r0, 8010e4a <rmw_create_guard_condition+0x22>
 8010e36:	68c4      	ldr	r4, [r0, #12]
 8010e38:	2300      	movs	r3, #0
 8010e3a:	61e5      	str	r5, [r4, #28]
 8010e3c:	7423      	strb	r3, [r4, #16]
 8010e3e:	f7fd fc13 	bl	800e668 <rmw_get_implementation_identifier>
 8010e42:	f104 0314 	add.w	r3, r4, #20
 8010e46:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	bd38      	pop	{r3, r4, r5, pc}
 8010e4e:	bf00      	nop
 8010e50:	2000f478 	.word	0x2000f478

08010e54 <rmw_destroy_guard_condition>:
 8010e54:	b508      	push	{r3, lr}
 8010e56:	4b08      	ldr	r3, [pc, #32]	@ (8010e78 <rmw_destroy_guard_condition+0x24>)
 8010e58:	6819      	ldr	r1, [r3, #0]
 8010e5a:	b911      	cbnz	r1, 8010e62 <rmw_destroy_guard_condition+0xe>
 8010e5c:	e00a      	b.n	8010e74 <rmw_destroy_guard_condition+0x20>
 8010e5e:	6889      	ldr	r1, [r1, #8]
 8010e60:	b141      	cbz	r1, 8010e74 <rmw_destroy_guard_condition+0x20>
 8010e62:	68cb      	ldr	r3, [r1, #12]
 8010e64:	3314      	adds	r3, #20
 8010e66:	4298      	cmp	r0, r3
 8010e68:	d1f9      	bne.n	8010e5e <rmw_destroy_guard_condition+0xa>
 8010e6a:	4803      	ldr	r0, [pc, #12]	@ (8010e78 <rmw_destroy_guard_condition+0x24>)
 8010e6c:	f7fd fbe8 	bl	800e640 <put_memory>
 8010e70:	2000      	movs	r0, #0
 8010e72:	bd08      	pop	{r3, pc}
 8010e74:	2001      	movs	r0, #1
 8010e76:	bd08      	pop	{r3, pc}
 8010e78:	2000f478 	.word	0x2000f478

08010e7c <calloc>:
 8010e7c:	4b02      	ldr	r3, [pc, #8]	@ (8010e88 <calloc+0xc>)
 8010e7e:	460a      	mov	r2, r1
 8010e80:	4601      	mov	r1, r0
 8010e82:	6818      	ldr	r0, [r3, #0]
 8010e84:	f000 b802 	b.w	8010e8c <_calloc_r>
 8010e88:	20000078 	.word	0x20000078

08010e8c <_calloc_r>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	fba1 5402 	umull	r5, r4, r1, r2
 8010e92:	b93c      	cbnz	r4, 8010ea4 <_calloc_r+0x18>
 8010e94:	4629      	mov	r1, r5
 8010e96:	f000 f887 	bl	8010fa8 <_malloc_r>
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	b928      	cbnz	r0, 8010eaa <_calloc_r+0x1e>
 8010e9e:	2600      	movs	r6, #0
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	bd70      	pop	{r4, r5, r6, pc}
 8010ea4:	220c      	movs	r2, #12
 8010ea6:	6002      	str	r2, [r0, #0]
 8010ea8:	e7f9      	b.n	8010e9e <_calloc_r+0x12>
 8010eaa:	462a      	mov	r2, r5
 8010eac:	4621      	mov	r1, r4
 8010eae:	f001 fa07 	bl	80122c0 <memset>
 8010eb2:	e7f5      	b.n	8010ea0 <_calloc_r+0x14>

08010eb4 <getenv>:
 8010eb4:	b507      	push	{r0, r1, r2, lr}
 8010eb6:	4b04      	ldr	r3, [pc, #16]	@ (8010ec8 <getenv+0x14>)
 8010eb8:	4601      	mov	r1, r0
 8010eba:	aa01      	add	r2, sp, #4
 8010ebc:	6818      	ldr	r0, [r3, #0]
 8010ebe:	f000 f805 	bl	8010ecc <_findenv_r>
 8010ec2:	b003      	add	sp, #12
 8010ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ec8:	20000078 	.word	0x20000078

08010ecc <_findenv_r>:
 8010ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8010f40 <_findenv_r+0x74>
 8010ed4:	4606      	mov	r6, r0
 8010ed6:	4689      	mov	r9, r1
 8010ed8:	4617      	mov	r7, r2
 8010eda:	f002 f8cf 	bl	801307c <__env_lock>
 8010ede:	f8da 4000 	ldr.w	r4, [sl]
 8010ee2:	b134      	cbz	r4, 8010ef2 <_findenv_r+0x26>
 8010ee4:	464b      	mov	r3, r9
 8010ee6:	4698      	mov	r8, r3
 8010ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eec:	b13a      	cbz	r2, 8010efe <_findenv_r+0x32>
 8010eee:	2a3d      	cmp	r2, #61	@ 0x3d
 8010ef0:	d1f9      	bne.n	8010ee6 <_findenv_r+0x1a>
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f002 f8c8 	bl	8013088 <__env_unlock>
 8010ef8:	2000      	movs	r0, #0
 8010efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efe:	eba8 0809 	sub.w	r8, r8, r9
 8010f02:	46a3      	mov	fp, r4
 8010f04:	f854 0b04 	ldr.w	r0, [r4], #4
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d0f2      	beq.n	8010ef2 <_findenv_r+0x26>
 8010f0c:	4642      	mov	r2, r8
 8010f0e:	4649      	mov	r1, r9
 8010f10:	f001 f9eb 	bl	80122ea <strncmp>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d1f4      	bne.n	8010f02 <_findenv_r+0x36>
 8010f18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010f1c:	eb03 0508 	add.w	r5, r3, r8
 8010f20:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010f24:	2b3d      	cmp	r3, #61	@ 0x3d
 8010f26:	d1ec      	bne.n	8010f02 <_findenv_r+0x36>
 8010f28:	f8da 3000 	ldr.w	r3, [sl]
 8010f2c:	ebab 0303 	sub.w	r3, fp, r3
 8010f30:	109b      	asrs	r3, r3, #2
 8010f32:	4630      	mov	r0, r6
 8010f34:	603b      	str	r3, [r7, #0]
 8010f36:	f002 f8a7 	bl	8013088 <__env_unlock>
 8010f3a:	1c68      	adds	r0, r5, #1
 8010f3c:	e7dd      	b.n	8010efa <_findenv_r+0x2e>
 8010f3e:	bf00      	nop
 8010f40:	20000000 	.word	0x20000000

08010f44 <malloc>:
 8010f44:	4b02      	ldr	r3, [pc, #8]	@ (8010f50 <malloc+0xc>)
 8010f46:	4601      	mov	r1, r0
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f000 b82d 	b.w	8010fa8 <_malloc_r>
 8010f4e:	bf00      	nop
 8010f50:	20000078 	.word	0x20000078

08010f54 <free>:
 8010f54:	4b02      	ldr	r3, [pc, #8]	@ (8010f60 <free+0xc>)
 8010f56:	4601      	mov	r1, r0
 8010f58:	6818      	ldr	r0, [r3, #0]
 8010f5a:	f002 b89b 	b.w	8013094 <_free_r>
 8010f5e:	bf00      	nop
 8010f60:	20000078 	.word	0x20000078

08010f64 <sbrk_aligned>:
 8010f64:	b570      	push	{r4, r5, r6, lr}
 8010f66:	4e0f      	ldr	r6, [pc, #60]	@ (8010fa4 <sbrk_aligned+0x40>)
 8010f68:	460c      	mov	r4, r1
 8010f6a:	6831      	ldr	r1, [r6, #0]
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	b911      	cbnz	r1, 8010f76 <sbrk_aligned+0x12>
 8010f70:	f001 fa1c 	bl	80123ac <_sbrk_r>
 8010f74:	6030      	str	r0, [r6, #0]
 8010f76:	4621      	mov	r1, r4
 8010f78:	4628      	mov	r0, r5
 8010f7a:	f001 fa17 	bl	80123ac <_sbrk_r>
 8010f7e:	1c43      	adds	r3, r0, #1
 8010f80:	d103      	bne.n	8010f8a <sbrk_aligned+0x26>
 8010f82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010f86:	4620      	mov	r0, r4
 8010f88:	bd70      	pop	{r4, r5, r6, pc}
 8010f8a:	1cc4      	adds	r4, r0, #3
 8010f8c:	f024 0403 	bic.w	r4, r4, #3
 8010f90:	42a0      	cmp	r0, r4
 8010f92:	d0f8      	beq.n	8010f86 <sbrk_aligned+0x22>
 8010f94:	1a21      	subs	r1, r4, r0
 8010f96:	4628      	mov	r0, r5
 8010f98:	f001 fa08 	bl	80123ac <_sbrk_r>
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	d1f2      	bne.n	8010f86 <sbrk_aligned+0x22>
 8010fa0:	e7ef      	b.n	8010f82 <sbrk_aligned+0x1e>
 8010fa2:	bf00      	nop
 8010fa4:	2000c168 	.word	0x2000c168

08010fa8 <_malloc_r>:
 8010fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fac:	1ccd      	adds	r5, r1, #3
 8010fae:	f025 0503 	bic.w	r5, r5, #3
 8010fb2:	3508      	adds	r5, #8
 8010fb4:	2d0c      	cmp	r5, #12
 8010fb6:	bf38      	it	cc
 8010fb8:	250c      	movcc	r5, #12
 8010fba:	2d00      	cmp	r5, #0
 8010fbc:	4606      	mov	r6, r0
 8010fbe:	db01      	blt.n	8010fc4 <_malloc_r+0x1c>
 8010fc0:	42a9      	cmp	r1, r5
 8010fc2:	d904      	bls.n	8010fce <_malloc_r+0x26>
 8010fc4:	230c      	movs	r3, #12
 8010fc6:	6033      	str	r3, [r6, #0]
 8010fc8:	2000      	movs	r0, #0
 8010fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80110a4 <_malloc_r+0xfc>
 8010fd2:	f000 f869 	bl	80110a8 <__malloc_lock>
 8010fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010fda:	461c      	mov	r4, r3
 8010fdc:	bb44      	cbnz	r4, 8011030 <_malloc_r+0x88>
 8010fde:	4629      	mov	r1, r5
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7ff ffbf 	bl	8010f64 <sbrk_aligned>
 8010fe6:	1c43      	adds	r3, r0, #1
 8010fe8:	4604      	mov	r4, r0
 8010fea:	d158      	bne.n	801109e <_malloc_r+0xf6>
 8010fec:	f8d8 4000 	ldr.w	r4, [r8]
 8010ff0:	4627      	mov	r7, r4
 8010ff2:	2f00      	cmp	r7, #0
 8010ff4:	d143      	bne.n	801107e <_malloc_r+0xd6>
 8010ff6:	2c00      	cmp	r4, #0
 8010ff8:	d04b      	beq.n	8011092 <_malloc_r+0xea>
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	4630      	mov	r0, r6
 8011000:	eb04 0903 	add.w	r9, r4, r3
 8011004:	f001 f9d2 	bl	80123ac <_sbrk_r>
 8011008:	4581      	cmp	r9, r0
 801100a:	d142      	bne.n	8011092 <_malloc_r+0xea>
 801100c:	6821      	ldr	r1, [r4, #0]
 801100e:	1a6d      	subs	r5, r5, r1
 8011010:	4629      	mov	r1, r5
 8011012:	4630      	mov	r0, r6
 8011014:	f7ff ffa6 	bl	8010f64 <sbrk_aligned>
 8011018:	3001      	adds	r0, #1
 801101a:	d03a      	beq.n	8011092 <_malloc_r+0xea>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	442b      	add	r3, r5
 8011020:	6023      	str	r3, [r4, #0]
 8011022:	f8d8 3000 	ldr.w	r3, [r8]
 8011026:	685a      	ldr	r2, [r3, #4]
 8011028:	bb62      	cbnz	r2, 8011084 <_malloc_r+0xdc>
 801102a:	f8c8 7000 	str.w	r7, [r8]
 801102e:	e00f      	b.n	8011050 <_malloc_r+0xa8>
 8011030:	6822      	ldr	r2, [r4, #0]
 8011032:	1b52      	subs	r2, r2, r5
 8011034:	d420      	bmi.n	8011078 <_malloc_r+0xd0>
 8011036:	2a0b      	cmp	r2, #11
 8011038:	d917      	bls.n	801106a <_malloc_r+0xc2>
 801103a:	1961      	adds	r1, r4, r5
 801103c:	42a3      	cmp	r3, r4
 801103e:	6025      	str	r5, [r4, #0]
 8011040:	bf18      	it	ne
 8011042:	6059      	strne	r1, [r3, #4]
 8011044:	6863      	ldr	r3, [r4, #4]
 8011046:	bf08      	it	eq
 8011048:	f8c8 1000 	streq.w	r1, [r8]
 801104c:	5162      	str	r2, [r4, r5]
 801104e:	604b      	str	r3, [r1, #4]
 8011050:	4630      	mov	r0, r6
 8011052:	f000 f82f 	bl	80110b4 <__malloc_unlock>
 8011056:	f104 000b 	add.w	r0, r4, #11
 801105a:	1d23      	adds	r3, r4, #4
 801105c:	f020 0007 	bic.w	r0, r0, #7
 8011060:	1ac2      	subs	r2, r0, r3
 8011062:	bf1c      	itt	ne
 8011064:	1a1b      	subne	r3, r3, r0
 8011066:	50a3      	strne	r3, [r4, r2]
 8011068:	e7af      	b.n	8010fca <_malloc_r+0x22>
 801106a:	6862      	ldr	r2, [r4, #4]
 801106c:	42a3      	cmp	r3, r4
 801106e:	bf0c      	ite	eq
 8011070:	f8c8 2000 	streq.w	r2, [r8]
 8011074:	605a      	strne	r2, [r3, #4]
 8011076:	e7eb      	b.n	8011050 <_malloc_r+0xa8>
 8011078:	4623      	mov	r3, r4
 801107a:	6864      	ldr	r4, [r4, #4]
 801107c:	e7ae      	b.n	8010fdc <_malloc_r+0x34>
 801107e:	463c      	mov	r4, r7
 8011080:	687f      	ldr	r7, [r7, #4]
 8011082:	e7b6      	b.n	8010ff2 <_malloc_r+0x4a>
 8011084:	461a      	mov	r2, r3
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	42a3      	cmp	r3, r4
 801108a:	d1fb      	bne.n	8011084 <_malloc_r+0xdc>
 801108c:	2300      	movs	r3, #0
 801108e:	6053      	str	r3, [r2, #4]
 8011090:	e7de      	b.n	8011050 <_malloc_r+0xa8>
 8011092:	230c      	movs	r3, #12
 8011094:	6033      	str	r3, [r6, #0]
 8011096:	4630      	mov	r0, r6
 8011098:	f000 f80c 	bl	80110b4 <__malloc_unlock>
 801109c:	e794      	b.n	8010fc8 <_malloc_r+0x20>
 801109e:	6005      	str	r5, [r0, #0]
 80110a0:	e7d6      	b.n	8011050 <_malloc_r+0xa8>
 80110a2:	bf00      	nop
 80110a4:	2000c16c 	.word	0x2000c16c

080110a8 <__malloc_lock>:
 80110a8:	4801      	ldr	r0, [pc, #4]	@ (80110b0 <__malloc_lock+0x8>)
 80110aa:	f001 b9cc 	b.w	8012446 <__retarget_lock_acquire_recursive>
 80110ae:	bf00      	nop
 80110b0:	2000c2b1 	.word	0x2000c2b1

080110b4 <__malloc_unlock>:
 80110b4:	4801      	ldr	r0, [pc, #4]	@ (80110bc <__malloc_unlock+0x8>)
 80110b6:	f001 b9c7 	b.w	8012448 <__retarget_lock_release_recursive>
 80110ba:	bf00      	nop
 80110bc:	2000c2b1 	.word	0x2000c2b1

080110c0 <srand>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	4b10      	ldr	r3, [pc, #64]	@ (8011104 <srand+0x44>)
 80110c4:	681d      	ldr	r5, [r3, #0]
 80110c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80110c8:	4604      	mov	r4, r0
 80110ca:	b9b3      	cbnz	r3, 80110fa <srand+0x3a>
 80110cc:	2018      	movs	r0, #24
 80110ce:	f7ff ff39 	bl	8010f44 <malloc>
 80110d2:	4602      	mov	r2, r0
 80110d4:	6328      	str	r0, [r5, #48]	@ 0x30
 80110d6:	b920      	cbnz	r0, 80110e2 <srand+0x22>
 80110d8:	4b0b      	ldr	r3, [pc, #44]	@ (8011108 <srand+0x48>)
 80110da:	480c      	ldr	r0, [pc, #48]	@ (801110c <srand+0x4c>)
 80110dc:	2146      	movs	r1, #70	@ 0x46
 80110de:	f001 f9d1 	bl	8012484 <__assert_func>
 80110e2:	490b      	ldr	r1, [pc, #44]	@ (8011110 <srand+0x50>)
 80110e4:	4b0b      	ldr	r3, [pc, #44]	@ (8011114 <srand+0x54>)
 80110e6:	e9c0 1300 	strd	r1, r3, [r0]
 80110ea:	4b0b      	ldr	r3, [pc, #44]	@ (8011118 <srand+0x58>)
 80110ec:	6083      	str	r3, [r0, #8]
 80110ee:	230b      	movs	r3, #11
 80110f0:	8183      	strh	r3, [r0, #12]
 80110f2:	2100      	movs	r1, #0
 80110f4:	2001      	movs	r0, #1
 80110f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80110fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80110fc:	2200      	movs	r2, #0
 80110fe:	611c      	str	r4, [r3, #16]
 8011100:	615a      	str	r2, [r3, #20]
 8011102:	bd38      	pop	{r3, r4, r5, pc}
 8011104:	20000078 	.word	0x20000078
 8011108:	0801603c 	.word	0x0801603c
 801110c:	08016053 	.word	0x08016053
 8011110:	abcd330e 	.word	0xabcd330e
 8011114:	e66d1234 	.word	0xe66d1234
 8011118:	0005deec 	.word	0x0005deec

0801111c <rand>:
 801111c:	4b16      	ldr	r3, [pc, #88]	@ (8011178 <rand+0x5c>)
 801111e:	b510      	push	{r4, lr}
 8011120:	681c      	ldr	r4, [r3, #0]
 8011122:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011124:	b9b3      	cbnz	r3, 8011154 <rand+0x38>
 8011126:	2018      	movs	r0, #24
 8011128:	f7ff ff0c 	bl	8010f44 <malloc>
 801112c:	4602      	mov	r2, r0
 801112e:	6320      	str	r0, [r4, #48]	@ 0x30
 8011130:	b920      	cbnz	r0, 801113c <rand+0x20>
 8011132:	4b12      	ldr	r3, [pc, #72]	@ (801117c <rand+0x60>)
 8011134:	4812      	ldr	r0, [pc, #72]	@ (8011180 <rand+0x64>)
 8011136:	2152      	movs	r1, #82	@ 0x52
 8011138:	f001 f9a4 	bl	8012484 <__assert_func>
 801113c:	4911      	ldr	r1, [pc, #68]	@ (8011184 <rand+0x68>)
 801113e:	4b12      	ldr	r3, [pc, #72]	@ (8011188 <rand+0x6c>)
 8011140:	e9c0 1300 	strd	r1, r3, [r0]
 8011144:	4b11      	ldr	r3, [pc, #68]	@ (801118c <rand+0x70>)
 8011146:	6083      	str	r3, [r0, #8]
 8011148:	230b      	movs	r3, #11
 801114a:	8183      	strh	r3, [r0, #12]
 801114c:	2100      	movs	r1, #0
 801114e:	2001      	movs	r0, #1
 8011150:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011154:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011156:	480e      	ldr	r0, [pc, #56]	@ (8011190 <rand+0x74>)
 8011158:	690b      	ldr	r3, [r1, #16]
 801115a:	694c      	ldr	r4, [r1, #20]
 801115c:	4a0d      	ldr	r2, [pc, #52]	@ (8011194 <rand+0x78>)
 801115e:	4358      	muls	r0, r3
 8011160:	fb02 0004 	mla	r0, r2, r4, r0
 8011164:	fba3 3202 	umull	r3, r2, r3, r2
 8011168:	3301      	adds	r3, #1
 801116a:	eb40 0002 	adc.w	r0, r0, r2
 801116e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011172:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011176:	bd10      	pop	{r4, pc}
 8011178:	20000078 	.word	0x20000078
 801117c:	0801603c 	.word	0x0801603c
 8011180:	08016053 	.word	0x08016053
 8011184:	abcd330e 	.word	0xabcd330e
 8011188:	e66d1234 	.word	0xe66d1234
 801118c:	0005deec 	.word	0x0005deec
 8011190:	5851f42d 	.word	0x5851f42d
 8011194:	4c957f2d 	.word	0x4c957f2d

08011198 <realloc>:
 8011198:	4b02      	ldr	r3, [pc, #8]	@ (80111a4 <realloc+0xc>)
 801119a:	460a      	mov	r2, r1
 801119c:	4601      	mov	r1, r0
 801119e:	6818      	ldr	r0, [r3, #0]
 80111a0:	f000 b802 	b.w	80111a8 <_realloc_r>
 80111a4:	20000078 	.word	0x20000078

080111a8 <_realloc_r>:
 80111a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ac:	4680      	mov	r8, r0
 80111ae:	4615      	mov	r5, r2
 80111b0:	460c      	mov	r4, r1
 80111b2:	b921      	cbnz	r1, 80111be <_realloc_r+0x16>
 80111b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111b8:	4611      	mov	r1, r2
 80111ba:	f7ff bef5 	b.w	8010fa8 <_malloc_r>
 80111be:	b92a      	cbnz	r2, 80111cc <_realloc_r+0x24>
 80111c0:	f001 ff68 	bl	8013094 <_free_r>
 80111c4:	2400      	movs	r4, #0
 80111c6:	4620      	mov	r0, r4
 80111c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111cc:	f002 fc5b 	bl	8013a86 <_malloc_usable_size_r>
 80111d0:	4285      	cmp	r5, r0
 80111d2:	4606      	mov	r6, r0
 80111d4:	d802      	bhi.n	80111dc <_realloc_r+0x34>
 80111d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80111da:	d8f4      	bhi.n	80111c6 <_realloc_r+0x1e>
 80111dc:	4629      	mov	r1, r5
 80111de:	4640      	mov	r0, r8
 80111e0:	f7ff fee2 	bl	8010fa8 <_malloc_r>
 80111e4:	4607      	mov	r7, r0
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d0ec      	beq.n	80111c4 <_realloc_r+0x1c>
 80111ea:	42b5      	cmp	r5, r6
 80111ec:	462a      	mov	r2, r5
 80111ee:	4621      	mov	r1, r4
 80111f0:	bf28      	it	cs
 80111f2:	4632      	movcs	r2, r6
 80111f4:	f001 f931 	bl	801245a <memcpy>
 80111f8:	4621      	mov	r1, r4
 80111fa:	4640      	mov	r0, r8
 80111fc:	f001 ff4a 	bl	8013094 <_free_r>
 8011200:	463c      	mov	r4, r7
 8011202:	e7e0      	b.n	80111c6 <_realloc_r+0x1e>

08011204 <_strtoul_l.constprop.0>:
 8011204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011208:	4e34      	ldr	r6, [pc, #208]	@ (80112dc <_strtoul_l.constprop.0+0xd8>)
 801120a:	4686      	mov	lr, r0
 801120c:	460d      	mov	r5, r1
 801120e:	4628      	mov	r0, r5
 8011210:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011214:	5d37      	ldrb	r7, [r6, r4]
 8011216:	f017 0708 	ands.w	r7, r7, #8
 801121a:	d1f8      	bne.n	801120e <_strtoul_l.constprop.0+0xa>
 801121c:	2c2d      	cmp	r4, #45	@ 0x2d
 801121e:	d12f      	bne.n	8011280 <_strtoul_l.constprop.0+0x7c>
 8011220:	782c      	ldrb	r4, [r5, #0]
 8011222:	2701      	movs	r7, #1
 8011224:	1c85      	adds	r5, r0, #2
 8011226:	f033 0010 	bics.w	r0, r3, #16
 801122a:	d109      	bne.n	8011240 <_strtoul_l.constprop.0+0x3c>
 801122c:	2c30      	cmp	r4, #48	@ 0x30
 801122e:	d12c      	bne.n	801128a <_strtoul_l.constprop.0+0x86>
 8011230:	7828      	ldrb	r0, [r5, #0]
 8011232:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011236:	2858      	cmp	r0, #88	@ 0x58
 8011238:	d127      	bne.n	801128a <_strtoul_l.constprop.0+0x86>
 801123a:	786c      	ldrb	r4, [r5, #1]
 801123c:	2310      	movs	r3, #16
 801123e:	3502      	adds	r5, #2
 8011240:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011244:	2600      	movs	r6, #0
 8011246:	fbb8 f8f3 	udiv	r8, r8, r3
 801124a:	fb03 f908 	mul.w	r9, r3, r8
 801124e:	ea6f 0909 	mvn.w	r9, r9
 8011252:	4630      	mov	r0, r6
 8011254:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011258:	f1bc 0f09 	cmp.w	ip, #9
 801125c:	d81c      	bhi.n	8011298 <_strtoul_l.constprop.0+0x94>
 801125e:	4664      	mov	r4, ip
 8011260:	42a3      	cmp	r3, r4
 8011262:	dd2a      	ble.n	80112ba <_strtoul_l.constprop.0+0xb6>
 8011264:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011268:	d007      	beq.n	801127a <_strtoul_l.constprop.0+0x76>
 801126a:	4580      	cmp	r8, r0
 801126c:	d322      	bcc.n	80112b4 <_strtoul_l.constprop.0+0xb0>
 801126e:	d101      	bne.n	8011274 <_strtoul_l.constprop.0+0x70>
 8011270:	45a1      	cmp	r9, r4
 8011272:	db1f      	blt.n	80112b4 <_strtoul_l.constprop.0+0xb0>
 8011274:	fb00 4003 	mla	r0, r0, r3, r4
 8011278:	2601      	movs	r6, #1
 801127a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801127e:	e7e9      	b.n	8011254 <_strtoul_l.constprop.0+0x50>
 8011280:	2c2b      	cmp	r4, #43	@ 0x2b
 8011282:	bf04      	itt	eq
 8011284:	782c      	ldrbeq	r4, [r5, #0]
 8011286:	1c85      	addeq	r5, r0, #2
 8011288:	e7cd      	b.n	8011226 <_strtoul_l.constprop.0+0x22>
 801128a:	2b00      	cmp	r3, #0
 801128c:	d1d8      	bne.n	8011240 <_strtoul_l.constprop.0+0x3c>
 801128e:	2c30      	cmp	r4, #48	@ 0x30
 8011290:	bf0c      	ite	eq
 8011292:	2308      	moveq	r3, #8
 8011294:	230a      	movne	r3, #10
 8011296:	e7d3      	b.n	8011240 <_strtoul_l.constprop.0+0x3c>
 8011298:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801129c:	f1bc 0f19 	cmp.w	ip, #25
 80112a0:	d801      	bhi.n	80112a6 <_strtoul_l.constprop.0+0xa2>
 80112a2:	3c37      	subs	r4, #55	@ 0x37
 80112a4:	e7dc      	b.n	8011260 <_strtoul_l.constprop.0+0x5c>
 80112a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80112aa:	f1bc 0f19 	cmp.w	ip, #25
 80112ae:	d804      	bhi.n	80112ba <_strtoul_l.constprop.0+0xb6>
 80112b0:	3c57      	subs	r4, #87	@ 0x57
 80112b2:	e7d5      	b.n	8011260 <_strtoul_l.constprop.0+0x5c>
 80112b4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80112b8:	e7df      	b.n	801127a <_strtoul_l.constprop.0+0x76>
 80112ba:	1c73      	adds	r3, r6, #1
 80112bc:	d106      	bne.n	80112cc <_strtoul_l.constprop.0+0xc8>
 80112be:	2322      	movs	r3, #34	@ 0x22
 80112c0:	f8ce 3000 	str.w	r3, [lr]
 80112c4:	4630      	mov	r0, r6
 80112c6:	b932      	cbnz	r2, 80112d6 <_strtoul_l.constprop.0+0xd2>
 80112c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112cc:	b107      	cbz	r7, 80112d0 <_strtoul_l.constprop.0+0xcc>
 80112ce:	4240      	negs	r0, r0
 80112d0:	2a00      	cmp	r2, #0
 80112d2:	d0f9      	beq.n	80112c8 <_strtoul_l.constprop.0+0xc4>
 80112d4:	b106      	cbz	r6, 80112d8 <_strtoul_l.constprop.0+0xd4>
 80112d6:	1e69      	subs	r1, r5, #1
 80112d8:	6011      	str	r1, [r2, #0]
 80112da:	e7f5      	b.n	80112c8 <_strtoul_l.constprop.0+0xc4>
 80112dc:	080160ac 	.word	0x080160ac

080112e0 <strtoul>:
 80112e0:	4613      	mov	r3, r2
 80112e2:	460a      	mov	r2, r1
 80112e4:	4601      	mov	r1, r0
 80112e6:	4802      	ldr	r0, [pc, #8]	@ (80112f0 <strtoul+0x10>)
 80112e8:	6800      	ldr	r0, [r0, #0]
 80112ea:	f7ff bf8b 	b.w	8011204 <_strtoul_l.constprop.0>
 80112ee:	bf00      	nop
 80112f0:	20000078 	.word	0x20000078

080112f4 <__cvt>:
 80112f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f6:	ed2d 8b02 	vpush	{d8}
 80112fa:	eeb0 8b40 	vmov.f64	d8, d0
 80112fe:	b085      	sub	sp, #20
 8011300:	4617      	mov	r7, r2
 8011302:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011304:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011306:	ee18 2a90 	vmov	r2, s17
 801130a:	f025 0520 	bic.w	r5, r5, #32
 801130e:	2a00      	cmp	r2, #0
 8011310:	bfb6      	itet	lt
 8011312:	222d      	movlt	r2, #45	@ 0x2d
 8011314:	2200      	movge	r2, #0
 8011316:	eeb1 8b40 	vneglt.f64	d8, d0
 801131a:	2d46      	cmp	r5, #70	@ 0x46
 801131c:	460c      	mov	r4, r1
 801131e:	701a      	strb	r2, [r3, #0]
 8011320:	d004      	beq.n	801132c <__cvt+0x38>
 8011322:	2d45      	cmp	r5, #69	@ 0x45
 8011324:	d100      	bne.n	8011328 <__cvt+0x34>
 8011326:	3401      	adds	r4, #1
 8011328:	2102      	movs	r1, #2
 801132a:	e000      	b.n	801132e <__cvt+0x3a>
 801132c:	2103      	movs	r1, #3
 801132e:	ab03      	add	r3, sp, #12
 8011330:	9301      	str	r3, [sp, #4]
 8011332:	ab02      	add	r3, sp, #8
 8011334:	9300      	str	r3, [sp, #0]
 8011336:	4622      	mov	r2, r4
 8011338:	4633      	mov	r3, r6
 801133a:	eeb0 0b48 	vmov.f64	d0, d8
 801133e:	f001 f947 	bl	80125d0 <_dtoa_r>
 8011342:	2d47      	cmp	r5, #71	@ 0x47
 8011344:	d114      	bne.n	8011370 <__cvt+0x7c>
 8011346:	07fb      	lsls	r3, r7, #31
 8011348:	d50a      	bpl.n	8011360 <__cvt+0x6c>
 801134a:	1902      	adds	r2, r0, r4
 801134c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011354:	bf08      	it	eq
 8011356:	9203      	streq	r2, [sp, #12]
 8011358:	2130      	movs	r1, #48	@ 0x30
 801135a:	9b03      	ldr	r3, [sp, #12]
 801135c:	4293      	cmp	r3, r2
 801135e:	d319      	bcc.n	8011394 <__cvt+0xa0>
 8011360:	9b03      	ldr	r3, [sp, #12]
 8011362:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011364:	1a1b      	subs	r3, r3, r0
 8011366:	6013      	str	r3, [r2, #0]
 8011368:	b005      	add	sp, #20
 801136a:	ecbd 8b02 	vpop	{d8}
 801136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011370:	2d46      	cmp	r5, #70	@ 0x46
 8011372:	eb00 0204 	add.w	r2, r0, r4
 8011376:	d1e9      	bne.n	801134c <__cvt+0x58>
 8011378:	7803      	ldrb	r3, [r0, #0]
 801137a:	2b30      	cmp	r3, #48	@ 0x30
 801137c:	d107      	bne.n	801138e <__cvt+0x9a>
 801137e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011386:	bf1c      	itt	ne
 8011388:	f1c4 0401 	rsbne	r4, r4, #1
 801138c:	6034      	strne	r4, [r6, #0]
 801138e:	6833      	ldr	r3, [r6, #0]
 8011390:	441a      	add	r2, r3
 8011392:	e7db      	b.n	801134c <__cvt+0x58>
 8011394:	1c5c      	adds	r4, r3, #1
 8011396:	9403      	str	r4, [sp, #12]
 8011398:	7019      	strb	r1, [r3, #0]
 801139a:	e7de      	b.n	801135a <__cvt+0x66>

0801139c <__exponent>:
 801139c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801139e:	2900      	cmp	r1, #0
 80113a0:	bfba      	itte	lt
 80113a2:	4249      	neglt	r1, r1
 80113a4:	232d      	movlt	r3, #45	@ 0x2d
 80113a6:	232b      	movge	r3, #43	@ 0x2b
 80113a8:	2909      	cmp	r1, #9
 80113aa:	7002      	strb	r2, [r0, #0]
 80113ac:	7043      	strb	r3, [r0, #1]
 80113ae:	dd29      	ble.n	8011404 <__exponent+0x68>
 80113b0:	f10d 0307 	add.w	r3, sp, #7
 80113b4:	461d      	mov	r5, r3
 80113b6:	270a      	movs	r7, #10
 80113b8:	461a      	mov	r2, r3
 80113ba:	fbb1 f6f7 	udiv	r6, r1, r7
 80113be:	fb07 1416 	mls	r4, r7, r6, r1
 80113c2:	3430      	adds	r4, #48	@ 0x30
 80113c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80113c8:	460c      	mov	r4, r1
 80113ca:	2c63      	cmp	r4, #99	@ 0x63
 80113cc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80113d0:	4631      	mov	r1, r6
 80113d2:	dcf1      	bgt.n	80113b8 <__exponent+0x1c>
 80113d4:	3130      	adds	r1, #48	@ 0x30
 80113d6:	1e94      	subs	r4, r2, #2
 80113d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80113dc:	1c41      	adds	r1, r0, #1
 80113de:	4623      	mov	r3, r4
 80113e0:	42ab      	cmp	r3, r5
 80113e2:	d30a      	bcc.n	80113fa <__exponent+0x5e>
 80113e4:	f10d 0309 	add.w	r3, sp, #9
 80113e8:	1a9b      	subs	r3, r3, r2
 80113ea:	42ac      	cmp	r4, r5
 80113ec:	bf88      	it	hi
 80113ee:	2300      	movhi	r3, #0
 80113f0:	3302      	adds	r3, #2
 80113f2:	4403      	add	r3, r0
 80113f4:	1a18      	subs	r0, r3, r0
 80113f6:	b003      	add	sp, #12
 80113f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80113fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011402:	e7ed      	b.n	80113e0 <__exponent+0x44>
 8011404:	2330      	movs	r3, #48	@ 0x30
 8011406:	3130      	adds	r1, #48	@ 0x30
 8011408:	7083      	strb	r3, [r0, #2]
 801140a:	70c1      	strb	r1, [r0, #3]
 801140c:	1d03      	adds	r3, r0, #4
 801140e:	e7f1      	b.n	80113f4 <__exponent+0x58>

08011410 <_printf_float>:
 8011410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011414:	b08d      	sub	sp, #52	@ 0x34
 8011416:	460c      	mov	r4, r1
 8011418:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801141c:	4616      	mov	r6, r2
 801141e:	461f      	mov	r7, r3
 8011420:	4605      	mov	r5, r0
 8011422:	f000 ff8b 	bl	801233c <_localeconv_r>
 8011426:	f8d0 b000 	ldr.w	fp, [r0]
 801142a:	4658      	mov	r0, fp
 801142c:	f7ee ff68 	bl	8000300 <strlen>
 8011430:	2300      	movs	r3, #0
 8011432:	930a      	str	r3, [sp, #40]	@ 0x28
 8011434:	f8d8 3000 	ldr.w	r3, [r8]
 8011438:	f894 9018 	ldrb.w	r9, [r4, #24]
 801143c:	6822      	ldr	r2, [r4, #0]
 801143e:	9005      	str	r0, [sp, #20]
 8011440:	3307      	adds	r3, #7
 8011442:	f023 0307 	bic.w	r3, r3, #7
 8011446:	f103 0108 	add.w	r1, r3, #8
 801144a:	f8c8 1000 	str.w	r1, [r8]
 801144e:	ed93 0b00 	vldr	d0, [r3]
 8011452:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80116b0 <_printf_float+0x2a0>
 8011456:	eeb0 7bc0 	vabs.f64	d7, d0
 801145a:	eeb4 7b46 	vcmp.f64	d7, d6
 801145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011462:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011466:	dd24      	ble.n	80114b2 <_printf_float+0xa2>
 8011468:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011470:	d502      	bpl.n	8011478 <_printf_float+0x68>
 8011472:	232d      	movs	r3, #45	@ 0x2d
 8011474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011478:	498f      	ldr	r1, [pc, #572]	@ (80116b8 <_printf_float+0x2a8>)
 801147a:	4b90      	ldr	r3, [pc, #576]	@ (80116bc <_printf_float+0x2ac>)
 801147c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011480:	bf94      	ite	ls
 8011482:	4688      	movls	r8, r1
 8011484:	4698      	movhi	r8, r3
 8011486:	f022 0204 	bic.w	r2, r2, #4
 801148a:	2303      	movs	r3, #3
 801148c:	6123      	str	r3, [r4, #16]
 801148e:	6022      	str	r2, [r4, #0]
 8011490:	f04f 0a00 	mov.w	sl, #0
 8011494:	9700      	str	r7, [sp, #0]
 8011496:	4633      	mov	r3, r6
 8011498:	aa0b      	add	r2, sp, #44	@ 0x2c
 801149a:	4621      	mov	r1, r4
 801149c:	4628      	mov	r0, r5
 801149e:	f000 f9d1 	bl	8011844 <_printf_common>
 80114a2:	3001      	adds	r0, #1
 80114a4:	f040 8089 	bne.w	80115ba <_printf_float+0x1aa>
 80114a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80114ac:	b00d      	add	sp, #52	@ 0x34
 80114ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80114b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ba:	d709      	bvc.n	80114d0 <_printf_float+0xc0>
 80114bc:	ee10 3a90 	vmov	r3, s1
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	bfbc      	itt	lt
 80114c4:	232d      	movlt	r3, #45	@ 0x2d
 80114c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80114ca:	497d      	ldr	r1, [pc, #500]	@ (80116c0 <_printf_float+0x2b0>)
 80114cc:	4b7d      	ldr	r3, [pc, #500]	@ (80116c4 <_printf_float+0x2b4>)
 80114ce:	e7d5      	b.n	801147c <_printf_float+0x6c>
 80114d0:	6863      	ldr	r3, [r4, #4]
 80114d2:	1c59      	adds	r1, r3, #1
 80114d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80114d8:	d139      	bne.n	801154e <_printf_float+0x13e>
 80114da:	2306      	movs	r3, #6
 80114dc:	6063      	str	r3, [r4, #4]
 80114de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80114e2:	2300      	movs	r3, #0
 80114e4:	6022      	str	r2, [r4, #0]
 80114e6:	9303      	str	r3, [sp, #12]
 80114e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80114ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80114ee:	ab09      	add	r3, sp, #36	@ 0x24
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	6861      	ldr	r1, [r4, #4]
 80114f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80114f8:	4628      	mov	r0, r5
 80114fa:	f7ff fefb 	bl	80112f4 <__cvt>
 80114fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011504:	4680      	mov	r8, r0
 8011506:	d129      	bne.n	801155c <_printf_float+0x14c>
 8011508:	1cc8      	adds	r0, r1, #3
 801150a:	db02      	blt.n	8011512 <_printf_float+0x102>
 801150c:	6863      	ldr	r3, [r4, #4]
 801150e:	4299      	cmp	r1, r3
 8011510:	dd41      	ble.n	8011596 <_printf_float+0x186>
 8011512:	f1a9 0902 	sub.w	r9, r9, #2
 8011516:	fa5f f989 	uxtb.w	r9, r9
 801151a:	3901      	subs	r1, #1
 801151c:	464a      	mov	r2, r9
 801151e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011522:	9109      	str	r1, [sp, #36]	@ 0x24
 8011524:	f7ff ff3a 	bl	801139c <__exponent>
 8011528:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801152a:	1813      	adds	r3, r2, r0
 801152c:	2a01      	cmp	r2, #1
 801152e:	4682      	mov	sl, r0
 8011530:	6123      	str	r3, [r4, #16]
 8011532:	dc02      	bgt.n	801153a <_printf_float+0x12a>
 8011534:	6822      	ldr	r2, [r4, #0]
 8011536:	07d2      	lsls	r2, r2, #31
 8011538:	d501      	bpl.n	801153e <_printf_float+0x12e>
 801153a:	3301      	adds	r3, #1
 801153c:	6123      	str	r3, [r4, #16]
 801153e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011542:	2b00      	cmp	r3, #0
 8011544:	d0a6      	beq.n	8011494 <_printf_float+0x84>
 8011546:	232d      	movs	r3, #45	@ 0x2d
 8011548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801154c:	e7a2      	b.n	8011494 <_printf_float+0x84>
 801154e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011552:	d1c4      	bne.n	80114de <_printf_float+0xce>
 8011554:	2b00      	cmp	r3, #0
 8011556:	d1c2      	bne.n	80114de <_printf_float+0xce>
 8011558:	2301      	movs	r3, #1
 801155a:	e7bf      	b.n	80114dc <_printf_float+0xcc>
 801155c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011560:	d9db      	bls.n	801151a <_printf_float+0x10a>
 8011562:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011566:	d118      	bne.n	801159a <_printf_float+0x18a>
 8011568:	2900      	cmp	r1, #0
 801156a:	6863      	ldr	r3, [r4, #4]
 801156c:	dd0b      	ble.n	8011586 <_printf_float+0x176>
 801156e:	6121      	str	r1, [r4, #16]
 8011570:	b913      	cbnz	r3, 8011578 <_printf_float+0x168>
 8011572:	6822      	ldr	r2, [r4, #0]
 8011574:	07d0      	lsls	r0, r2, #31
 8011576:	d502      	bpl.n	801157e <_printf_float+0x16e>
 8011578:	3301      	adds	r3, #1
 801157a:	440b      	add	r3, r1
 801157c:	6123      	str	r3, [r4, #16]
 801157e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011580:	f04f 0a00 	mov.w	sl, #0
 8011584:	e7db      	b.n	801153e <_printf_float+0x12e>
 8011586:	b913      	cbnz	r3, 801158e <_printf_float+0x17e>
 8011588:	6822      	ldr	r2, [r4, #0]
 801158a:	07d2      	lsls	r2, r2, #31
 801158c:	d501      	bpl.n	8011592 <_printf_float+0x182>
 801158e:	3302      	adds	r3, #2
 8011590:	e7f4      	b.n	801157c <_printf_float+0x16c>
 8011592:	2301      	movs	r3, #1
 8011594:	e7f2      	b.n	801157c <_printf_float+0x16c>
 8011596:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801159a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801159c:	4299      	cmp	r1, r3
 801159e:	db05      	blt.n	80115ac <_printf_float+0x19c>
 80115a0:	6823      	ldr	r3, [r4, #0]
 80115a2:	6121      	str	r1, [r4, #16]
 80115a4:	07d8      	lsls	r0, r3, #31
 80115a6:	d5ea      	bpl.n	801157e <_printf_float+0x16e>
 80115a8:	1c4b      	adds	r3, r1, #1
 80115aa:	e7e7      	b.n	801157c <_printf_float+0x16c>
 80115ac:	2900      	cmp	r1, #0
 80115ae:	bfd4      	ite	le
 80115b0:	f1c1 0202 	rsble	r2, r1, #2
 80115b4:	2201      	movgt	r2, #1
 80115b6:	4413      	add	r3, r2
 80115b8:	e7e0      	b.n	801157c <_printf_float+0x16c>
 80115ba:	6823      	ldr	r3, [r4, #0]
 80115bc:	055a      	lsls	r2, r3, #21
 80115be:	d407      	bmi.n	80115d0 <_printf_float+0x1c0>
 80115c0:	6923      	ldr	r3, [r4, #16]
 80115c2:	4642      	mov	r2, r8
 80115c4:	4631      	mov	r1, r6
 80115c6:	4628      	mov	r0, r5
 80115c8:	47b8      	blx	r7
 80115ca:	3001      	adds	r0, #1
 80115cc:	d12a      	bne.n	8011624 <_printf_float+0x214>
 80115ce:	e76b      	b.n	80114a8 <_printf_float+0x98>
 80115d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80115d4:	f240 80e0 	bls.w	8011798 <_printf_float+0x388>
 80115d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80115dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e4:	d133      	bne.n	801164e <_printf_float+0x23e>
 80115e6:	4a38      	ldr	r2, [pc, #224]	@ (80116c8 <_printf_float+0x2b8>)
 80115e8:	2301      	movs	r3, #1
 80115ea:	4631      	mov	r1, r6
 80115ec:	4628      	mov	r0, r5
 80115ee:	47b8      	blx	r7
 80115f0:	3001      	adds	r0, #1
 80115f2:	f43f af59 	beq.w	80114a8 <_printf_float+0x98>
 80115f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80115fa:	4543      	cmp	r3, r8
 80115fc:	db02      	blt.n	8011604 <_printf_float+0x1f4>
 80115fe:	6823      	ldr	r3, [r4, #0]
 8011600:	07d8      	lsls	r0, r3, #31
 8011602:	d50f      	bpl.n	8011624 <_printf_float+0x214>
 8011604:	9b05      	ldr	r3, [sp, #20]
 8011606:	465a      	mov	r2, fp
 8011608:	4631      	mov	r1, r6
 801160a:	4628      	mov	r0, r5
 801160c:	47b8      	blx	r7
 801160e:	3001      	adds	r0, #1
 8011610:	f43f af4a 	beq.w	80114a8 <_printf_float+0x98>
 8011614:	f04f 0900 	mov.w	r9, #0
 8011618:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801161c:	f104 0a1a 	add.w	sl, r4, #26
 8011620:	45c8      	cmp	r8, r9
 8011622:	dc09      	bgt.n	8011638 <_printf_float+0x228>
 8011624:	6823      	ldr	r3, [r4, #0]
 8011626:	079b      	lsls	r3, r3, #30
 8011628:	f100 8107 	bmi.w	801183a <_printf_float+0x42a>
 801162c:	68e0      	ldr	r0, [r4, #12]
 801162e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011630:	4298      	cmp	r0, r3
 8011632:	bfb8      	it	lt
 8011634:	4618      	movlt	r0, r3
 8011636:	e739      	b.n	80114ac <_printf_float+0x9c>
 8011638:	2301      	movs	r3, #1
 801163a:	4652      	mov	r2, sl
 801163c:	4631      	mov	r1, r6
 801163e:	4628      	mov	r0, r5
 8011640:	47b8      	blx	r7
 8011642:	3001      	adds	r0, #1
 8011644:	f43f af30 	beq.w	80114a8 <_printf_float+0x98>
 8011648:	f109 0901 	add.w	r9, r9, #1
 801164c:	e7e8      	b.n	8011620 <_printf_float+0x210>
 801164e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011650:	2b00      	cmp	r3, #0
 8011652:	dc3b      	bgt.n	80116cc <_printf_float+0x2bc>
 8011654:	4a1c      	ldr	r2, [pc, #112]	@ (80116c8 <_printf_float+0x2b8>)
 8011656:	2301      	movs	r3, #1
 8011658:	4631      	mov	r1, r6
 801165a:	4628      	mov	r0, r5
 801165c:	47b8      	blx	r7
 801165e:	3001      	adds	r0, #1
 8011660:	f43f af22 	beq.w	80114a8 <_printf_float+0x98>
 8011664:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011668:	ea59 0303 	orrs.w	r3, r9, r3
 801166c:	d102      	bne.n	8011674 <_printf_float+0x264>
 801166e:	6823      	ldr	r3, [r4, #0]
 8011670:	07d9      	lsls	r1, r3, #31
 8011672:	d5d7      	bpl.n	8011624 <_printf_float+0x214>
 8011674:	9b05      	ldr	r3, [sp, #20]
 8011676:	465a      	mov	r2, fp
 8011678:	4631      	mov	r1, r6
 801167a:	4628      	mov	r0, r5
 801167c:	47b8      	blx	r7
 801167e:	3001      	adds	r0, #1
 8011680:	f43f af12 	beq.w	80114a8 <_printf_float+0x98>
 8011684:	f04f 0a00 	mov.w	sl, #0
 8011688:	f104 0b1a 	add.w	fp, r4, #26
 801168c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801168e:	425b      	negs	r3, r3
 8011690:	4553      	cmp	r3, sl
 8011692:	dc01      	bgt.n	8011698 <_printf_float+0x288>
 8011694:	464b      	mov	r3, r9
 8011696:	e794      	b.n	80115c2 <_printf_float+0x1b2>
 8011698:	2301      	movs	r3, #1
 801169a:	465a      	mov	r2, fp
 801169c:	4631      	mov	r1, r6
 801169e:	4628      	mov	r0, r5
 80116a0:	47b8      	blx	r7
 80116a2:	3001      	adds	r0, #1
 80116a4:	f43f af00 	beq.w	80114a8 <_printf_float+0x98>
 80116a8:	f10a 0a01 	add.w	sl, sl, #1
 80116ac:	e7ee      	b.n	801168c <_printf_float+0x27c>
 80116ae:	bf00      	nop
 80116b0:	ffffffff 	.word	0xffffffff
 80116b4:	7fefffff 	.word	0x7fefffff
 80116b8:	080161ac 	.word	0x080161ac
 80116bc:	080161b0 	.word	0x080161b0
 80116c0:	080161b4 	.word	0x080161b4
 80116c4:	080161b8 	.word	0x080161b8
 80116c8:	080161bc 	.word	0x080161bc
 80116cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80116ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80116d2:	4553      	cmp	r3, sl
 80116d4:	bfa8      	it	ge
 80116d6:	4653      	movge	r3, sl
 80116d8:	2b00      	cmp	r3, #0
 80116da:	4699      	mov	r9, r3
 80116dc:	dc37      	bgt.n	801174e <_printf_float+0x33e>
 80116de:	2300      	movs	r3, #0
 80116e0:	9307      	str	r3, [sp, #28]
 80116e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116e6:	f104 021a 	add.w	r2, r4, #26
 80116ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80116ec:	9907      	ldr	r1, [sp, #28]
 80116ee:	9306      	str	r3, [sp, #24]
 80116f0:	eba3 0309 	sub.w	r3, r3, r9
 80116f4:	428b      	cmp	r3, r1
 80116f6:	dc31      	bgt.n	801175c <_printf_float+0x34c>
 80116f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116fa:	459a      	cmp	sl, r3
 80116fc:	dc3b      	bgt.n	8011776 <_printf_float+0x366>
 80116fe:	6823      	ldr	r3, [r4, #0]
 8011700:	07da      	lsls	r2, r3, #31
 8011702:	d438      	bmi.n	8011776 <_printf_float+0x366>
 8011704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011706:	ebaa 0903 	sub.w	r9, sl, r3
 801170a:	9b06      	ldr	r3, [sp, #24]
 801170c:	ebaa 0303 	sub.w	r3, sl, r3
 8011710:	4599      	cmp	r9, r3
 8011712:	bfa8      	it	ge
 8011714:	4699      	movge	r9, r3
 8011716:	f1b9 0f00 	cmp.w	r9, #0
 801171a:	dc34      	bgt.n	8011786 <_printf_float+0x376>
 801171c:	f04f 0800 	mov.w	r8, #0
 8011720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011724:	f104 0b1a 	add.w	fp, r4, #26
 8011728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801172a:	ebaa 0303 	sub.w	r3, sl, r3
 801172e:	eba3 0309 	sub.w	r3, r3, r9
 8011732:	4543      	cmp	r3, r8
 8011734:	f77f af76 	ble.w	8011624 <_printf_float+0x214>
 8011738:	2301      	movs	r3, #1
 801173a:	465a      	mov	r2, fp
 801173c:	4631      	mov	r1, r6
 801173e:	4628      	mov	r0, r5
 8011740:	47b8      	blx	r7
 8011742:	3001      	adds	r0, #1
 8011744:	f43f aeb0 	beq.w	80114a8 <_printf_float+0x98>
 8011748:	f108 0801 	add.w	r8, r8, #1
 801174c:	e7ec      	b.n	8011728 <_printf_float+0x318>
 801174e:	4642      	mov	r2, r8
 8011750:	4631      	mov	r1, r6
 8011752:	4628      	mov	r0, r5
 8011754:	47b8      	blx	r7
 8011756:	3001      	adds	r0, #1
 8011758:	d1c1      	bne.n	80116de <_printf_float+0x2ce>
 801175a:	e6a5      	b.n	80114a8 <_printf_float+0x98>
 801175c:	2301      	movs	r3, #1
 801175e:	4631      	mov	r1, r6
 8011760:	4628      	mov	r0, r5
 8011762:	9206      	str	r2, [sp, #24]
 8011764:	47b8      	blx	r7
 8011766:	3001      	adds	r0, #1
 8011768:	f43f ae9e 	beq.w	80114a8 <_printf_float+0x98>
 801176c:	9b07      	ldr	r3, [sp, #28]
 801176e:	9a06      	ldr	r2, [sp, #24]
 8011770:	3301      	adds	r3, #1
 8011772:	9307      	str	r3, [sp, #28]
 8011774:	e7b9      	b.n	80116ea <_printf_float+0x2da>
 8011776:	9b05      	ldr	r3, [sp, #20]
 8011778:	465a      	mov	r2, fp
 801177a:	4631      	mov	r1, r6
 801177c:	4628      	mov	r0, r5
 801177e:	47b8      	blx	r7
 8011780:	3001      	adds	r0, #1
 8011782:	d1bf      	bne.n	8011704 <_printf_float+0x2f4>
 8011784:	e690      	b.n	80114a8 <_printf_float+0x98>
 8011786:	9a06      	ldr	r2, [sp, #24]
 8011788:	464b      	mov	r3, r9
 801178a:	4442      	add	r2, r8
 801178c:	4631      	mov	r1, r6
 801178e:	4628      	mov	r0, r5
 8011790:	47b8      	blx	r7
 8011792:	3001      	adds	r0, #1
 8011794:	d1c2      	bne.n	801171c <_printf_float+0x30c>
 8011796:	e687      	b.n	80114a8 <_printf_float+0x98>
 8011798:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801179c:	f1b9 0f01 	cmp.w	r9, #1
 80117a0:	dc01      	bgt.n	80117a6 <_printf_float+0x396>
 80117a2:	07db      	lsls	r3, r3, #31
 80117a4:	d536      	bpl.n	8011814 <_printf_float+0x404>
 80117a6:	2301      	movs	r3, #1
 80117a8:	4642      	mov	r2, r8
 80117aa:	4631      	mov	r1, r6
 80117ac:	4628      	mov	r0, r5
 80117ae:	47b8      	blx	r7
 80117b0:	3001      	adds	r0, #1
 80117b2:	f43f ae79 	beq.w	80114a8 <_printf_float+0x98>
 80117b6:	9b05      	ldr	r3, [sp, #20]
 80117b8:	465a      	mov	r2, fp
 80117ba:	4631      	mov	r1, r6
 80117bc:	4628      	mov	r0, r5
 80117be:	47b8      	blx	r7
 80117c0:	3001      	adds	r0, #1
 80117c2:	f43f ae71 	beq.w	80114a8 <_printf_float+0x98>
 80117c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80117ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80117ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80117d6:	d018      	beq.n	801180a <_printf_float+0x3fa>
 80117d8:	464b      	mov	r3, r9
 80117da:	f108 0201 	add.w	r2, r8, #1
 80117de:	4631      	mov	r1, r6
 80117e0:	4628      	mov	r0, r5
 80117e2:	47b8      	blx	r7
 80117e4:	3001      	adds	r0, #1
 80117e6:	d10c      	bne.n	8011802 <_printf_float+0x3f2>
 80117e8:	e65e      	b.n	80114a8 <_printf_float+0x98>
 80117ea:	2301      	movs	r3, #1
 80117ec:	465a      	mov	r2, fp
 80117ee:	4631      	mov	r1, r6
 80117f0:	4628      	mov	r0, r5
 80117f2:	47b8      	blx	r7
 80117f4:	3001      	adds	r0, #1
 80117f6:	f43f ae57 	beq.w	80114a8 <_printf_float+0x98>
 80117fa:	f108 0801 	add.w	r8, r8, #1
 80117fe:	45c8      	cmp	r8, r9
 8011800:	dbf3      	blt.n	80117ea <_printf_float+0x3da>
 8011802:	4653      	mov	r3, sl
 8011804:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011808:	e6dc      	b.n	80115c4 <_printf_float+0x1b4>
 801180a:	f04f 0800 	mov.w	r8, #0
 801180e:	f104 0b1a 	add.w	fp, r4, #26
 8011812:	e7f4      	b.n	80117fe <_printf_float+0x3ee>
 8011814:	2301      	movs	r3, #1
 8011816:	4642      	mov	r2, r8
 8011818:	e7e1      	b.n	80117de <_printf_float+0x3ce>
 801181a:	2301      	movs	r3, #1
 801181c:	464a      	mov	r2, r9
 801181e:	4631      	mov	r1, r6
 8011820:	4628      	mov	r0, r5
 8011822:	47b8      	blx	r7
 8011824:	3001      	adds	r0, #1
 8011826:	f43f ae3f 	beq.w	80114a8 <_printf_float+0x98>
 801182a:	f108 0801 	add.w	r8, r8, #1
 801182e:	68e3      	ldr	r3, [r4, #12]
 8011830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011832:	1a5b      	subs	r3, r3, r1
 8011834:	4543      	cmp	r3, r8
 8011836:	dcf0      	bgt.n	801181a <_printf_float+0x40a>
 8011838:	e6f8      	b.n	801162c <_printf_float+0x21c>
 801183a:	f04f 0800 	mov.w	r8, #0
 801183e:	f104 0919 	add.w	r9, r4, #25
 8011842:	e7f4      	b.n	801182e <_printf_float+0x41e>

08011844 <_printf_common>:
 8011844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011848:	4616      	mov	r6, r2
 801184a:	4698      	mov	r8, r3
 801184c:	688a      	ldr	r2, [r1, #8]
 801184e:	690b      	ldr	r3, [r1, #16]
 8011850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011854:	4293      	cmp	r3, r2
 8011856:	bfb8      	it	lt
 8011858:	4613      	movlt	r3, r2
 801185a:	6033      	str	r3, [r6, #0]
 801185c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011860:	4607      	mov	r7, r0
 8011862:	460c      	mov	r4, r1
 8011864:	b10a      	cbz	r2, 801186a <_printf_common+0x26>
 8011866:	3301      	adds	r3, #1
 8011868:	6033      	str	r3, [r6, #0]
 801186a:	6823      	ldr	r3, [r4, #0]
 801186c:	0699      	lsls	r1, r3, #26
 801186e:	bf42      	ittt	mi
 8011870:	6833      	ldrmi	r3, [r6, #0]
 8011872:	3302      	addmi	r3, #2
 8011874:	6033      	strmi	r3, [r6, #0]
 8011876:	6825      	ldr	r5, [r4, #0]
 8011878:	f015 0506 	ands.w	r5, r5, #6
 801187c:	d106      	bne.n	801188c <_printf_common+0x48>
 801187e:	f104 0a19 	add.w	sl, r4, #25
 8011882:	68e3      	ldr	r3, [r4, #12]
 8011884:	6832      	ldr	r2, [r6, #0]
 8011886:	1a9b      	subs	r3, r3, r2
 8011888:	42ab      	cmp	r3, r5
 801188a:	dc26      	bgt.n	80118da <_printf_common+0x96>
 801188c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011890:	6822      	ldr	r2, [r4, #0]
 8011892:	3b00      	subs	r3, #0
 8011894:	bf18      	it	ne
 8011896:	2301      	movne	r3, #1
 8011898:	0692      	lsls	r2, r2, #26
 801189a:	d42b      	bmi.n	80118f4 <_printf_common+0xb0>
 801189c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80118a0:	4641      	mov	r1, r8
 80118a2:	4638      	mov	r0, r7
 80118a4:	47c8      	blx	r9
 80118a6:	3001      	adds	r0, #1
 80118a8:	d01e      	beq.n	80118e8 <_printf_common+0xa4>
 80118aa:	6823      	ldr	r3, [r4, #0]
 80118ac:	6922      	ldr	r2, [r4, #16]
 80118ae:	f003 0306 	and.w	r3, r3, #6
 80118b2:	2b04      	cmp	r3, #4
 80118b4:	bf02      	ittt	eq
 80118b6:	68e5      	ldreq	r5, [r4, #12]
 80118b8:	6833      	ldreq	r3, [r6, #0]
 80118ba:	1aed      	subeq	r5, r5, r3
 80118bc:	68a3      	ldr	r3, [r4, #8]
 80118be:	bf0c      	ite	eq
 80118c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118c4:	2500      	movne	r5, #0
 80118c6:	4293      	cmp	r3, r2
 80118c8:	bfc4      	itt	gt
 80118ca:	1a9b      	subgt	r3, r3, r2
 80118cc:	18ed      	addgt	r5, r5, r3
 80118ce:	2600      	movs	r6, #0
 80118d0:	341a      	adds	r4, #26
 80118d2:	42b5      	cmp	r5, r6
 80118d4:	d11a      	bne.n	801190c <_printf_common+0xc8>
 80118d6:	2000      	movs	r0, #0
 80118d8:	e008      	b.n	80118ec <_printf_common+0xa8>
 80118da:	2301      	movs	r3, #1
 80118dc:	4652      	mov	r2, sl
 80118de:	4641      	mov	r1, r8
 80118e0:	4638      	mov	r0, r7
 80118e2:	47c8      	blx	r9
 80118e4:	3001      	adds	r0, #1
 80118e6:	d103      	bne.n	80118f0 <_printf_common+0xac>
 80118e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80118ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f0:	3501      	adds	r5, #1
 80118f2:	e7c6      	b.n	8011882 <_printf_common+0x3e>
 80118f4:	18e1      	adds	r1, r4, r3
 80118f6:	1c5a      	adds	r2, r3, #1
 80118f8:	2030      	movs	r0, #48	@ 0x30
 80118fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80118fe:	4422      	add	r2, r4
 8011900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011908:	3302      	adds	r3, #2
 801190a:	e7c7      	b.n	801189c <_printf_common+0x58>
 801190c:	2301      	movs	r3, #1
 801190e:	4622      	mov	r2, r4
 8011910:	4641      	mov	r1, r8
 8011912:	4638      	mov	r0, r7
 8011914:	47c8      	blx	r9
 8011916:	3001      	adds	r0, #1
 8011918:	d0e6      	beq.n	80118e8 <_printf_common+0xa4>
 801191a:	3601      	adds	r6, #1
 801191c:	e7d9      	b.n	80118d2 <_printf_common+0x8e>
	...

08011920 <_printf_i>:
 8011920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011924:	7e0f      	ldrb	r7, [r1, #24]
 8011926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011928:	2f78      	cmp	r7, #120	@ 0x78
 801192a:	4691      	mov	r9, r2
 801192c:	4680      	mov	r8, r0
 801192e:	460c      	mov	r4, r1
 8011930:	469a      	mov	sl, r3
 8011932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011936:	d807      	bhi.n	8011948 <_printf_i+0x28>
 8011938:	2f62      	cmp	r7, #98	@ 0x62
 801193a:	d80a      	bhi.n	8011952 <_printf_i+0x32>
 801193c:	2f00      	cmp	r7, #0
 801193e:	f000 80d2 	beq.w	8011ae6 <_printf_i+0x1c6>
 8011942:	2f58      	cmp	r7, #88	@ 0x58
 8011944:	f000 80b9 	beq.w	8011aba <_printf_i+0x19a>
 8011948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801194c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011950:	e03a      	b.n	80119c8 <_printf_i+0xa8>
 8011952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011956:	2b15      	cmp	r3, #21
 8011958:	d8f6      	bhi.n	8011948 <_printf_i+0x28>
 801195a:	a101      	add	r1, pc, #4	@ (adr r1, 8011960 <_printf_i+0x40>)
 801195c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011960:	080119b9 	.word	0x080119b9
 8011964:	080119cd 	.word	0x080119cd
 8011968:	08011949 	.word	0x08011949
 801196c:	08011949 	.word	0x08011949
 8011970:	08011949 	.word	0x08011949
 8011974:	08011949 	.word	0x08011949
 8011978:	080119cd 	.word	0x080119cd
 801197c:	08011949 	.word	0x08011949
 8011980:	08011949 	.word	0x08011949
 8011984:	08011949 	.word	0x08011949
 8011988:	08011949 	.word	0x08011949
 801198c:	08011acd 	.word	0x08011acd
 8011990:	080119f7 	.word	0x080119f7
 8011994:	08011a87 	.word	0x08011a87
 8011998:	08011949 	.word	0x08011949
 801199c:	08011949 	.word	0x08011949
 80119a0:	08011aef 	.word	0x08011aef
 80119a4:	08011949 	.word	0x08011949
 80119a8:	080119f7 	.word	0x080119f7
 80119ac:	08011949 	.word	0x08011949
 80119b0:	08011949 	.word	0x08011949
 80119b4:	08011a8f 	.word	0x08011a8f
 80119b8:	6833      	ldr	r3, [r6, #0]
 80119ba:	1d1a      	adds	r2, r3, #4
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	6032      	str	r2, [r6, #0]
 80119c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80119c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80119c8:	2301      	movs	r3, #1
 80119ca:	e09d      	b.n	8011b08 <_printf_i+0x1e8>
 80119cc:	6833      	ldr	r3, [r6, #0]
 80119ce:	6820      	ldr	r0, [r4, #0]
 80119d0:	1d19      	adds	r1, r3, #4
 80119d2:	6031      	str	r1, [r6, #0]
 80119d4:	0606      	lsls	r6, r0, #24
 80119d6:	d501      	bpl.n	80119dc <_printf_i+0xbc>
 80119d8:	681d      	ldr	r5, [r3, #0]
 80119da:	e003      	b.n	80119e4 <_printf_i+0xc4>
 80119dc:	0645      	lsls	r5, r0, #25
 80119de:	d5fb      	bpl.n	80119d8 <_printf_i+0xb8>
 80119e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80119e4:	2d00      	cmp	r5, #0
 80119e6:	da03      	bge.n	80119f0 <_printf_i+0xd0>
 80119e8:	232d      	movs	r3, #45	@ 0x2d
 80119ea:	426d      	negs	r5, r5
 80119ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80119f0:	4859      	ldr	r0, [pc, #356]	@ (8011b58 <_printf_i+0x238>)
 80119f2:	230a      	movs	r3, #10
 80119f4:	e011      	b.n	8011a1a <_printf_i+0xfa>
 80119f6:	6821      	ldr	r1, [r4, #0]
 80119f8:	6833      	ldr	r3, [r6, #0]
 80119fa:	0608      	lsls	r0, r1, #24
 80119fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8011a00:	d402      	bmi.n	8011a08 <_printf_i+0xe8>
 8011a02:	0649      	lsls	r1, r1, #25
 8011a04:	bf48      	it	mi
 8011a06:	b2ad      	uxthmi	r5, r5
 8011a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8011a0a:	4853      	ldr	r0, [pc, #332]	@ (8011b58 <_printf_i+0x238>)
 8011a0c:	6033      	str	r3, [r6, #0]
 8011a0e:	bf14      	ite	ne
 8011a10:	230a      	movne	r3, #10
 8011a12:	2308      	moveq	r3, #8
 8011a14:	2100      	movs	r1, #0
 8011a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011a1a:	6866      	ldr	r6, [r4, #4]
 8011a1c:	60a6      	str	r6, [r4, #8]
 8011a1e:	2e00      	cmp	r6, #0
 8011a20:	bfa2      	ittt	ge
 8011a22:	6821      	ldrge	r1, [r4, #0]
 8011a24:	f021 0104 	bicge.w	r1, r1, #4
 8011a28:	6021      	strge	r1, [r4, #0]
 8011a2a:	b90d      	cbnz	r5, 8011a30 <_printf_i+0x110>
 8011a2c:	2e00      	cmp	r6, #0
 8011a2e:	d04b      	beq.n	8011ac8 <_printf_i+0x1a8>
 8011a30:	4616      	mov	r6, r2
 8011a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a36:	fb03 5711 	mls	r7, r3, r1, r5
 8011a3a:	5dc7      	ldrb	r7, [r0, r7]
 8011a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a40:	462f      	mov	r7, r5
 8011a42:	42bb      	cmp	r3, r7
 8011a44:	460d      	mov	r5, r1
 8011a46:	d9f4      	bls.n	8011a32 <_printf_i+0x112>
 8011a48:	2b08      	cmp	r3, #8
 8011a4a:	d10b      	bne.n	8011a64 <_printf_i+0x144>
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	07df      	lsls	r7, r3, #31
 8011a50:	d508      	bpl.n	8011a64 <_printf_i+0x144>
 8011a52:	6923      	ldr	r3, [r4, #16]
 8011a54:	6861      	ldr	r1, [r4, #4]
 8011a56:	4299      	cmp	r1, r3
 8011a58:	bfde      	ittt	le
 8011a5a:	2330      	movle	r3, #48	@ 0x30
 8011a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a60:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011a64:	1b92      	subs	r2, r2, r6
 8011a66:	6122      	str	r2, [r4, #16]
 8011a68:	f8cd a000 	str.w	sl, [sp]
 8011a6c:	464b      	mov	r3, r9
 8011a6e:	aa03      	add	r2, sp, #12
 8011a70:	4621      	mov	r1, r4
 8011a72:	4640      	mov	r0, r8
 8011a74:	f7ff fee6 	bl	8011844 <_printf_common>
 8011a78:	3001      	adds	r0, #1
 8011a7a:	d14a      	bne.n	8011b12 <_printf_i+0x1f2>
 8011a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a80:	b004      	add	sp, #16
 8011a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a86:	6823      	ldr	r3, [r4, #0]
 8011a88:	f043 0320 	orr.w	r3, r3, #32
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	4833      	ldr	r0, [pc, #204]	@ (8011b5c <_printf_i+0x23c>)
 8011a90:	2778      	movs	r7, #120	@ 0x78
 8011a92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	6831      	ldr	r1, [r6, #0]
 8011a9a:	061f      	lsls	r7, r3, #24
 8011a9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011aa0:	d402      	bmi.n	8011aa8 <_printf_i+0x188>
 8011aa2:	065f      	lsls	r7, r3, #25
 8011aa4:	bf48      	it	mi
 8011aa6:	b2ad      	uxthmi	r5, r5
 8011aa8:	6031      	str	r1, [r6, #0]
 8011aaa:	07d9      	lsls	r1, r3, #31
 8011aac:	bf44      	itt	mi
 8011aae:	f043 0320 	orrmi.w	r3, r3, #32
 8011ab2:	6023      	strmi	r3, [r4, #0]
 8011ab4:	b11d      	cbz	r5, 8011abe <_printf_i+0x19e>
 8011ab6:	2310      	movs	r3, #16
 8011ab8:	e7ac      	b.n	8011a14 <_printf_i+0xf4>
 8011aba:	4827      	ldr	r0, [pc, #156]	@ (8011b58 <_printf_i+0x238>)
 8011abc:	e7e9      	b.n	8011a92 <_printf_i+0x172>
 8011abe:	6823      	ldr	r3, [r4, #0]
 8011ac0:	f023 0320 	bic.w	r3, r3, #32
 8011ac4:	6023      	str	r3, [r4, #0]
 8011ac6:	e7f6      	b.n	8011ab6 <_printf_i+0x196>
 8011ac8:	4616      	mov	r6, r2
 8011aca:	e7bd      	b.n	8011a48 <_printf_i+0x128>
 8011acc:	6833      	ldr	r3, [r6, #0]
 8011ace:	6825      	ldr	r5, [r4, #0]
 8011ad0:	6961      	ldr	r1, [r4, #20]
 8011ad2:	1d18      	adds	r0, r3, #4
 8011ad4:	6030      	str	r0, [r6, #0]
 8011ad6:	062e      	lsls	r6, r5, #24
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	d501      	bpl.n	8011ae0 <_printf_i+0x1c0>
 8011adc:	6019      	str	r1, [r3, #0]
 8011ade:	e002      	b.n	8011ae6 <_printf_i+0x1c6>
 8011ae0:	0668      	lsls	r0, r5, #25
 8011ae2:	d5fb      	bpl.n	8011adc <_printf_i+0x1bc>
 8011ae4:	8019      	strh	r1, [r3, #0]
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	6123      	str	r3, [r4, #16]
 8011aea:	4616      	mov	r6, r2
 8011aec:	e7bc      	b.n	8011a68 <_printf_i+0x148>
 8011aee:	6833      	ldr	r3, [r6, #0]
 8011af0:	1d1a      	adds	r2, r3, #4
 8011af2:	6032      	str	r2, [r6, #0]
 8011af4:	681e      	ldr	r6, [r3, #0]
 8011af6:	6862      	ldr	r2, [r4, #4]
 8011af8:	2100      	movs	r1, #0
 8011afa:	4630      	mov	r0, r6
 8011afc:	f7ee fbb0 	bl	8000260 <memchr>
 8011b00:	b108      	cbz	r0, 8011b06 <_printf_i+0x1e6>
 8011b02:	1b80      	subs	r0, r0, r6
 8011b04:	6060      	str	r0, [r4, #4]
 8011b06:	6863      	ldr	r3, [r4, #4]
 8011b08:	6123      	str	r3, [r4, #16]
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b10:	e7aa      	b.n	8011a68 <_printf_i+0x148>
 8011b12:	6923      	ldr	r3, [r4, #16]
 8011b14:	4632      	mov	r2, r6
 8011b16:	4649      	mov	r1, r9
 8011b18:	4640      	mov	r0, r8
 8011b1a:	47d0      	blx	sl
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	d0ad      	beq.n	8011a7c <_printf_i+0x15c>
 8011b20:	6823      	ldr	r3, [r4, #0]
 8011b22:	079b      	lsls	r3, r3, #30
 8011b24:	d413      	bmi.n	8011b4e <_printf_i+0x22e>
 8011b26:	68e0      	ldr	r0, [r4, #12]
 8011b28:	9b03      	ldr	r3, [sp, #12]
 8011b2a:	4298      	cmp	r0, r3
 8011b2c:	bfb8      	it	lt
 8011b2e:	4618      	movlt	r0, r3
 8011b30:	e7a6      	b.n	8011a80 <_printf_i+0x160>
 8011b32:	2301      	movs	r3, #1
 8011b34:	4632      	mov	r2, r6
 8011b36:	4649      	mov	r1, r9
 8011b38:	4640      	mov	r0, r8
 8011b3a:	47d0      	blx	sl
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	d09d      	beq.n	8011a7c <_printf_i+0x15c>
 8011b40:	3501      	adds	r5, #1
 8011b42:	68e3      	ldr	r3, [r4, #12]
 8011b44:	9903      	ldr	r1, [sp, #12]
 8011b46:	1a5b      	subs	r3, r3, r1
 8011b48:	42ab      	cmp	r3, r5
 8011b4a:	dcf2      	bgt.n	8011b32 <_printf_i+0x212>
 8011b4c:	e7eb      	b.n	8011b26 <_printf_i+0x206>
 8011b4e:	2500      	movs	r5, #0
 8011b50:	f104 0619 	add.w	r6, r4, #25
 8011b54:	e7f5      	b.n	8011b42 <_printf_i+0x222>
 8011b56:	bf00      	nop
 8011b58:	080161be 	.word	0x080161be
 8011b5c:	080161cf 	.word	0x080161cf

08011b60 <_scanf_float>:
 8011b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b64:	b087      	sub	sp, #28
 8011b66:	4617      	mov	r7, r2
 8011b68:	9303      	str	r3, [sp, #12]
 8011b6a:	688b      	ldr	r3, [r1, #8]
 8011b6c:	1e5a      	subs	r2, r3, #1
 8011b6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011b72:	bf81      	itttt	hi
 8011b74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011b78:	eb03 0b05 	addhi.w	fp, r3, r5
 8011b7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011b80:	608b      	strhi	r3, [r1, #8]
 8011b82:	680b      	ldr	r3, [r1, #0]
 8011b84:	460a      	mov	r2, r1
 8011b86:	f04f 0500 	mov.w	r5, #0
 8011b8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011b8e:	f842 3b1c 	str.w	r3, [r2], #28
 8011b92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011b96:	4680      	mov	r8, r0
 8011b98:	460c      	mov	r4, r1
 8011b9a:	bf98      	it	ls
 8011b9c:	f04f 0b00 	movls.w	fp, #0
 8011ba0:	9201      	str	r2, [sp, #4]
 8011ba2:	4616      	mov	r6, r2
 8011ba4:	46aa      	mov	sl, r5
 8011ba6:	46a9      	mov	r9, r5
 8011ba8:	9502      	str	r5, [sp, #8]
 8011baa:	68a2      	ldr	r2, [r4, #8]
 8011bac:	b152      	cbz	r2, 8011bc4 <_scanf_float+0x64>
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b4e      	cmp	r3, #78	@ 0x4e
 8011bb4:	d864      	bhi.n	8011c80 <_scanf_float+0x120>
 8011bb6:	2b40      	cmp	r3, #64	@ 0x40
 8011bb8:	d83c      	bhi.n	8011c34 <_scanf_float+0xd4>
 8011bba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011bbe:	b2c8      	uxtb	r0, r1
 8011bc0:	280e      	cmp	r0, #14
 8011bc2:	d93a      	bls.n	8011c3a <_scanf_float+0xda>
 8011bc4:	f1b9 0f00 	cmp.w	r9, #0
 8011bc8:	d003      	beq.n	8011bd2 <_scanf_float+0x72>
 8011bca:	6823      	ldr	r3, [r4, #0]
 8011bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011bd0:	6023      	str	r3, [r4, #0]
 8011bd2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011bd6:	f1ba 0f01 	cmp.w	sl, #1
 8011bda:	f200 8117 	bhi.w	8011e0c <_scanf_float+0x2ac>
 8011bde:	9b01      	ldr	r3, [sp, #4]
 8011be0:	429e      	cmp	r6, r3
 8011be2:	f200 8108 	bhi.w	8011df6 <_scanf_float+0x296>
 8011be6:	2001      	movs	r0, #1
 8011be8:	b007      	add	sp, #28
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011bf2:	2a0d      	cmp	r2, #13
 8011bf4:	d8e6      	bhi.n	8011bc4 <_scanf_float+0x64>
 8011bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8011bfc <_scanf_float+0x9c>)
 8011bf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011bfc:	08011d43 	.word	0x08011d43
 8011c00:	08011bc5 	.word	0x08011bc5
 8011c04:	08011bc5 	.word	0x08011bc5
 8011c08:	08011bc5 	.word	0x08011bc5
 8011c0c:	08011da3 	.word	0x08011da3
 8011c10:	08011d7b 	.word	0x08011d7b
 8011c14:	08011bc5 	.word	0x08011bc5
 8011c18:	08011bc5 	.word	0x08011bc5
 8011c1c:	08011d51 	.word	0x08011d51
 8011c20:	08011bc5 	.word	0x08011bc5
 8011c24:	08011bc5 	.word	0x08011bc5
 8011c28:	08011bc5 	.word	0x08011bc5
 8011c2c:	08011bc5 	.word	0x08011bc5
 8011c30:	08011d09 	.word	0x08011d09
 8011c34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011c38:	e7db      	b.n	8011bf2 <_scanf_float+0x92>
 8011c3a:	290e      	cmp	r1, #14
 8011c3c:	d8c2      	bhi.n	8011bc4 <_scanf_float+0x64>
 8011c3e:	a001      	add	r0, pc, #4	@ (adr r0, 8011c44 <_scanf_float+0xe4>)
 8011c40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011c44:	08011cf9 	.word	0x08011cf9
 8011c48:	08011bc5 	.word	0x08011bc5
 8011c4c:	08011cf9 	.word	0x08011cf9
 8011c50:	08011d8f 	.word	0x08011d8f
 8011c54:	08011bc5 	.word	0x08011bc5
 8011c58:	08011ca1 	.word	0x08011ca1
 8011c5c:	08011cdf 	.word	0x08011cdf
 8011c60:	08011cdf 	.word	0x08011cdf
 8011c64:	08011cdf 	.word	0x08011cdf
 8011c68:	08011cdf 	.word	0x08011cdf
 8011c6c:	08011cdf 	.word	0x08011cdf
 8011c70:	08011cdf 	.word	0x08011cdf
 8011c74:	08011cdf 	.word	0x08011cdf
 8011c78:	08011cdf 	.word	0x08011cdf
 8011c7c:	08011cdf 	.word	0x08011cdf
 8011c80:	2b6e      	cmp	r3, #110	@ 0x6e
 8011c82:	d809      	bhi.n	8011c98 <_scanf_float+0x138>
 8011c84:	2b60      	cmp	r3, #96	@ 0x60
 8011c86:	d8b2      	bhi.n	8011bee <_scanf_float+0x8e>
 8011c88:	2b54      	cmp	r3, #84	@ 0x54
 8011c8a:	d07b      	beq.n	8011d84 <_scanf_float+0x224>
 8011c8c:	2b59      	cmp	r3, #89	@ 0x59
 8011c8e:	d199      	bne.n	8011bc4 <_scanf_float+0x64>
 8011c90:	2d07      	cmp	r5, #7
 8011c92:	d197      	bne.n	8011bc4 <_scanf_float+0x64>
 8011c94:	2508      	movs	r5, #8
 8011c96:	e02c      	b.n	8011cf2 <_scanf_float+0x192>
 8011c98:	2b74      	cmp	r3, #116	@ 0x74
 8011c9a:	d073      	beq.n	8011d84 <_scanf_float+0x224>
 8011c9c:	2b79      	cmp	r3, #121	@ 0x79
 8011c9e:	e7f6      	b.n	8011c8e <_scanf_float+0x12e>
 8011ca0:	6821      	ldr	r1, [r4, #0]
 8011ca2:	05c8      	lsls	r0, r1, #23
 8011ca4:	d51b      	bpl.n	8011cde <_scanf_float+0x17e>
 8011ca6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011caa:	6021      	str	r1, [r4, #0]
 8011cac:	f109 0901 	add.w	r9, r9, #1
 8011cb0:	f1bb 0f00 	cmp.w	fp, #0
 8011cb4:	d003      	beq.n	8011cbe <_scanf_float+0x15e>
 8011cb6:	3201      	adds	r2, #1
 8011cb8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8011cbc:	60a2      	str	r2, [r4, #8]
 8011cbe:	68a3      	ldr	r3, [r4, #8]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	60a3      	str	r3, [r4, #8]
 8011cc4:	6923      	ldr	r3, [r4, #16]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	6123      	str	r3, [r4, #16]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	607b      	str	r3, [r7, #4]
 8011cd2:	f340 8087 	ble.w	8011de4 <_scanf_float+0x284>
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	3301      	adds	r3, #1
 8011cda:	603b      	str	r3, [r7, #0]
 8011cdc:	e765      	b.n	8011baa <_scanf_float+0x4a>
 8011cde:	eb1a 0105 	adds.w	r1, sl, r5
 8011ce2:	f47f af6f 	bne.w	8011bc4 <_scanf_float+0x64>
 8011ce6:	6822      	ldr	r2, [r4, #0]
 8011ce8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011cec:	6022      	str	r2, [r4, #0]
 8011cee:	460d      	mov	r5, r1
 8011cf0:	468a      	mov	sl, r1
 8011cf2:	f806 3b01 	strb.w	r3, [r6], #1
 8011cf6:	e7e2      	b.n	8011cbe <_scanf_float+0x15e>
 8011cf8:	6822      	ldr	r2, [r4, #0]
 8011cfa:	0610      	lsls	r0, r2, #24
 8011cfc:	f57f af62 	bpl.w	8011bc4 <_scanf_float+0x64>
 8011d00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011d04:	6022      	str	r2, [r4, #0]
 8011d06:	e7f4      	b.n	8011cf2 <_scanf_float+0x192>
 8011d08:	f1ba 0f00 	cmp.w	sl, #0
 8011d0c:	d10e      	bne.n	8011d2c <_scanf_float+0x1cc>
 8011d0e:	f1b9 0f00 	cmp.w	r9, #0
 8011d12:	d10e      	bne.n	8011d32 <_scanf_float+0x1d2>
 8011d14:	6822      	ldr	r2, [r4, #0]
 8011d16:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011d1a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011d1e:	d108      	bne.n	8011d32 <_scanf_float+0x1d2>
 8011d20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011d24:	6022      	str	r2, [r4, #0]
 8011d26:	f04f 0a01 	mov.w	sl, #1
 8011d2a:	e7e2      	b.n	8011cf2 <_scanf_float+0x192>
 8011d2c:	f1ba 0f02 	cmp.w	sl, #2
 8011d30:	d055      	beq.n	8011dde <_scanf_float+0x27e>
 8011d32:	2d01      	cmp	r5, #1
 8011d34:	d002      	beq.n	8011d3c <_scanf_float+0x1dc>
 8011d36:	2d04      	cmp	r5, #4
 8011d38:	f47f af44 	bne.w	8011bc4 <_scanf_float+0x64>
 8011d3c:	3501      	adds	r5, #1
 8011d3e:	b2ed      	uxtb	r5, r5
 8011d40:	e7d7      	b.n	8011cf2 <_scanf_float+0x192>
 8011d42:	f1ba 0f01 	cmp.w	sl, #1
 8011d46:	f47f af3d 	bne.w	8011bc4 <_scanf_float+0x64>
 8011d4a:	f04f 0a02 	mov.w	sl, #2
 8011d4e:	e7d0      	b.n	8011cf2 <_scanf_float+0x192>
 8011d50:	b97d      	cbnz	r5, 8011d72 <_scanf_float+0x212>
 8011d52:	f1b9 0f00 	cmp.w	r9, #0
 8011d56:	f47f af38 	bne.w	8011bca <_scanf_float+0x6a>
 8011d5a:	6822      	ldr	r2, [r4, #0]
 8011d5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011d60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011d64:	f040 8101 	bne.w	8011f6a <_scanf_float+0x40a>
 8011d68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011d6c:	6022      	str	r2, [r4, #0]
 8011d6e:	2501      	movs	r5, #1
 8011d70:	e7bf      	b.n	8011cf2 <_scanf_float+0x192>
 8011d72:	2d03      	cmp	r5, #3
 8011d74:	d0e2      	beq.n	8011d3c <_scanf_float+0x1dc>
 8011d76:	2d05      	cmp	r5, #5
 8011d78:	e7de      	b.n	8011d38 <_scanf_float+0x1d8>
 8011d7a:	2d02      	cmp	r5, #2
 8011d7c:	f47f af22 	bne.w	8011bc4 <_scanf_float+0x64>
 8011d80:	2503      	movs	r5, #3
 8011d82:	e7b6      	b.n	8011cf2 <_scanf_float+0x192>
 8011d84:	2d06      	cmp	r5, #6
 8011d86:	f47f af1d 	bne.w	8011bc4 <_scanf_float+0x64>
 8011d8a:	2507      	movs	r5, #7
 8011d8c:	e7b1      	b.n	8011cf2 <_scanf_float+0x192>
 8011d8e:	6822      	ldr	r2, [r4, #0]
 8011d90:	0591      	lsls	r1, r2, #22
 8011d92:	f57f af17 	bpl.w	8011bc4 <_scanf_float+0x64>
 8011d96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011d9a:	6022      	str	r2, [r4, #0]
 8011d9c:	f8cd 9008 	str.w	r9, [sp, #8]
 8011da0:	e7a7      	b.n	8011cf2 <_scanf_float+0x192>
 8011da2:	6822      	ldr	r2, [r4, #0]
 8011da4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011da8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011dac:	d006      	beq.n	8011dbc <_scanf_float+0x25c>
 8011dae:	0550      	lsls	r0, r2, #21
 8011db0:	f57f af08 	bpl.w	8011bc4 <_scanf_float+0x64>
 8011db4:	f1b9 0f00 	cmp.w	r9, #0
 8011db8:	f000 80d7 	beq.w	8011f6a <_scanf_float+0x40a>
 8011dbc:	0591      	lsls	r1, r2, #22
 8011dbe:	bf58      	it	pl
 8011dc0:	9902      	ldrpl	r1, [sp, #8]
 8011dc2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011dc6:	bf58      	it	pl
 8011dc8:	eba9 0101 	subpl.w	r1, r9, r1
 8011dcc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011dd0:	bf58      	it	pl
 8011dd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011dd6:	6022      	str	r2, [r4, #0]
 8011dd8:	f04f 0900 	mov.w	r9, #0
 8011ddc:	e789      	b.n	8011cf2 <_scanf_float+0x192>
 8011dde:	f04f 0a03 	mov.w	sl, #3
 8011de2:	e786      	b.n	8011cf2 <_scanf_float+0x192>
 8011de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011de8:	4639      	mov	r1, r7
 8011dea:	4640      	mov	r0, r8
 8011dec:	4798      	blx	r3
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f43f aedb 	beq.w	8011baa <_scanf_float+0x4a>
 8011df4:	e6e6      	b.n	8011bc4 <_scanf_float+0x64>
 8011df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011dfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011dfe:	463a      	mov	r2, r7
 8011e00:	4640      	mov	r0, r8
 8011e02:	4798      	blx	r3
 8011e04:	6923      	ldr	r3, [r4, #16]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	6123      	str	r3, [r4, #16]
 8011e0a:	e6e8      	b.n	8011bde <_scanf_float+0x7e>
 8011e0c:	1e6b      	subs	r3, r5, #1
 8011e0e:	2b06      	cmp	r3, #6
 8011e10:	d824      	bhi.n	8011e5c <_scanf_float+0x2fc>
 8011e12:	2d02      	cmp	r5, #2
 8011e14:	d836      	bhi.n	8011e84 <_scanf_float+0x324>
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	429e      	cmp	r6, r3
 8011e1a:	f67f aee4 	bls.w	8011be6 <_scanf_float+0x86>
 8011e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011e22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e26:	463a      	mov	r2, r7
 8011e28:	4640      	mov	r0, r8
 8011e2a:	4798      	blx	r3
 8011e2c:	6923      	ldr	r3, [r4, #16]
 8011e2e:	3b01      	subs	r3, #1
 8011e30:	6123      	str	r3, [r4, #16]
 8011e32:	e7f0      	b.n	8011e16 <_scanf_float+0x2b6>
 8011e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011e38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011e3c:	463a      	mov	r2, r7
 8011e3e:	4640      	mov	r0, r8
 8011e40:	4798      	blx	r3
 8011e42:	6923      	ldr	r3, [r4, #16]
 8011e44:	3b01      	subs	r3, #1
 8011e46:	6123      	str	r3, [r4, #16]
 8011e48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011e4c:	fa5f fa8a 	uxtb.w	sl, sl
 8011e50:	f1ba 0f02 	cmp.w	sl, #2
 8011e54:	d1ee      	bne.n	8011e34 <_scanf_float+0x2d4>
 8011e56:	3d03      	subs	r5, #3
 8011e58:	b2ed      	uxtb	r5, r5
 8011e5a:	1b76      	subs	r6, r6, r5
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	05da      	lsls	r2, r3, #23
 8011e60:	d530      	bpl.n	8011ec4 <_scanf_float+0x364>
 8011e62:	055b      	lsls	r3, r3, #21
 8011e64:	d511      	bpl.n	8011e8a <_scanf_float+0x32a>
 8011e66:	9b01      	ldr	r3, [sp, #4]
 8011e68:	429e      	cmp	r6, r3
 8011e6a:	f67f aebc 	bls.w	8011be6 <_scanf_float+0x86>
 8011e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e76:	463a      	mov	r2, r7
 8011e78:	4640      	mov	r0, r8
 8011e7a:	4798      	blx	r3
 8011e7c:	6923      	ldr	r3, [r4, #16]
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	6123      	str	r3, [r4, #16]
 8011e82:	e7f0      	b.n	8011e66 <_scanf_float+0x306>
 8011e84:	46aa      	mov	sl, r5
 8011e86:	46b3      	mov	fp, r6
 8011e88:	e7de      	b.n	8011e48 <_scanf_float+0x2e8>
 8011e8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011e8e:	6923      	ldr	r3, [r4, #16]
 8011e90:	2965      	cmp	r1, #101	@ 0x65
 8011e92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011e96:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8011e9a:	6123      	str	r3, [r4, #16]
 8011e9c:	d00c      	beq.n	8011eb8 <_scanf_float+0x358>
 8011e9e:	2945      	cmp	r1, #69	@ 0x45
 8011ea0:	d00a      	beq.n	8011eb8 <_scanf_float+0x358>
 8011ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ea6:	463a      	mov	r2, r7
 8011ea8:	4640      	mov	r0, r8
 8011eaa:	4798      	blx	r3
 8011eac:	6923      	ldr	r3, [r4, #16]
 8011eae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011eb2:	3b01      	subs	r3, #1
 8011eb4:	1eb5      	subs	r5, r6, #2
 8011eb6:	6123      	str	r3, [r4, #16]
 8011eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ebc:	463a      	mov	r2, r7
 8011ebe:	4640      	mov	r0, r8
 8011ec0:	4798      	blx	r3
 8011ec2:	462e      	mov	r6, r5
 8011ec4:	6822      	ldr	r2, [r4, #0]
 8011ec6:	f012 0210 	ands.w	r2, r2, #16
 8011eca:	d001      	beq.n	8011ed0 <_scanf_float+0x370>
 8011ecc:	2000      	movs	r0, #0
 8011ece:	e68b      	b.n	8011be8 <_scanf_float+0x88>
 8011ed0:	7032      	strb	r2, [r6, #0]
 8011ed2:	6823      	ldr	r3, [r4, #0]
 8011ed4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011edc:	d11a      	bne.n	8011f14 <_scanf_float+0x3b4>
 8011ede:	9b02      	ldr	r3, [sp, #8]
 8011ee0:	454b      	cmp	r3, r9
 8011ee2:	eba3 0209 	sub.w	r2, r3, r9
 8011ee6:	d121      	bne.n	8011f2c <_scanf_float+0x3cc>
 8011ee8:	9901      	ldr	r1, [sp, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	4640      	mov	r0, r8
 8011eee:	f002 fb85 	bl	80145fc <_strtod_r>
 8011ef2:	9b03      	ldr	r3, [sp, #12]
 8011ef4:	6821      	ldr	r1, [r4, #0]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f011 0f02 	tst.w	r1, #2
 8011efc:	f103 0204 	add.w	r2, r3, #4
 8011f00:	d01f      	beq.n	8011f42 <_scanf_float+0x3e2>
 8011f02:	9903      	ldr	r1, [sp, #12]
 8011f04:	600a      	str	r2, [r1, #0]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	ed83 0b00 	vstr	d0, [r3]
 8011f0c:	68e3      	ldr	r3, [r4, #12]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	60e3      	str	r3, [r4, #12]
 8011f12:	e7db      	b.n	8011ecc <_scanf_float+0x36c>
 8011f14:	9b04      	ldr	r3, [sp, #16]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d0e6      	beq.n	8011ee8 <_scanf_float+0x388>
 8011f1a:	9905      	ldr	r1, [sp, #20]
 8011f1c:	230a      	movs	r3, #10
 8011f1e:	3101      	adds	r1, #1
 8011f20:	4640      	mov	r0, r8
 8011f22:	f002 fbeb 	bl	80146fc <_strtol_r>
 8011f26:	9b04      	ldr	r3, [sp, #16]
 8011f28:	9e05      	ldr	r6, [sp, #20]
 8011f2a:	1ac2      	subs	r2, r0, r3
 8011f2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011f30:	429e      	cmp	r6, r3
 8011f32:	bf28      	it	cs
 8011f34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011f38:	490d      	ldr	r1, [pc, #52]	@ (8011f70 <_scanf_float+0x410>)
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f000 f924 	bl	8012188 <siprintf>
 8011f40:	e7d2      	b.n	8011ee8 <_scanf_float+0x388>
 8011f42:	f011 0f04 	tst.w	r1, #4
 8011f46:	9903      	ldr	r1, [sp, #12]
 8011f48:	600a      	str	r2, [r1, #0]
 8011f4a:	d1dc      	bne.n	8011f06 <_scanf_float+0x3a6>
 8011f4c:	eeb4 0b40 	vcmp.f64	d0, d0
 8011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f54:	681d      	ldr	r5, [r3, #0]
 8011f56:	d705      	bvc.n	8011f64 <_scanf_float+0x404>
 8011f58:	4806      	ldr	r0, [pc, #24]	@ (8011f74 <_scanf_float+0x414>)
 8011f5a:	f000 fa8d 	bl	8012478 <nanf>
 8011f5e:	ed85 0a00 	vstr	s0, [r5]
 8011f62:	e7d3      	b.n	8011f0c <_scanf_float+0x3ac>
 8011f64:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011f68:	e7f9      	b.n	8011f5e <_scanf_float+0x3fe>
 8011f6a:	f04f 0900 	mov.w	r9, #0
 8011f6e:	e630      	b.n	8011bd2 <_scanf_float+0x72>
 8011f70:	080161e0 	.word	0x080161e0
 8011f74:	08016220 	.word	0x08016220

08011f78 <std>:
 8011f78:	2300      	movs	r3, #0
 8011f7a:	b510      	push	{r4, lr}
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8011f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f86:	6083      	str	r3, [r0, #8]
 8011f88:	8181      	strh	r1, [r0, #12]
 8011f8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8011f8c:	81c2      	strh	r2, [r0, #14]
 8011f8e:	6183      	str	r3, [r0, #24]
 8011f90:	4619      	mov	r1, r3
 8011f92:	2208      	movs	r2, #8
 8011f94:	305c      	adds	r0, #92	@ 0x5c
 8011f96:	f000 f993 	bl	80122c0 <memset>
 8011f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd0 <std+0x58>)
 8011f9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8011f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd4 <std+0x5c>)
 8011fa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd8 <std+0x60>)
 8011fa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8011fdc <std+0x64>)
 8011fa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8011faa:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe0 <std+0x68>)
 8011fac:	6224      	str	r4, [r4, #32]
 8011fae:	429c      	cmp	r4, r3
 8011fb0:	d006      	beq.n	8011fc0 <std+0x48>
 8011fb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011fb6:	4294      	cmp	r4, r2
 8011fb8:	d002      	beq.n	8011fc0 <std+0x48>
 8011fba:	33d0      	adds	r3, #208	@ 0xd0
 8011fbc:	429c      	cmp	r4, r3
 8011fbe:	d105      	bne.n	8011fcc <std+0x54>
 8011fc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fc8:	f000 ba3c 	b.w	8012444 <__retarget_lock_init_recursive>
 8011fcc:	bd10      	pop	{r4, pc}
 8011fce:	bf00      	nop
 8011fd0:	080121c9 	.word	0x080121c9
 8011fd4:	080121eb 	.word	0x080121eb
 8011fd8:	08012223 	.word	0x08012223
 8011fdc:	08012247 	.word	0x08012247
 8011fe0:	2000c170 	.word	0x2000c170

08011fe4 <stdio_exit_handler>:
 8011fe4:	4a02      	ldr	r2, [pc, #8]	@ (8011ff0 <stdio_exit_handler+0xc>)
 8011fe6:	4903      	ldr	r1, [pc, #12]	@ (8011ff4 <stdio_exit_handler+0x10>)
 8011fe8:	4803      	ldr	r0, [pc, #12]	@ (8011ff8 <stdio_exit_handler+0x14>)
 8011fea:	f000 b869 	b.w	80120c0 <_fwalk_sglue>
 8011fee:	bf00      	nop
 8011ff0:	2000006c 	.word	0x2000006c
 8011ff4:	08014d3d 	.word	0x08014d3d
 8011ff8:	2000007c 	.word	0x2000007c

08011ffc <cleanup_stdio>:
 8011ffc:	6841      	ldr	r1, [r0, #4]
 8011ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8012030 <cleanup_stdio+0x34>)
 8012000:	4299      	cmp	r1, r3
 8012002:	b510      	push	{r4, lr}
 8012004:	4604      	mov	r4, r0
 8012006:	d001      	beq.n	801200c <cleanup_stdio+0x10>
 8012008:	f002 fe98 	bl	8014d3c <_fflush_r>
 801200c:	68a1      	ldr	r1, [r4, #8]
 801200e:	4b09      	ldr	r3, [pc, #36]	@ (8012034 <cleanup_stdio+0x38>)
 8012010:	4299      	cmp	r1, r3
 8012012:	d002      	beq.n	801201a <cleanup_stdio+0x1e>
 8012014:	4620      	mov	r0, r4
 8012016:	f002 fe91 	bl	8014d3c <_fflush_r>
 801201a:	68e1      	ldr	r1, [r4, #12]
 801201c:	4b06      	ldr	r3, [pc, #24]	@ (8012038 <cleanup_stdio+0x3c>)
 801201e:	4299      	cmp	r1, r3
 8012020:	d004      	beq.n	801202c <cleanup_stdio+0x30>
 8012022:	4620      	mov	r0, r4
 8012024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012028:	f002 be88 	b.w	8014d3c <_fflush_r>
 801202c:	bd10      	pop	{r4, pc}
 801202e:	bf00      	nop
 8012030:	2000c170 	.word	0x2000c170
 8012034:	2000c1d8 	.word	0x2000c1d8
 8012038:	2000c240 	.word	0x2000c240

0801203c <global_stdio_init.part.0>:
 801203c:	b510      	push	{r4, lr}
 801203e:	4b0b      	ldr	r3, [pc, #44]	@ (801206c <global_stdio_init.part.0+0x30>)
 8012040:	4c0b      	ldr	r4, [pc, #44]	@ (8012070 <global_stdio_init.part.0+0x34>)
 8012042:	4a0c      	ldr	r2, [pc, #48]	@ (8012074 <global_stdio_init.part.0+0x38>)
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	4620      	mov	r0, r4
 8012048:	2200      	movs	r2, #0
 801204a:	2104      	movs	r1, #4
 801204c:	f7ff ff94 	bl	8011f78 <std>
 8012050:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012054:	2201      	movs	r2, #1
 8012056:	2109      	movs	r1, #9
 8012058:	f7ff ff8e 	bl	8011f78 <std>
 801205c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012060:	2202      	movs	r2, #2
 8012062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012066:	2112      	movs	r1, #18
 8012068:	f7ff bf86 	b.w	8011f78 <std>
 801206c:	2000c2a8 	.word	0x2000c2a8
 8012070:	2000c170 	.word	0x2000c170
 8012074:	08011fe5 	.word	0x08011fe5

08012078 <__sfp_lock_acquire>:
 8012078:	4801      	ldr	r0, [pc, #4]	@ (8012080 <__sfp_lock_acquire+0x8>)
 801207a:	f000 b9e4 	b.w	8012446 <__retarget_lock_acquire_recursive>
 801207e:	bf00      	nop
 8012080:	2000c2b2 	.word	0x2000c2b2

08012084 <__sfp_lock_release>:
 8012084:	4801      	ldr	r0, [pc, #4]	@ (801208c <__sfp_lock_release+0x8>)
 8012086:	f000 b9df 	b.w	8012448 <__retarget_lock_release_recursive>
 801208a:	bf00      	nop
 801208c:	2000c2b2 	.word	0x2000c2b2

08012090 <__sinit>:
 8012090:	b510      	push	{r4, lr}
 8012092:	4604      	mov	r4, r0
 8012094:	f7ff fff0 	bl	8012078 <__sfp_lock_acquire>
 8012098:	6a23      	ldr	r3, [r4, #32]
 801209a:	b11b      	cbz	r3, 80120a4 <__sinit+0x14>
 801209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a0:	f7ff bff0 	b.w	8012084 <__sfp_lock_release>
 80120a4:	4b04      	ldr	r3, [pc, #16]	@ (80120b8 <__sinit+0x28>)
 80120a6:	6223      	str	r3, [r4, #32]
 80120a8:	4b04      	ldr	r3, [pc, #16]	@ (80120bc <__sinit+0x2c>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1f5      	bne.n	801209c <__sinit+0xc>
 80120b0:	f7ff ffc4 	bl	801203c <global_stdio_init.part.0>
 80120b4:	e7f2      	b.n	801209c <__sinit+0xc>
 80120b6:	bf00      	nop
 80120b8:	08011ffd 	.word	0x08011ffd
 80120bc:	2000c2a8 	.word	0x2000c2a8

080120c0 <_fwalk_sglue>:
 80120c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120c4:	4607      	mov	r7, r0
 80120c6:	4688      	mov	r8, r1
 80120c8:	4614      	mov	r4, r2
 80120ca:	2600      	movs	r6, #0
 80120cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120d0:	f1b9 0901 	subs.w	r9, r9, #1
 80120d4:	d505      	bpl.n	80120e2 <_fwalk_sglue+0x22>
 80120d6:	6824      	ldr	r4, [r4, #0]
 80120d8:	2c00      	cmp	r4, #0
 80120da:	d1f7      	bne.n	80120cc <_fwalk_sglue+0xc>
 80120dc:	4630      	mov	r0, r6
 80120de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120e2:	89ab      	ldrh	r3, [r5, #12]
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d907      	bls.n	80120f8 <_fwalk_sglue+0x38>
 80120e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120ec:	3301      	adds	r3, #1
 80120ee:	d003      	beq.n	80120f8 <_fwalk_sglue+0x38>
 80120f0:	4629      	mov	r1, r5
 80120f2:	4638      	mov	r0, r7
 80120f4:	47c0      	blx	r8
 80120f6:	4306      	orrs	r6, r0
 80120f8:	3568      	adds	r5, #104	@ 0x68
 80120fa:	e7e9      	b.n	80120d0 <_fwalk_sglue+0x10>

080120fc <iprintf>:
 80120fc:	b40f      	push	{r0, r1, r2, r3}
 80120fe:	b507      	push	{r0, r1, r2, lr}
 8012100:	4906      	ldr	r1, [pc, #24]	@ (801211c <iprintf+0x20>)
 8012102:	ab04      	add	r3, sp, #16
 8012104:	6808      	ldr	r0, [r1, #0]
 8012106:	f853 2b04 	ldr.w	r2, [r3], #4
 801210a:	6881      	ldr	r1, [r0, #8]
 801210c:	9301      	str	r3, [sp, #4]
 801210e:	f002 fc79 	bl	8014a04 <_vfiprintf_r>
 8012112:	b003      	add	sp, #12
 8012114:	f85d eb04 	ldr.w	lr, [sp], #4
 8012118:	b004      	add	sp, #16
 801211a:	4770      	bx	lr
 801211c:	20000078 	.word	0x20000078

08012120 <sniprintf>:
 8012120:	b40c      	push	{r2, r3}
 8012122:	b530      	push	{r4, r5, lr}
 8012124:	4b17      	ldr	r3, [pc, #92]	@ (8012184 <sniprintf+0x64>)
 8012126:	1e0c      	subs	r4, r1, #0
 8012128:	681d      	ldr	r5, [r3, #0]
 801212a:	b09d      	sub	sp, #116	@ 0x74
 801212c:	da08      	bge.n	8012140 <sniprintf+0x20>
 801212e:	238b      	movs	r3, #139	@ 0x8b
 8012130:	602b      	str	r3, [r5, #0]
 8012132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012136:	b01d      	add	sp, #116	@ 0x74
 8012138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801213c:	b002      	add	sp, #8
 801213e:	4770      	bx	lr
 8012140:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012144:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012148:	bf14      	ite	ne
 801214a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801214e:	4623      	moveq	r3, r4
 8012150:	9304      	str	r3, [sp, #16]
 8012152:	9307      	str	r3, [sp, #28]
 8012154:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012158:	9002      	str	r0, [sp, #8]
 801215a:	9006      	str	r0, [sp, #24]
 801215c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012160:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012162:	ab21      	add	r3, sp, #132	@ 0x84
 8012164:	a902      	add	r1, sp, #8
 8012166:	4628      	mov	r0, r5
 8012168:	9301      	str	r3, [sp, #4]
 801216a:	f002 fb25 	bl	80147b8 <_svfiprintf_r>
 801216e:	1c43      	adds	r3, r0, #1
 8012170:	bfbc      	itt	lt
 8012172:	238b      	movlt	r3, #139	@ 0x8b
 8012174:	602b      	strlt	r3, [r5, #0]
 8012176:	2c00      	cmp	r4, #0
 8012178:	d0dd      	beq.n	8012136 <sniprintf+0x16>
 801217a:	9b02      	ldr	r3, [sp, #8]
 801217c:	2200      	movs	r2, #0
 801217e:	701a      	strb	r2, [r3, #0]
 8012180:	e7d9      	b.n	8012136 <sniprintf+0x16>
 8012182:	bf00      	nop
 8012184:	20000078 	.word	0x20000078

08012188 <siprintf>:
 8012188:	b40e      	push	{r1, r2, r3}
 801218a:	b500      	push	{lr}
 801218c:	b09c      	sub	sp, #112	@ 0x70
 801218e:	ab1d      	add	r3, sp, #116	@ 0x74
 8012190:	9002      	str	r0, [sp, #8]
 8012192:	9006      	str	r0, [sp, #24]
 8012194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012198:	4809      	ldr	r0, [pc, #36]	@ (80121c0 <siprintf+0x38>)
 801219a:	9107      	str	r1, [sp, #28]
 801219c:	9104      	str	r1, [sp, #16]
 801219e:	4909      	ldr	r1, [pc, #36]	@ (80121c4 <siprintf+0x3c>)
 80121a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a4:	9105      	str	r1, [sp, #20]
 80121a6:	6800      	ldr	r0, [r0, #0]
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	a902      	add	r1, sp, #8
 80121ac:	f002 fb04 	bl	80147b8 <_svfiprintf_r>
 80121b0:	9b02      	ldr	r3, [sp, #8]
 80121b2:	2200      	movs	r2, #0
 80121b4:	701a      	strb	r2, [r3, #0]
 80121b6:	b01c      	add	sp, #112	@ 0x70
 80121b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80121bc:	b003      	add	sp, #12
 80121be:	4770      	bx	lr
 80121c0:	20000078 	.word	0x20000078
 80121c4:	ffff0208 	.word	0xffff0208

080121c8 <__sread>:
 80121c8:	b510      	push	{r4, lr}
 80121ca:	460c      	mov	r4, r1
 80121cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121d0:	f000 f8da 	bl	8012388 <_read_r>
 80121d4:	2800      	cmp	r0, #0
 80121d6:	bfab      	itete	ge
 80121d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80121da:	89a3      	ldrhlt	r3, [r4, #12]
 80121dc:	181b      	addge	r3, r3, r0
 80121de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80121e2:	bfac      	ite	ge
 80121e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80121e6:	81a3      	strhlt	r3, [r4, #12]
 80121e8:	bd10      	pop	{r4, pc}

080121ea <__swrite>:
 80121ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ee:	461f      	mov	r7, r3
 80121f0:	898b      	ldrh	r3, [r1, #12]
 80121f2:	05db      	lsls	r3, r3, #23
 80121f4:	4605      	mov	r5, r0
 80121f6:	460c      	mov	r4, r1
 80121f8:	4616      	mov	r6, r2
 80121fa:	d505      	bpl.n	8012208 <__swrite+0x1e>
 80121fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012200:	2302      	movs	r3, #2
 8012202:	2200      	movs	r2, #0
 8012204:	f000 f8ae 	bl	8012364 <_lseek_r>
 8012208:	89a3      	ldrh	r3, [r4, #12]
 801220a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801220e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012212:	81a3      	strh	r3, [r4, #12]
 8012214:	4632      	mov	r2, r6
 8012216:	463b      	mov	r3, r7
 8012218:	4628      	mov	r0, r5
 801221a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801221e:	f000 b8d5 	b.w	80123cc <_write_r>

08012222 <__sseek>:
 8012222:	b510      	push	{r4, lr}
 8012224:	460c      	mov	r4, r1
 8012226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801222a:	f000 f89b 	bl	8012364 <_lseek_r>
 801222e:	1c43      	adds	r3, r0, #1
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	bf15      	itete	ne
 8012234:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801223a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801223e:	81a3      	strheq	r3, [r4, #12]
 8012240:	bf18      	it	ne
 8012242:	81a3      	strhne	r3, [r4, #12]
 8012244:	bd10      	pop	{r4, pc}

08012246 <__sclose>:
 8012246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801224a:	f000 b87b 	b.w	8012344 <_close_r>

0801224e <_vsniprintf_r>:
 801224e:	b530      	push	{r4, r5, lr}
 8012250:	4614      	mov	r4, r2
 8012252:	2c00      	cmp	r4, #0
 8012254:	b09b      	sub	sp, #108	@ 0x6c
 8012256:	4605      	mov	r5, r0
 8012258:	461a      	mov	r2, r3
 801225a:	da05      	bge.n	8012268 <_vsniprintf_r+0x1a>
 801225c:	238b      	movs	r3, #139	@ 0x8b
 801225e:	6003      	str	r3, [r0, #0]
 8012260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012264:	b01b      	add	sp, #108	@ 0x6c
 8012266:	bd30      	pop	{r4, r5, pc}
 8012268:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801226c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012270:	bf14      	ite	ne
 8012272:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012276:	4623      	moveq	r3, r4
 8012278:	9302      	str	r3, [sp, #8]
 801227a:	9305      	str	r3, [sp, #20]
 801227c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012280:	9100      	str	r1, [sp, #0]
 8012282:	9104      	str	r1, [sp, #16]
 8012284:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012288:	4669      	mov	r1, sp
 801228a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801228c:	f002 fa94 	bl	80147b8 <_svfiprintf_r>
 8012290:	1c43      	adds	r3, r0, #1
 8012292:	bfbc      	itt	lt
 8012294:	238b      	movlt	r3, #139	@ 0x8b
 8012296:	602b      	strlt	r3, [r5, #0]
 8012298:	2c00      	cmp	r4, #0
 801229a:	d0e3      	beq.n	8012264 <_vsniprintf_r+0x16>
 801229c:	9b00      	ldr	r3, [sp, #0]
 801229e:	2200      	movs	r2, #0
 80122a0:	701a      	strb	r2, [r3, #0]
 80122a2:	e7df      	b.n	8012264 <_vsniprintf_r+0x16>

080122a4 <vsniprintf>:
 80122a4:	b507      	push	{r0, r1, r2, lr}
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	4613      	mov	r3, r2
 80122aa:	460a      	mov	r2, r1
 80122ac:	4601      	mov	r1, r0
 80122ae:	4803      	ldr	r0, [pc, #12]	@ (80122bc <vsniprintf+0x18>)
 80122b0:	6800      	ldr	r0, [r0, #0]
 80122b2:	f7ff ffcc 	bl	801224e <_vsniprintf_r>
 80122b6:	b003      	add	sp, #12
 80122b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80122bc:	20000078 	.word	0x20000078

080122c0 <memset>:
 80122c0:	4402      	add	r2, r0
 80122c2:	4603      	mov	r3, r0
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d100      	bne.n	80122ca <memset+0xa>
 80122c8:	4770      	bx	lr
 80122ca:	f803 1b01 	strb.w	r1, [r3], #1
 80122ce:	e7f9      	b.n	80122c4 <memset+0x4>

080122d0 <strchr>:
 80122d0:	b2c9      	uxtb	r1, r1
 80122d2:	4603      	mov	r3, r0
 80122d4:	4618      	mov	r0, r3
 80122d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122da:	b112      	cbz	r2, 80122e2 <strchr+0x12>
 80122dc:	428a      	cmp	r2, r1
 80122de:	d1f9      	bne.n	80122d4 <strchr+0x4>
 80122e0:	4770      	bx	lr
 80122e2:	2900      	cmp	r1, #0
 80122e4:	bf18      	it	ne
 80122e6:	2000      	movne	r0, #0
 80122e8:	4770      	bx	lr

080122ea <strncmp>:
 80122ea:	b510      	push	{r4, lr}
 80122ec:	b16a      	cbz	r2, 801230a <strncmp+0x20>
 80122ee:	3901      	subs	r1, #1
 80122f0:	1884      	adds	r4, r0, r2
 80122f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d103      	bne.n	8012306 <strncmp+0x1c>
 80122fe:	42a0      	cmp	r0, r4
 8012300:	d001      	beq.n	8012306 <strncmp+0x1c>
 8012302:	2a00      	cmp	r2, #0
 8012304:	d1f5      	bne.n	80122f2 <strncmp+0x8>
 8012306:	1ad0      	subs	r0, r2, r3
 8012308:	bd10      	pop	{r4, pc}
 801230a:	4610      	mov	r0, r2
 801230c:	e7fc      	b.n	8012308 <strncmp+0x1e>

0801230e <strstr>:
 801230e:	780a      	ldrb	r2, [r1, #0]
 8012310:	b570      	push	{r4, r5, r6, lr}
 8012312:	b96a      	cbnz	r2, 8012330 <strstr+0x22>
 8012314:	bd70      	pop	{r4, r5, r6, pc}
 8012316:	429a      	cmp	r2, r3
 8012318:	d109      	bne.n	801232e <strstr+0x20>
 801231a:	460c      	mov	r4, r1
 801231c:	4605      	mov	r5, r0
 801231e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012322:	2b00      	cmp	r3, #0
 8012324:	d0f6      	beq.n	8012314 <strstr+0x6>
 8012326:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801232a:	429e      	cmp	r6, r3
 801232c:	d0f7      	beq.n	801231e <strstr+0x10>
 801232e:	3001      	adds	r0, #1
 8012330:	7803      	ldrb	r3, [r0, #0]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d1ef      	bne.n	8012316 <strstr+0x8>
 8012336:	4618      	mov	r0, r3
 8012338:	e7ec      	b.n	8012314 <strstr+0x6>
	...

0801233c <_localeconv_r>:
 801233c:	4800      	ldr	r0, [pc, #0]	@ (8012340 <_localeconv_r+0x4>)
 801233e:	4770      	bx	lr
 8012340:	200001b8 	.word	0x200001b8

08012344 <_close_r>:
 8012344:	b538      	push	{r3, r4, r5, lr}
 8012346:	4d06      	ldr	r5, [pc, #24]	@ (8012360 <_close_r+0x1c>)
 8012348:	2300      	movs	r3, #0
 801234a:	4604      	mov	r4, r0
 801234c:	4608      	mov	r0, r1
 801234e:	602b      	str	r3, [r5, #0]
 8012350:	f7ef fac6 	bl	80018e0 <_close>
 8012354:	1c43      	adds	r3, r0, #1
 8012356:	d102      	bne.n	801235e <_close_r+0x1a>
 8012358:	682b      	ldr	r3, [r5, #0]
 801235a:	b103      	cbz	r3, 801235e <_close_r+0x1a>
 801235c:	6023      	str	r3, [r4, #0]
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	2000c2ac 	.word	0x2000c2ac

08012364 <_lseek_r>:
 8012364:	b538      	push	{r3, r4, r5, lr}
 8012366:	4d07      	ldr	r5, [pc, #28]	@ (8012384 <_lseek_r+0x20>)
 8012368:	4604      	mov	r4, r0
 801236a:	4608      	mov	r0, r1
 801236c:	4611      	mov	r1, r2
 801236e:	2200      	movs	r2, #0
 8012370:	602a      	str	r2, [r5, #0]
 8012372:	461a      	mov	r2, r3
 8012374:	f7ef fadb 	bl	800192e <_lseek>
 8012378:	1c43      	adds	r3, r0, #1
 801237a:	d102      	bne.n	8012382 <_lseek_r+0x1e>
 801237c:	682b      	ldr	r3, [r5, #0]
 801237e:	b103      	cbz	r3, 8012382 <_lseek_r+0x1e>
 8012380:	6023      	str	r3, [r4, #0]
 8012382:	bd38      	pop	{r3, r4, r5, pc}
 8012384:	2000c2ac 	.word	0x2000c2ac

08012388 <_read_r>:
 8012388:	b538      	push	{r3, r4, r5, lr}
 801238a:	4d07      	ldr	r5, [pc, #28]	@ (80123a8 <_read_r+0x20>)
 801238c:	4604      	mov	r4, r0
 801238e:	4608      	mov	r0, r1
 8012390:	4611      	mov	r1, r2
 8012392:	2200      	movs	r2, #0
 8012394:	602a      	str	r2, [r5, #0]
 8012396:	461a      	mov	r2, r3
 8012398:	f7ef fa69 	bl	800186e <_read>
 801239c:	1c43      	adds	r3, r0, #1
 801239e:	d102      	bne.n	80123a6 <_read_r+0x1e>
 80123a0:	682b      	ldr	r3, [r5, #0]
 80123a2:	b103      	cbz	r3, 80123a6 <_read_r+0x1e>
 80123a4:	6023      	str	r3, [r4, #0]
 80123a6:	bd38      	pop	{r3, r4, r5, pc}
 80123a8:	2000c2ac 	.word	0x2000c2ac

080123ac <_sbrk_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	4d06      	ldr	r5, [pc, #24]	@ (80123c8 <_sbrk_r+0x1c>)
 80123b0:	2300      	movs	r3, #0
 80123b2:	4604      	mov	r4, r0
 80123b4:	4608      	mov	r0, r1
 80123b6:	602b      	str	r3, [r5, #0]
 80123b8:	f7ef fac6 	bl	8001948 <_sbrk>
 80123bc:	1c43      	adds	r3, r0, #1
 80123be:	d102      	bne.n	80123c6 <_sbrk_r+0x1a>
 80123c0:	682b      	ldr	r3, [r5, #0]
 80123c2:	b103      	cbz	r3, 80123c6 <_sbrk_r+0x1a>
 80123c4:	6023      	str	r3, [r4, #0]
 80123c6:	bd38      	pop	{r3, r4, r5, pc}
 80123c8:	2000c2ac 	.word	0x2000c2ac

080123cc <_write_r>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	4d07      	ldr	r5, [pc, #28]	@ (80123ec <_write_r+0x20>)
 80123d0:	4604      	mov	r4, r0
 80123d2:	4608      	mov	r0, r1
 80123d4:	4611      	mov	r1, r2
 80123d6:	2200      	movs	r2, #0
 80123d8:	602a      	str	r2, [r5, #0]
 80123da:	461a      	mov	r2, r3
 80123dc:	f7ef fa64 	bl	80018a8 <_write>
 80123e0:	1c43      	adds	r3, r0, #1
 80123e2:	d102      	bne.n	80123ea <_write_r+0x1e>
 80123e4:	682b      	ldr	r3, [r5, #0]
 80123e6:	b103      	cbz	r3, 80123ea <_write_r+0x1e>
 80123e8:	6023      	str	r3, [r4, #0]
 80123ea:	bd38      	pop	{r3, r4, r5, pc}
 80123ec:	2000c2ac 	.word	0x2000c2ac

080123f0 <__errno>:
 80123f0:	4b01      	ldr	r3, [pc, #4]	@ (80123f8 <__errno+0x8>)
 80123f2:	6818      	ldr	r0, [r3, #0]
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	20000078 	.word	0x20000078

080123fc <__libc_init_array>:
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	4d0d      	ldr	r5, [pc, #52]	@ (8012434 <__libc_init_array+0x38>)
 8012400:	4c0d      	ldr	r4, [pc, #52]	@ (8012438 <__libc_init_array+0x3c>)
 8012402:	1b64      	subs	r4, r4, r5
 8012404:	10a4      	asrs	r4, r4, #2
 8012406:	2600      	movs	r6, #0
 8012408:	42a6      	cmp	r6, r4
 801240a:	d109      	bne.n	8012420 <__libc_init_array+0x24>
 801240c:	4d0b      	ldr	r5, [pc, #44]	@ (801243c <__libc_init_array+0x40>)
 801240e:	4c0c      	ldr	r4, [pc, #48]	@ (8012440 <__libc_init_array+0x44>)
 8012410:	f003 f9ac 	bl	801576c <_init>
 8012414:	1b64      	subs	r4, r4, r5
 8012416:	10a4      	asrs	r4, r4, #2
 8012418:	2600      	movs	r6, #0
 801241a:	42a6      	cmp	r6, r4
 801241c:	d105      	bne.n	801242a <__libc_init_array+0x2e>
 801241e:	bd70      	pop	{r4, r5, r6, pc}
 8012420:	f855 3b04 	ldr.w	r3, [r5], #4
 8012424:	4798      	blx	r3
 8012426:	3601      	adds	r6, #1
 8012428:	e7ee      	b.n	8012408 <__libc_init_array+0xc>
 801242a:	f855 3b04 	ldr.w	r3, [r5], #4
 801242e:	4798      	blx	r3
 8012430:	3601      	adds	r6, #1
 8012432:	e7f2      	b.n	801241a <__libc_init_array+0x1e>
 8012434:	080164cc 	.word	0x080164cc
 8012438:	080164cc 	.word	0x080164cc
 801243c:	080164cc 	.word	0x080164cc
 8012440:	080164d0 	.word	0x080164d0

08012444 <__retarget_lock_init_recursive>:
 8012444:	4770      	bx	lr

08012446 <__retarget_lock_acquire_recursive>:
 8012446:	4770      	bx	lr

08012448 <__retarget_lock_release_recursive>:
 8012448:	4770      	bx	lr

0801244a <strcpy>:
 801244a:	4603      	mov	r3, r0
 801244c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012450:	f803 2b01 	strb.w	r2, [r3], #1
 8012454:	2a00      	cmp	r2, #0
 8012456:	d1f9      	bne.n	801244c <strcpy+0x2>
 8012458:	4770      	bx	lr

0801245a <memcpy>:
 801245a:	440a      	add	r2, r1
 801245c:	4291      	cmp	r1, r2
 801245e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012462:	d100      	bne.n	8012466 <memcpy+0xc>
 8012464:	4770      	bx	lr
 8012466:	b510      	push	{r4, lr}
 8012468:	f811 4b01 	ldrb.w	r4, [r1], #1
 801246c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012470:	4291      	cmp	r1, r2
 8012472:	d1f9      	bne.n	8012468 <memcpy+0xe>
 8012474:	bd10      	pop	{r4, pc}
	...

08012478 <nanf>:
 8012478:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012480 <nanf+0x8>
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	7fc00000 	.word	0x7fc00000

08012484 <__assert_func>:
 8012484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012486:	4614      	mov	r4, r2
 8012488:	461a      	mov	r2, r3
 801248a:	4b09      	ldr	r3, [pc, #36]	@ (80124b0 <__assert_func+0x2c>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	4605      	mov	r5, r0
 8012490:	68d8      	ldr	r0, [r3, #12]
 8012492:	b954      	cbnz	r4, 80124aa <__assert_func+0x26>
 8012494:	4b07      	ldr	r3, [pc, #28]	@ (80124b4 <__assert_func+0x30>)
 8012496:	461c      	mov	r4, r3
 8012498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801249c:	9100      	str	r1, [sp, #0]
 801249e:	462b      	mov	r3, r5
 80124a0:	4905      	ldr	r1, [pc, #20]	@ (80124b8 <__assert_func+0x34>)
 80124a2:	f002 fc73 	bl	8014d8c <fiprintf>
 80124a6:	f002 fd3b 	bl	8014f20 <abort>
 80124aa:	4b04      	ldr	r3, [pc, #16]	@ (80124bc <__assert_func+0x38>)
 80124ac:	e7f4      	b.n	8012498 <__assert_func+0x14>
 80124ae:	bf00      	nop
 80124b0:	20000078 	.word	0x20000078
 80124b4:	08016220 	.word	0x08016220
 80124b8:	080161f2 	.word	0x080161f2
 80124bc:	080161e5 	.word	0x080161e5

080124c0 <quorem>:
 80124c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c4:	6903      	ldr	r3, [r0, #16]
 80124c6:	690c      	ldr	r4, [r1, #16]
 80124c8:	42a3      	cmp	r3, r4
 80124ca:	4607      	mov	r7, r0
 80124cc:	db7e      	blt.n	80125cc <quorem+0x10c>
 80124ce:	3c01      	subs	r4, #1
 80124d0:	f101 0814 	add.w	r8, r1, #20
 80124d4:	00a3      	lsls	r3, r4, #2
 80124d6:	f100 0514 	add.w	r5, r0, #20
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124e0:	9301      	str	r3, [sp, #4]
 80124e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80124e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124ea:	3301      	adds	r3, #1
 80124ec:	429a      	cmp	r2, r3
 80124ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80124f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80124f6:	d32e      	bcc.n	8012556 <quorem+0x96>
 80124f8:	f04f 0a00 	mov.w	sl, #0
 80124fc:	46c4      	mov	ip, r8
 80124fe:	46ae      	mov	lr, r5
 8012500:	46d3      	mov	fp, sl
 8012502:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012506:	b298      	uxth	r0, r3
 8012508:	fb06 a000 	mla	r0, r6, r0, sl
 801250c:	0c02      	lsrs	r2, r0, #16
 801250e:	0c1b      	lsrs	r3, r3, #16
 8012510:	fb06 2303 	mla	r3, r6, r3, r2
 8012514:	f8de 2000 	ldr.w	r2, [lr]
 8012518:	b280      	uxth	r0, r0
 801251a:	b292      	uxth	r2, r2
 801251c:	1a12      	subs	r2, r2, r0
 801251e:	445a      	add	r2, fp
 8012520:	f8de 0000 	ldr.w	r0, [lr]
 8012524:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012528:	b29b      	uxth	r3, r3
 801252a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801252e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012532:	b292      	uxth	r2, r2
 8012534:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012538:	45e1      	cmp	r9, ip
 801253a:	f84e 2b04 	str.w	r2, [lr], #4
 801253e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012542:	d2de      	bcs.n	8012502 <quorem+0x42>
 8012544:	9b00      	ldr	r3, [sp, #0]
 8012546:	58eb      	ldr	r3, [r5, r3]
 8012548:	b92b      	cbnz	r3, 8012556 <quorem+0x96>
 801254a:	9b01      	ldr	r3, [sp, #4]
 801254c:	3b04      	subs	r3, #4
 801254e:	429d      	cmp	r5, r3
 8012550:	461a      	mov	r2, r3
 8012552:	d32f      	bcc.n	80125b4 <quorem+0xf4>
 8012554:	613c      	str	r4, [r7, #16]
 8012556:	4638      	mov	r0, r7
 8012558:	f001 f8aa 	bl	80136b0 <__mcmp>
 801255c:	2800      	cmp	r0, #0
 801255e:	db25      	blt.n	80125ac <quorem+0xec>
 8012560:	4629      	mov	r1, r5
 8012562:	2000      	movs	r0, #0
 8012564:	f858 2b04 	ldr.w	r2, [r8], #4
 8012568:	f8d1 c000 	ldr.w	ip, [r1]
 801256c:	fa1f fe82 	uxth.w	lr, r2
 8012570:	fa1f f38c 	uxth.w	r3, ip
 8012574:	eba3 030e 	sub.w	r3, r3, lr
 8012578:	4403      	add	r3, r0
 801257a:	0c12      	lsrs	r2, r2, #16
 801257c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012580:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012584:	b29b      	uxth	r3, r3
 8012586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801258a:	45c1      	cmp	r9, r8
 801258c:	f841 3b04 	str.w	r3, [r1], #4
 8012590:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012594:	d2e6      	bcs.n	8012564 <quorem+0xa4>
 8012596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801259a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801259e:	b922      	cbnz	r2, 80125aa <quorem+0xea>
 80125a0:	3b04      	subs	r3, #4
 80125a2:	429d      	cmp	r5, r3
 80125a4:	461a      	mov	r2, r3
 80125a6:	d30b      	bcc.n	80125c0 <quorem+0x100>
 80125a8:	613c      	str	r4, [r7, #16]
 80125aa:	3601      	adds	r6, #1
 80125ac:	4630      	mov	r0, r6
 80125ae:	b003      	add	sp, #12
 80125b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b4:	6812      	ldr	r2, [r2, #0]
 80125b6:	3b04      	subs	r3, #4
 80125b8:	2a00      	cmp	r2, #0
 80125ba:	d1cb      	bne.n	8012554 <quorem+0x94>
 80125bc:	3c01      	subs	r4, #1
 80125be:	e7c6      	b.n	801254e <quorem+0x8e>
 80125c0:	6812      	ldr	r2, [r2, #0]
 80125c2:	3b04      	subs	r3, #4
 80125c4:	2a00      	cmp	r2, #0
 80125c6:	d1ef      	bne.n	80125a8 <quorem+0xe8>
 80125c8:	3c01      	subs	r4, #1
 80125ca:	e7ea      	b.n	80125a2 <quorem+0xe2>
 80125cc:	2000      	movs	r0, #0
 80125ce:	e7ee      	b.n	80125ae <quorem+0xee>

080125d0 <_dtoa_r>:
 80125d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d4:	ed2d 8b02 	vpush	{d8}
 80125d8:	69c7      	ldr	r7, [r0, #28]
 80125da:	b091      	sub	sp, #68	@ 0x44
 80125dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80125e0:	ec55 4b10 	vmov	r4, r5, d0
 80125e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80125e6:	9107      	str	r1, [sp, #28]
 80125e8:	4681      	mov	r9, r0
 80125ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80125ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80125ee:	b97f      	cbnz	r7, 8012610 <_dtoa_r+0x40>
 80125f0:	2010      	movs	r0, #16
 80125f2:	f7fe fca7 	bl	8010f44 <malloc>
 80125f6:	4602      	mov	r2, r0
 80125f8:	f8c9 001c 	str.w	r0, [r9, #28]
 80125fc:	b920      	cbnz	r0, 8012608 <_dtoa_r+0x38>
 80125fe:	4ba0      	ldr	r3, [pc, #640]	@ (8012880 <_dtoa_r+0x2b0>)
 8012600:	21ef      	movs	r1, #239	@ 0xef
 8012602:	48a0      	ldr	r0, [pc, #640]	@ (8012884 <_dtoa_r+0x2b4>)
 8012604:	f7ff ff3e 	bl	8012484 <__assert_func>
 8012608:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801260c:	6007      	str	r7, [r0, #0]
 801260e:	60c7      	str	r7, [r0, #12]
 8012610:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012614:	6819      	ldr	r1, [r3, #0]
 8012616:	b159      	cbz	r1, 8012630 <_dtoa_r+0x60>
 8012618:	685a      	ldr	r2, [r3, #4]
 801261a:	604a      	str	r2, [r1, #4]
 801261c:	2301      	movs	r3, #1
 801261e:	4093      	lsls	r3, r2
 8012620:	608b      	str	r3, [r1, #8]
 8012622:	4648      	mov	r0, r9
 8012624:	f000 fdc0 	bl	80131a8 <_Bfree>
 8012628:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801262c:	2200      	movs	r2, #0
 801262e:	601a      	str	r2, [r3, #0]
 8012630:	1e2b      	subs	r3, r5, #0
 8012632:	bfbb      	ittet	lt
 8012634:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012638:	9303      	strlt	r3, [sp, #12]
 801263a:	2300      	movge	r3, #0
 801263c:	2201      	movlt	r2, #1
 801263e:	bfac      	ite	ge
 8012640:	6033      	strge	r3, [r6, #0]
 8012642:	6032      	strlt	r2, [r6, #0]
 8012644:	4b90      	ldr	r3, [pc, #576]	@ (8012888 <_dtoa_r+0x2b8>)
 8012646:	9e03      	ldr	r6, [sp, #12]
 8012648:	43b3      	bics	r3, r6
 801264a:	d110      	bne.n	801266e <_dtoa_r+0x9e>
 801264c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801264e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012652:	6013      	str	r3, [r2, #0]
 8012654:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012658:	4323      	orrs	r3, r4
 801265a:	f000 84de 	beq.w	801301a <_dtoa_r+0xa4a>
 801265e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012660:	4f8a      	ldr	r7, [pc, #552]	@ (801288c <_dtoa_r+0x2bc>)
 8012662:	2b00      	cmp	r3, #0
 8012664:	f000 84e0 	beq.w	8013028 <_dtoa_r+0xa58>
 8012668:	1cfb      	adds	r3, r7, #3
 801266a:	f000 bcdb 	b.w	8013024 <_dtoa_r+0xa54>
 801266e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012672:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267a:	d10a      	bne.n	8012692 <_dtoa_r+0xc2>
 801267c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801267e:	2301      	movs	r3, #1
 8012680:	6013      	str	r3, [r2, #0]
 8012682:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012684:	b113      	cbz	r3, 801268c <_dtoa_r+0xbc>
 8012686:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012688:	4b81      	ldr	r3, [pc, #516]	@ (8012890 <_dtoa_r+0x2c0>)
 801268a:	6013      	str	r3, [r2, #0]
 801268c:	4f81      	ldr	r7, [pc, #516]	@ (8012894 <_dtoa_r+0x2c4>)
 801268e:	f000 bccb 	b.w	8013028 <_dtoa_r+0xa58>
 8012692:	aa0e      	add	r2, sp, #56	@ 0x38
 8012694:	a90f      	add	r1, sp, #60	@ 0x3c
 8012696:	4648      	mov	r0, r9
 8012698:	eeb0 0b48 	vmov.f64	d0, d8
 801269c:	f001 f928 	bl	80138f0 <__d2b>
 80126a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80126a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126a6:	9001      	str	r0, [sp, #4]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d045      	beq.n	8012738 <_dtoa_r+0x168>
 80126ac:	eeb0 7b48 	vmov.f64	d7, d8
 80126b0:	ee18 1a90 	vmov	r1, s17
 80126b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80126b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80126bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80126c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80126c4:	2500      	movs	r5, #0
 80126c6:	ee07 1a90 	vmov	s15, r1
 80126ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80126ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012868 <_dtoa_r+0x298>
 80126d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80126d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012870 <_dtoa_r+0x2a0>
 80126da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80126de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012878 <_dtoa_r+0x2a8>
 80126e2:	ee07 3a90 	vmov	s15, r3
 80126e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80126ea:	eeb0 7b46 	vmov.f64	d7, d6
 80126ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 80126f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80126f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80126fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fe:	ee16 8a90 	vmov	r8, s13
 8012702:	d508      	bpl.n	8012716 <_dtoa_r+0x146>
 8012704:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012708:	eeb4 6b47 	vcmp.f64	d6, d7
 801270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012710:	bf18      	it	ne
 8012712:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8012716:	f1b8 0f16 	cmp.w	r8, #22
 801271a:	d82b      	bhi.n	8012774 <_dtoa_r+0x1a4>
 801271c:	495e      	ldr	r1, [pc, #376]	@ (8012898 <_dtoa_r+0x2c8>)
 801271e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012722:	ed91 7b00 	vldr	d7, [r1]
 8012726:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801272e:	d501      	bpl.n	8012734 <_dtoa_r+0x164>
 8012730:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012734:	2100      	movs	r1, #0
 8012736:	e01e      	b.n	8012776 <_dtoa_r+0x1a6>
 8012738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801273a:	4413      	add	r3, r2
 801273c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012740:	2920      	cmp	r1, #32
 8012742:	bfc1      	itttt	gt
 8012744:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012748:	408e      	lslgt	r6, r1
 801274a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801274e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012752:	bfd6      	itet	le
 8012754:	f1c1 0120 	rsble	r1, r1, #32
 8012758:	4331      	orrgt	r1, r6
 801275a:	fa04 f101 	lslle.w	r1, r4, r1
 801275e:	ee07 1a90 	vmov	s15, r1
 8012762:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012766:	3b01      	subs	r3, #1
 8012768:	ee17 1a90 	vmov	r1, s15
 801276c:	2501      	movs	r5, #1
 801276e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012772:	e7a8      	b.n	80126c6 <_dtoa_r+0xf6>
 8012774:	2101      	movs	r1, #1
 8012776:	1ad2      	subs	r2, r2, r3
 8012778:	1e53      	subs	r3, r2, #1
 801277a:	9306      	str	r3, [sp, #24]
 801277c:	bf45      	ittet	mi
 801277e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012782:	9305      	strmi	r3, [sp, #20]
 8012784:	2300      	movpl	r3, #0
 8012786:	2300      	movmi	r3, #0
 8012788:	bf4c      	ite	mi
 801278a:	9306      	strmi	r3, [sp, #24]
 801278c:	9305      	strpl	r3, [sp, #20]
 801278e:	f1b8 0f00 	cmp.w	r8, #0
 8012792:	910c      	str	r1, [sp, #48]	@ 0x30
 8012794:	db18      	blt.n	80127c8 <_dtoa_r+0x1f8>
 8012796:	9b06      	ldr	r3, [sp, #24]
 8012798:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801279c:	4443      	add	r3, r8
 801279e:	9306      	str	r3, [sp, #24]
 80127a0:	2300      	movs	r3, #0
 80127a2:	9a07      	ldr	r2, [sp, #28]
 80127a4:	2a09      	cmp	r2, #9
 80127a6:	d849      	bhi.n	801283c <_dtoa_r+0x26c>
 80127a8:	2a05      	cmp	r2, #5
 80127aa:	bfc4      	itt	gt
 80127ac:	3a04      	subgt	r2, #4
 80127ae:	9207      	strgt	r2, [sp, #28]
 80127b0:	9a07      	ldr	r2, [sp, #28]
 80127b2:	f1a2 0202 	sub.w	r2, r2, #2
 80127b6:	bfcc      	ite	gt
 80127b8:	2400      	movgt	r4, #0
 80127ba:	2401      	movle	r4, #1
 80127bc:	2a03      	cmp	r2, #3
 80127be:	d848      	bhi.n	8012852 <_dtoa_r+0x282>
 80127c0:	e8df f002 	tbb	[pc, r2]
 80127c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80127c8:	9b05      	ldr	r3, [sp, #20]
 80127ca:	2200      	movs	r2, #0
 80127cc:	eba3 0308 	sub.w	r3, r3, r8
 80127d0:	9305      	str	r3, [sp, #20]
 80127d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80127d4:	f1c8 0300 	rsb	r3, r8, #0
 80127d8:	e7e3      	b.n	80127a2 <_dtoa_r+0x1d2>
 80127da:	2200      	movs	r2, #0
 80127dc:	9208      	str	r2, [sp, #32]
 80127de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127e0:	2a00      	cmp	r2, #0
 80127e2:	dc39      	bgt.n	8012858 <_dtoa_r+0x288>
 80127e4:	f04f 0b01 	mov.w	fp, #1
 80127e8:	46da      	mov	sl, fp
 80127ea:	465a      	mov	r2, fp
 80127ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80127f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80127f4:	2100      	movs	r1, #0
 80127f6:	2004      	movs	r0, #4
 80127f8:	f100 0614 	add.w	r6, r0, #20
 80127fc:	4296      	cmp	r6, r2
 80127fe:	d930      	bls.n	8012862 <_dtoa_r+0x292>
 8012800:	6079      	str	r1, [r7, #4]
 8012802:	4648      	mov	r0, r9
 8012804:	9304      	str	r3, [sp, #16]
 8012806:	f000 fc8f 	bl	8013128 <_Balloc>
 801280a:	9b04      	ldr	r3, [sp, #16]
 801280c:	4607      	mov	r7, r0
 801280e:	2800      	cmp	r0, #0
 8012810:	d146      	bne.n	80128a0 <_dtoa_r+0x2d0>
 8012812:	4b22      	ldr	r3, [pc, #136]	@ (801289c <_dtoa_r+0x2cc>)
 8012814:	4602      	mov	r2, r0
 8012816:	f240 11af 	movw	r1, #431	@ 0x1af
 801281a:	e6f2      	b.n	8012602 <_dtoa_r+0x32>
 801281c:	2201      	movs	r2, #1
 801281e:	e7dd      	b.n	80127dc <_dtoa_r+0x20c>
 8012820:	2200      	movs	r2, #0
 8012822:	9208      	str	r2, [sp, #32]
 8012824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012826:	eb08 0b02 	add.w	fp, r8, r2
 801282a:	f10b 0a01 	add.w	sl, fp, #1
 801282e:	4652      	mov	r2, sl
 8012830:	2a01      	cmp	r2, #1
 8012832:	bfb8      	it	lt
 8012834:	2201      	movlt	r2, #1
 8012836:	e7db      	b.n	80127f0 <_dtoa_r+0x220>
 8012838:	2201      	movs	r2, #1
 801283a:	e7f2      	b.n	8012822 <_dtoa_r+0x252>
 801283c:	2401      	movs	r4, #1
 801283e:	2200      	movs	r2, #0
 8012840:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012844:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012848:	2100      	movs	r1, #0
 801284a:	46da      	mov	sl, fp
 801284c:	2212      	movs	r2, #18
 801284e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012850:	e7ce      	b.n	80127f0 <_dtoa_r+0x220>
 8012852:	2201      	movs	r2, #1
 8012854:	9208      	str	r2, [sp, #32]
 8012856:	e7f5      	b.n	8012844 <_dtoa_r+0x274>
 8012858:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801285c:	46da      	mov	sl, fp
 801285e:	465a      	mov	r2, fp
 8012860:	e7c6      	b.n	80127f0 <_dtoa_r+0x220>
 8012862:	3101      	adds	r1, #1
 8012864:	0040      	lsls	r0, r0, #1
 8012866:	e7c7      	b.n	80127f8 <_dtoa_r+0x228>
 8012868:	636f4361 	.word	0x636f4361
 801286c:	3fd287a7 	.word	0x3fd287a7
 8012870:	8b60c8b3 	.word	0x8b60c8b3
 8012874:	3fc68a28 	.word	0x3fc68a28
 8012878:	509f79fb 	.word	0x509f79fb
 801287c:	3fd34413 	.word	0x3fd34413
 8012880:	0801603c 	.word	0x0801603c
 8012884:	0801622e 	.word	0x0801622e
 8012888:	7ff00000 	.word	0x7ff00000
 801288c:	0801622a 	.word	0x0801622a
 8012890:	080161bd 	.word	0x080161bd
 8012894:	080161bc 	.word	0x080161bc
 8012898:	08016328 	.word	0x08016328
 801289c:	08016286 	.word	0x08016286
 80128a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80128a4:	f1ba 0f0e 	cmp.w	sl, #14
 80128a8:	6010      	str	r0, [r2, #0]
 80128aa:	d86f      	bhi.n	801298c <_dtoa_r+0x3bc>
 80128ac:	2c00      	cmp	r4, #0
 80128ae:	d06d      	beq.n	801298c <_dtoa_r+0x3bc>
 80128b0:	f1b8 0f00 	cmp.w	r8, #0
 80128b4:	f340 80c2 	ble.w	8012a3c <_dtoa_r+0x46c>
 80128b8:	4aca      	ldr	r2, [pc, #808]	@ (8012be4 <_dtoa_r+0x614>)
 80128ba:	f008 010f 	and.w	r1, r8, #15
 80128be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80128c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80128c6:	ed92 7b00 	vldr	d7, [r2]
 80128ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 80128ce:	f000 80a9 	beq.w	8012a24 <_dtoa_r+0x454>
 80128d2:	4ac5      	ldr	r2, [pc, #788]	@ (8012be8 <_dtoa_r+0x618>)
 80128d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80128d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80128dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80128e0:	f001 010f 	and.w	r1, r1, #15
 80128e4:	2203      	movs	r2, #3
 80128e6:	48c0      	ldr	r0, [pc, #768]	@ (8012be8 <_dtoa_r+0x618>)
 80128e8:	2900      	cmp	r1, #0
 80128ea:	f040 809d 	bne.w	8012a28 <_dtoa_r+0x458>
 80128ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80128f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80128f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80128fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80128fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012900:	2900      	cmp	r1, #0
 8012902:	f000 80c1 	beq.w	8012a88 <_dtoa_r+0x4b8>
 8012906:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801290a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012912:	f140 80b9 	bpl.w	8012a88 <_dtoa_r+0x4b8>
 8012916:	f1ba 0f00 	cmp.w	sl, #0
 801291a:	f000 80b5 	beq.w	8012a88 <_dtoa_r+0x4b8>
 801291e:	f1bb 0f00 	cmp.w	fp, #0
 8012922:	dd31      	ble.n	8012988 <_dtoa_r+0x3b8>
 8012924:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012928:	ee27 7b06 	vmul.f64	d7, d7, d6
 801292c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012930:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012934:	9104      	str	r1, [sp, #16]
 8012936:	3201      	adds	r2, #1
 8012938:	465c      	mov	r4, fp
 801293a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801293e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012942:	ee07 2a90 	vmov	s15, r2
 8012946:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801294a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801294e:	ee15 2a90 	vmov	r2, s11
 8012952:	ec51 0b15 	vmov	r0, r1, d5
 8012956:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801295a:	2c00      	cmp	r4, #0
 801295c:	f040 8098 	bne.w	8012a90 <_dtoa_r+0x4c0>
 8012960:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012964:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012968:	ec41 0b17 	vmov	d7, r0, r1
 801296c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012974:	f300 8261 	bgt.w	8012e3a <_dtoa_r+0x86a>
 8012978:	eeb1 7b47 	vneg.f64	d7, d7
 801297c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012984:	f100 80f5 	bmi.w	8012b72 <_dtoa_r+0x5a2>
 8012988:	ed8d 8b02 	vstr	d8, [sp, #8]
 801298c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801298e:	2a00      	cmp	r2, #0
 8012990:	f2c0 812c 	blt.w	8012bec <_dtoa_r+0x61c>
 8012994:	f1b8 0f0e 	cmp.w	r8, #14
 8012998:	f300 8128 	bgt.w	8012bec <_dtoa_r+0x61c>
 801299c:	4b91      	ldr	r3, [pc, #580]	@ (8012be4 <_dtoa_r+0x614>)
 801299e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80129a2:	ed93 6b00 	vldr	d6, [r3]
 80129a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	da03      	bge.n	80129b4 <_dtoa_r+0x3e4>
 80129ac:	f1ba 0f00 	cmp.w	sl, #0
 80129b0:	f340 80d2 	ble.w	8012b58 <_dtoa_r+0x588>
 80129b4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80129b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129bc:	463e      	mov	r6, r7
 80129be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80129c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80129c6:	ee15 3a10 	vmov	r3, s10
 80129ca:	3330      	adds	r3, #48	@ 0x30
 80129cc:	f806 3b01 	strb.w	r3, [r6], #1
 80129d0:	1bf3      	subs	r3, r6, r7
 80129d2:	459a      	cmp	sl, r3
 80129d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80129d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80129dc:	f040 80f8 	bne.w	8012bd0 <_dtoa_r+0x600>
 80129e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80129e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80129e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ec:	f300 80dd 	bgt.w	8012baa <_dtoa_r+0x5da>
 80129f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80129f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f8:	d104      	bne.n	8012a04 <_dtoa_r+0x434>
 80129fa:	ee15 3a10 	vmov	r3, s10
 80129fe:	07db      	lsls	r3, r3, #31
 8012a00:	f100 80d3 	bmi.w	8012baa <_dtoa_r+0x5da>
 8012a04:	9901      	ldr	r1, [sp, #4]
 8012a06:	4648      	mov	r0, r9
 8012a08:	f000 fbce 	bl	80131a8 <_Bfree>
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012a10:	7033      	strb	r3, [r6, #0]
 8012a12:	f108 0301 	add.w	r3, r8, #1
 8012a16:	6013      	str	r3, [r2, #0]
 8012a18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f000 8304 	beq.w	8013028 <_dtoa_r+0xa58>
 8012a20:	601e      	str	r6, [r3, #0]
 8012a22:	e301      	b.n	8013028 <_dtoa_r+0xa58>
 8012a24:	2202      	movs	r2, #2
 8012a26:	e75e      	b.n	80128e6 <_dtoa_r+0x316>
 8012a28:	07cc      	lsls	r4, r1, #31
 8012a2a:	d504      	bpl.n	8012a36 <_dtoa_r+0x466>
 8012a2c:	ed90 6b00 	vldr	d6, [r0]
 8012a30:	3201      	adds	r2, #1
 8012a32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a36:	1049      	asrs	r1, r1, #1
 8012a38:	3008      	adds	r0, #8
 8012a3a:	e755      	b.n	80128e8 <_dtoa_r+0x318>
 8012a3c:	d022      	beq.n	8012a84 <_dtoa_r+0x4b4>
 8012a3e:	f1c8 0100 	rsb	r1, r8, #0
 8012a42:	4a68      	ldr	r2, [pc, #416]	@ (8012be4 <_dtoa_r+0x614>)
 8012a44:	f001 000f 	and.w	r0, r1, #15
 8012a48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012a4c:	ed92 7b00 	vldr	d7, [r2]
 8012a50:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012a54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a58:	4863      	ldr	r0, [pc, #396]	@ (8012be8 <_dtoa_r+0x618>)
 8012a5a:	1109      	asrs	r1, r1, #4
 8012a5c:	2400      	movs	r4, #0
 8012a5e:	2202      	movs	r2, #2
 8012a60:	b929      	cbnz	r1, 8012a6e <_dtoa_r+0x49e>
 8012a62:	2c00      	cmp	r4, #0
 8012a64:	f43f af49 	beq.w	80128fa <_dtoa_r+0x32a>
 8012a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a6c:	e745      	b.n	80128fa <_dtoa_r+0x32a>
 8012a6e:	07ce      	lsls	r6, r1, #31
 8012a70:	d505      	bpl.n	8012a7e <_dtoa_r+0x4ae>
 8012a72:	ed90 6b00 	vldr	d6, [r0]
 8012a76:	3201      	adds	r2, #1
 8012a78:	2401      	movs	r4, #1
 8012a7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a7e:	1049      	asrs	r1, r1, #1
 8012a80:	3008      	adds	r0, #8
 8012a82:	e7ed      	b.n	8012a60 <_dtoa_r+0x490>
 8012a84:	2202      	movs	r2, #2
 8012a86:	e738      	b.n	80128fa <_dtoa_r+0x32a>
 8012a88:	f8cd 8010 	str.w	r8, [sp, #16]
 8012a8c:	4654      	mov	r4, sl
 8012a8e:	e754      	b.n	801293a <_dtoa_r+0x36a>
 8012a90:	4a54      	ldr	r2, [pc, #336]	@ (8012be4 <_dtoa_r+0x614>)
 8012a92:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012a96:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012a9a:	9a08      	ldr	r2, [sp, #32]
 8012a9c:	ec41 0b17 	vmov	d7, r0, r1
 8012aa0:	443c      	add	r4, r7
 8012aa2:	b34a      	cbz	r2, 8012af8 <_dtoa_r+0x528>
 8012aa4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012aa8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012aac:	463e      	mov	r6, r7
 8012aae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012ab2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012ab6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012aba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012abe:	ee14 2a90 	vmov	r2, s9
 8012ac2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012ac6:	3230      	adds	r2, #48	@ 0x30
 8012ac8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012acc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad4:	f806 2b01 	strb.w	r2, [r6], #1
 8012ad8:	d438      	bmi.n	8012b4c <_dtoa_r+0x57c>
 8012ada:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012ade:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae6:	d462      	bmi.n	8012bae <_dtoa_r+0x5de>
 8012ae8:	42a6      	cmp	r6, r4
 8012aea:	f43f af4d 	beq.w	8012988 <_dtoa_r+0x3b8>
 8012aee:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012af2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012af6:	e7e0      	b.n	8012aba <_dtoa_r+0x4ea>
 8012af8:	4621      	mov	r1, r4
 8012afa:	463e      	mov	r6, r7
 8012afc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b00:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012b04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012b08:	ee14 2a90 	vmov	r2, s9
 8012b0c:	3230      	adds	r2, #48	@ 0x30
 8012b0e:	f806 2b01 	strb.w	r2, [r6], #1
 8012b12:	42a6      	cmp	r6, r4
 8012b14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012b18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b1c:	d119      	bne.n	8012b52 <_dtoa_r+0x582>
 8012b1e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012b22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012b26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2e:	dc3e      	bgt.n	8012bae <_dtoa_r+0x5de>
 8012b30:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012b34:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3c:	f57f af24 	bpl.w	8012988 <_dtoa_r+0x3b8>
 8012b40:	460e      	mov	r6, r1
 8012b42:	3901      	subs	r1, #1
 8012b44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012b48:	2b30      	cmp	r3, #48	@ 0x30
 8012b4a:	d0f9      	beq.n	8012b40 <_dtoa_r+0x570>
 8012b4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012b50:	e758      	b.n	8012a04 <_dtoa_r+0x434>
 8012b52:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b56:	e7d5      	b.n	8012b04 <_dtoa_r+0x534>
 8012b58:	d10b      	bne.n	8012b72 <_dtoa_r+0x5a2>
 8012b5a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012b5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012b62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6e:	f2c0 8161 	blt.w	8012e34 <_dtoa_r+0x864>
 8012b72:	2400      	movs	r4, #0
 8012b74:	4625      	mov	r5, r4
 8012b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b78:	43db      	mvns	r3, r3
 8012b7a:	9304      	str	r3, [sp, #16]
 8012b7c:	463e      	mov	r6, r7
 8012b7e:	f04f 0800 	mov.w	r8, #0
 8012b82:	4621      	mov	r1, r4
 8012b84:	4648      	mov	r0, r9
 8012b86:	f000 fb0f 	bl	80131a8 <_Bfree>
 8012b8a:	2d00      	cmp	r5, #0
 8012b8c:	d0de      	beq.n	8012b4c <_dtoa_r+0x57c>
 8012b8e:	f1b8 0f00 	cmp.w	r8, #0
 8012b92:	d005      	beq.n	8012ba0 <_dtoa_r+0x5d0>
 8012b94:	45a8      	cmp	r8, r5
 8012b96:	d003      	beq.n	8012ba0 <_dtoa_r+0x5d0>
 8012b98:	4641      	mov	r1, r8
 8012b9a:	4648      	mov	r0, r9
 8012b9c:	f000 fb04 	bl	80131a8 <_Bfree>
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	4648      	mov	r0, r9
 8012ba4:	f000 fb00 	bl	80131a8 <_Bfree>
 8012ba8:	e7d0      	b.n	8012b4c <_dtoa_r+0x57c>
 8012baa:	f8cd 8010 	str.w	r8, [sp, #16]
 8012bae:	4633      	mov	r3, r6
 8012bb0:	461e      	mov	r6, r3
 8012bb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bb6:	2a39      	cmp	r2, #57	@ 0x39
 8012bb8:	d106      	bne.n	8012bc8 <_dtoa_r+0x5f8>
 8012bba:	429f      	cmp	r7, r3
 8012bbc:	d1f8      	bne.n	8012bb0 <_dtoa_r+0x5e0>
 8012bbe:	9a04      	ldr	r2, [sp, #16]
 8012bc0:	3201      	adds	r2, #1
 8012bc2:	9204      	str	r2, [sp, #16]
 8012bc4:	2230      	movs	r2, #48	@ 0x30
 8012bc6:	703a      	strb	r2, [r7, #0]
 8012bc8:	781a      	ldrb	r2, [r3, #0]
 8012bca:	3201      	adds	r2, #1
 8012bcc:	701a      	strb	r2, [r3, #0]
 8012bce:	e7bd      	b.n	8012b4c <_dtoa_r+0x57c>
 8012bd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012bd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bdc:	f47f aeef 	bne.w	80129be <_dtoa_r+0x3ee>
 8012be0:	e710      	b.n	8012a04 <_dtoa_r+0x434>
 8012be2:	bf00      	nop
 8012be4:	08016328 	.word	0x08016328
 8012be8:	08016300 	.word	0x08016300
 8012bec:	9908      	ldr	r1, [sp, #32]
 8012bee:	2900      	cmp	r1, #0
 8012bf0:	f000 80e3 	beq.w	8012dba <_dtoa_r+0x7ea>
 8012bf4:	9907      	ldr	r1, [sp, #28]
 8012bf6:	2901      	cmp	r1, #1
 8012bf8:	f300 80c8 	bgt.w	8012d8c <_dtoa_r+0x7bc>
 8012bfc:	2d00      	cmp	r5, #0
 8012bfe:	f000 80c1 	beq.w	8012d84 <_dtoa_r+0x7b4>
 8012c02:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012c06:	9e05      	ldr	r6, [sp, #20]
 8012c08:	461c      	mov	r4, r3
 8012c0a:	9304      	str	r3, [sp, #16]
 8012c0c:	9b05      	ldr	r3, [sp, #20]
 8012c0e:	4413      	add	r3, r2
 8012c10:	9305      	str	r3, [sp, #20]
 8012c12:	9b06      	ldr	r3, [sp, #24]
 8012c14:	2101      	movs	r1, #1
 8012c16:	4413      	add	r3, r2
 8012c18:	4648      	mov	r0, r9
 8012c1a:	9306      	str	r3, [sp, #24]
 8012c1c:	f000 fbc2 	bl	80133a4 <__i2b>
 8012c20:	9b04      	ldr	r3, [sp, #16]
 8012c22:	4605      	mov	r5, r0
 8012c24:	b166      	cbz	r6, 8012c40 <_dtoa_r+0x670>
 8012c26:	9a06      	ldr	r2, [sp, #24]
 8012c28:	2a00      	cmp	r2, #0
 8012c2a:	dd09      	ble.n	8012c40 <_dtoa_r+0x670>
 8012c2c:	42b2      	cmp	r2, r6
 8012c2e:	9905      	ldr	r1, [sp, #20]
 8012c30:	bfa8      	it	ge
 8012c32:	4632      	movge	r2, r6
 8012c34:	1a89      	subs	r1, r1, r2
 8012c36:	9105      	str	r1, [sp, #20]
 8012c38:	9906      	ldr	r1, [sp, #24]
 8012c3a:	1ab6      	subs	r6, r6, r2
 8012c3c:	1a8a      	subs	r2, r1, r2
 8012c3e:	9206      	str	r2, [sp, #24]
 8012c40:	b1fb      	cbz	r3, 8012c82 <_dtoa_r+0x6b2>
 8012c42:	9a08      	ldr	r2, [sp, #32]
 8012c44:	2a00      	cmp	r2, #0
 8012c46:	f000 80bc 	beq.w	8012dc2 <_dtoa_r+0x7f2>
 8012c4a:	b19c      	cbz	r4, 8012c74 <_dtoa_r+0x6a4>
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	4622      	mov	r2, r4
 8012c50:	4648      	mov	r0, r9
 8012c52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c54:	f000 fc66 	bl	8013524 <__pow5mult>
 8012c58:	9a01      	ldr	r2, [sp, #4]
 8012c5a:	4601      	mov	r1, r0
 8012c5c:	4605      	mov	r5, r0
 8012c5e:	4648      	mov	r0, r9
 8012c60:	f000 fbb6 	bl	80133d0 <__multiply>
 8012c64:	9901      	ldr	r1, [sp, #4]
 8012c66:	9004      	str	r0, [sp, #16]
 8012c68:	4648      	mov	r0, r9
 8012c6a:	f000 fa9d 	bl	80131a8 <_Bfree>
 8012c6e:	9a04      	ldr	r2, [sp, #16]
 8012c70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c72:	9201      	str	r2, [sp, #4]
 8012c74:	1b1a      	subs	r2, r3, r4
 8012c76:	d004      	beq.n	8012c82 <_dtoa_r+0x6b2>
 8012c78:	9901      	ldr	r1, [sp, #4]
 8012c7a:	4648      	mov	r0, r9
 8012c7c:	f000 fc52 	bl	8013524 <__pow5mult>
 8012c80:	9001      	str	r0, [sp, #4]
 8012c82:	2101      	movs	r1, #1
 8012c84:	4648      	mov	r0, r9
 8012c86:	f000 fb8d 	bl	80133a4 <__i2b>
 8012c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f000 81d0 	beq.w	8013034 <_dtoa_r+0xa64>
 8012c94:	461a      	mov	r2, r3
 8012c96:	4601      	mov	r1, r0
 8012c98:	4648      	mov	r0, r9
 8012c9a:	f000 fc43 	bl	8013524 <__pow5mult>
 8012c9e:	9b07      	ldr	r3, [sp, #28]
 8012ca0:	2b01      	cmp	r3, #1
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	f300 8095 	bgt.w	8012dd2 <_dtoa_r+0x802>
 8012ca8:	9b02      	ldr	r3, [sp, #8]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f040 808b 	bne.w	8012dc6 <_dtoa_r+0x7f6>
 8012cb0:	9b03      	ldr	r3, [sp, #12]
 8012cb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012cb6:	2a00      	cmp	r2, #0
 8012cb8:	f040 8087 	bne.w	8012dca <_dtoa_r+0x7fa>
 8012cbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012cc0:	0d12      	lsrs	r2, r2, #20
 8012cc2:	0512      	lsls	r2, r2, #20
 8012cc4:	2a00      	cmp	r2, #0
 8012cc6:	f000 8082 	beq.w	8012dce <_dtoa_r+0x7fe>
 8012cca:	9b05      	ldr	r3, [sp, #20]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	9305      	str	r3, [sp, #20]
 8012cd0:	9b06      	ldr	r3, [sp, #24]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	9306      	str	r3, [sp, #24]
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f000 81af 	beq.w	8013040 <_dtoa_r+0xa70>
 8012ce2:	6922      	ldr	r2, [r4, #16]
 8012ce4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012ce8:	6910      	ldr	r0, [r2, #16]
 8012cea:	f000 fb0f 	bl	801330c <__hi0bits>
 8012cee:	f1c0 0020 	rsb	r0, r0, #32
 8012cf2:	9b06      	ldr	r3, [sp, #24]
 8012cf4:	4418      	add	r0, r3
 8012cf6:	f010 001f 	ands.w	r0, r0, #31
 8012cfa:	d076      	beq.n	8012dea <_dtoa_r+0x81a>
 8012cfc:	f1c0 0220 	rsb	r2, r0, #32
 8012d00:	2a04      	cmp	r2, #4
 8012d02:	dd69      	ble.n	8012dd8 <_dtoa_r+0x808>
 8012d04:	9b05      	ldr	r3, [sp, #20]
 8012d06:	f1c0 001c 	rsb	r0, r0, #28
 8012d0a:	4403      	add	r3, r0
 8012d0c:	9305      	str	r3, [sp, #20]
 8012d0e:	9b06      	ldr	r3, [sp, #24]
 8012d10:	4406      	add	r6, r0
 8012d12:	4403      	add	r3, r0
 8012d14:	9306      	str	r3, [sp, #24]
 8012d16:	9b05      	ldr	r3, [sp, #20]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	dd05      	ble.n	8012d28 <_dtoa_r+0x758>
 8012d1c:	9901      	ldr	r1, [sp, #4]
 8012d1e:	461a      	mov	r2, r3
 8012d20:	4648      	mov	r0, r9
 8012d22:	f000 fc59 	bl	80135d8 <__lshift>
 8012d26:	9001      	str	r0, [sp, #4]
 8012d28:	9b06      	ldr	r3, [sp, #24]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	dd05      	ble.n	8012d3a <_dtoa_r+0x76a>
 8012d2e:	4621      	mov	r1, r4
 8012d30:	461a      	mov	r2, r3
 8012d32:	4648      	mov	r0, r9
 8012d34:	f000 fc50 	bl	80135d8 <__lshift>
 8012d38:	4604      	mov	r4, r0
 8012d3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d056      	beq.n	8012dee <_dtoa_r+0x81e>
 8012d40:	9801      	ldr	r0, [sp, #4]
 8012d42:	4621      	mov	r1, r4
 8012d44:	f000 fcb4 	bl	80136b0 <__mcmp>
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	da50      	bge.n	8012dee <_dtoa_r+0x81e>
 8012d4c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012d50:	9304      	str	r3, [sp, #16]
 8012d52:	9901      	ldr	r1, [sp, #4]
 8012d54:	2300      	movs	r3, #0
 8012d56:	220a      	movs	r2, #10
 8012d58:	4648      	mov	r0, r9
 8012d5a:	f000 fa47 	bl	80131ec <__multadd>
 8012d5e:	9b08      	ldr	r3, [sp, #32]
 8012d60:	9001      	str	r0, [sp, #4]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f000 816e 	beq.w	8013044 <_dtoa_r+0xa74>
 8012d68:	4629      	mov	r1, r5
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	220a      	movs	r2, #10
 8012d6e:	4648      	mov	r0, r9
 8012d70:	f000 fa3c 	bl	80131ec <__multadd>
 8012d74:	f1bb 0f00 	cmp.w	fp, #0
 8012d78:	4605      	mov	r5, r0
 8012d7a:	dc64      	bgt.n	8012e46 <_dtoa_r+0x876>
 8012d7c:	9b07      	ldr	r3, [sp, #28]
 8012d7e:	2b02      	cmp	r3, #2
 8012d80:	dc3e      	bgt.n	8012e00 <_dtoa_r+0x830>
 8012d82:	e060      	b.n	8012e46 <_dtoa_r+0x876>
 8012d84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012d8a:	e73c      	b.n	8012c06 <_dtoa_r+0x636>
 8012d8c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8012d90:	42a3      	cmp	r3, r4
 8012d92:	bfbf      	itttt	lt
 8012d94:	1ae2      	sublt	r2, r4, r3
 8012d96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012d98:	189b      	addlt	r3, r3, r2
 8012d9a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012d9c:	bfae      	itee	ge
 8012d9e:	1b1c      	subge	r4, r3, r4
 8012da0:	4623      	movlt	r3, r4
 8012da2:	2400      	movlt	r4, #0
 8012da4:	f1ba 0f00 	cmp.w	sl, #0
 8012da8:	bfb5      	itete	lt
 8012daa:	9a05      	ldrlt	r2, [sp, #20]
 8012dac:	9e05      	ldrge	r6, [sp, #20]
 8012dae:	eba2 060a 	sublt.w	r6, r2, sl
 8012db2:	4652      	movge	r2, sl
 8012db4:	bfb8      	it	lt
 8012db6:	2200      	movlt	r2, #0
 8012db8:	e727      	b.n	8012c0a <_dtoa_r+0x63a>
 8012dba:	9e05      	ldr	r6, [sp, #20]
 8012dbc:	9d08      	ldr	r5, [sp, #32]
 8012dbe:	461c      	mov	r4, r3
 8012dc0:	e730      	b.n	8012c24 <_dtoa_r+0x654>
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	e758      	b.n	8012c78 <_dtoa_r+0x6a8>
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	e786      	b.n	8012cd8 <_dtoa_r+0x708>
 8012dca:	9b02      	ldr	r3, [sp, #8]
 8012dcc:	e784      	b.n	8012cd8 <_dtoa_r+0x708>
 8012dce:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012dd0:	e783      	b.n	8012cda <_dtoa_r+0x70a>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dd6:	e784      	b.n	8012ce2 <_dtoa_r+0x712>
 8012dd8:	d09d      	beq.n	8012d16 <_dtoa_r+0x746>
 8012dda:	9b05      	ldr	r3, [sp, #20]
 8012ddc:	321c      	adds	r2, #28
 8012dde:	4413      	add	r3, r2
 8012de0:	9305      	str	r3, [sp, #20]
 8012de2:	9b06      	ldr	r3, [sp, #24]
 8012de4:	4416      	add	r6, r2
 8012de6:	4413      	add	r3, r2
 8012de8:	e794      	b.n	8012d14 <_dtoa_r+0x744>
 8012dea:	4602      	mov	r2, r0
 8012dec:	e7f5      	b.n	8012dda <_dtoa_r+0x80a>
 8012dee:	f1ba 0f00 	cmp.w	sl, #0
 8012df2:	f8cd 8010 	str.w	r8, [sp, #16]
 8012df6:	46d3      	mov	fp, sl
 8012df8:	dc21      	bgt.n	8012e3e <_dtoa_r+0x86e>
 8012dfa:	9b07      	ldr	r3, [sp, #28]
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	dd1e      	ble.n	8012e3e <_dtoa_r+0x86e>
 8012e00:	f1bb 0f00 	cmp.w	fp, #0
 8012e04:	f47f aeb7 	bne.w	8012b76 <_dtoa_r+0x5a6>
 8012e08:	4621      	mov	r1, r4
 8012e0a:	465b      	mov	r3, fp
 8012e0c:	2205      	movs	r2, #5
 8012e0e:	4648      	mov	r0, r9
 8012e10:	f000 f9ec 	bl	80131ec <__multadd>
 8012e14:	4601      	mov	r1, r0
 8012e16:	4604      	mov	r4, r0
 8012e18:	9801      	ldr	r0, [sp, #4]
 8012e1a:	f000 fc49 	bl	80136b0 <__mcmp>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	f77f aea9 	ble.w	8012b76 <_dtoa_r+0x5a6>
 8012e24:	463e      	mov	r6, r7
 8012e26:	2331      	movs	r3, #49	@ 0x31
 8012e28:	f806 3b01 	strb.w	r3, [r6], #1
 8012e2c:	9b04      	ldr	r3, [sp, #16]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	9304      	str	r3, [sp, #16]
 8012e32:	e6a4      	b.n	8012b7e <_dtoa_r+0x5ae>
 8012e34:	f8cd 8010 	str.w	r8, [sp, #16]
 8012e38:	4654      	mov	r4, sl
 8012e3a:	4625      	mov	r5, r4
 8012e3c:	e7f2      	b.n	8012e24 <_dtoa_r+0x854>
 8012e3e:	9b08      	ldr	r3, [sp, #32]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	f000 8103 	beq.w	801304c <_dtoa_r+0xa7c>
 8012e46:	2e00      	cmp	r6, #0
 8012e48:	dd05      	ble.n	8012e56 <_dtoa_r+0x886>
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	4632      	mov	r2, r6
 8012e4e:	4648      	mov	r0, r9
 8012e50:	f000 fbc2 	bl	80135d8 <__lshift>
 8012e54:	4605      	mov	r5, r0
 8012e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d058      	beq.n	8012f0e <_dtoa_r+0x93e>
 8012e5c:	6869      	ldr	r1, [r5, #4]
 8012e5e:	4648      	mov	r0, r9
 8012e60:	f000 f962 	bl	8013128 <_Balloc>
 8012e64:	4606      	mov	r6, r0
 8012e66:	b928      	cbnz	r0, 8012e74 <_dtoa_r+0x8a4>
 8012e68:	4b82      	ldr	r3, [pc, #520]	@ (8013074 <_dtoa_r+0xaa4>)
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012e70:	f7ff bbc7 	b.w	8012602 <_dtoa_r+0x32>
 8012e74:	692a      	ldr	r2, [r5, #16]
 8012e76:	3202      	adds	r2, #2
 8012e78:	0092      	lsls	r2, r2, #2
 8012e7a:	f105 010c 	add.w	r1, r5, #12
 8012e7e:	300c      	adds	r0, #12
 8012e80:	f7ff faeb 	bl	801245a <memcpy>
 8012e84:	2201      	movs	r2, #1
 8012e86:	4631      	mov	r1, r6
 8012e88:	4648      	mov	r0, r9
 8012e8a:	f000 fba5 	bl	80135d8 <__lshift>
 8012e8e:	1c7b      	adds	r3, r7, #1
 8012e90:	9305      	str	r3, [sp, #20]
 8012e92:	eb07 030b 	add.w	r3, r7, fp
 8012e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e98:	9b02      	ldr	r3, [sp, #8]
 8012e9a:	f003 0301 	and.w	r3, r3, #1
 8012e9e:	46a8      	mov	r8, r5
 8012ea0:	9308      	str	r3, [sp, #32]
 8012ea2:	4605      	mov	r5, r0
 8012ea4:	9b05      	ldr	r3, [sp, #20]
 8012ea6:	9801      	ldr	r0, [sp, #4]
 8012ea8:	4621      	mov	r1, r4
 8012eaa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012eae:	f7ff fb07 	bl	80124c0 <quorem>
 8012eb2:	4641      	mov	r1, r8
 8012eb4:	9002      	str	r0, [sp, #8]
 8012eb6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012eba:	9801      	ldr	r0, [sp, #4]
 8012ebc:	f000 fbf8 	bl	80136b0 <__mcmp>
 8012ec0:	462a      	mov	r2, r5
 8012ec2:	9006      	str	r0, [sp, #24]
 8012ec4:	4621      	mov	r1, r4
 8012ec6:	4648      	mov	r0, r9
 8012ec8:	f000 fc0e 	bl	80136e8 <__mdiff>
 8012ecc:	68c2      	ldr	r2, [r0, #12]
 8012ece:	4606      	mov	r6, r0
 8012ed0:	b9fa      	cbnz	r2, 8012f12 <_dtoa_r+0x942>
 8012ed2:	4601      	mov	r1, r0
 8012ed4:	9801      	ldr	r0, [sp, #4]
 8012ed6:	f000 fbeb 	bl	80136b0 <__mcmp>
 8012eda:	4602      	mov	r2, r0
 8012edc:	4631      	mov	r1, r6
 8012ede:	4648      	mov	r0, r9
 8012ee0:	920a      	str	r2, [sp, #40]	@ 0x28
 8012ee2:	f000 f961 	bl	80131a8 <_Bfree>
 8012ee6:	9b07      	ldr	r3, [sp, #28]
 8012ee8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012eea:	9e05      	ldr	r6, [sp, #20]
 8012eec:	ea43 0102 	orr.w	r1, r3, r2
 8012ef0:	9b08      	ldr	r3, [sp, #32]
 8012ef2:	4319      	orrs	r1, r3
 8012ef4:	d10f      	bne.n	8012f16 <_dtoa_r+0x946>
 8012ef6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012efa:	d028      	beq.n	8012f4e <_dtoa_r+0x97e>
 8012efc:	9b06      	ldr	r3, [sp, #24]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	dd02      	ble.n	8012f08 <_dtoa_r+0x938>
 8012f02:	9b02      	ldr	r3, [sp, #8]
 8012f04:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012f08:	f88b a000 	strb.w	sl, [fp]
 8012f0c:	e639      	b.n	8012b82 <_dtoa_r+0x5b2>
 8012f0e:	4628      	mov	r0, r5
 8012f10:	e7bd      	b.n	8012e8e <_dtoa_r+0x8be>
 8012f12:	2201      	movs	r2, #1
 8012f14:	e7e2      	b.n	8012edc <_dtoa_r+0x90c>
 8012f16:	9b06      	ldr	r3, [sp, #24]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	db04      	blt.n	8012f26 <_dtoa_r+0x956>
 8012f1c:	9907      	ldr	r1, [sp, #28]
 8012f1e:	430b      	orrs	r3, r1
 8012f20:	9908      	ldr	r1, [sp, #32]
 8012f22:	430b      	orrs	r3, r1
 8012f24:	d120      	bne.n	8012f68 <_dtoa_r+0x998>
 8012f26:	2a00      	cmp	r2, #0
 8012f28:	ddee      	ble.n	8012f08 <_dtoa_r+0x938>
 8012f2a:	9901      	ldr	r1, [sp, #4]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	4648      	mov	r0, r9
 8012f30:	f000 fb52 	bl	80135d8 <__lshift>
 8012f34:	4621      	mov	r1, r4
 8012f36:	9001      	str	r0, [sp, #4]
 8012f38:	f000 fbba 	bl	80136b0 <__mcmp>
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	dc03      	bgt.n	8012f48 <_dtoa_r+0x978>
 8012f40:	d1e2      	bne.n	8012f08 <_dtoa_r+0x938>
 8012f42:	f01a 0f01 	tst.w	sl, #1
 8012f46:	d0df      	beq.n	8012f08 <_dtoa_r+0x938>
 8012f48:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012f4c:	d1d9      	bne.n	8012f02 <_dtoa_r+0x932>
 8012f4e:	2339      	movs	r3, #57	@ 0x39
 8012f50:	f88b 3000 	strb.w	r3, [fp]
 8012f54:	4633      	mov	r3, r6
 8012f56:	461e      	mov	r6, r3
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012f5e:	2a39      	cmp	r2, #57	@ 0x39
 8012f60:	d053      	beq.n	801300a <_dtoa_r+0xa3a>
 8012f62:	3201      	adds	r2, #1
 8012f64:	701a      	strb	r2, [r3, #0]
 8012f66:	e60c      	b.n	8012b82 <_dtoa_r+0x5b2>
 8012f68:	2a00      	cmp	r2, #0
 8012f6a:	dd07      	ble.n	8012f7c <_dtoa_r+0x9ac>
 8012f6c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012f70:	d0ed      	beq.n	8012f4e <_dtoa_r+0x97e>
 8012f72:	f10a 0301 	add.w	r3, sl, #1
 8012f76:	f88b 3000 	strb.w	r3, [fp]
 8012f7a:	e602      	b.n	8012b82 <_dtoa_r+0x5b2>
 8012f7c:	9b05      	ldr	r3, [sp, #20]
 8012f7e:	9a05      	ldr	r2, [sp, #20]
 8012f80:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d029      	beq.n	8012fde <_dtoa_r+0xa0e>
 8012f8a:	9901      	ldr	r1, [sp, #4]
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	220a      	movs	r2, #10
 8012f90:	4648      	mov	r0, r9
 8012f92:	f000 f92b 	bl	80131ec <__multadd>
 8012f96:	45a8      	cmp	r8, r5
 8012f98:	9001      	str	r0, [sp, #4]
 8012f9a:	f04f 0300 	mov.w	r3, #0
 8012f9e:	f04f 020a 	mov.w	r2, #10
 8012fa2:	4641      	mov	r1, r8
 8012fa4:	4648      	mov	r0, r9
 8012fa6:	d107      	bne.n	8012fb8 <_dtoa_r+0x9e8>
 8012fa8:	f000 f920 	bl	80131ec <__multadd>
 8012fac:	4680      	mov	r8, r0
 8012fae:	4605      	mov	r5, r0
 8012fb0:	9b05      	ldr	r3, [sp, #20]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	9305      	str	r3, [sp, #20]
 8012fb6:	e775      	b.n	8012ea4 <_dtoa_r+0x8d4>
 8012fb8:	f000 f918 	bl	80131ec <__multadd>
 8012fbc:	4629      	mov	r1, r5
 8012fbe:	4680      	mov	r8, r0
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	220a      	movs	r2, #10
 8012fc4:	4648      	mov	r0, r9
 8012fc6:	f000 f911 	bl	80131ec <__multadd>
 8012fca:	4605      	mov	r5, r0
 8012fcc:	e7f0      	b.n	8012fb0 <_dtoa_r+0x9e0>
 8012fce:	f1bb 0f00 	cmp.w	fp, #0
 8012fd2:	bfcc      	ite	gt
 8012fd4:	465e      	movgt	r6, fp
 8012fd6:	2601      	movle	r6, #1
 8012fd8:	443e      	add	r6, r7
 8012fda:	f04f 0800 	mov.w	r8, #0
 8012fde:	9901      	ldr	r1, [sp, #4]
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	4648      	mov	r0, r9
 8012fe4:	f000 faf8 	bl	80135d8 <__lshift>
 8012fe8:	4621      	mov	r1, r4
 8012fea:	9001      	str	r0, [sp, #4]
 8012fec:	f000 fb60 	bl	80136b0 <__mcmp>
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	dcaf      	bgt.n	8012f54 <_dtoa_r+0x984>
 8012ff4:	d102      	bne.n	8012ffc <_dtoa_r+0xa2c>
 8012ff6:	f01a 0f01 	tst.w	sl, #1
 8012ffa:	d1ab      	bne.n	8012f54 <_dtoa_r+0x984>
 8012ffc:	4633      	mov	r3, r6
 8012ffe:	461e      	mov	r6, r3
 8013000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013004:	2a30      	cmp	r2, #48	@ 0x30
 8013006:	d0fa      	beq.n	8012ffe <_dtoa_r+0xa2e>
 8013008:	e5bb      	b.n	8012b82 <_dtoa_r+0x5b2>
 801300a:	429f      	cmp	r7, r3
 801300c:	d1a3      	bne.n	8012f56 <_dtoa_r+0x986>
 801300e:	9b04      	ldr	r3, [sp, #16]
 8013010:	3301      	adds	r3, #1
 8013012:	9304      	str	r3, [sp, #16]
 8013014:	2331      	movs	r3, #49	@ 0x31
 8013016:	703b      	strb	r3, [r7, #0]
 8013018:	e5b3      	b.n	8012b82 <_dtoa_r+0x5b2>
 801301a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801301c:	4f16      	ldr	r7, [pc, #88]	@ (8013078 <_dtoa_r+0xaa8>)
 801301e:	b11b      	cbz	r3, 8013028 <_dtoa_r+0xa58>
 8013020:	f107 0308 	add.w	r3, r7, #8
 8013024:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013026:	6013      	str	r3, [r2, #0]
 8013028:	4638      	mov	r0, r7
 801302a:	b011      	add	sp, #68	@ 0x44
 801302c:	ecbd 8b02 	vpop	{d8}
 8013030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013034:	9b07      	ldr	r3, [sp, #28]
 8013036:	2b01      	cmp	r3, #1
 8013038:	f77f ae36 	ble.w	8012ca8 <_dtoa_r+0x6d8>
 801303c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801303e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013040:	2001      	movs	r0, #1
 8013042:	e656      	b.n	8012cf2 <_dtoa_r+0x722>
 8013044:	f1bb 0f00 	cmp.w	fp, #0
 8013048:	f77f aed7 	ble.w	8012dfa <_dtoa_r+0x82a>
 801304c:	463e      	mov	r6, r7
 801304e:	9801      	ldr	r0, [sp, #4]
 8013050:	4621      	mov	r1, r4
 8013052:	f7ff fa35 	bl	80124c0 <quorem>
 8013056:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801305a:	f806 ab01 	strb.w	sl, [r6], #1
 801305e:	1bf2      	subs	r2, r6, r7
 8013060:	4593      	cmp	fp, r2
 8013062:	ddb4      	ble.n	8012fce <_dtoa_r+0x9fe>
 8013064:	9901      	ldr	r1, [sp, #4]
 8013066:	2300      	movs	r3, #0
 8013068:	220a      	movs	r2, #10
 801306a:	4648      	mov	r0, r9
 801306c:	f000 f8be 	bl	80131ec <__multadd>
 8013070:	9001      	str	r0, [sp, #4]
 8013072:	e7ec      	b.n	801304e <_dtoa_r+0xa7e>
 8013074:	08016286 	.word	0x08016286
 8013078:	08016221 	.word	0x08016221

0801307c <__env_lock>:
 801307c:	4801      	ldr	r0, [pc, #4]	@ (8013084 <__env_lock+0x8>)
 801307e:	f7ff b9e2 	b.w	8012446 <__retarget_lock_acquire_recursive>
 8013082:	bf00      	nop
 8013084:	2000c2b0 	.word	0x2000c2b0

08013088 <__env_unlock>:
 8013088:	4801      	ldr	r0, [pc, #4]	@ (8013090 <__env_unlock+0x8>)
 801308a:	f7ff b9dd 	b.w	8012448 <__retarget_lock_release_recursive>
 801308e:	bf00      	nop
 8013090:	2000c2b0 	.word	0x2000c2b0

08013094 <_free_r>:
 8013094:	b538      	push	{r3, r4, r5, lr}
 8013096:	4605      	mov	r5, r0
 8013098:	2900      	cmp	r1, #0
 801309a:	d041      	beq.n	8013120 <_free_r+0x8c>
 801309c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130a0:	1f0c      	subs	r4, r1, #4
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	bfb8      	it	lt
 80130a6:	18e4      	addlt	r4, r4, r3
 80130a8:	f7fd fffe 	bl	80110a8 <__malloc_lock>
 80130ac:	4a1d      	ldr	r2, [pc, #116]	@ (8013124 <_free_r+0x90>)
 80130ae:	6813      	ldr	r3, [r2, #0]
 80130b0:	b933      	cbnz	r3, 80130c0 <_free_r+0x2c>
 80130b2:	6063      	str	r3, [r4, #4]
 80130b4:	6014      	str	r4, [r2, #0]
 80130b6:	4628      	mov	r0, r5
 80130b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130bc:	f7fd bffa 	b.w	80110b4 <__malloc_unlock>
 80130c0:	42a3      	cmp	r3, r4
 80130c2:	d908      	bls.n	80130d6 <_free_r+0x42>
 80130c4:	6820      	ldr	r0, [r4, #0]
 80130c6:	1821      	adds	r1, r4, r0
 80130c8:	428b      	cmp	r3, r1
 80130ca:	bf01      	itttt	eq
 80130cc:	6819      	ldreq	r1, [r3, #0]
 80130ce:	685b      	ldreq	r3, [r3, #4]
 80130d0:	1809      	addeq	r1, r1, r0
 80130d2:	6021      	streq	r1, [r4, #0]
 80130d4:	e7ed      	b.n	80130b2 <_free_r+0x1e>
 80130d6:	461a      	mov	r2, r3
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	b10b      	cbz	r3, 80130e0 <_free_r+0x4c>
 80130dc:	42a3      	cmp	r3, r4
 80130de:	d9fa      	bls.n	80130d6 <_free_r+0x42>
 80130e0:	6811      	ldr	r1, [r2, #0]
 80130e2:	1850      	adds	r0, r2, r1
 80130e4:	42a0      	cmp	r0, r4
 80130e6:	d10b      	bne.n	8013100 <_free_r+0x6c>
 80130e8:	6820      	ldr	r0, [r4, #0]
 80130ea:	4401      	add	r1, r0
 80130ec:	1850      	adds	r0, r2, r1
 80130ee:	4283      	cmp	r3, r0
 80130f0:	6011      	str	r1, [r2, #0]
 80130f2:	d1e0      	bne.n	80130b6 <_free_r+0x22>
 80130f4:	6818      	ldr	r0, [r3, #0]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	6053      	str	r3, [r2, #4]
 80130fa:	4408      	add	r0, r1
 80130fc:	6010      	str	r0, [r2, #0]
 80130fe:	e7da      	b.n	80130b6 <_free_r+0x22>
 8013100:	d902      	bls.n	8013108 <_free_r+0x74>
 8013102:	230c      	movs	r3, #12
 8013104:	602b      	str	r3, [r5, #0]
 8013106:	e7d6      	b.n	80130b6 <_free_r+0x22>
 8013108:	6820      	ldr	r0, [r4, #0]
 801310a:	1821      	adds	r1, r4, r0
 801310c:	428b      	cmp	r3, r1
 801310e:	bf04      	itt	eq
 8013110:	6819      	ldreq	r1, [r3, #0]
 8013112:	685b      	ldreq	r3, [r3, #4]
 8013114:	6063      	str	r3, [r4, #4]
 8013116:	bf04      	itt	eq
 8013118:	1809      	addeq	r1, r1, r0
 801311a:	6021      	streq	r1, [r4, #0]
 801311c:	6054      	str	r4, [r2, #4]
 801311e:	e7ca      	b.n	80130b6 <_free_r+0x22>
 8013120:	bd38      	pop	{r3, r4, r5, pc}
 8013122:	bf00      	nop
 8013124:	2000c16c 	.word	0x2000c16c

08013128 <_Balloc>:
 8013128:	b570      	push	{r4, r5, r6, lr}
 801312a:	69c6      	ldr	r6, [r0, #28]
 801312c:	4604      	mov	r4, r0
 801312e:	460d      	mov	r5, r1
 8013130:	b976      	cbnz	r6, 8013150 <_Balloc+0x28>
 8013132:	2010      	movs	r0, #16
 8013134:	f7fd ff06 	bl	8010f44 <malloc>
 8013138:	4602      	mov	r2, r0
 801313a:	61e0      	str	r0, [r4, #28]
 801313c:	b920      	cbnz	r0, 8013148 <_Balloc+0x20>
 801313e:	4b18      	ldr	r3, [pc, #96]	@ (80131a0 <_Balloc+0x78>)
 8013140:	4818      	ldr	r0, [pc, #96]	@ (80131a4 <_Balloc+0x7c>)
 8013142:	216b      	movs	r1, #107	@ 0x6b
 8013144:	f7ff f99e 	bl	8012484 <__assert_func>
 8013148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801314c:	6006      	str	r6, [r0, #0]
 801314e:	60c6      	str	r6, [r0, #12]
 8013150:	69e6      	ldr	r6, [r4, #28]
 8013152:	68f3      	ldr	r3, [r6, #12]
 8013154:	b183      	cbz	r3, 8013178 <_Balloc+0x50>
 8013156:	69e3      	ldr	r3, [r4, #28]
 8013158:	68db      	ldr	r3, [r3, #12]
 801315a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801315e:	b9b8      	cbnz	r0, 8013190 <_Balloc+0x68>
 8013160:	2101      	movs	r1, #1
 8013162:	fa01 f605 	lsl.w	r6, r1, r5
 8013166:	1d72      	adds	r2, r6, #5
 8013168:	0092      	lsls	r2, r2, #2
 801316a:	4620      	mov	r0, r4
 801316c:	f7fd fe8e 	bl	8010e8c <_calloc_r>
 8013170:	b160      	cbz	r0, 801318c <_Balloc+0x64>
 8013172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013176:	e00e      	b.n	8013196 <_Balloc+0x6e>
 8013178:	2221      	movs	r2, #33	@ 0x21
 801317a:	2104      	movs	r1, #4
 801317c:	4620      	mov	r0, r4
 801317e:	f7fd fe85 	bl	8010e8c <_calloc_r>
 8013182:	69e3      	ldr	r3, [r4, #28]
 8013184:	60f0      	str	r0, [r6, #12]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d1e4      	bne.n	8013156 <_Balloc+0x2e>
 801318c:	2000      	movs	r0, #0
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	6802      	ldr	r2, [r0, #0]
 8013192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013196:	2300      	movs	r3, #0
 8013198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801319c:	e7f7      	b.n	801318e <_Balloc+0x66>
 801319e:	bf00      	nop
 80131a0:	0801603c 	.word	0x0801603c
 80131a4:	08016297 	.word	0x08016297

080131a8 <_Bfree>:
 80131a8:	b570      	push	{r4, r5, r6, lr}
 80131aa:	69c6      	ldr	r6, [r0, #28]
 80131ac:	4605      	mov	r5, r0
 80131ae:	460c      	mov	r4, r1
 80131b0:	b976      	cbnz	r6, 80131d0 <_Bfree+0x28>
 80131b2:	2010      	movs	r0, #16
 80131b4:	f7fd fec6 	bl	8010f44 <malloc>
 80131b8:	4602      	mov	r2, r0
 80131ba:	61e8      	str	r0, [r5, #28]
 80131bc:	b920      	cbnz	r0, 80131c8 <_Bfree+0x20>
 80131be:	4b09      	ldr	r3, [pc, #36]	@ (80131e4 <_Bfree+0x3c>)
 80131c0:	4809      	ldr	r0, [pc, #36]	@ (80131e8 <_Bfree+0x40>)
 80131c2:	218f      	movs	r1, #143	@ 0x8f
 80131c4:	f7ff f95e 	bl	8012484 <__assert_func>
 80131c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80131cc:	6006      	str	r6, [r0, #0]
 80131ce:	60c6      	str	r6, [r0, #12]
 80131d0:	b13c      	cbz	r4, 80131e2 <_Bfree+0x3a>
 80131d2:	69eb      	ldr	r3, [r5, #28]
 80131d4:	6862      	ldr	r2, [r4, #4]
 80131d6:	68db      	ldr	r3, [r3, #12]
 80131d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80131dc:	6021      	str	r1, [r4, #0]
 80131de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80131e2:	bd70      	pop	{r4, r5, r6, pc}
 80131e4:	0801603c 	.word	0x0801603c
 80131e8:	08016297 	.word	0x08016297

080131ec <__multadd>:
 80131ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f0:	690d      	ldr	r5, [r1, #16]
 80131f2:	4607      	mov	r7, r0
 80131f4:	460c      	mov	r4, r1
 80131f6:	461e      	mov	r6, r3
 80131f8:	f101 0c14 	add.w	ip, r1, #20
 80131fc:	2000      	movs	r0, #0
 80131fe:	f8dc 3000 	ldr.w	r3, [ip]
 8013202:	b299      	uxth	r1, r3
 8013204:	fb02 6101 	mla	r1, r2, r1, r6
 8013208:	0c1e      	lsrs	r6, r3, #16
 801320a:	0c0b      	lsrs	r3, r1, #16
 801320c:	fb02 3306 	mla	r3, r2, r6, r3
 8013210:	b289      	uxth	r1, r1
 8013212:	3001      	adds	r0, #1
 8013214:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013218:	4285      	cmp	r5, r0
 801321a:	f84c 1b04 	str.w	r1, [ip], #4
 801321e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013222:	dcec      	bgt.n	80131fe <__multadd+0x12>
 8013224:	b30e      	cbz	r6, 801326a <__multadd+0x7e>
 8013226:	68a3      	ldr	r3, [r4, #8]
 8013228:	42ab      	cmp	r3, r5
 801322a:	dc19      	bgt.n	8013260 <__multadd+0x74>
 801322c:	6861      	ldr	r1, [r4, #4]
 801322e:	4638      	mov	r0, r7
 8013230:	3101      	adds	r1, #1
 8013232:	f7ff ff79 	bl	8013128 <_Balloc>
 8013236:	4680      	mov	r8, r0
 8013238:	b928      	cbnz	r0, 8013246 <__multadd+0x5a>
 801323a:	4602      	mov	r2, r0
 801323c:	4b0c      	ldr	r3, [pc, #48]	@ (8013270 <__multadd+0x84>)
 801323e:	480d      	ldr	r0, [pc, #52]	@ (8013274 <__multadd+0x88>)
 8013240:	21ba      	movs	r1, #186	@ 0xba
 8013242:	f7ff f91f 	bl	8012484 <__assert_func>
 8013246:	6922      	ldr	r2, [r4, #16]
 8013248:	3202      	adds	r2, #2
 801324a:	f104 010c 	add.w	r1, r4, #12
 801324e:	0092      	lsls	r2, r2, #2
 8013250:	300c      	adds	r0, #12
 8013252:	f7ff f902 	bl	801245a <memcpy>
 8013256:	4621      	mov	r1, r4
 8013258:	4638      	mov	r0, r7
 801325a:	f7ff ffa5 	bl	80131a8 <_Bfree>
 801325e:	4644      	mov	r4, r8
 8013260:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013264:	3501      	adds	r5, #1
 8013266:	615e      	str	r6, [r3, #20]
 8013268:	6125      	str	r5, [r4, #16]
 801326a:	4620      	mov	r0, r4
 801326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013270:	08016286 	.word	0x08016286
 8013274:	08016297 	.word	0x08016297

08013278 <__s2b>:
 8013278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801327c:	460c      	mov	r4, r1
 801327e:	4615      	mov	r5, r2
 8013280:	461f      	mov	r7, r3
 8013282:	2209      	movs	r2, #9
 8013284:	3308      	adds	r3, #8
 8013286:	4606      	mov	r6, r0
 8013288:	fb93 f3f2 	sdiv	r3, r3, r2
 801328c:	2100      	movs	r1, #0
 801328e:	2201      	movs	r2, #1
 8013290:	429a      	cmp	r2, r3
 8013292:	db09      	blt.n	80132a8 <__s2b+0x30>
 8013294:	4630      	mov	r0, r6
 8013296:	f7ff ff47 	bl	8013128 <_Balloc>
 801329a:	b940      	cbnz	r0, 80132ae <__s2b+0x36>
 801329c:	4602      	mov	r2, r0
 801329e:	4b19      	ldr	r3, [pc, #100]	@ (8013304 <__s2b+0x8c>)
 80132a0:	4819      	ldr	r0, [pc, #100]	@ (8013308 <__s2b+0x90>)
 80132a2:	21d3      	movs	r1, #211	@ 0xd3
 80132a4:	f7ff f8ee 	bl	8012484 <__assert_func>
 80132a8:	0052      	lsls	r2, r2, #1
 80132aa:	3101      	adds	r1, #1
 80132ac:	e7f0      	b.n	8013290 <__s2b+0x18>
 80132ae:	9b08      	ldr	r3, [sp, #32]
 80132b0:	6143      	str	r3, [r0, #20]
 80132b2:	2d09      	cmp	r5, #9
 80132b4:	f04f 0301 	mov.w	r3, #1
 80132b8:	6103      	str	r3, [r0, #16]
 80132ba:	dd16      	ble.n	80132ea <__s2b+0x72>
 80132bc:	f104 0909 	add.w	r9, r4, #9
 80132c0:	46c8      	mov	r8, r9
 80132c2:	442c      	add	r4, r5
 80132c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80132c8:	4601      	mov	r1, r0
 80132ca:	3b30      	subs	r3, #48	@ 0x30
 80132cc:	220a      	movs	r2, #10
 80132ce:	4630      	mov	r0, r6
 80132d0:	f7ff ff8c 	bl	80131ec <__multadd>
 80132d4:	45a0      	cmp	r8, r4
 80132d6:	d1f5      	bne.n	80132c4 <__s2b+0x4c>
 80132d8:	f1a5 0408 	sub.w	r4, r5, #8
 80132dc:	444c      	add	r4, r9
 80132de:	1b2d      	subs	r5, r5, r4
 80132e0:	1963      	adds	r3, r4, r5
 80132e2:	42bb      	cmp	r3, r7
 80132e4:	db04      	blt.n	80132f0 <__s2b+0x78>
 80132e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132ea:	340a      	adds	r4, #10
 80132ec:	2509      	movs	r5, #9
 80132ee:	e7f6      	b.n	80132de <__s2b+0x66>
 80132f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80132f4:	4601      	mov	r1, r0
 80132f6:	3b30      	subs	r3, #48	@ 0x30
 80132f8:	220a      	movs	r2, #10
 80132fa:	4630      	mov	r0, r6
 80132fc:	f7ff ff76 	bl	80131ec <__multadd>
 8013300:	e7ee      	b.n	80132e0 <__s2b+0x68>
 8013302:	bf00      	nop
 8013304:	08016286 	.word	0x08016286
 8013308:	08016297 	.word	0x08016297

0801330c <__hi0bits>:
 801330c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013310:	4603      	mov	r3, r0
 8013312:	bf36      	itet	cc
 8013314:	0403      	lslcc	r3, r0, #16
 8013316:	2000      	movcs	r0, #0
 8013318:	2010      	movcc	r0, #16
 801331a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801331e:	bf3c      	itt	cc
 8013320:	021b      	lslcc	r3, r3, #8
 8013322:	3008      	addcc	r0, #8
 8013324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013328:	bf3c      	itt	cc
 801332a:	011b      	lslcc	r3, r3, #4
 801332c:	3004      	addcc	r0, #4
 801332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013332:	bf3c      	itt	cc
 8013334:	009b      	lslcc	r3, r3, #2
 8013336:	3002      	addcc	r0, #2
 8013338:	2b00      	cmp	r3, #0
 801333a:	db05      	blt.n	8013348 <__hi0bits+0x3c>
 801333c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013340:	f100 0001 	add.w	r0, r0, #1
 8013344:	bf08      	it	eq
 8013346:	2020      	moveq	r0, #32
 8013348:	4770      	bx	lr

0801334a <__lo0bits>:
 801334a:	6803      	ldr	r3, [r0, #0]
 801334c:	4602      	mov	r2, r0
 801334e:	f013 0007 	ands.w	r0, r3, #7
 8013352:	d00b      	beq.n	801336c <__lo0bits+0x22>
 8013354:	07d9      	lsls	r1, r3, #31
 8013356:	d421      	bmi.n	801339c <__lo0bits+0x52>
 8013358:	0798      	lsls	r0, r3, #30
 801335a:	bf49      	itett	mi
 801335c:	085b      	lsrmi	r3, r3, #1
 801335e:	089b      	lsrpl	r3, r3, #2
 8013360:	2001      	movmi	r0, #1
 8013362:	6013      	strmi	r3, [r2, #0]
 8013364:	bf5c      	itt	pl
 8013366:	6013      	strpl	r3, [r2, #0]
 8013368:	2002      	movpl	r0, #2
 801336a:	4770      	bx	lr
 801336c:	b299      	uxth	r1, r3
 801336e:	b909      	cbnz	r1, 8013374 <__lo0bits+0x2a>
 8013370:	0c1b      	lsrs	r3, r3, #16
 8013372:	2010      	movs	r0, #16
 8013374:	b2d9      	uxtb	r1, r3
 8013376:	b909      	cbnz	r1, 801337c <__lo0bits+0x32>
 8013378:	3008      	adds	r0, #8
 801337a:	0a1b      	lsrs	r3, r3, #8
 801337c:	0719      	lsls	r1, r3, #28
 801337e:	bf04      	itt	eq
 8013380:	091b      	lsreq	r3, r3, #4
 8013382:	3004      	addeq	r0, #4
 8013384:	0799      	lsls	r1, r3, #30
 8013386:	bf04      	itt	eq
 8013388:	089b      	lsreq	r3, r3, #2
 801338a:	3002      	addeq	r0, #2
 801338c:	07d9      	lsls	r1, r3, #31
 801338e:	d403      	bmi.n	8013398 <__lo0bits+0x4e>
 8013390:	085b      	lsrs	r3, r3, #1
 8013392:	f100 0001 	add.w	r0, r0, #1
 8013396:	d003      	beq.n	80133a0 <__lo0bits+0x56>
 8013398:	6013      	str	r3, [r2, #0]
 801339a:	4770      	bx	lr
 801339c:	2000      	movs	r0, #0
 801339e:	4770      	bx	lr
 80133a0:	2020      	movs	r0, #32
 80133a2:	4770      	bx	lr

080133a4 <__i2b>:
 80133a4:	b510      	push	{r4, lr}
 80133a6:	460c      	mov	r4, r1
 80133a8:	2101      	movs	r1, #1
 80133aa:	f7ff febd 	bl	8013128 <_Balloc>
 80133ae:	4602      	mov	r2, r0
 80133b0:	b928      	cbnz	r0, 80133be <__i2b+0x1a>
 80133b2:	4b05      	ldr	r3, [pc, #20]	@ (80133c8 <__i2b+0x24>)
 80133b4:	4805      	ldr	r0, [pc, #20]	@ (80133cc <__i2b+0x28>)
 80133b6:	f240 1145 	movw	r1, #325	@ 0x145
 80133ba:	f7ff f863 	bl	8012484 <__assert_func>
 80133be:	2301      	movs	r3, #1
 80133c0:	6144      	str	r4, [r0, #20]
 80133c2:	6103      	str	r3, [r0, #16]
 80133c4:	bd10      	pop	{r4, pc}
 80133c6:	bf00      	nop
 80133c8:	08016286 	.word	0x08016286
 80133cc:	08016297 	.word	0x08016297

080133d0 <__multiply>:
 80133d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d4:	4614      	mov	r4, r2
 80133d6:	690a      	ldr	r2, [r1, #16]
 80133d8:	6923      	ldr	r3, [r4, #16]
 80133da:	429a      	cmp	r2, r3
 80133dc:	bfa8      	it	ge
 80133de:	4623      	movge	r3, r4
 80133e0:	460f      	mov	r7, r1
 80133e2:	bfa4      	itt	ge
 80133e4:	460c      	movge	r4, r1
 80133e6:	461f      	movge	r7, r3
 80133e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80133ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80133f0:	68a3      	ldr	r3, [r4, #8]
 80133f2:	6861      	ldr	r1, [r4, #4]
 80133f4:	eb0a 0609 	add.w	r6, sl, r9
 80133f8:	42b3      	cmp	r3, r6
 80133fa:	b085      	sub	sp, #20
 80133fc:	bfb8      	it	lt
 80133fe:	3101      	addlt	r1, #1
 8013400:	f7ff fe92 	bl	8013128 <_Balloc>
 8013404:	b930      	cbnz	r0, 8013414 <__multiply+0x44>
 8013406:	4602      	mov	r2, r0
 8013408:	4b44      	ldr	r3, [pc, #272]	@ (801351c <__multiply+0x14c>)
 801340a:	4845      	ldr	r0, [pc, #276]	@ (8013520 <__multiply+0x150>)
 801340c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013410:	f7ff f838 	bl	8012484 <__assert_func>
 8013414:	f100 0514 	add.w	r5, r0, #20
 8013418:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801341c:	462b      	mov	r3, r5
 801341e:	2200      	movs	r2, #0
 8013420:	4543      	cmp	r3, r8
 8013422:	d321      	bcc.n	8013468 <__multiply+0x98>
 8013424:	f107 0114 	add.w	r1, r7, #20
 8013428:	f104 0214 	add.w	r2, r4, #20
 801342c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013430:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013434:	9302      	str	r3, [sp, #8]
 8013436:	1b13      	subs	r3, r2, r4
 8013438:	3b15      	subs	r3, #21
 801343a:	f023 0303 	bic.w	r3, r3, #3
 801343e:	3304      	adds	r3, #4
 8013440:	f104 0715 	add.w	r7, r4, #21
 8013444:	42ba      	cmp	r2, r7
 8013446:	bf38      	it	cc
 8013448:	2304      	movcc	r3, #4
 801344a:	9301      	str	r3, [sp, #4]
 801344c:	9b02      	ldr	r3, [sp, #8]
 801344e:	9103      	str	r1, [sp, #12]
 8013450:	428b      	cmp	r3, r1
 8013452:	d80c      	bhi.n	801346e <__multiply+0x9e>
 8013454:	2e00      	cmp	r6, #0
 8013456:	dd03      	ble.n	8013460 <__multiply+0x90>
 8013458:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801345c:	2b00      	cmp	r3, #0
 801345e:	d05b      	beq.n	8013518 <__multiply+0x148>
 8013460:	6106      	str	r6, [r0, #16]
 8013462:	b005      	add	sp, #20
 8013464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013468:	f843 2b04 	str.w	r2, [r3], #4
 801346c:	e7d8      	b.n	8013420 <__multiply+0x50>
 801346e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013472:	f1ba 0f00 	cmp.w	sl, #0
 8013476:	d024      	beq.n	80134c2 <__multiply+0xf2>
 8013478:	f104 0e14 	add.w	lr, r4, #20
 801347c:	46a9      	mov	r9, r5
 801347e:	f04f 0c00 	mov.w	ip, #0
 8013482:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013486:	f8d9 3000 	ldr.w	r3, [r9]
 801348a:	fa1f fb87 	uxth.w	fp, r7
 801348e:	b29b      	uxth	r3, r3
 8013490:	fb0a 330b 	mla	r3, sl, fp, r3
 8013494:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013498:	f8d9 7000 	ldr.w	r7, [r9]
 801349c:	4463      	add	r3, ip
 801349e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80134a2:	fb0a c70b 	mla	r7, sl, fp, ip
 80134a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80134b0:	4572      	cmp	r2, lr
 80134b2:	f849 3b04 	str.w	r3, [r9], #4
 80134b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80134ba:	d8e2      	bhi.n	8013482 <__multiply+0xb2>
 80134bc:	9b01      	ldr	r3, [sp, #4]
 80134be:	f845 c003 	str.w	ip, [r5, r3]
 80134c2:	9b03      	ldr	r3, [sp, #12]
 80134c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80134c8:	3104      	adds	r1, #4
 80134ca:	f1b9 0f00 	cmp.w	r9, #0
 80134ce:	d021      	beq.n	8013514 <__multiply+0x144>
 80134d0:	682b      	ldr	r3, [r5, #0]
 80134d2:	f104 0c14 	add.w	ip, r4, #20
 80134d6:	46ae      	mov	lr, r5
 80134d8:	f04f 0a00 	mov.w	sl, #0
 80134dc:	f8bc b000 	ldrh.w	fp, [ip]
 80134e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80134e4:	fb09 770b 	mla	r7, r9, fp, r7
 80134e8:	4457      	add	r7, sl
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80134f0:	f84e 3b04 	str.w	r3, [lr], #4
 80134f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80134f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80134fc:	f8be 3000 	ldrh.w	r3, [lr]
 8013500:	fb09 330a 	mla	r3, r9, sl, r3
 8013504:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013508:	4562      	cmp	r2, ip
 801350a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801350e:	d8e5      	bhi.n	80134dc <__multiply+0x10c>
 8013510:	9f01      	ldr	r7, [sp, #4]
 8013512:	51eb      	str	r3, [r5, r7]
 8013514:	3504      	adds	r5, #4
 8013516:	e799      	b.n	801344c <__multiply+0x7c>
 8013518:	3e01      	subs	r6, #1
 801351a:	e79b      	b.n	8013454 <__multiply+0x84>
 801351c:	08016286 	.word	0x08016286
 8013520:	08016297 	.word	0x08016297

08013524 <__pow5mult>:
 8013524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013528:	4615      	mov	r5, r2
 801352a:	f012 0203 	ands.w	r2, r2, #3
 801352e:	4607      	mov	r7, r0
 8013530:	460e      	mov	r6, r1
 8013532:	d007      	beq.n	8013544 <__pow5mult+0x20>
 8013534:	4c25      	ldr	r4, [pc, #148]	@ (80135cc <__pow5mult+0xa8>)
 8013536:	3a01      	subs	r2, #1
 8013538:	2300      	movs	r3, #0
 801353a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801353e:	f7ff fe55 	bl	80131ec <__multadd>
 8013542:	4606      	mov	r6, r0
 8013544:	10ad      	asrs	r5, r5, #2
 8013546:	d03d      	beq.n	80135c4 <__pow5mult+0xa0>
 8013548:	69fc      	ldr	r4, [r7, #28]
 801354a:	b97c      	cbnz	r4, 801356c <__pow5mult+0x48>
 801354c:	2010      	movs	r0, #16
 801354e:	f7fd fcf9 	bl	8010f44 <malloc>
 8013552:	4602      	mov	r2, r0
 8013554:	61f8      	str	r0, [r7, #28]
 8013556:	b928      	cbnz	r0, 8013564 <__pow5mult+0x40>
 8013558:	4b1d      	ldr	r3, [pc, #116]	@ (80135d0 <__pow5mult+0xac>)
 801355a:	481e      	ldr	r0, [pc, #120]	@ (80135d4 <__pow5mult+0xb0>)
 801355c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013560:	f7fe ff90 	bl	8012484 <__assert_func>
 8013564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013568:	6004      	str	r4, [r0, #0]
 801356a:	60c4      	str	r4, [r0, #12]
 801356c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013574:	b94c      	cbnz	r4, 801358a <__pow5mult+0x66>
 8013576:	f240 2171 	movw	r1, #625	@ 0x271
 801357a:	4638      	mov	r0, r7
 801357c:	f7ff ff12 	bl	80133a4 <__i2b>
 8013580:	2300      	movs	r3, #0
 8013582:	f8c8 0008 	str.w	r0, [r8, #8]
 8013586:	4604      	mov	r4, r0
 8013588:	6003      	str	r3, [r0, #0]
 801358a:	f04f 0900 	mov.w	r9, #0
 801358e:	07eb      	lsls	r3, r5, #31
 8013590:	d50a      	bpl.n	80135a8 <__pow5mult+0x84>
 8013592:	4631      	mov	r1, r6
 8013594:	4622      	mov	r2, r4
 8013596:	4638      	mov	r0, r7
 8013598:	f7ff ff1a 	bl	80133d0 <__multiply>
 801359c:	4631      	mov	r1, r6
 801359e:	4680      	mov	r8, r0
 80135a0:	4638      	mov	r0, r7
 80135a2:	f7ff fe01 	bl	80131a8 <_Bfree>
 80135a6:	4646      	mov	r6, r8
 80135a8:	106d      	asrs	r5, r5, #1
 80135aa:	d00b      	beq.n	80135c4 <__pow5mult+0xa0>
 80135ac:	6820      	ldr	r0, [r4, #0]
 80135ae:	b938      	cbnz	r0, 80135c0 <__pow5mult+0x9c>
 80135b0:	4622      	mov	r2, r4
 80135b2:	4621      	mov	r1, r4
 80135b4:	4638      	mov	r0, r7
 80135b6:	f7ff ff0b 	bl	80133d0 <__multiply>
 80135ba:	6020      	str	r0, [r4, #0]
 80135bc:	f8c0 9000 	str.w	r9, [r0]
 80135c0:	4604      	mov	r4, r0
 80135c2:	e7e4      	b.n	801358e <__pow5mult+0x6a>
 80135c4:	4630      	mov	r0, r6
 80135c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ca:	bf00      	nop
 80135cc:	080162f0 	.word	0x080162f0
 80135d0:	0801603c 	.word	0x0801603c
 80135d4:	08016297 	.word	0x08016297

080135d8 <__lshift>:
 80135d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135dc:	460c      	mov	r4, r1
 80135de:	6849      	ldr	r1, [r1, #4]
 80135e0:	6923      	ldr	r3, [r4, #16]
 80135e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80135e6:	68a3      	ldr	r3, [r4, #8]
 80135e8:	4607      	mov	r7, r0
 80135ea:	4691      	mov	r9, r2
 80135ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80135f0:	f108 0601 	add.w	r6, r8, #1
 80135f4:	42b3      	cmp	r3, r6
 80135f6:	db0b      	blt.n	8013610 <__lshift+0x38>
 80135f8:	4638      	mov	r0, r7
 80135fa:	f7ff fd95 	bl	8013128 <_Balloc>
 80135fe:	4605      	mov	r5, r0
 8013600:	b948      	cbnz	r0, 8013616 <__lshift+0x3e>
 8013602:	4602      	mov	r2, r0
 8013604:	4b28      	ldr	r3, [pc, #160]	@ (80136a8 <__lshift+0xd0>)
 8013606:	4829      	ldr	r0, [pc, #164]	@ (80136ac <__lshift+0xd4>)
 8013608:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801360c:	f7fe ff3a 	bl	8012484 <__assert_func>
 8013610:	3101      	adds	r1, #1
 8013612:	005b      	lsls	r3, r3, #1
 8013614:	e7ee      	b.n	80135f4 <__lshift+0x1c>
 8013616:	2300      	movs	r3, #0
 8013618:	f100 0114 	add.w	r1, r0, #20
 801361c:	f100 0210 	add.w	r2, r0, #16
 8013620:	4618      	mov	r0, r3
 8013622:	4553      	cmp	r3, sl
 8013624:	db33      	blt.n	801368e <__lshift+0xb6>
 8013626:	6920      	ldr	r0, [r4, #16]
 8013628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801362c:	f104 0314 	add.w	r3, r4, #20
 8013630:	f019 091f 	ands.w	r9, r9, #31
 8013634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013638:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801363c:	d02b      	beq.n	8013696 <__lshift+0xbe>
 801363e:	f1c9 0e20 	rsb	lr, r9, #32
 8013642:	468a      	mov	sl, r1
 8013644:	2200      	movs	r2, #0
 8013646:	6818      	ldr	r0, [r3, #0]
 8013648:	fa00 f009 	lsl.w	r0, r0, r9
 801364c:	4310      	orrs	r0, r2
 801364e:	f84a 0b04 	str.w	r0, [sl], #4
 8013652:	f853 2b04 	ldr.w	r2, [r3], #4
 8013656:	459c      	cmp	ip, r3
 8013658:	fa22 f20e 	lsr.w	r2, r2, lr
 801365c:	d8f3      	bhi.n	8013646 <__lshift+0x6e>
 801365e:	ebac 0304 	sub.w	r3, ip, r4
 8013662:	3b15      	subs	r3, #21
 8013664:	f023 0303 	bic.w	r3, r3, #3
 8013668:	3304      	adds	r3, #4
 801366a:	f104 0015 	add.w	r0, r4, #21
 801366e:	4584      	cmp	ip, r0
 8013670:	bf38      	it	cc
 8013672:	2304      	movcc	r3, #4
 8013674:	50ca      	str	r2, [r1, r3]
 8013676:	b10a      	cbz	r2, 801367c <__lshift+0xa4>
 8013678:	f108 0602 	add.w	r6, r8, #2
 801367c:	3e01      	subs	r6, #1
 801367e:	4638      	mov	r0, r7
 8013680:	612e      	str	r6, [r5, #16]
 8013682:	4621      	mov	r1, r4
 8013684:	f7ff fd90 	bl	80131a8 <_Bfree>
 8013688:	4628      	mov	r0, r5
 801368a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801368e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013692:	3301      	adds	r3, #1
 8013694:	e7c5      	b.n	8013622 <__lshift+0x4a>
 8013696:	3904      	subs	r1, #4
 8013698:	f853 2b04 	ldr.w	r2, [r3], #4
 801369c:	f841 2f04 	str.w	r2, [r1, #4]!
 80136a0:	459c      	cmp	ip, r3
 80136a2:	d8f9      	bhi.n	8013698 <__lshift+0xc0>
 80136a4:	e7ea      	b.n	801367c <__lshift+0xa4>
 80136a6:	bf00      	nop
 80136a8:	08016286 	.word	0x08016286
 80136ac:	08016297 	.word	0x08016297

080136b0 <__mcmp>:
 80136b0:	690a      	ldr	r2, [r1, #16]
 80136b2:	4603      	mov	r3, r0
 80136b4:	6900      	ldr	r0, [r0, #16]
 80136b6:	1a80      	subs	r0, r0, r2
 80136b8:	b530      	push	{r4, r5, lr}
 80136ba:	d10e      	bne.n	80136da <__mcmp+0x2a>
 80136bc:	3314      	adds	r3, #20
 80136be:	3114      	adds	r1, #20
 80136c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80136c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80136c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80136cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80136d0:	4295      	cmp	r5, r2
 80136d2:	d003      	beq.n	80136dc <__mcmp+0x2c>
 80136d4:	d205      	bcs.n	80136e2 <__mcmp+0x32>
 80136d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136da:	bd30      	pop	{r4, r5, pc}
 80136dc:	42a3      	cmp	r3, r4
 80136de:	d3f3      	bcc.n	80136c8 <__mcmp+0x18>
 80136e0:	e7fb      	b.n	80136da <__mcmp+0x2a>
 80136e2:	2001      	movs	r0, #1
 80136e4:	e7f9      	b.n	80136da <__mcmp+0x2a>
	...

080136e8 <__mdiff>:
 80136e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ec:	4689      	mov	r9, r1
 80136ee:	4606      	mov	r6, r0
 80136f0:	4611      	mov	r1, r2
 80136f2:	4648      	mov	r0, r9
 80136f4:	4614      	mov	r4, r2
 80136f6:	f7ff ffdb 	bl	80136b0 <__mcmp>
 80136fa:	1e05      	subs	r5, r0, #0
 80136fc:	d112      	bne.n	8013724 <__mdiff+0x3c>
 80136fe:	4629      	mov	r1, r5
 8013700:	4630      	mov	r0, r6
 8013702:	f7ff fd11 	bl	8013128 <_Balloc>
 8013706:	4602      	mov	r2, r0
 8013708:	b928      	cbnz	r0, 8013716 <__mdiff+0x2e>
 801370a:	4b3f      	ldr	r3, [pc, #252]	@ (8013808 <__mdiff+0x120>)
 801370c:	f240 2137 	movw	r1, #567	@ 0x237
 8013710:	483e      	ldr	r0, [pc, #248]	@ (801380c <__mdiff+0x124>)
 8013712:	f7fe feb7 	bl	8012484 <__assert_func>
 8013716:	2301      	movs	r3, #1
 8013718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801371c:	4610      	mov	r0, r2
 801371e:	b003      	add	sp, #12
 8013720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013724:	bfbc      	itt	lt
 8013726:	464b      	movlt	r3, r9
 8013728:	46a1      	movlt	r9, r4
 801372a:	4630      	mov	r0, r6
 801372c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013730:	bfba      	itte	lt
 8013732:	461c      	movlt	r4, r3
 8013734:	2501      	movlt	r5, #1
 8013736:	2500      	movge	r5, #0
 8013738:	f7ff fcf6 	bl	8013128 <_Balloc>
 801373c:	4602      	mov	r2, r0
 801373e:	b918      	cbnz	r0, 8013748 <__mdiff+0x60>
 8013740:	4b31      	ldr	r3, [pc, #196]	@ (8013808 <__mdiff+0x120>)
 8013742:	f240 2145 	movw	r1, #581	@ 0x245
 8013746:	e7e3      	b.n	8013710 <__mdiff+0x28>
 8013748:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801374c:	6926      	ldr	r6, [r4, #16]
 801374e:	60c5      	str	r5, [r0, #12]
 8013750:	f109 0310 	add.w	r3, r9, #16
 8013754:	f109 0514 	add.w	r5, r9, #20
 8013758:	f104 0e14 	add.w	lr, r4, #20
 801375c:	f100 0b14 	add.w	fp, r0, #20
 8013760:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013764:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	46d9      	mov	r9, fp
 801376c:	f04f 0c00 	mov.w	ip, #0
 8013770:	9b01      	ldr	r3, [sp, #4]
 8013772:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013776:	f853 af04 	ldr.w	sl, [r3, #4]!
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	fa1f f38a 	uxth.w	r3, sl
 8013780:	4619      	mov	r1, r3
 8013782:	b283      	uxth	r3, r0
 8013784:	1acb      	subs	r3, r1, r3
 8013786:	0c00      	lsrs	r0, r0, #16
 8013788:	4463      	add	r3, ip
 801378a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801378e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013792:	b29b      	uxth	r3, r3
 8013794:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013798:	4576      	cmp	r6, lr
 801379a:	f849 3b04 	str.w	r3, [r9], #4
 801379e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80137a2:	d8e5      	bhi.n	8013770 <__mdiff+0x88>
 80137a4:	1b33      	subs	r3, r6, r4
 80137a6:	3b15      	subs	r3, #21
 80137a8:	f023 0303 	bic.w	r3, r3, #3
 80137ac:	3415      	adds	r4, #21
 80137ae:	3304      	adds	r3, #4
 80137b0:	42a6      	cmp	r6, r4
 80137b2:	bf38      	it	cc
 80137b4:	2304      	movcc	r3, #4
 80137b6:	441d      	add	r5, r3
 80137b8:	445b      	add	r3, fp
 80137ba:	461e      	mov	r6, r3
 80137bc:	462c      	mov	r4, r5
 80137be:	4544      	cmp	r4, r8
 80137c0:	d30e      	bcc.n	80137e0 <__mdiff+0xf8>
 80137c2:	f108 0103 	add.w	r1, r8, #3
 80137c6:	1b49      	subs	r1, r1, r5
 80137c8:	f021 0103 	bic.w	r1, r1, #3
 80137cc:	3d03      	subs	r5, #3
 80137ce:	45a8      	cmp	r8, r5
 80137d0:	bf38      	it	cc
 80137d2:	2100      	movcc	r1, #0
 80137d4:	440b      	add	r3, r1
 80137d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137da:	b191      	cbz	r1, 8013802 <__mdiff+0x11a>
 80137dc:	6117      	str	r7, [r2, #16]
 80137de:	e79d      	b.n	801371c <__mdiff+0x34>
 80137e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80137e4:	46e6      	mov	lr, ip
 80137e6:	0c08      	lsrs	r0, r1, #16
 80137e8:	fa1c fc81 	uxtah	ip, ip, r1
 80137ec:	4471      	add	r1, lr
 80137ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80137f2:	b289      	uxth	r1, r1
 80137f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80137f8:	f846 1b04 	str.w	r1, [r6], #4
 80137fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013800:	e7dd      	b.n	80137be <__mdiff+0xd6>
 8013802:	3f01      	subs	r7, #1
 8013804:	e7e7      	b.n	80137d6 <__mdiff+0xee>
 8013806:	bf00      	nop
 8013808:	08016286 	.word	0x08016286
 801380c:	08016297 	.word	0x08016297

08013810 <__ulp>:
 8013810:	b082      	sub	sp, #8
 8013812:	ed8d 0b00 	vstr	d0, [sp]
 8013816:	9a01      	ldr	r2, [sp, #4]
 8013818:	4b0f      	ldr	r3, [pc, #60]	@ (8013858 <__ulp+0x48>)
 801381a:	4013      	ands	r3, r2
 801381c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013820:	2b00      	cmp	r3, #0
 8013822:	dc08      	bgt.n	8013836 <__ulp+0x26>
 8013824:	425b      	negs	r3, r3
 8013826:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801382a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801382e:	da04      	bge.n	801383a <__ulp+0x2a>
 8013830:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013834:	4113      	asrs	r3, r2
 8013836:	2200      	movs	r2, #0
 8013838:	e008      	b.n	801384c <__ulp+0x3c>
 801383a:	f1a2 0314 	sub.w	r3, r2, #20
 801383e:	2b1e      	cmp	r3, #30
 8013840:	bfda      	itte	le
 8013842:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013846:	40da      	lsrle	r2, r3
 8013848:	2201      	movgt	r2, #1
 801384a:	2300      	movs	r3, #0
 801384c:	4619      	mov	r1, r3
 801384e:	4610      	mov	r0, r2
 8013850:	ec41 0b10 	vmov	d0, r0, r1
 8013854:	b002      	add	sp, #8
 8013856:	4770      	bx	lr
 8013858:	7ff00000 	.word	0x7ff00000

0801385c <__b2d>:
 801385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013860:	6906      	ldr	r6, [r0, #16]
 8013862:	f100 0814 	add.w	r8, r0, #20
 8013866:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801386a:	1f37      	subs	r7, r6, #4
 801386c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013870:	4610      	mov	r0, r2
 8013872:	f7ff fd4b 	bl	801330c <__hi0bits>
 8013876:	f1c0 0320 	rsb	r3, r0, #32
 801387a:	280a      	cmp	r0, #10
 801387c:	600b      	str	r3, [r1, #0]
 801387e:	491b      	ldr	r1, [pc, #108]	@ (80138ec <__b2d+0x90>)
 8013880:	dc15      	bgt.n	80138ae <__b2d+0x52>
 8013882:	f1c0 0c0b 	rsb	ip, r0, #11
 8013886:	fa22 f30c 	lsr.w	r3, r2, ip
 801388a:	45b8      	cmp	r8, r7
 801388c:	ea43 0501 	orr.w	r5, r3, r1
 8013890:	bf34      	ite	cc
 8013892:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013896:	2300      	movcs	r3, #0
 8013898:	3015      	adds	r0, #21
 801389a:	fa02 f000 	lsl.w	r0, r2, r0
 801389e:	fa23 f30c 	lsr.w	r3, r3, ip
 80138a2:	4303      	orrs	r3, r0
 80138a4:	461c      	mov	r4, r3
 80138a6:	ec45 4b10 	vmov	d0, r4, r5
 80138aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ae:	45b8      	cmp	r8, r7
 80138b0:	bf3a      	itte	cc
 80138b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80138b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80138ba:	2300      	movcs	r3, #0
 80138bc:	380b      	subs	r0, #11
 80138be:	d012      	beq.n	80138e6 <__b2d+0x8a>
 80138c0:	f1c0 0120 	rsb	r1, r0, #32
 80138c4:	fa23 f401 	lsr.w	r4, r3, r1
 80138c8:	4082      	lsls	r2, r0
 80138ca:	4322      	orrs	r2, r4
 80138cc:	4547      	cmp	r7, r8
 80138ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80138d2:	bf8c      	ite	hi
 80138d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80138d8:	2200      	movls	r2, #0
 80138da:	4083      	lsls	r3, r0
 80138dc:	40ca      	lsrs	r2, r1
 80138de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80138e2:	4313      	orrs	r3, r2
 80138e4:	e7de      	b.n	80138a4 <__b2d+0x48>
 80138e6:	ea42 0501 	orr.w	r5, r2, r1
 80138ea:	e7db      	b.n	80138a4 <__b2d+0x48>
 80138ec:	3ff00000 	.word	0x3ff00000

080138f0 <__d2b>:
 80138f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138f4:	460f      	mov	r7, r1
 80138f6:	2101      	movs	r1, #1
 80138f8:	ec59 8b10 	vmov	r8, r9, d0
 80138fc:	4616      	mov	r6, r2
 80138fe:	f7ff fc13 	bl	8013128 <_Balloc>
 8013902:	4604      	mov	r4, r0
 8013904:	b930      	cbnz	r0, 8013914 <__d2b+0x24>
 8013906:	4602      	mov	r2, r0
 8013908:	4b23      	ldr	r3, [pc, #140]	@ (8013998 <__d2b+0xa8>)
 801390a:	4824      	ldr	r0, [pc, #144]	@ (801399c <__d2b+0xac>)
 801390c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013910:	f7fe fdb8 	bl	8012484 <__assert_func>
 8013914:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801391c:	b10d      	cbz	r5, 8013922 <__d2b+0x32>
 801391e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013922:	9301      	str	r3, [sp, #4]
 8013924:	f1b8 0300 	subs.w	r3, r8, #0
 8013928:	d023      	beq.n	8013972 <__d2b+0x82>
 801392a:	4668      	mov	r0, sp
 801392c:	9300      	str	r3, [sp, #0]
 801392e:	f7ff fd0c 	bl	801334a <__lo0bits>
 8013932:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013936:	b1d0      	cbz	r0, 801396e <__d2b+0x7e>
 8013938:	f1c0 0320 	rsb	r3, r0, #32
 801393c:	fa02 f303 	lsl.w	r3, r2, r3
 8013940:	430b      	orrs	r3, r1
 8013942:	40c2      	lsrs	r2, r0
 8013944:	6163      	str	r3, [r4, #20]
 8013946:	9201      	str	r2, [sp, #4]
 8013948:	9b01      	ldr	r3, [sp, #4]
 801394a:	61a3      	str	r3, [r4, #24]
 801394c:	2b00      	cmp	r3, #0
 801394e:	bf0c      	ite	eq
 8013950:	2201      	moveq	r2, #1
 8013952:	2202      	movne	r2, #2
 8013954:	6122      	str	r2, [r4, #16]
 8013956:	b1a5      	cbz	r5, 8013982 <__d2b+0x92>
 8013958:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801395c:	4405      	add	r5, r0
 801395e:	603d      	str	r5, [r7, #0]
 8013960:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013964:	6030      	str	r0, [r6, #0]
 8013966:	4620      	mov	r0, r4
 8013968:	b003      	add	sp, #12
 801396a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801396e:	6161      	str	r1, [r4, #20]
 8013970:	e7ea      	b.n	8013948 <__d2b+0x58>
 8013972:	a801      	add	r0, sp, #4
 8013974:	f7ff fce9 	bl	801334a <__lo0bits>
 8013978:	9b01      	ldr	r3, [sp, #4]
 801397a:	6163      	str	r3, [r4, #20]
 801397c:	3020      	adds	r0, #32
 801397e:	2201      	movs	r2, #1
 8013980:	e7e8      	b.n	8013954 <__d2b+0x64>
 8013982:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013986:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801398a:	6038      	str	r0, [r7, #0]
 801398c:	6918      	ldr	r0, [r3, #16]
 801398e:	f7ff fcbd 	bl	801330c <__hi0bits>
 8013992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013996:	e7e5      	b.n	8013964 <__d2b+0x74>
 8013998:	08016286 	.word	0x08016286
 801399c:	08016297 	.word	0x08016297

080139a0 <__ratio>:
 80139a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a4:	4688      	mov	r8, r1
 80139a6:	4669      	mov	r1, sp
 80139a8:	4681      	mov	r9, r0
 80139aa:	f7ff ff57 	bl	801385c <__b2d>
 80139ae:	a901      	add	r1, sp, #4
 80139b0:	4640      	mov	r0, r8
 80139b2:	ec55 4b10 	vmov	r4, r5, d0
 80139b6:	f7ff ff51 	bl	801385c <__b2d>
 80139ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80139be:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80139c2:	1ad2      	subs	r2, r2, r3
 80139c4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80139c8:	1a5b      	subs	r3, r3, r1
 80139ca:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80139ce:	ec57 6b10 	vmov	r6, r7, d0
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	bfd6      	itet	le
 80139d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80139da:	462a      	movgt	r2, r5
 80139dc:	463a      	movle	r2, r7
 80139de:	46ab      	mov	fp, r5
 80139e0:	46a2      	mov	sl, r4
 80139e2:	bfce      	itee	gt
 80139e4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80139e8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80139ec:	ee00 3a90 	vmovle	s1, r3
 80139f0:	ec4b ab17 	vmov	d7, sl, fp
 80139f4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80139f8:	b003      	add	sp, #12
 80139fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139fe <__copybits>:
 80139fe:	3901      	subs	r1, #1
 8013a00:	b570      	push	{r4, r5, r6, lr}
 8013a02:	1149      	asrs	r1, r1, #5
 8013a04:	6914      	ldr	r4, [r2, #16]
 8013a06:	3101      	adds	r1, #1
 8013a08:	f102 0314 	add.w	r3, r2, #20
 8013a0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013a14:	1f05      	subs	r5, r0, #4
 8013a16:	42a3      	cmp	r3, r4
 8013a18:	d30c      	bcc.n	8013a34 <__copybits+0x36>
 8013a1a:	1aa3      	subs	r3, r4, r2
 8013a1c:	3b11      	subs	r3, #17
 8013a1e:	f023 0303 	bic.w	r3, r3, #3
 8013a22:	3211      	adds	r2, #17
 8013a24:	42a2      	cmp	r2, r4
 8013a26:	bf88      	it	hi
 8013a28:	2300      	movhi	r3, #0
 8013a2a:	4418      	add	r0, r3
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	4288      	cmp	r0, r1
 8013a30:	d305      	bcc.n	8013a3e <__copybits+0x40>
 8013a32:	bd70      	pop	{r4, r5, r6, pc}
 8013a34:	f853 6b04 	ldr.w	r6, [r3], #4
 8013a38:	f845 6f04 	str.w	r6, [r5, #4]!
 8013a3c:	e7eb      	b.n	8013a16 <__copybits+0x18>
 8013a3e:	f840 3b04 	str.w	r3, [r0], #4
 8013a42:	e7f4      	b.n	8013a2e <__copybits+0x30>

08013a44 <__any_on>:
 8013a44:	f100 0214 	add.w	r2, r0, #20
 8013a48:	6900      	ldr	r0, [r0, #16]
 8013a4a:	114b      	asrs	r3, r1, #5
 8013a4c:	4298      	cmp	r0, r3
 8013a4e:	b510      	push	{r4, lr}
 8013a50:	db11      	blt.n	8013a76 <__any_on+0x32>
 8013a52:	dd0a      	ble.n	8013a6a <__any_on+0x26>
 8013a54:	f011 011f 	ands.w	r1, r1, #31
 8013a58:	d007      	beq.n	8013a6a <__any_on+0x26>
 8013a5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013a5e:	fa24 f001 	lsr.w	r0, r4, r1
 8013a62:	fa00 f101 	lsl.w	r1, r0, r1
 8013a66:	428c      	cmp	r4, r1
 8013a68:	d10b      	bne.n	8013a82 <__any_on+0x3e>
 8013a6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d803      	bhi.n	8013a7a <__any_on+0x36>
 8013a72:	2000      	movs	r0, #0
 8013a74:	bd10      	pop	{r4, pc}
 8013a76:	4603      	mov	r3, r0
 8013a78:	e7f7      	b.n	8013a6a <__any_on+0x26>
 8013a7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a7e:	2900      	cmp	r1, #0
 8013a80:	d0f5      	beq.n	8013a6e <__any_on+0x2a>
 8013a82:	2001      	movs	r0, #1
 8013a84:	e7f6      	b.n	8013a74 <__any_on+0x30>

08013a86 <_malloc_usable_size_r>:
 8013a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a8a:	1f18      	subs	r0, r3, #4
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	bfbc      	itt	lt
 8013a90:	580b      	ldrlt	r3, [r1, r0]
 8013a92:	18c0      	addlt	r0, r0, r3
 8013a94:	4770      	bx	lr

08013a96 <sulp>:
 8013a96:	b570      	push	{r4, r5, r6, lr}
 8013a98:	4604      	mov	r4, r0
 8013a9a:	460d      	mov	r5, r1
 8013a9c:	4616      	mov	r6, r2
 8013a9e:	ec45 4b10 	vmov	d0, r4, r5
 8013aa2:	f7ff feb5 	bl	8013810 <__ulp>
 8013aa6:	b17e      	cbz	r6, 8013ac8 <sulp+0x32>
 8013aa8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013aac:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	dd09      	ble.n	8013ac8 <sulp+0x32>
 8013ab4:	051b      	lsls	r3, r3, #20
 8013ab6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013aba:	2000      	movs	r0, #0
 8013abc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8013ac0:	ec41 0b17 	vmov	d7, r0, r1
 8013ac4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013ac8:	bd70      	pop	{r4, r5, r6, pc}
 8013aca:	0000      	movs	r0, r0
 8013acc:	0000      	movs	r0, r0
	...

08013ad0 <_strtod_l>:
 8013ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad4:	ed2d 8b0a 	vpush	{d8-d12}
 8013ad8:	b097      	sub	sp, #92	@ 0x5c
 8013ada:	4688      	mov	r8, r1
 8013adc:	920e      	str	r2, [sp, #56]	@ 0x38
 8013ade:	2200      	movs	r2, #0
 8013ae0:	9212      	str	r2, [sp, #72]	@ 0x48
 8013ae2:	9005      	str	r0, [sp, #20]
 8013ae4:	f04f 0a00 	mov.w	sl, #0
 8013ae8:	f04f 0b00 	mov.w	fp, #0
 8013aec:	460a      	mov	r2, r1
 8013aee:	9211      	str	r2, [sp, #68]	@ 0x44
 8013af0:	7811      	ldrb	r1, [r2, #0]
 8013af2:	292b      	cmp	r1, #43	@ 0x2b
 8013af4:	d04c      	beq.n	8013b90 <_strtod_l+0xc0>
 8013af6:	d839      	bhi.n	8013b6c <_strtod_l+0x9c>
 8013af8:	290d      	cmp	r1, #13
 8013afa:	d833      	bhi.n	8013b64 <_strtod_l+0x94>
 8013afc:	2908      	cmp	r1, #8
 8013afe:	d833      	bhi.n	8013b68 <_strtod_l+0x98>
 8013b00:	2900      	cmp	r1, #0
 8013b02:	d03c      	beq.n	8013b7e <_strtod_l+0xae>
 8013b04:	2200      	movs	r2, #0
 8013b06:	9208      	str	r2, [sp, #32]
 8013b08:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013b0a:	782a      	ldrb	r2, [r5, #0]
 8013b0c:	2a30      	cmp	r2, #48	@ 0x30
 8013b0e:	f040 80b5 	bne.w	8013c7c <_strtod_l+0x1ac>
 8013b12:	786a      	ldrb	r2, [r5, #1]
 8013b14:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013b18:	2a58      	cmp	r2, #88	@ 0x58
 8013b1a:	d170      	bne.n	8013bfe <_strtod_l+0x12e>
 8013b1c:	9302      	str	r3, [sp, #8]
 8013b1e:	9b08      	ldr	r3, [sp, #32]
 8013b20:	9301      	str	r3, [sp, #4]
 8013b22:	ab12      	add	r3, sp, #72	@ 0x48
 8013b24:	9300      	str	r3, [sp, #0]
 8013b26:	4a8b      	ldr	r2, [pc, #556]	@ (8013d54 <_strtod_l+0x284>)
 8013b28:	9805      	ldr	r0, [sp, #20]
 8013b2a:	ab13      	add	r3, sp, #76	@ 0x4c
 8013b2c:	a911      	add	r1, sp, #68	@ 0x44
 8013b2e:	f001 fa65 	bl	8014ffc <__gethex>
 8013b32:	f010 060f 	ands.w	r6, r0, #15
 8013b36:	4604      	mov	r4, r0
 8013b38:	d005      	beq.n	8013b46 <_strtod_l+0x76>
 8013b3a:	2e06      	cmp	r6, #6
 8013b3c:	d12a      	bne.n	8013b94 <_strtod_l+0xc4>
 8013b3e:	3501      	adds	r5, #1
 8013b40:	2300      	movs	r3, #0
 8013b42:	9511      	str	r5, [sp, #68]	@ 0x44
 8013b44:	9308      	str	r3, [sp, #32]
 8013b46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f040 852f 	bne.w	80145ac <_strtod_l+0xadc>
 8013b4e:	9b08      	ldr	r3, [sp, #32]
 8013b50:	ec4b ab10 	vmov	d0, sl, fp
 8013b54:	b1cb      	cbz	r3, 8013b8a <_strtod_l+0xba>
 8013b56:	eeb1 0b40 	vneg.f64	d0, d0
 8013b5a:	b017      	add	sp, #92	@ 0x5c
 8013b5c:	ecbd 8b0a 	vpop	{d8-d12}
 8013b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b64:	2920      	cmp	r1, #32
 8013b66:	d1cd      	bne.n	8013b04 <_strtod_l+0x34>
 8013b68:	3201      	adds	r2, #1
 8013b6a:	e7c0      	b.n	8013aee <_strtod_l+0x1e>
 8013b6c:	292d      	cmp	r1, #45	@ 0x2d
 8013b6e:	d1c9      	bne.n	8013b04 <_strtod_l+0x34>
 8013b70:	2101      	movs	r1, #1
 8013b72:	9108      	str	r1, [sp, #32]
 8013b74:	1c51      	adds	r1, r2, #1
 8013b76:	9111      	str	r1, [sp, #68]	@ 0x44
 8013b78:	7852      	ldrb	r2, [r2, #1]
 8013b7a:	2a00      	cmp	r2, #0
 8013b7c:	d1c4      	bne.n	8013b08 <_strtod_l+0x38>
 8013b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b80:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	f040 850f 	bne.w	80145a8 <_strtod_l+0xad8>
 8013b8a:	ec4b ab10 	vmov	d0, sl, fp
 8013b8e:	e7e4      	b.n	8013b5a <_strtod_l+0x8a>
 8013b90:	2100      	movs	r1, #0
 8013b92:	e7ee      	b.n	8013b72 <_strtod_l+0xa2>
 8013b94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013b96:	b13a      	cbz	r2, 8013ba8 <_strtod_l+0xd8>
 8013b98:	2135      	movs	r1, #53	@ 0x35
 8013b9a:	a814      	add	r0, sp, #80	@ 0x50
 8013b9c:	f7ff ff2f 	bl	80139fe <__copybits>
 8013ba0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013ba2:	9805      	ldr	r0, [sp, #20]
 8013ba4:	f7ff fb00 	bl	80131a8 <_Bfree>
 8013ba8:	1e73      	subs	r3, r6, #1
 8013baa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013bac:	2b04      	cmp	r3, #4
 8013bae:	d806      	bhi.n	8013bbe <_strtod_l+0xee>
 8013bb0:	e8df f003 	tbb	[pc, r3]
 8013bb4:	201d0314 	.word	0x201d0314
 8013bb8:	14          	.byte	0x14
 8013bb9:	00          	.byte	0x00
 8013bba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8013bbe:	05e3      	lsls	r3, r4, #23
 8013bc0:	bf48      	it	mi
 8013bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013bca:	0d1b      	lsrs	r3, r3, #20
 8013bcc:	051b      	lsls	r3, r3, #20
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d1b9      	bne.n	8013b46 <_strtod_l+0x76>
 8013bd2:	f7fe fc0d 	bl	80123f0 <__errno>
 8013bd6:	2322      	movs	r3, #34	@ 0x22
 8013bd8:	6003      	str	r3, [r0, #0]
 8013bda:	e7b4      	b.n	8013b46 <_strtod_l+0x76>
 8013bdc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013bec:	e7e7      	b.n	8013bbe <_strtod_l+0xee>
 8013bee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8013d5c <_strtod_l+0x28c>
 8013bf2:	e7e4      	b.n	8013bbe <_strtod_l+0xee>
 8013bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013bf8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013bfc:	e7df      	b.n	8013bbe <_strtod_l+0xee>
 8013bfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c00:	1c5a      	adds	r2, r3, #1
 8013c02:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c04:	785b      	ldrb	r3, [r3, #1]
 8013c06:	2b30      	cmp	r3, #48	@ 0x30
 8013c08:	d0f9      	beq.n	8013bfe <_strtod_l+0x12e>
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d09b      	beq.n	8013b46 <_strtod_l+0x76>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	2600      	movs	r6, #0
 8013c12:	9307      	str	r3, [sp, #28]
 8013c14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c18:	46b1      	mov	r9, r6
 8013c1a:	4635      	mov	r5, r6
 8013c1c:	220a      	movs	r2, #10
 8013c1e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013c20:	7804      	ldrb	r4, [r0, #0]
 8013c22:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013c26:	b2d9      	uxtb	r1, r3
 8013c28:	2909      	cmp	r1, #9
 8013c2a:	d929      	bls.n	8013c80 <_strtod_l+0x1b0>
 8013c2c:	494a      	ldr	r1, [pc, #296]	@ (8013d58 <_strtod_l+0x288>)
 8013c2e:	2201      	movs	r2, #1
 8013c30:	f7fe fb5b 	bl	80122ea <strncmp>
 8013c34:	b378      	cbz	r0, 8013c96 <_strtod_l+0x1c6>
 8013c36:	2000      	movs	r0, #0
 8013c38:	4622      	mov	r2, r4
 8013c3a:	462b      	mov	r3, r5
 8013c3c:	4607      	mov	r7, r0
 8013c3e:	9006      	str	r0, [sp, #24]
 8013c40:	2a65      	cmp	r2, #101	@ 0x65
 8013c42:	d001      	beq.n	8013c48 <_strtod_l+0x178>
 8013c44:	2a45      	cmp	r2, #69	@ 0x45
 8013c46:	d117      	bne.n	8013c78 <_strtod_l+0x1a8>
 8013c48:	b91b      	cbnz	r3, 8013c52 <_strtod_l+0x182>
 8013c4a:	9b07      	ldr	r3, [sp, #28]
 8013c4c:	4303      	orrs	r3, r0
 8013c4e:	d096      	beq.n	8013b7e <_strtod_l+0xae>
 8013c50:	2300      	movs	r3, #0
 8013c52:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8013c56:	f108 0201 	add.w	r2, r8, #1
 8013c5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c5c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013c60:	2a2b      	cmp	r2, #43	@ 0x2b
 8013c62:	d06b      	beq.n	8013d3c <_strtod_l+0x26c>
 8013c64:	2a2d      	cmp	r2, #45	@ 0x2d
 8013c66:	d071      	beq.n	8013d4c <_strtod_l+0x27c>
 8013c68:	f04f 0e00 	mov.w	lr, #0
 8013c6c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013c70:	2c09      	cmp	r4, #9
 8013c72:	d979      	bls.n	8013d68 <_strtod_l+0x298>
 8013c74:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013c78:	2400      	movs	r4, #0
 8013c7a:	e094      	b.n	8013da6 <_strtod_l+0x2d6>
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	e7c7      	b.n	8013c10 <_strtod_l+0x140>
 8013c80:	2d08      	cmp	r5, #8
 8013c82:	f100 0001 	add.w	r0, r0, #1
 8013c86:	bfd4      	ite	le
 8013c88:	fb02 3909 	mlale	r9, r2, r9, r3
 8013c8c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8013c90:	3501      	adds	r5, #1
 8013c92:	9011      	str	r0, [sp, #68]	@ 0x44
 8013c94:	e7c3      	b.n	8013c1e <_strtod_l+0x14e>
 8013c96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c98:	1c5a      	adds	r2, r3, #1
 8013c9a:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c9c:	785a      	ldrb	r2, [r3, #1]
 8013c9e:	b375      	cbz	r5, 8013cfe <_strtod_l+0x22e>
 8013ca0:	4607      	mov	r7, r0
 8013ca2:	462b      	mov	r3, r5
 8013ca4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013ca8:	2909      	cmp	r1, #9
 8013caa:	d913      	bls.n	8013cd4 <_strtod_l+0x204>
 8013cac:	2101      	movs	r1, #1
 8013cae:	9106      	str	r1, [sp, #24]
 8013cb0:	e7c6      	b.n	8013c40 <_strtod_l+0x170>
 8013cb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013cb4:	1c5a      	adds	r2, r3, #1
 8013cb6:	9211      	str	r2, [sp, #68]	@ 0x44
 8013cb8:	785a      	ldrb	r2, [r3, #1]
 8013cba:	3001      	adds	r0, #1
 8013cbc:	2a30      	cmp	r2, #48	@ 0x30
 8013cbe:	d0f8      	beq.n	8013cb2 <_strtod_l+0x1e2>
 8013cc0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013cc4:	2b08      	cmp	r3, #8
 8013cc6:	f200 8476 	bhi.w	80145b6 <_strtod_l+0xae6>
 8013cca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cce:	4607      	mov	r7, r0
 8013cd0:	2000      	movs	r0, #0
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	3a30      	subs	r2, #48	@ 0x30
 8013cd6:	f100 0101 	add.w	r1, r0, #1
 8013cda:	d023      	beq.n	8013d24 <_strtod_l+0x254>
 8013cdc:	440f      	add	r7, r1
 8013cde:	eb00 0c03 	add.w	ip, r0, r3
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	240a      	movs	r4, #10
 8013ce6:	4561      	cmp	r1, ip
 8013ce8:	d10b      	bne.n	8013d02 <_strtod_l+0x232>
 8013cea:	1c5c      	adds	r4, r3, #1
 8013cec:	4403      	add	r3, r0
 8013cee:	2b08      	cmp	r3, #8
 8013cf0:	4404      	add	r4, r0
 8013cf2:	dc11      	bgt.n	8013d18 <_strtod_l+0x248>
 8013cf4:	230a      	movs	r3, #10
 8013cf6:	fb03 2909 	mla	r9, r3, r9, r2
 8013cfa:	2100      	movs	r1, #0
 8013cfc:	e013      	b.n	8013d26 <_strtod_l+0x256>
 8013cfe:	4628      	mov	r0, r5
 8013d00:	e7dc      	b.n	8013cbc <_strtod_l+0x1ec>
 8013d02:	2908      	cmp	r1, #8
 8013d04:	f101 0101 	add.w	r1, r1, #1
 8013d08:	dc02      	bgt.n	8013d10 <_strtod_l+0x240>
 8013d0a:	fb04 f909 	mul.w	r9, r4, r9
 8013d0e:	e7ea      	b.n	8013ce6 <_strtod_l+0x216>
 8013d10:	2910      	cmp	r1, #16
 8013d12:	bfd8      	it	le
 8013d14:	4366      	mulle	r6, r4
 8013d16:	e7e6      	b.n	8013ce6 <_strtod_l+0x216>
 8013d18:	2b0f      	cmp	r3, #15
 8013d1a:	dcee      	bgt.n	8013cfa <_strtod_l+0x22a>
 8013d1c:	230a      	movs	r3, #10
 8013d1e:	fb03 2606 	mla	r6, r3, r6, r2
 8013d22:	e7ea      	b.n	8013cfa <_strtod_l+0x22a>
 8013d24:	461c      	mov	r4, r3
 8013d26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d28:	1c5a      	adds	r2, r3, #1
 8013d2a:	9211      	str	r2, [sp, #68]	@ 0x44
 8013d2c:	785a      	ldrb	r2, [r3, #1]
 8013d2e:	4608      	mov	r0, r1
 8013d30:	4623      	mov	r3, r4
 8013d32:	e7b7      	b.n	8013ca4 <_strtod_l+0x1d4>
 8013d34:	2301      	movs	r3, #1
 8013d36:	2700      	movs	r7, #0
 8013d38:	9306      	str	r3, [sp, #24]
 8013d3a:	e786      	b.n	8013c4a <_strtod_l+0x17a>
 8013d3c:	f04f 0e00 	mov.w	lr, #0
 8013d40:	f108 0202 	add.w	r2, r8, #2
 8013d44:	9211      	str	r2, [sp, #68]	@ 0x44
 8013d46:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013d4a:	e78f      	b.n	8013c6c <_strtod_l+0x19c>
 8013d4c:	f04f 0e01 	mov.w	lr, #1
 8013d50:	e7f6      	b.n	8013d40 <_strtod_l+0x270>
 8013d52:	bf00      	nop
 8013d54:	08016408 	.word	0x08016408
 8013d58:	080163f0 	.word	0x080163f0
 8013d5c:	7ff00000 	.word	0x7ff00000
 8013d60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d62:	1c54      	adds	r4, r2, #1
 8013d64:	9411      	str	r4, [sp, #68]	@ 0x44
 8013d66:	7852      	ldrb	r2, [r2, #1]
 8013d68:	2a30      	cmp	r2, #48	@ 0x30
 8013d6a:	d0f9      	beq.n	8013d60 <_strtod_l+0x290>
 8013d6c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8013d70:	2c08      	cmp	r4, #8
 8013d72:	d881      	bhi.n	8013c78 <_strtod_l+0x1a8>
 8013d74:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013d78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d7e:	1c51      	adds	r1, r2, #1
 8013d80:	9111      	str	r1, [sp, #68]	@ 0x44
 8013d82:	7852      	ldrb	r2, [r2, #1]
 8013d84:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013d88:	2c09      	cmp	r4, #9
 8013d8a:	d938      	bls.n	8013dfe <_strtod_l+0x32e>
 8013d8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013d8e:	1b0c      	subs	r4, r1, r4
 8013d90:	2c08      	cmp	r4, #8
 8013d92:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013d96:	dc02      	bgt.n	8013d9e <_strtod_l+0x2ce>
 8013d98:	4564      	cmp	r4, ip
 8013d9a:	bfa8      	it	ge
 8013d9c:	4664      	movge	r4, ip
 8013d9e:	f1be 0f00 	cmp.w	lr, #0
 8013da2:	d000      	beq.n	8013da6 <_strtod_l+0x2d6>
 8013da4:	4264      	negs	r4, r4
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d14e      	bne.n	8013e48 <_strtod_l+0x378>
 8013daa:	9b07      	ldr	r3, [sp, #28]
 8013dac:	4318      	orrs	r0, r3
 8013dae:	f47f aeca 	bne.w	8013b46 <_strtod_l+0x76>
 8013db2:	9b06      	ldr	r3, [sp, #24]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f47f aee2 	bne.w	8013b7e <_strtod_l+0xae>
 8013dba:	2a69      	cmp	r2, #105	@ 0x69
 8013dbc:	d027      	beq.n	8013e0e <_strtod_l+0x33e>
 8013dbe:	dc24      	bgt.n	8013e0a <_strtod_l+0x33a>
 8013dc0:	2a49      	cmp	r2, #73	@ 0x49
 8013dc2:	d024      	beq.n	8013e0e <_strtod_l+0x33e>
 8013dc4:	2a4e      	cmp	r2, #78	@ 0x4e
 8013dc6:	f47f aeda 	bne.w	8013b7e <_strtod_l+0xae>
 8013dca:	4997      	ldr	r1, [pc, #604]	@ (8014028 <_strtod_l+0x558>)
 8013dcc:	a811      	add	r0, sp, #68	@ 0x44
 8013dce:	f001 fb37 	bl	8015440 <__match>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	f43f aed3 	beq.w	8013b7e <_strtod_l+0xae>
 8013dd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	2b28      	cmp	r3, #40	@ 0x28
 8013dde:	d12d      	bne.n	8013e3c <_strtod_l+0x36c>
 8013de0:	4992      	ldr	r1, [pc, #584]	@ (801402c <_strtod_l+0x55c>)
 8013de2:	aa14      	add	r2, sp, #80	@ 0x50
 8013de4:	a811      	add	r0, sp, #68	@ 0x44
 8013de6:	f001 fb3f 	bl	8015468 <__hexnan>
 8013dea:	2805      	cmp	r0, #5
 8013dec:	d126      	bne.n	8013e3c <_strtod_l+0x36c>
 8013dee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013df0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013df4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013df8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013dfc:	e6a3      	b.n	8013b46 <_strtod_l+0x76>
 8013dfe:	240a      	movs	r4, #10
 8013e00:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013e04:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013e08:	e7b8      	b.n	8013d7c <_strtod_l+0x2ac>
 8013e0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8013e0c:	e7db      	b.n	8013dc6 <_strtod_l+0x2f6>
 8013e0e:	4988      	ldr	r1, [pc, #544]	@ (8014030 <_strtod_l+0x560>)
 8013e10:	a811      	add	r0, sp, #68	@ 0x44
 8013e12:	f001 fb15 	bl	8015440 <__match>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	f43f aeb1 	beq.w	8013b7e <_strtod_l+0xae>
 8013e1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013e1e:	4985      	ldr	r1, [pc, #532]	@ (8014034 <_strtod_l+0x564>)
 8013e20:	3b01      	subs	r3, #1
 8013e22:	a811      	add	r0, sp, #68	@ 0x44
 8013e24:	9311      	str	r3, [sp, #68]	@ 0x44
 8013e26:	f001 fb0b 	bl	8015440 <__match>
 8013e2a:	b910      	cbnz	r0, 8013e32 <_strtod_l+0x362>
 8013e2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013e2e:	3301      	adds	r3, #1
 8013e30:	9311      	str	r3, [sp, #68]	@ 0x44
 8013e32:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8014048 <_strtod_l+0x578>
 8013e36:	f04f 0a00 	mov.w	sl, #0
 8013e3a:	e684      	b.n	8013b46 <_strtod_l+0x76>
 8013e3c:	487e      	ldr	r0, [pc, #504]	@ (8014038 <_strtod_l+0x568>)
 8013e3e:	f001 f867 	bl	8014f10 <nan>
 8013e42:	ec5b ab10 	vmov	sl, fp, d0
 8013e46:	e67e      	b.n	8013b46 <_strtod_l+0x76>
 8013e48:	ee07 9a90 	vmov	s15, r9
 8013e4c:	1be2      	subs	r2, r4, r7
 8013e4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013e52:	2d00      	cmp	r5, #0
 8013e54:	bf08      	it	eq
 8013e56:	461d      	moveq	r5, r3
 8013e58:	2b10      	cmp	r3, #16
 8013e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	bfa8      	it	ge
 8013e60:	2210      	movge	r2, #16
 8013e62:	2b09      	cmp	r3, #9
 8013e64:	ec5b ab17 	vmov	sl, fp, d7
 8013e68:	dc15      	bgt.n	8013e96 <_strtod_l+0x3c6>
 8013e6a:	1be1      	subs	r1, r4, r7
 8013e6c:	2900      	cmp	r1, #0
 8013e6e:	f43f ae6a 	beq.w	8013b46 <_strtod_l+0x76>
 8013e72:	eba4 0107 	sub.w	r1, r4, r7
 8013e76:	dd72      	ble.n	8013f5e <_strtod_l+0x48e>
 8013e78:	2916      	cmp	r1, #22
 8013e7a:	dc59      	bgt.n	8013f30 <_strtod_l+0x460>
 8013e7c:	4b6f      	ldr	r3, [pc, #444]	@ (801403c <_strtod_l+0x56c>)
 8013e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e84:	ed93 7b00 	vldr	d7, [r3]
 8013e88:	ec4b ab16 	vmov	d6, sl, fp
 8013e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013e90:	ec5b ab17 	vmov	sl, fp, d7
 8013e94:	e657      	b.n	8013b46 <_strtod_l+0x76>
 8013e96:	4969      	ldr	r1, [pc, #420]	@ (801403c <_strtod_l+0x56c>)
 8013e98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013e9c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013ea0:	ee06 6a90 	vmov	s13, r6
 8013ea4:	2b0f      	cmp	r3, #15
 8013ea6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013eaa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013eae:	ec5b ab16 	vmov	sl, fp, d6
 8013eb2:	ddda      	ble.n	8013e6a <_strtod_l+0x39a>
 8013eb4:	1a9a      	subs	r2, r3, r2
 8013eb6:	1be1      	subs	r1, r4, r7
 8013eb8:	440a      	add	r2, r1
 8013eba:	2a00      	cmp	r2, #0
 8013ebc:	f340 8094 	ble.w	8013fe8 <_strtod_l+0x518>
 8013ec0:	f012 000f 	ands.w	r0, r2, #15
 8013ec4:	d00a      	beq.n	8013edc <_strtod_l+0x40c>
 8013ec6:	495d      	ldr	r1, [pc, #372]	@ (801403c <_strtod_l+0x56c>)
 8013ec8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013ecc:	ed91 7b00 	vldr	d7, [r1]
 8013ed0:	ec4b ab16 	vmov	d6, sl, fp
 8013ed4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ed8:	ec5b ab17 	vmov	sl, fp, d7
 8013edc:	f032 020f 	bics.w	r2, r2, #15
 8013ee0:	d073      	beq.n	8013fca <_strtod_l+0x4fa>
 8013ee2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013ee6:	dd47      	ble.n	8013f78 <_strtod_l+0x4a8>
 8013ee8:	2400      	movs	r4, #0
 8013eea:	4625      	mov	r5, r4
 8013eec:	9407      	str	r4, [sp, #28]
 8013eee:	4626      	mov	r6, r4
 8013ef0:	9a05      	ldr	r2, [sp, #20]
 8013ef2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8014048 <_strtod_l+0x578>
 8013ef6:	2322      	movs	r3, #34	@ 0x22
 8013ef8:	6013      	str	r3, [r2, #0]
 8013efa:	f04f 0a00 	mov.w	sl, #0
 8013efe:	9b07      	ldr	r3, [sp, #28]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	f43f ae20 	beq.w	8013b46 <_strtod_l+0x76>
 8013f06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013f08:	9805      	ldr	r0, [sp, #20]
 8013f0a:	f7ff f94d 	bl	80131a8 <_Bfree>
 8013f0e:	9805      	ldr	r0, [sp, #20]
 8013f10:	4631      	mov	r1, r6
 8013f12:	f7ff f949 	bl	80131a8 <_Bfree>
 8013f16:	9805      	ldr	r0, [sp, #20]
 8013f18:	4629      	mov	r1, r5
 8013f1a:	f7ff f945 	bl	80131a8 <_Bfree>
 8013f1e:	9907      	ldr	r1, [sp, #28]
 8013f20:	9805      	ldr	r0, [sp, #20]
 8013f22:	f7ff f941 	bl	80131a8 <_Bfree>
 8013f26:	9805      	ldr	r0, [sp, #20]
 8013f28:	4621      	mov	r1, r4
 8013f2a:	f7ff f93d 	bl	80131a8 <_Bfree>
 8013f2e:	e60a      	b.n	8013b46 <_strtod_l+0x76>
 8013f30:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013f34:	1be0      	subs	r0, r4, r7
 8013f36:	4281      	cmp	r1, r0
 8013f38:	dbbc      	blt.n	8013eb4 <_strtod_l+0x3e4>
 8013f3a:	4a40      	ldr	r2, [pc, #256]	@ (801403c <_strtod_l+0x56c>)
 8013f3c:	f1c3 030f 	rsb	r3, r3, #15
 8013f40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013f44:	ed91 7b00 	vldr	d7, [r1]
 8013f48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013f4a:	ec4b ab16 	vmov	d6, sl, fp
 8013f4e:	1acb      	subs	r3, r1, r3
 8013f50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013f54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f58:	ed92 6b00 	vldr	d6, [r2]
 8013f5c:	e796      	b.n	8013e8c <_strtod_l+0x3bc>
 8013f5e:	3116      	adds	r1, #22
 8013f60:	dba8      	blt.n	8013eb4 <_strtod_l+0x3e4>
 8013f62:	4b36      	ldr	r3, [pc, #216]	@ (801403c <_strtod_l+0x56c>)
 8013f64:	1b3c      	subs	r4, r7, r4
 8013f66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013f6a:	ed94 7b00 	vldr	d7, [r4]
 8013f6e:	ec4b ab16 	vmov	d6, sl, fp
 8013f72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013f76:	e78b      	b.n	8013e90 <_strtod_l+0x3c0>
 8013f78:	2000      	movs	r0, #0
 8013f7a:	ec4b ab17 	vmov	d7, sl, fp
 8013f7e:	4e30      	ldr	r6, [pc, #192]	@ (8014040 <_strtod_l+0x570>)
 8013f80:	1112      	asrs	r2, r2, #4
 8013f82:	4601      	mov	r1, r0
 8013f84:	2a01      	cmp	r2, #1
 8013f86:	dc23      	bgt.n	8013fd0 <_strtod_l+0x500>
 8013f88:	b108      	cbz	r0, 8013f8e <_strtod_l+0x4be>
 8013f8a:	ec5b ab17 	vmov	sl, fp, d7
 8013f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8014040 <_strtod_l+0x570>)
 8013f90:	482c      	ldr	r0, [pc, #176]	@ (8014044 <_strtod_l+0x574>)
 8013f92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013f96:	ed92 7b00 	vldr	d7, [r2]
 8013f9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013f9e:	ec4b ab16 	vmov	d6, sl, fp
 8013fa2:	4a29      	ldr	r2, [pc, #164]	@ (8014048 <_strtod_l+0x578>)
 8013fa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fa8:	ee17 1a90 	vmov	r1, s15
 8013fac:	400a      	ands	r2, r1
 8013fae:	4282      	cmp	r2, r0
 8013fb0:	ec5b ab17 	vmov	sl, fp, d7
 8013fb4:	d898      	bhi.n	8013ee8 <_strtod_l+0x418>
 8013fb6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013fba:	4282      	cmp	r2, r0
 8013fbc:	bf86      	itte	hi
 8013fbe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801404c <_strtod_l+0x57c>
 8013fc2:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8013fc6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013fca:	2200      	movs	r2, #0
 8013fcc:	9206      	str	r2, [sp, #24]
 8013fce:	e076      	b.n	80140be <_strtod_l+0x5ee>
 8013fd0:	f012 0f01 	tst.w	r2, #1
 8013fd4:	d004      	beq.n	8013fe0 <_strtod_l+0x510>
 8013fd6:	ed96 6b00 	vldr	d6, [r6]
 8013fda:	2001      	movs	r0, #1
 8013fdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fe0:	3101      	adds	r1, #1
 8013fe2:	1052      	asrs	r2, r2, #1
 8013fe4:	3608      	adds	r6, #8
 8013fe6:	e7cd      	b.n	8013f84 <_strtod_l+0x4b4>
 8013fe8:	d0ef      	beq.n	8013fca <_strtod_l+0x4fa>
 8013fea:	4252      	negs	r2, r2
 8013fec:	f012 000f 	ands.w	r0, r2, #15
 8013ff0:	d00a      	beq.n	8014008 <_strtod_l+0x538>
 8013ff2:	4912      	ldr	r1, [pc, #72]	@ (801403c <_strtod_l+0x56c>)
 8013ff4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013ff8:	ed91 7b00 	vldr	d7, [r1]
 8013ffc:	ec4b ab16 	vmov	d6, sl, fp
 8014000:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014004:	ec5b ab17 	vmov	sl, fp, d7
 8014008:	1112      	asrs	r2, r2, #4
 801400a:	d0de      	beq.n	8013fca <_strtod_l+0x4fa>
 801400c:	2a1f      	cmp	r2, #31
 801400e:	dd1f      	ble.n	8014050 <_strtod_l+0x580>
 8014010:	2400      	movs	r4, #0
 8014012:	4625      	mov	r5, r4
 8014014:	9407      	str	r4, [sp, #28]
 8014016:	4626      	mov	r6, r4
 8014018:	9a05      	ldr	r2, [sp, #20]
 801401a:	2322      	movs	r3, #34	@ 0x22
 801401c:	f04f 0a00 	mov.w	sl, #0
 8014020:	f04f 0b00 	mov.w	fp, #0
 8014024:	6013      	str	r3, [r2, #0]
 8014026:	e76a      	b.n	8013efe <_strtod_l+0x42e>
 8014028:	080161b9 	.word	0x080161b9
 801402c:	080163f4 	.word	0x080163f4
 8014030:	080161b1 	.word	0x080161b1
 8014034:	08016224 	.word	0x08016224
 8014038:	08016220 	.word	0x08016220
 801403c:	08016328 	.word	0x08016328
 8014040:	08016300 	.word	0x08016300
 8014044:	7ca00000 	.word	0x7ca00000
 8014048:	7ff00000 	.word	0x7ff00000
 801404c:	7fefffff 	.word	0x7fefffff
 8014050:	f012 0110 	ands.w	r1, r2, #16
 8014054:	bf18      	it	ne
 8014056:	216a      	movne	r1, #106	@ 0x6a
 8014058:	9106      	str	r1, [sp, #24]
 801405a:	ec4b ab17 	vmov	d7, sl, fp
 801405e:	49b0      	ldr	r1, [pc, #704]	@ (8014320 <_strtod_l+0x850>)
 8014060:	2000      	movs	r0, #0
 8014062:	07d6      	lsls	r6, r2, #31
 8014064:	d504      	bpl.n	8014070 <_strtod_l+0x5a0>
 8014066:	ed91 6b00 	vldr	d6, [r1]
 801406a:	2001      	movs	r0, #1
 801406c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014070:	1052      	asrs	r2, r2, #1
 8014072:	f101 0108 	add.w	r1, r1, #8
 8014076:	d1f4      	bne.n	8014062 <_strtod_l+0x592>
 8014078:	b108      	cbz	r0, 801407e <_strtod_l+0x5ae>
 801407a:	ec5b ab17 	vmov	sl, fp, d7
 801407e:	9a06      	ldr	r2, [sp, #24]
 8014080:	b1b2      	cbz	r2, 80140b0 <_strtod_l+0x5e0>
 8014082:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8014086:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801408a:	2a00      	cmp	r2, #0
 801408c:	4658      	mov	r0, fp
 801408e:	dd0f      	ble.n	80140b0 <_strtod_l+0x5e0>
 8014090:	2a1f      	cmp	r2, #31
 8014092:	dd55      	ble.n	8014140 <_strtod_l+0x670>
 8014094:	2a34      	cmp	r2, #52	@ 0x34
 8014096:	bfde      	ittt	le
 8014098:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 801409c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80140a0:	408a      	lslle	r2, r1
 80140a2:	f04f 0a00 	mov.w	sl, #0
 80140a6:	bfcc      	ite	gt
 80140a8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80140ac:	ea02 0b00 	andle.w	fp, r2, r0
 80140b0:	ec4b ab17 	vmov	d7, sl, fp
 80140b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80140b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140bc:	d0a8      	beq.n	8014010 <_strtod_l+0x540>
 80140be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80140c0:	9805      	ldr	r0, [sp, #20]
 80140c2:	f8cd 9000 	str.w	r9, [sp]
 80140c6:	462a      	mov	r2, r5
 80140c8:	f7ff f8d6 	bl	8013278 <__s2b>
 80140cc:	9007      	str	r0, [sp, #28]
 80140ce:	2800      	cmp	r0, #0
 80140d0:	f43f af0a 	beq.w	8013ee8 <_strtod_l+0x418>
 80140d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140d6:	1b3f      	subs	r7, r7, r4
 80140d8:	2b00      	cmp	r3, #0
 80140da:	bfb4      	ite	lt
 80140dc:	463b      	movlt	r3, r7
 80140de:	2300      	movge	r3, #0
 80140e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80140e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140e4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8014310 <_strtod_l+0x840>
 80140e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80140ec:	2400      	movs	r4, #0
 80140ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80140f0:	4625      	mov	r5, r4
 80140f2:	9b07      	ldr	r3, [sp, #28]
 80140f4:	9805      	ldr	r0, [sp, #20]
 80140f6:	6859      	ldr	r1, [r3, #4]
 80140f8:	f7ff f816 	bl	8013128 <_Balloc>
 80140fc:	4606      	mov	r6, r0
 80140fe:	2800      	cmp	r0, #0
 8014100:	f43f aef6 	beq.w	8013ef0 <_strtod_l+0x420>
 8014104:	9b07      	ldr	r3, [sp, #28]
 8014106:	691a      	ldr	r2, [r3, #16]
 8014108:	ec4b ab19 	vmov	d9, sl, fp
 801410c:	3202      	adds	r2, #2
 801410e:	f103 010c 	add.w	r1, r3, #12
 8014112:	0092      	lsls	r2, r2, #2
 8014114:	300c      	adds	r0, #12
 8014116:	f7fe f9a0 	bl	801245a <memcpy>
 801411a:	eeb0 0b49 	vmov.f64	d0, d9
 801411e:	9805      	ldr	r0, [sp, #20]
 8014120:	aa14      	add	r2, sp, #80	@ 0x50
 8014122:	a913      	add	r1, sp, #76	@ 0x4c
 8014124:	f7ff fbe4 	bl	80138f0 <__d2b>
 8014128:	9012      	str	r0, [sp, #72]	@ 0x48
 801412a:	2800      	cmp	r0, #0
 801412c:	f43f aee0 	beq.w	8013ef0 <_strtod_l+0x420>
 8014130:	9805      	ldr	r0, [sp, #20]
 8014132:	2101      	movs	r1, #1
 8014134:	f7ff f936 	bl	80133a4 <__i2b>
 8014138:	4605      	mov	r5, r0
 801413a:	b940      	cbnz	r0, 801414e <_strtod_l+0x67e>
 801413c:	2500      	movs	r5, #0
 801413e:	e6d7      	b.n	8013ef0 <_strtod_l+0x420>
 8014140:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014144:	fa01 f202 	lsl.w	r2, r1, r2
 8014148:	ea02 0a0a 	and.w	sl, r2, sl
 801414c:	e7b0      	b.n	80140b0 <_strtod_l+0x5e0>
 801414e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8014150:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014152:	2f00      	cmp	r7, #0
 8014154:	bfab      	itete	ge
 8014156:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8014158:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801415a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801415e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8014162:	bfac      	ite	ge
 8014164:	eb07 0903 	addge.w	r9, r7, r3
 8014168:	eba3 0807 	sublt.w	r8, r3, r7
 801416c:	9b06      	ldr	r3, [sp, #24]
 801416e:	1aff      	subs	r7, r7, r3
 8014170:	4417      	add	r7, r2
 8014172:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8014176:	4a6b      	ldr	r2, [pc, #428]	@ (8014324 <_strtod_l+0x854>)
 8014178:	3f01      	subs	r7, #1
 801417a:	4297      	cmp	r7, r2
 801417c:	da51      	bge.n	8014222 <_strtod_l+0x752>
 801417e:	1bd1      	subs	r1, r2, r7
 8014180:	291f      	cmp	r1, #31
 8014182:	eba3 0301 	sub.w	r3, r3, r1
 8014186:	f04f 0201 	mov.w	r2, #1
 801418a:	dc3e      	bgt.n	801420a <_strtod_l+0x73a>
 801418c:	408a      	lsls	r2, r1
 801418e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014190:	2200      	movs	r2, #0
 8014192:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014194:	eb09 0703 	add.w	r7, r9, r3
 8014198:	4498      	add	r8, r3
 801419a:	9b06      	ldr	r3, [sp, #24]
 801419c:	45b9      	cmp	r9, r7
 801419e:	4498      	add	r8, r3
 80141a0:	464b      	mov	r3, r9
 80141a2:	bfa8      	it	ge
 80141a4:	463b      	movge	r3, r7
 80141a6:	4543      	cmp	r3, r8
 80141a8:	bfa8      	it	ge
 80141aa:	4643      	movge	r3, r8
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	bfc2      	ittt	gt
 80141b0:	1aff      	subgt	r7, r7, r3
 80141b2:	eba8 0803 	subgt.w	r8, r8, r3
 80141b6:	eba9 0903 	subgt.w	r9, r9, r3
 80141ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141bc:	2b00      	cmp	r3, #0
 80141be:	dd16      	ble.n	80141ee <_strtod_l+0x71e>
 80141c0:	4629      	mov	r1, r5
 80141c2:	9805      	ldr	r0, [sp, #20]
 80141c4:	461a      	mov	r2, r3
 80141c6:	f7ff f9ad 	bl	8013524 <__pow5mult>
 80141ca:	4605      	mov	r5, r0
 80141cc:	2800      	cmp	r0, #0
 80141ce:	d0b5      	beq.n	801413c <_strtod_l+0x66c>
 80141d0:	4601      	mov	r1, r0
 80141d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80141d4:	9805      	ldr	r0, [sp, #20]
 80141d6:	f7ff f8fb 	bl	80133d0 <__multiply>
 80141da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80141dc:	2800      	cmp	r0, #0
 80141de:	f43f ae87 	beq.w	8013ef0 <_strtod_l+0x420>
 80141e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80141e4:	9805      	ldr	r0, [sp, #20]
 80141e6:	f7fe ffdf 	bl	80131a8 <_Bfree>
 80141ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80141ee:	2f00      	cmp	r7, #0
 80141f0:	dc1b      	bgt.n	801422a <_strtod_l+0x75a>
 80141f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	dd21      	ble.n	801423c <_strtod_l+0x76c>
 80141f8:	4631      	mov	r1, r6
 80141fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80141fc:	9805      	ldr	r0, [sp, #20]
 80141fe:	f7ff f991 	bl	8013524 <__pow5mult>
 8014202:	4606      	mov	r6, r0
 8014204:	b9d0      	cbnz	r0, 801423c <_strtod_l+0x76c>
 8014206:	2600      	movs	r6, #0
 8014208:	e672      	b.n	8013ef0 <_strtod_l+0x420>
 801420a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801420e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8014212:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8014216:	37e2      	adds	r7, #226	@ 0xe2
 8014218:	fa02 f107 	lsl.w	r1, r2, r7
 801421c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801421e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014220:	e7b8      	b.n	8014194 <_strtod_l+0x6c4>
 8014222:	2200      	movs	r2, #0
 8014224:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014226:	2201      	movs	r2, #1
 8014228:	e7f9      	b.n	801421e <_strtod_l+0x74e>
 801422a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801422c:	9805      	ldr	r0, [sp, #20]
 801422e:	463a      	mov	r2, r7
 8014230:	f7ff f9d2 	bl	80135d8 <__lshift>
 8014234:	9012      	str	r0, [sp, #72]	@ 0x48
 8014236:	2800      	cmp	r0, #0
 8014238:	d1db      	bne.n	80141f2 <_strtod_l+0x722>
 801423a:	e659      	b.n	8013ef0 <_strtod_l+0x420>
 801423c:	f1b8 0f00 	cmp.w	r8, #0
 8014240:	dd07      	ble.n	8014252 <_strtod_l+0x782>
 8014242:	4631      	mov	r1, r6
 8014244:	9805      	ldr	r0, [sp, #20]
 8014246:	4642      	mov	r2, r8
 8014248:	f7ff f9c6 	bl	80135d8 <__lshift>
 801424c:	4606      	mov	r6, r0
 801424e:	2800      	cmp	r0, #0
 8014250:	d0d9      	beq.n	8014206 <_strtod_l+0x736>
 8014252:	f1b9 0f00 	cmp.w	r9, #0
 8014256:	dd08      	ble.n	801426a <_strtod_l+0x79a>
 8014258:	4629      	mov	r1, r5
 801425a:	9805      	ldr	r0, [sp, #20]
 801425c:	464a      	mov	r2, r9
 801425e:	f7ff f9bb 	bl	80135d8 <__lshift>
 8014262:	4605      	mov	r5, r0
 8014264:	2800      	cmp	r0, #0
 8014266:	f43f ae43 	beq.w	8013ef0 <_strtod_l+0x420>
 801426a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801426c:	9805      	ldr	r0, [sp, #20]
 801426e:	4632      	mov	r2, r6
 8014270:	f7ff fa3a 	bl	80136e8 <__mdiff>
 8014274:	4604      	mov	r4, r0
 8014276:	2800      	cmp	r0, #0
 8014278:	f43f ae3a 	beq.w	8013ef0 <_strtod_l+0x420>
 801427c:	2300      	movs	r3, #0
 801427e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8014282:	60c3      	str	r3, [r0, #12]
 8014284:	4629      	mov	r1, r5
 8014286:	f7ff fa13 	bl	80136b0 <__mcmp>
 801428a:	2800      	cmp	r0, #0
 801428c:	da4e      	bge.n	801432c <_strtod_l+0x85c>
 801428e:	ea58 080a 	orrs.w	r8, r8, sl
 8014292:	d174      	bne.n	801437e <_strtod_l+0x8ae>
 8014294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014298:	2b00      	cmp	r3, #0
 801429a:	d170      	bne.n	801437e <_strtod_l+0x8ae>
 801429c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80142a0:	0d1b      	lsrs	r3, r3, #20
 80142a2:	051b      	lsls	r3, r3, #20
 80142a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80142a8:	d969      	bls.n	801437e <_strtod_l+0x8ae>
 80142aa:	6963      	ldr	r3, [r4, #20]
 80142ac:	b913      	cbnz	r3, 80142b4 <_strtod_l+0x7e4>
 80142ae:	6923      	ldr	r3, [r4, #16]
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	dd64      	ble.n	801437e <_strtod_l+0x8ae>
 80142b4:	4621      	mov	r1, r4
 80142b6:	2201      	movs	r2, #1
 80142b8:	9805      	ldr	r0, [sp, #20]
 80142ba:	f7ff f98d 	bl	80135d8 <__lshift>
 80142be:	4629      	mov	r1, r5
 80142c0:	4604      	mov	r4, r0
 80142c2:	f7ff f9f5 	bl	80136b0 <__mcmp>
 80142c6:	2800      	cmp	r0, #0
 80142c8:	dd59      	ble.n	801437e <_strtod_l+0x8ae>
 80142ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80142ce:	9a06      	ldr	r2, [sp, #24]
 80142d0:	0d1b      	lsrs	r3, r3, #20
 80142d2:	051b      	lsls	r3, r3, #20
 80142d4:	2a00      	cmp	r2, #0
 80142d6:	d070      	beq.n	80143ba <_strtod_l+0x8ea>
 80142d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80142dc:	d86d      	bhi.n	80143ba <_strtod_l+0x8ea>
 80142de:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80142e2:	f67f ae99 	bls.w	8014018 <_strtod_l+0x548>
 80142e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8014318 <_strtod_l+0x848>
 80142ea:	ec4b ab16 	vmov	d6, sl, fp
 80142ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014328 <_strtod_l+0x858>)
 80142f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80142f4:	ee17 2a90 	vmov	r2, s15
 80142f8:	4013      	ands	r3, r2
 80142fa:	ec5b ab17 	vmov	sl, fp, d7
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f47f ae01 	bne.w	8013f06 <_strtod_l+0x436>
 8014304:	9a05      	ldr	r2, [sp, #20]
 8014306:	2322      	movs	r3, #34	@ 0x22
 8014308:	6013      	str	r3, [r2, #0]
 801430a:	e5fc      	b.n	8013f06 <_strtod_l+0x436>
 801430c:	f3af 8000 	nop.w
 8014310:	ffc00000 	.word	0xffc00000
 8014314:	41dfffff 	.word	0x41dfffff
 8014318:	00000000 	.word	0x00000000
 801431c:	39500000 	.word	0x39500000
 8014320:	08016420 	.word	0x08016420
 8014324:	fffffc02 	.word	0xfffffc02
 8014328:	7ff00000 	.word	0x7ff00000
 801432c:	46d9      	mov	r9, fp
 801432e:	d15d      	bne.n	80143ec <_strtod_l+0x91c>
 8014330:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014334:	f1b8 0f00 	cmp.w	r8, #0
 8014338:	d02a      	beq.n	8014390 <_strtod_l+0x8c0>
 801433a:	4aab      	ldr	r2, [pc, #684]	@ (80145e8 <_strtod_l+0xb18>)
 801433c:	4293      	cmp	r3, r2
 801433e:	d12a      	bne.n	8014396 <_strtod_l+0x8c6>
 8014340:	9b06      	ldr	r3, [sp, #24]
 8014342:	4652      	mov	r2, sl
 8014344:	b1fb      	cbz	r3, 8014386 <_strtod_l+0x8b6>
 8014346:	4ba9      	ldr	r3, [pc, #676]	@ (80145ec <_strtod_l+0xb1c>)
 8014348:	ea0b 0303 	and.w	r3, fp, r3
 801434c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014350:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014354:	d81a      	bhi.n	801438c <_strtod_l+0x8bc>
 8014356:	0d1b      	lsrs	r3, r3, #20
 8014358:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801435c:	fa01 f303 	lsl.w	r3, r1, r3
 8014360:	429a      	cmp	r2, r3
 8014362:	d118      	bne.n	8014396 <_strtod_l+0x8c6>
 8014364:	4ba2      	ldr	r3, [pc, #648]	@ (80145f0 <_strtod_l+0xb20>)
 8014366:	4599      	cmp	r9, r3
 8014368:	d102      	bne.n	8014370 <_strtod_l+0x8a0>
 801436a:	3201      	adds	r2, #1
 801436c:	f43f adc0 	beq.w	8013ef0 <_strtod_l+0x420>
 8014370:	4b9e      	ldr	r3, [pc, #632]	@ (80145ec <_strtod_l+0xb1c>)
 8014372:	ea09 0303 	and.w	r3, r9, r3
 8014376:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801437a:	f04f 0a00 	mov.w	sl, #0
 801437e:	9b06      	ldr	r3, [sp, #24]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d1b0      	bne.n	80142e6 <_strtod_l+0x816>
 8014384:	e5bf      	b.n	8013f06 <_strtod_l+0x436>
 8014386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801438a:	e7e9      	b.n	8014360 <_strtod_l+0x890>
 801438c:	460b      	mov	r3, r1
 801438e:	e7e7      	b.n	8014360 <_strtod_l+0x890>
 8014390:	ea53 030a 	orrs.w	r3, r3, sl
 8014394:	d099      	beq.n	80142ca <_strtod_l+0x7fa>
 8014396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014398:	b1c3      	cbz	r3, 80143cc <_strtod_l+0x8fc>
 801439a:	ea13 0f09 	tst.w	r3, r9
 801439e:	d0ee      	beq.n	801437e <_strtod_l+0x8ae>
 80143a0:	9a06      	ldr	r2, [sp, #24]
 80143a2:	4650      	mov	r0, sl
 80143a4:	4659      	mov	r1, fp
 80143a6:	f1b8 0f00 	cmp.w	r8, #0
 80143aa:	d013      	beq.n	80143d4 <_strtod_l+0x904>
 80143ac:	f7ff fb73 	bl	8013a96 <sulp>
 80143b0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80143b4:	ec5b ab17 	vmov	sl, fp, d7
 80143b8:	e7e1      	b.n	801437e <_strtod_l+0x8ae>
 80143ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80143be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80143c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80143c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80143ca:	e7d8      	b.n	801437e <_strtod_l+0x8ae>
 80143cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143ce:	ea13 0f0a 	tst.w	r3, sl
 80143d2:	e7e4      	b.n	801439e <_strtod_l+0x8ce>
 80143d4:	f7ff fb5f 	bl	8013a96 <sulp>
 80143d8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80143dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80143e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e4:	ec5b ab10 	vmov	sl, fp, d0
 80143e8:	d1c9      	bne.n	801437e <_strtod_l+0x8ae>
 80143ea:	e615      	b.n	8014018 <_strtod_l+0x548>
 80143ec:	4629      	mov	r1, r5
 80143ee:	4620      	mov	r0, r4
 80143f0:	f7ff fad6 	bl	80139a0 <__ratio>
 80143f4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80143f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80143fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014400:	d85d      	bhi.n	80144be <_strtod_l+0x9ee>
 8014402:	f1b8 0f00 	cmp.w	r8, #0
 8014406:	d164      	bne.n	80144d2 <_strtod_l+0xa02>
 8014408:	f1ba 0f00 	cmp.w	sl, #0
 801440c:	d14b      	bne.n	80144a6 <_strtod_l+0x9d6>
 801440e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014412:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8014416:	2b00      	cmp	r3, #0
 8014418:	d160      	bne.n	80144dc <_strtod_l+0xa0c>
 801441a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801441e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8014422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014426:	d401      	bmi.n	801442c <_strtod_l+0x95c>
 8014428:	ee20 8b08 	vmul.f64	d8, d0, d8
 801442c:	eeb1 ab48 	vneg.f64	d10, d8
 8014430:	486e      	ldr	r0, [pc, #440]	@ (80145ec <_strtod_l+0xb1c>)
 8014432:	4970      	ldr	r1, [pc, #448]	@ (80145f4 <_strtod_l+0xb24>)
 8014434:	ea09 0700 	and.w	r7, r9, r0
 8014438:	428f      	cmp	r7, r1
 801443a:	ec53 2b1a 	vmov	r2, r3, d10
 801443e:	d17d      	bne.n	801453c <_strtod_l+0xa6c>
 8014440:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8014444:	ec4b ab1c 	vmov	d12, sl, fp
 8014448:	eeb0 0b4c 	vmov.f64	d0, d12
 801444c:	f7ff f9e0 	bl	8013810 <__ulp>
 8014450:	4866      	ldr	r0, [pc, #408]	@ (80145ec <_strtod_l+0xb1c>)
 8014452:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8014456:	ee1c 3a90 	vmov	r3, s25
 801445a:	4a67      	ldr	r2, [pc, #412]	@ (80145f8 <_strtod_l+0xb28>)
 801445c:	ea03 0100 	and.w	r1, r3, r0
 8014460:	4291      	cmp	r1, r2
 8014462:	ec5b ab1c 	vmov	sl, fp, d12
 8014466:	d93c      	bls.n	80144e2 <_strtod_l+0xa12>
 8014468:	ee19 2a90 	vmov	r2, s19
 801446c:	4b60      	ldr	r3, [pc, #384]	@ (80145f0 <_strtod_l+0xb20>)
 801446e:	429a      	cmp	r2, r3
 8014470:	d104      	bne.n	801447c <_strtod_l+0x9ac>
 8014472:	ee19 3a10 	vmov	r3, s18
 8014476:	3301      	adds	r3, #1
 8014478:	f43f ad3a 	beq.w	8013ef0 <_strtod_l+0x420>
 801447c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80145f0 <_strtod_l+0xb20>
 8014480:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8014484:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014486:	9805      	ldr	r0, [sp, #20]
 8014488:	f7fe fe8e 	bl	80131a8 <_Bfree>
 801448c:	9805      	ldr	r0, [sp, #20]
 801448e:	4631      	mov	r1, r6
 8014490:	f7fe fe8a 	bl	80131a8 <_Bfree>
 8014494:	9805      	ldr	r0, [sp, #20]
 8014496:	4629      	mov	r1, r5
 8014498:	f7fe fe86 	bl	80131a8 <_Bfree>
 801449c:	9805      	ldr	r0, [sp, #20]
 801449e:	4621      	mov	r1, r4
 80144a0:	f7fe fe82 	bl	80131a8 <_Bfree>
 80144a4:	e625      	b.n	80140f2 <_strtod_l+0x622>
 80144a6:	f1ba 0f01 	cmp.w	sl, #1
 80144aa:	d103      	bne.n	80144b4 <_strtod_l+0x9e4>
 80144ac:	f1bb 0f00 	cmp.w	fp, #0
 80144b0:	f43f adb2 	beq.w	8014018 <_strtod_l+0x548>
 80144b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80144b8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80144bc:	e7b8      	b.n	8014430 <_strtod_l+0x960>
 80144be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80144c2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80144c6:	f1b8 0f00 	cmp.w	r8, #0
 80144ca:	d0af      	beq.n	801442c <_strtod_l+0x95c>
 80144cc:	eeb0 ab48 	vmov.f64	d10, d8
 80144d0:	e7ae      	b.n	8014430 <_strtod_l+0x960>
 80144d2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80144d6:	eeb0 8b4a 	vmov.f64	d8, d10
 80144da:	e7a9      	b.n	8014430 <_strtod_l+0x960>
 80144dc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80144e0:	e7a6      	b.n	8014430 <_strtod_l+0x960>
 80144e2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80144e6:	9b06      	ldr	r3, [sp, #24]
 80144e8:	46d9      	mov	r9, fp
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d1ca      	bne.n	8014484 <_strtod_l+0x9b4>
 80144ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80144f2:	0d1b      	lsrs	r3, r3, #20
 80144f4:	051b      	lsls	r3, r3, #20
 80144f6:	429f      	cmp	r7, r3
 80144f8:	d1c4      	bne.n	8014484 <_strtod_l+0x9b4>
 80144fa:	ec51 0b18 	vmov	r0, r1, d8
 80144fe:	f7ec f92b 	bl	8000758 <__aeabi_d2lz>
 8014502:	f7ec f893 	bl	800062c <__aeabi_l2d>
 8014506:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801450a:	ec41 0b17 	vmov	d7, r0, r1
 801450e:	ea49 090a 	orr.w	r9, r9, sl
 8014512:	ea59 0908 	orrs.w	r9, r9, r8
 8014516:	ee38 8b47 	vsub.f64	d8, d8, d7
 801451a:	d03c      	beq.n	8014596 <_strtod_l+0xac6>
 801451c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80145d0 <_strtod_l+0xb00>
 8014520:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014528:	f53f aced 	bmi.w	8013f06 <_strtod_l+0x436>
 801452c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80145d8 <_strtod_l+0xb08>
 8014530:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014538:	dda4      	ble.n	8014484 <_strtod_l+0x9b4>
 801453a:	e4e4      	b.n	8013f06 <_strtod_l+0x436>
 801453c:	9906      	ldr	r1, [sp, #24]
 801453e:	b1e1      	cbz	r1, 801457a <_strtod_l+0xaaa>
 8014540:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8014544:	d819      	bhi.n	801457a <_strtod_l+0xaaa>
 8014546:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454e:	d811      	bhi.n	8014574 <_strtod_l+0xaa4>
 8014550:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8014554:	ee18 3a10 	vmov	r3, s16
 8014558:	2b01      	cmp	r3, #1
 801455a:	bf38      	it	cc
 801455c:	2301      	movcc	r3, #1
 801455e:	ee08 3a10 	vmov	s16, r3
 8014562:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8014566:	f1b8 0f00 	cmp.w	r8, #0
 801456a:	d111      	bne.n	8014590 <_strtod_l+0xac0>
 801456c:	eeb1 7b48 	vneg.f64	d7, d8
 8014570:	ec53 2b17 	vmov	r2, r3, d7
 8014574:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8014578:	1bcb      	subs	r3, r1, r7
 801457a:	eeb0 0b49 	vmov.f64	d0, d9
 801457e:	ec43 2b1a 	vmov	d10, r2, r3
 8014582:	f7ff f945 	bl	8013810 <__ulp>
 8014586:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801458a:	ec5b ab19 	vmov	sl, fp, d9
 801458e:	e7aa      	b.n	80144e6 <_strtod_l+0xa16>
 8014590:	eeb0 7b48 	vmov.f64	d7, d8
 8014594:	e7ec      	b.n	8014570 <_strtod_l+0xaa0>
 8014596:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80145e0 <_strtod_l+0xb10>
 801459a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a2:	f57f af6f 	bpl.w	8014484 <_strtod_l+0x9b4>
 80145a6:	e4ae      	b.n	8013f06 <_strtod_l+0x436>
 80145a8:	2300      	movs	r3, #0
 80145aa:	9308      	str	r3, [sp, #32]
 80145ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80145ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80145b0:	6013      	str	r3, [r2, #0]
 80145b2:	f7ff bacc 	b.w	8013b4e <_strtod_l+0x7e>
 80145b6:	2a65      	cmp	r2, #101	@ 0x65
 80145b8:	f43f abbc 	beq.w	8013d34 <_strtod_l+0x264>
 80145bc:	2a45      	cmp	r2, #69	@ 0x45
 80145be:	f43f abb9 	beq.w	8013d34 <_strtod_l+0x264>
 80145c2:	2301      	movs	r3, #1
 80145c4:	9306      	str	r3, [sp, #24]
 80145c6:	f7ff bbf0 	b.w	8013daa <_strtod_l+0x2da>
 80145ca:	bf00      	nop
 80145cc:	f3af 8000 	nop.w
 80145d0:	94a03595 	.word	0x94a03595
 80145d4:	3fdfffff 	.word	0x3fdfffff
 80145d8:	35afe535 	.word	0x35afe535
 80145dc:	3fe00000 	.word	0x3fe00000
 80145e0:	94a03595 	.word	0x94a03595
 80145e4:	3fcfffff 	.word	0x3fcfffff
 80145e8:	000fffff 	.word	0x000fffff
 80145ec:	7ff00000 	.word	0x7ff00000
 80145f0:	7fefffff 	.word	0x7fefffff
 80145f4:	7fe00000 	.word	0x7fe00000
 80145f8:	7c9fffff 	.word	0x7c9fffff

080145fc <_strtod_r>:
 80145fc:	4b01      	ldr	r3, [pc, #4]	@ (8014604 <_strtod_r+0x8>)
 80145fe:	f7ff ba67 	b.w	8013ad0 <_strtod_l>
 8014602:	bf00      	nop
 8014604:	200000c8 	.word	0x200000c8

08014608 <_strtol_l.constprop.0>:
 8014608:	2b24      	cmp	r3, #36	@ 0x24
 801460a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801460e:	4686      	mov	lr, r0
 8014610:	4690      	mov	r8, r2
 8014612:	d801      	bhi.n	8014618 <_strtol_l.constprop.0+0x10>
 8014614:	2b01      	cmp	r3, #1
 8014616:	d106      	bne.n	8014626 <_strtol_l.constprop.0+0x1e>
 8014618:	f7fd feea 	bl	80123f0 <__errno>
 801461c:	2316      	movs	r3, #22
 801461e:	6003      	str	r3, [r0, #0]
 8014620:	2000      	movs	r0, #0
 8014622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014626:	4834      	ldr	r0, [pc, #208]	@ (80146f8 <_strtol_l.constprop.0+0xf0>)
 8014628:	460d      	mov	r5, r1
 801462a:	462a      	mov	r2, r5
 801462c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014630:	5d06      	ldrb	r6, [r0, r4]
 8014632:	f016 0608 	ands.w	r6, r6, #8
 8014636:	d1f8      	bne.n	801462a <_strtol_l.constprop.0+0x22>
 8014638:	2c2d      	cmp	r4, #45	@ 0x2d
 801463a:	d12d      	bne.n	8014698 <_strtol_l.constprop.0+0x90>
 801463c:	782c      	ldrb	r4, [r5, #0]
 801463e:	2601      	movs	r6, #1
 8014640:	1c95      	adds	r5, r2, #2
 8014642:	f033 0210 	bics.w	r2, r3, #16
 8014646:	d109      	bne.n	801465c <_strtol_l.constprop.0+0x54>
 8014648:	2c30      	cmp	r4, #48	@ 0x30
 801464a:	d12a      	bne.n	80146a2 <_strtol_l.constprop.0+0x9a>
 801464c:	782a      	ldrb	r2, [r5, #0]
 801464e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014652:	2a58      	cmp	r2, #88	@ 0x58
 8014654:	d125      	bne.n	80146a2 <_strtol_l.constprop.0+0x9a>
 8014656:	786c      	ldrb	r4, [r5, #1]
 8014658:	2310      	movs	r3, #16
 801465a:	3502      	adds	r5, #2
 801465c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014660:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8014664:	2200      	movs	r2, #0
 8014666:	fbbc f9f3 	udiv	r9, ip, r3
 801466a:	4610      	mov	r0, r2
 801466c:	fb03 ca19 	mls	sl, r3, r9, ip
 8014670:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014674:	2f09      	cmp	r7, #9
 8014676:	d81b      	bhi.n	80146b0 <_strtol_l.constprop.0+0xa8>
 8014678:	463c      	mov	r4, r7
 801467a:	42a3      	cmp	r3, r4
 801467c:	dd27      	ble.n	80146ce <_strtol_l.constprop.0+0xc6>
 801467e:	1c57      	adds	r7, r2, #1
 8014680:	d007      	beq.n	8014692 <_strtol_l.constprop.0+0x8a>
 8014682:	4581      	cmp	r9, r0
 8014684:	d320      	bcc.n	80146c8 <_strtol_l.constprop.0+0xc0>
 8014686:	d101      	bne.n	801468c <_strtol_l.constprop.0+0x84>
 8014688:	45a2      	cmp	sl, r4
 801468a:	db1d      	blt.n	80146c8 <_strtol_l.constprop.0+0xc0>
 801468c:	fb00 4003 	mla	r0, r0, r3, r4
 8014690:	2201      	movs	r2, #1
 8014692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014696:	e7eb      	b.n	8014670 <_strtol_l.constprop.0+0x68>
 8014698:	2c2b      	cmp	r4, #43	@ 0x2b
 801469a:	bf04      	itt	eq
 801469c:	782c      	ldrbeq	r4, [r5, #0]
 801469e:	1c95      	addeq	r5, r2, #2
 80146a0:	e7cf      	b.n	8014642 <_strtol_l.constprop.0+0x3a>
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d1da      	bne.n	801465c <_strtol_l.constprop.0+0x54>
 80146a6:	2c30      	cmp	r4, #48	@ 0x30
 80146a8:	bf0c      	ite	eq
 80146aa:	2308      	moveq	r3, #8
 80146ac:	230a      	movne	r3, #10
 80146ae:	e7d5      	b.n	801465c <_strtol_l.constprop.0+0x54>
 80146b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80146b4:	2f19      	cmp	r7, #25
 80146b6:	d801      	bhi.n	80146bc <_strtol_l.constprop.0+0xb4>
 80146b8:	3c37      	subs	r4, #55	@ 0x37
 80146ba:	e7de      	b.n	801467a <_strtol_l.constprop.0+0x72>
 80146bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80146c0:	2f19      	cmp	r7, #25
 80146c2:	d804      	bhi.n	80146ce <_strtol_l.constprop.0+0xc6>
 80146c4:	3c57      	subs	r4, #87	@ 0x57
 80146c6:	e7d8      	b.n	801467a <_strtol_l.constprop.0+0x72>
 80146c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146cc:	e7e1      	b.n	8014692 <_strtol_l.constprop.0+0x8a>
 80146ce:	1c53      	adds	r3, r2, #1
 80146d0:	d108      	bne.n	80146e4 <_strtol_l.constprop.0+0xdc>
 80146d2:	2322      	movs	r3, #34	@ 0x22
 80146d4:	f8ce 3000 	str.w	r3, [lr]
 80146d8:	4660      	mov	r0, ip
 80146da:	f1b8 0f00 	cmp.w	r8, #0
 80146de:	d0a0      	beq.n	8014622 <_strtol_l.constprop.0+0x1a>
 80146e0:	1e69      	subs	r1, r5, #1
 80146e2:	e006      	b.n	80146f2 <_strtol_l.constprop.0+0xea>
 80146e4:	b106      	cbz	r6, 80146e8 <_strtol_l.constprop.0+0xe0>
 80146e6:	4240      	negs	r0, r0
 80146e8:	f1b8 0f00 	cmp.w	r8, #0
 80146ec:	d099      	beq.n	8014622 <_strtol_l.constprop.0+0x1a>
 80146ee:	2a00      	cmp	r2, #0
 80146f0:	d1f6      	bne.n	80146e0 <_strtol_l.constprop.0+0xd8>
 80146f2:	f8c8 1000 	str.w	r1, [r8]
 80146f6:	e794      	b.n	8014622 <_strtol_l.constprop.0+0x1a>
 80146f8:	080160ac 	.word	0x080160ac

080146fc <_strtol_r>:
 80146fc:	f7ff bf84 	b.w	8014608 <_strtol_l.constprop.0>

08014700 <__ssputs_r>:
 8014700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014704:	688e      	ldr	r6, [r1, #8]
 8014706:	461f      	mov	r7, r3
 8014708:	42be      	cmp	r6, r7
 801470a:	680b      	ldr	r3, [r1, #0]
 801470c:	4682      	mov	sl, r0
 801470e:	460c      	mov	r4, r1
 8014710:	4690      	mov	r8, r2
 8014712:	d82d      	bhi.n	8014770 <__ssputs_r+0x70>
 8014714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801471c:	d026      	beq.n	801476c <__ssputs_r+0x6c>
 801471e:	6965      	ldr	r5, [r4, #20]
 8014720:	6909      	ldr	r1, [r1, #16]
 8014722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014726:	eba3 0901 	sub.w	r9, r3, r1
 801472a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801472e:	1c7b      	adds	r3, r7, #1
 8014730:	444b      	add	r3, r9
 8014732:	106d      	asrs	r5, r5, #1
 8014734:	429d      	cmp	r5, r3
 8014736:	bf38      	it	cc
 8014738:	461d      	movcc	r5, r3
 801473a:	0553      	lsls	r3, r2, #21
 801473c:	d527      	bpl.n	801478e <__ssputs_r+0x8e>
 801473e:	4629      	mov	r1, r5
 8014740:	f7fc fc32 	bl	8010fa8 <_malloc_r>
 8014744:	4606      	mov	r6, r0
 8014746:	b360      	cbz	r0, 80147a2 <__ssputs_r+0xa2>
 8014748:	6921      	ldr	r1, [r4, #16]
 801474a:	464a      	mov	r2, r9
 801474c:	f7fd fe85 	bl	801245a <memcpy>
 8014750:	89a3      	ldrh	r3, [r4, #12]
 8014752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801475a:	81a3      	strh	r3, [r4, #12]
 801475c:	6126      	str	r6, [r4, #16]
 801475e:	6165      	str	r5, [r4, #20]
 8014760:	444e      	add	r6, r9
 8014762:	eba5 0509 	sub.w	r5, r5, r9
 8014766:	6026      	str	r6, [r4, #0]
 8014768:	60a5      	str	r5, [r4, #8]
 801476a:	463e      	mov	r6, r7
 801476c:	42be      	cmp	r6, r7
 801476e:	d900      	bls.n	8014772 <__ssputs_r+0x72>
 8014770:	463e      	mov	r6, r7
 8014772:	6820      	ldr	r0, [r4, #0]
 8014774:	4632      	mov	r2, r6
 8014776:	4641      	mov	r1, r8
 8014778:	f000 fbae 	bl	8014ed8 <memmove>
 801477c:	68a3      	ldr	r3, [r4, #8]
 801477e:	1b9b      	subs	r3, r3, r6
 8014780:	60a3      	str	r3, [r4, #8]
 8014782:	6823      	ldr	r3, [r4, #0]
 8014784:	4433      	add	r3, r6
 8014786:	6023      	str	r3, [r4, #0]
 8014788:	2000      	movs	r0, #0
 801478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801478e:	462a      	mov	r2, r5
 8014790:	f7fc fd0a 	bl	80111a8 <_realloc_r>
 8014794:	4606      	mov	r6, r0
 8014796:	2800      	cmp	r0, #0
 8014798:	d1e0      	bne.n	801475c <__ssputs_r+0x5c>
 801479a:	6921      	ldr	r1, [r4, #16]
 801479c:	4650      	mov	r0, sl
 801479e:	f7fe fc79 	bl	8013094 <_free_r>
 80147a2:	230c      	movs	r3, #12
 80147a4:	f8ca 3000 	str.w	r3, [sl]
 80147a8:	89a3      	ldrh	r3, [r4, #12]
 80147aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147ae:	81a3      	strh	r3, [r4, #12]
 80147b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147b4:	e7e9      	b.n	801478a <__ssputs_r+0x8a>
	...

080147b8 <_svfiprintf_r>:
 80147b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147bc:	4698      	mov	r8, r3
 80147be:	898b      	ldrh	r3, [r1, #12]
 80147c0:	061b      	lsls	r3, r3, #24
 80147c2:	b09d      	sub	sp, #116	@ 0x74
 80147c4:	4607      	mov	r7, r0
 80147c6:	460d      	mov	r5, r1
 80147c8:	4614      	mov	r4, r2
 80147ca:	d510      	bpl.n	80147ee <_svfiprintf_r+0x36>
 80147cc:	690b      	ldr	r3, [r1, #16]
 80147ce:	b973      	cbnz	r3, 80147ee <_svfiprintf_r+0x36>
 80147d0:	2140      	movs	r1, #64	@ 0x40
 80147d2:	f7fc fbe9 	bl	8010fa8 <_malloc_r>
 80147d6:	6028      	str	r0, [r5, #0]
 80147d8:	6128      	str	r0, [r5, #16]
 80147da:	b930      	cbnz	r0, 80147ea <_svfiprintf_r+0x32>
 80147dc:	230c      	movs	r3, #12
 80147de:	603b      	str	r3, [r7, #0]
 80147e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147e4:	b01d      	add	sp, #116	@ 0x74
 80147e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ea:	2340      	movs	r3, #64	@ 0x40
 80147ec:	616b      	str	r3, [r5, #20]
 80147ee:	2300      	movs	r3, #0
 80147f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80147f2:	2320      	movs	r3, #32
 80147f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80147f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80147fc:	2330      	movs	r3, #48	@ 0x30
 80147fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801499c <_svfiprintf_r+0x1e4>
 8014802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014806:	f04f 0901 	mov.w	r9, #1
 801480a:	4623      	mov	r3, r4
 801480c:	469a      	mov	sl, r3
 801480e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014812:	b10a      	cbz	r2, 8014818 <_svfiprintf_r+0x60>
 8014814:	2a25      	cmp	r2, #37	@ 0x25
 8014816:	d1f9      	bne.n	801480c <_svfiprintf_r+0x54>
 8014818:	ebba 0b04 	subs.w	fp, sl, r4
 801481c:	d00b      	beq.n	8014836 <_svfiprintf_r+0x7e>
 801481e:	465b      	mov	r3, fp
 8014820:	4622      	mov	r2, r4
 8014822:	4629      	mov	r1, r5
 8014824:	4638      	mov	r0, r7
 8014826:	f7ff ff6b 	bl	8014700 <__ssputs_r>
 801482a:	3001      	adds	r0, #1
 801482c:	f000 80a7 	beq.w	801497e <_svfiprintf_r+0x1c6>
 8014830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014832:	445a      	add	r2, fp
 8014834:	9209      	str	r2, [sp, #36]	@ 0x24
 8014836:	f89a 3000 	ldrb.w	r3, [sl]
 801483a:	2b00      	cmp	r3, #0
 801483c:	f000 809f 	beq.w	801497e <_svfiprintf_r+0x1c6>
 8014840:	2300      	movs	r3, #0
 8014842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801484a:	f10a 0a01 	add.w	sl, sl, #1
 801484e:	9304      	str	r3, [sp, #16]
 8014850:	9307      	str	r3, [sp, #28]
 8014852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014856:	931a      	str	r3, [sp, #104]	@ 0x68
 8014858:	4654      	mov	r4, sl
 801485a:	2205      	movs	r2, #5
 801485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014860:	484e      	ldr	r0, [pc, #312]	@ (801499c <_svfiprintf_r+0x1e4>)
 8014862:	f7eb fcfd 	bl	8000260 <memchr>
 8014866:	9a04      	ldr	r2, [sp, #16]
 8014868:	b9d8      	cbnz	r0, 80148a2 <_svfiprintf_r+0xea>
 801486a:	06d0      	lsls	r0, r2, #27
 801486c:	bf44      	itt	mi
 801486e:	2320      	movmi	r3, #32
 8014870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014874:	0711      	lsls	r1, r2, #28
 8014876:	bf44      	itt	mi
 8014878:	232b      	movmi	r3, #43	@ 0x2b
 801487a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801487e:	f89a 3000 	ldrb.w	r3, [sl]
 8014882:	2b2a      	cmp	r3, #42	@ 0x2a
 8014884:	d015      	beq.n	80148b2 <_svfiprintf_r+0xfa>
 8014886:	9a07      	ldr	r2, [sp, #28]
 8014888:	4654      	mov	r4, sl
 801488a:	2000      	movs	r0, #0
 801488c:	f04f 0c0a 	mov.w	ip, #10
 8014890:	4621      	mov	r1, r4
 8014892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014896:	3b30      	subs	r3, #48	@ 0x30
 8014898:	2b09      	cmp	r3, #9
 801489a:	d94b      	bls.n	8014934 <_svfiprintf_r+0x17c>
 801489c:	b1b0      	cbz	r0, 80148cc <_svfiprintf_r+0x114>
 801489e:	9207      	str	r2, [sp, #28]
 80148a0:	e014      	b.n	80148cc <_svfiprintf_r+0x114>
 80148a2:	eba0 0308 	sub.w	r3, r0, r8
 80148a6:	fa09 f303 	lsl.w	r3, r9, r3
 80148aa:	4313      	orrs	r3, r2
 80148ac:	9304      	str	r3, [sp, #16]
 80148ae:	46a2      	mov	sl, r4
 80148b0:	e7d2      	b.n	8014858 <_svfiprintf_r+0xa0>
 80148b2:	9b03      	ldr	r3, [sp, #12]
 80148b4:	1d19      	adds	r1, r3, #4
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	9103      	str	r1, [sp, #12]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	bfbb      	ittet	lt
 80148be:	425b      	neglt	r3, r3
 80148c0:	f042 0202 	orrlt.w	r2, r2, #2
 80148c4:	9307      	strge	r3, [sp, #28]
 80148c6:	9307      	strlt	r3, [sp, #28]
 80148c8:	bfb8      	it	lt
 80148ca:	9204      	strlt	r2, [sp, #16]
 80148cc:	7823      	ldrb	r3, [r4, #0]
 80148ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80148d0:	d10a      	bne.n	80148e8 <_svfiprintf_r+0x130>
 80148d2:	7863      	ldrb	r3, [r4, #1]
 80148d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80148d6:	d132      	bne.n	801493e <_svfiprintf_r+0x186>
 80148d8:	9b03      	ldr	r3, [sp, #12]
 80148da:	1d1a      	adds	r2, r3, #4
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	9203      	str	r2, [sp, #12]
 80148e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80148e4:	3402      	adds	r4, #2
 80148e6:	9305      	str	r3, [sp, #20]
 80148e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80149ac <_svfiprintf_r+0x1f4>
 80148ec:	7821      	ldrb	r1, [r4, #0]
 80148ee:	2203      	movs	r2, #3
 80148f0:	4650      	mov	r0, sl
 80148f2:	f7eb fcb5 	bl	8000260 <memchr>
 80148f6:	b138      	cbz	r0, 8014908 <_svfiprintf_r+0x150>
 80148f8:	9b04      	ldr	r3, [sp, #16]
 80148fa:	eba0 000a 	sub.w	r0, r0, sl
 80148fe:	2240      	movs	r2, #64	@ 0x40
 8014900:	4082      	lsls	r2, r0
 8014902:	4313      	orrs	r3, r2
 8014904:	3401      	adds	r4, #1
 8014906:	9304      	str	r3, [sp, #16]
 8014908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801490c:	4824      	ldr	r0, [pc, #144]	@ (80149a0 <_svfiprintf_r+0x1e8>)
 801490e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014912:	2206      	movs	r2, #6
 8014914:	f7eb fca4 	bl	8000260 <memchr>
 8014918:	2800      	cmp	r0, #0
 801491a:	d036      	beq.n	801498a <_svfiprintf_r+0x1d2>
 801491c:	4b21      	ldr	r3, [pc, #132]	@ (80149a4 <_svfiprintf_r+0x1ec>)
 801491e:	bb1b      	cbnz	r3, 8014968 <_svfiprintf_r+0x1b0>
 8014920:	9b03      	ldr	r3, [sp, #12]
 8014922:	3307      	adds	r3, #7
 8014924:	f023 0307 	bic.w	r3, r3, #7
 8014928:	3308      	adds	r3, #8
 801492a:	9303      	str	r3, [sp, #12]
 801492c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801492e:	4433      	add	r3, r6
 8014930:	9309      	str	r3, [sp, #36]	@ 0x24
 8014932:	e76a      	b.n	801480a <_svfiprintf_r+0x52>
 8014934:	fb0c 3202 	mla	r2, ip, r2, r3
 8014938:	460c      	mov	r4, r1
 801493a:	2001      	movs	r0, #1
 801493c:	e7a8      	b.n	8014890 <_svfiprintf_r+0xd8>
 801493e:	2300      	movs	r3, #0
 8014940:	3401      	adds	r4, #1
 8014942:	9305      	str	r3, [sp, #20]
 8014944:	4619      	mov	r1, r3
 8014946:	f04f 0c0a 	mov.w	ip, #10
 801494a:	4620      	mov	r0, r4
 801494c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014950:	3a30      	subs	r2, #48	@ 0x30
 8014952:	2a09      	cmp	r2, #9
 8014954:	d903      	bls.n	801495e <_svfiprintf_r+0x1a6>
 8014956:	2b00      	cmp	r3, #0
 8014958:	d0c6      	beq.n	80148e8 <_svfiprintf_r+0x130>
 801495a:	9105      	str	r1, [sp, #20]
 801495c:	e7c4      	b.n	80148e8 <_svfiprintf_r+0x130>
 801495e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014962:	4604      	mov	r4, r0
 8014964:	2301      	movs	r3, #1
 8014966:	e7f0      	b.n	801494a <_svfiprintf_r+0x192>
 8014968:	ab03      	add	r3, sp, #12
 801496a:	9300      	str	r3, [sp, #0]
 801496c:	462a      	mov	r2, r5
 801496e:	4b0e      	ldr	r3, [pc, #56]	@ (80149a8 <_svfiprintf_r+0x1f0>)
 8014970:	a904      	add	r1, sp, #16
 8014972:	4638      	mov	r0, r7
 8014974:	f7fc fd4c 	bl	8011410 <_printf_float>
 8014978:	1c42      	adds	r2, r0, #1
 801497a:	4606      	mov	r6, r0
 801497c:	d1d6      	bne.n	801492c <_svfiprintf_r+0x174>
 801497e:	89ab      	ldrh	r3, [r5, #12]
 8014980:	065b      	lsls	r3, r3, #25
 8014982:	f53f af2d 	bmi.w	80147e0 <_svfiprintf_r+0x28>
 8014986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014988:	e72c      	b.n	80147e4 <_svfiprintf_r+0x2c>
 801498a:	ab03      	add	r3, sp, #12
 801498c:	9300      	str	r3, [sp, #0]
 801498e:	462a      	mov	r2, r5
 8014990:	4b05      	ldr	r3, [pc, #20]	@ (80149a8 <_svfiprintf_r+0x1f0>)
 8014992:	a904      	add	r1, sp, #16
 8014994:	4638      	mov	r0, r7
 8014996:	f7fc ffc3 	bl	8011920 <_printf_i>
 801499a:	e7ed      	b.n	8014978 <_svfiprintf_r+0x1c0>
 801499c:	08016448 	.word	0x08016448
 80149a0:	08016452 	.word	0x08016452
 80149a4:	08011411 	.word	0x08011411
 80149a8:	08014701 	.word	0x08014701
 80149ac:	0801644e 	.word	0x0801644e

080149b0 <__sfputc_r>:
 80149b0:	6893      	ldr	r3, [r2, #8]
 80149b2:	3b01      	subs	r3, #1
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	b410      	push	{r4}
 80149b8:	6093      	str	r3, [r2, #8]
 80149ba:	da08      	bge.n	80149ce <__sfputc_r+0x1e>
 80149bc:	6994      	ldr	r4, [r2, #24]
 80149be:	42a3      	cmp	r3, r4
 80149c0:	db01      	blt.n	80149c6 <__sfputc_r+0x16>
 80149c2:	290a      	cmp	r1, #10
 80149c4:	d103      	bne.n	80149ce <__sfputc_r+0x1e>
 80149c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149ca:	f000 b9f1 	b.w	8014db0 <__swbuf_r>
 80149ce:	6813      	ldr	r3, [r2, #0]
 80149d0:	1c58      	adds	r0, r3, #1
 80149d2:	6010      	str	r0, [r2, #0]
 80149d4:	7019      	strb	r1, [r3, #0]
 80149d6:	4608      	mov	r0, r1
 80149d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149dc:	4770      	bx	lr

080149de <__sfputs_r>:
 80149de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149e0:	4606      	mov	r6, r0
 80149e2:	460f      	mov	r7, r1
 80149e4:	4614      	mov	r4, r2
 80149e6:	18d5      	adds	r5, r2, r3
 80149e8:	42ac      	cmp	r4, r5
 80149ea:	d101      	bne.n	80149f0 <__sfputs_r+0x12>
 80149ec:	2000      	movs	r0, #0
 80149ee:	e007      	b.n	8014a00 <__sfputs_r+0x22>
 80149f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149f4:	463a      	mov	r2, r7
 80149f6:	4630      	mov	r0, r6
 80149f8:	f7ff ffda 	bl	80149b0 <__sfputc_r>
 80149fc:	1c43      	adds	r3, r0, #1
 80149fe:	d1f3      	bne.n	80149e8 <__sfputs_r+0xa>
 8014a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a04 <_vfiprintf_r>:
 8014a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a08:	460d      	mov	r5, r1
 8014a0a:	b09d      	sub	sp, #116	@ 0x74
 8014a0c:	4614      	mov	r4, r2
 8014a0e:	4698      	mov	r8, r3
 8014a10:	4606      	mov	r6, r0
 8014a12:	b118      	cbz	r0, 8014a1c <_vfiprintf_r+0x18>
 8014a14:	6a03      	ldr	r3, [r0, #32]
 8014a16:	b90b      	cbnz	r3, 8014a1c <_vfiprintf_r+0x18>
 8014a18:	f7fd fb3a 	bl	8012090 <__sinit>
 8014a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a1e:	07d9      	lsls	r1, r3, #31
 8014a20:	d405      	bmi.n	8014a2e <_vfiprintf_r+0x2a>
 8014a22:	89ab      	ldrh	r3, [r5, #12]
 8014a24:	059a      	lsls	r2, r3, #22
 8014a26:	d402      	bmi.n	8014a2e <_vfiprintf_r+0x2a>
 8014a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a2a:	f7fd fd0c 	bl	8012446 <__retarget_lock_acquire_recursive>
 8014a2e:	89ab      	ldrh	r3, [r5, #12]
 8014a30:	071b      	lsls	r3, r3, #28
 8014a32:	d501      	bpl.n	8014a38 <_vfiprintf_r+0x34>
 8014a34:	692b      	ldr	r3, [r5, #16]
 8014a36:	b99b      	cbnz	r3, 8014a60 <_vfiprintf_r+0x5c>
 8014a38:	4629      	mov	r1, r5
 8014a3a:	4630      	mov	r0, r6
 8014a3c:	f000 f9f6 	bl	8014e2c <__swsetup_r>
 8014a40:	b170      	cbz	r0, 8014a60 <_vfiprintf_r+0x5c>
 8014a42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a44:	07dc      	lsls	r4, r3, #31
 8014a46:	d504      	bpl.n	8014a52 <_vfiprintf_r+0x4e>
 8014a48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a4c:	b01d      	add	sp, #116	@ 0x74
 8014a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a52:	89ab      	ldrh	r3, [r5, #12]
 8014a54:	0598      	lsls	r0, r3, #22
 8014a56:	d4f7      	bmi.n	8014a48 <_vfiprintf_r+0x44>
 8014a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a5a:	f7fd fcf5 	bl	8012448 <__retarget_lock_release_recursive>
 8014a5e:	e7f3      	b.n	8014a48 <_vfiprintf_r+0x44>
 8014a60:	2300      	movs	r3, #0
 8014a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a64:	2320      	movs	r3, #32
 8014a66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a6e:	2330      	movs	r3, #48	@ 0x30
 8014a70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014c20 <_vfiprintf_r+0x21c>
 8014a74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a78:	f04f 0901 	mov.w	r9, #1
 8014a7c:	4623      	mov	r3, r4
 8014a7e:	469a      	mov	sl, r3
 8014a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a84:	b10a      	cbz	r2, 8014a8a <_vfiprintf_r+0x86>
 8014a86:	2a25      	cmp	r2, #37	@ 0x25
 8014a88:	d1f9      	bne.n	8014a7e <_vfiprintf_r+0x7a>
 8014a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a8e:	d00b      	beq.n	8014aa8 <_vfiprintf_r+0xa4>
 8014a90:	465b      	mov	r3, fp
 8014a92:	4622      	mov	r2, r4
 8014a94:	4629      	mov	r1, r5
 8014a96:	4630      	mov	r0, r6
 8014a98:	f7ff ffa1 	bl	80149de <__sfputs_r>
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	f000 80a7 	beq.w	8014bf0 <_vfiprintf_r+0x1ec>
 8014aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014aa4:	445a      	add	r2, fp
 8014aa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8014aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	f000 809f 	beq.w	8014bf0 <_vfiprintf_r+0x1ec>
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014abc:	f10a 0a01 	add.w	sl, sl, #1
 8014ac0:	9304      	str	r3, [sp, #16]
 8014ac2:	9307      	str	r3, [sp, #28]
 8014ac4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014ac8:	931a      	str	r3, [sp, #104]	@ 0x68
 8014aca:	4654      	mov	r4, sl
 8014acc:	2205      	movs	r2, #5
 8014ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ad2:	4853      	ldr	r0, [pc, #332]	@ (8014c20 <_vfiprintf_r+0x21c>)
 8014ad4:	f7eb fbc4 	bl	8000260 <memchr>
 8014ad8:	9a04      	ldr	r2, [sp, #16]
 8014ada:	b9d8      	cbnz	r0, 8014b14 <_vfiprintf_r+0x110>
 8014adc:	06d1      	lsls	r1, r2, #27
 8014ade:	bf44      	itt	mi
 8014ae0:	2320      	movmi	r3, #32
 8014ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ae6:	0713      	lsls	r3, r2, #28
 8014ae8:	bf44      	itt	mi
 8014aea:	232b      	movmi	r3, #43	@ 0x2b
 8014aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014af0:	f89a 3000 	ldrb.w	r3, [sl]
 8014af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8014af6:	d015      	beq.n	8014b24 <_vfiprintf_r+0x120>
 8014af8:	9a07      	ldr	r2, [sp, #28]
 8014afa:	4654      	mov	r4, sl
 8014afc:	2000      	movs	r0, #0
 8014afe:	f04f 0c0a 	mov.w	ip, #10
 8014b02:	4621      	mov	r1, r4
 8014b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b08:	3b30      	subs	r3, #48	@ 0x30
 8014b0a:	2b09      	cmp	r3, #9
 8014b0c:	d94b      	bls.n	8014ba6 <_vfiprintf_r+0x1a2>
 8014b0e:	b1b0      	cbz	r0, 8014b3e <_vfiprintf_r+0x13a>
 8014b10:	9207      	str	r2, [sp, #28]
 8014b12:	e014      	b.n	8014b3e <_vfiprintf_r+0x13a>
 8014b14:	eba0 0308 	sub.w	r3, r0, r8
 8014b18:	fa09 f303 	lsl.w	r3, r9, r3
 8014b1c:	4313      	orrs	r3, r2
 8014b1e:	9304      	str	r3, [sp, #16]
 8014b20:	46a2      	mov	sl, r4
 8014b22:	e7d2      	b.n	8014aca <_vfiprintf_r+0xc6>
 8014b24:	9b03      	ldr	r3, [sp, #12]
 8014b26:	1d19      	adds	r1, r3, #4
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	9103      	str	r1, [sp, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	bfbb      	ittet	lt
 8014b30:	425b      	neglt	r3, r3
 8014b32:	f042 0202 	orrlt.w	r2, r2, #2
 8014b36:	9307      	strge	r3, [sp, #28]
 8014b38:	9307      	strlt	r3, [sp, #28]
 8014b3a:	bfb8      	it	lt
 8014b3c:	9204      	strlt	r2, [sp, #16]
 8014b3e:	7823      	ldrb	r3, [r4, #0]
 8014b40:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b42:	d10a      	bne.n	8014b5a <_vfiprintf_r+0x156>
 8014b44:	7863      	ldrb	r3, [r4, #1]
 8014b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b48:	d132      	bne.n	8014bb0 <_vfiprintf_r+0x1ac>
 8014b4a:	9b03      	ldr	r3, [sp, #12]
 8014b4c:	1d1a      	adds	r2, r3, #4
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	9203      	str	r2, [sp, #12]
 8014b52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b56:	3402      	adds	r4, #2
 8014b58:	9305      	str	r3, [sp, #20]
 8014b5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014c30 <_vfiprintf_r+0x22c>
 8014b5e:	7821      	ldrb	r1, [r4, #0]
 8014b60:	2203      	movs	r2, #3
 8014b62:	4650      	mov	r0, sl
 8014b64:	f7eb fb7c 	bl	8000260 <memchr>
 8014b68:	b138      	cbz	r0, 8014b7a <_vfiprintf_r+0x176>
 8014b6a:	9b04      	ldr	r3, [sp, #16]
 8014b6c:	eba0 000a 	sub.w	r0, r0, sl
 8014b70:	2240      	movs	r2, #64	@ 0x40
 8014b72:	4082      	lsls	r2, r0
 8014b74:	4313      	orrs	r3, r2
 8014b76:	3401      	adds	r4, #1
 8014b78:	9304      	str	r3, [sp, #16]
 8014b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b7e:	4829      	ldr	r0, [pc, #164]	@ (8014c24 <_vfiprintf_r+0x220>)
 8014b80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b84:	2206      	movs	r2, #6
 8014b86:	f7eb fb6b 	bl	8000260 <memchr>
 8014b8a:	2800      	cmp	r0, #0
 8014b8c:	d03f      	beq.n	8014c0e <_vfiprintf_r+0x20a>
 8014b8e:	4b26      	ldr	r3, [pc, #152]	@ (8014c28 <_vfiprintf_r+0x224>)
 8014b90:	bb1b      	cbnz	r3, 8014bda <_vfiprintf_r+0x1d6>
 8014b92:	9b03      	ldr	r3, [sp, #12]
 8014b94:	3307      	adds	r3, #7
 8014b96:	f023 0307 	bic.w	r3, r3, #7
 8014b9a:	3308      	adds	r3, #8
 8014b9c:	9303      	str	r3, [sp, #12]
 8014b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ba0:	443b      	add	r3, r7
 8014ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ba4:	e76a      	b.n	8014a7c <_vfiprintf_r+0x78>
 8014ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014baa:	460c      	mov	r4, r1
 8014bac:	2001      	movs	r0, #1
 8014bae:	e7a8      	b.n	8014b02 <_vfiprintf_r+0xfe>
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	3401      	adds	r4, #1
 8014bb4:	9305      	str	r3, [sp, #20]
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	f04f 0c0a 	mov.w	ip, #10
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bc2:	3a30      	subs	r2, #48	@ 0x30
 8014bc4:	2a09      	cmp	r2, #9
 8014bc6:	d903      	bls.n	8014bd0 <_vfiprintf_r+0x1cc>
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d0c6      	beq.n	8014b5a <_vfiprintf_r+0x156>
 8014bcc:	9105      	str	r1, [sp, #20]
 8014bce:	e7c4      	b.n	8014b5a <_vfiprintf_r+0x156>
 8014bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	e7f0      	b.n	8014bbc <_vfiprintf_r+0x1b8>
 8014bda:	ab03      	add	r3, sp, #12
 8014bdc:	9300      	str	r3, [sp, #0]
 8014bde:	462a      	mov	r2, r5
 8014be0:	4b12      	ldr	r3, [pc, #72]	@ (8014c2c <_vfiprintf_r+0x228>)
 8014be2:	a904      	add	r1, sp, #16
 8014be4:	4630      	mov	r0, r6
 8014be6:	f7fc fc13 	bl	8011410 <_printf_float>
 8014bea:	4607      	mov	r7, r0
 8014bec:	1c78      	adds	r0, r7, #1
 8014bee:	d1d6      	bne.n	8014b9e <_vfiprintf_r+0x19a>
 8014bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bf2:	07d9      	lsls	r1, r3, #31
 8014bf4:	d405      	bmi.n	8014c02 <_vfiprintf_r+0x1fe>
 8014bf6:	89ab      	ldrh	r3, [r5, #12]
 8014bf8:	059a      	lsls	r2, r3, #22
 8014bfa:	d402      	bmi.n	8014c02 <_vfiprintf_r+0x1fe>
 8014bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bfe:	f7fd fc23 	bl	8012448 <__retarget_lock_release_recursive>
 8014c02:	89ab      	ldrh	r3, [r5, #12]
 8014c04:	065b      	lsls	r3, r3, #25
 8014c06:	f53f af1f 	bmi.w	8014a48 <_vfiprintf_r+0x44>
 8014c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c0c:	e71e      	b.n	8014a4c <_vfiprintf_r+0x48>
 8014c0e:	ab03      	add	r3, sp, #12
 8014c10:	9300      	str	r3, [sp, #0]
 8014c12:	462a      	mov	r2, r5
 8014c14:	4b05      	ldr	r3, [pc, #20]	@ (8014c2c <_vfiprintf_r+0x228>)
 8014c16:	a904      	add	r1, sp, #16
 8014c18:	4630      	mov	r0, r6
 8014c1a:	f7fc fe81 	bl	8011920 <_printf_i>
 8014c1e:	e7e4      	b.n	8014bea <_vfiprintf_r+0x1e6>
 8014c20:	08016448 	.word	0x08016448
 8014c24:	08016452 	.word	0x08016452
 8014c28:	08011411 	.word	0x08011411
 8014c2c:	080149df 	.word	0x080149df
 8014c30:	0801644e 	.word	0x0801644e

08014c34 <__sflush_r>:
 8014c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c3c:	0716      	lsls	r6, r2, #28
 8014c3e:	4605      	mov	r5, r0
 8014c40:	460c      	mov	r4, r1
 8014c42:	d454      	bmi.n	8014cee <__sflush_r+0xba>
 8014c44:	684b      	ldr	r3, [r1, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	dc02      	bgt.n	8014c50 <__sflush_r+0x1c>
 8014c4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	dd48      	ble.n	8014ce2 <__sflush_r+0xae>
 8014c50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c52:	2e00      	cmp	r6, #0
 8014c54:	d045      	beq.n	8014ce2 <__sflush_r+0xae>
 8014c56:	2300      	movs	r3, #0
 8014c58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014c5c:	682f      	ldr	r7, [r5, #0]
 8014c5e:	6a21      	ldr	r1, [r4, #32]
 8014c60:	602b      	str	r3, [r5, #0]
 8014c62:	d030      	beq.n	8014cc6 <__sflush_r+0x92>
 8014c64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014c66:	89a3      	ldrh	r3, [r4, #12]
 8014c68:	0759      	lsls	r1, r3, #29
 8014c6a:	d505      	bpl.n	8014c78 <__sflush_r+0x44>
 8014c6c:	6863      	ldr	r3, [r4, #4]
 8014c6e:	1ad2      	subs	r2, r2, r3
 8014c70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014c72:	b10b      	cbz	r3, 8014c78 <__sflush_r+0x44>
 8014c74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014c76:	1ad2      	subs	r2, r2, r3
 8014c78:	2300      	movs	r3, #0
 8014c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c7c:	6a21      	ldr	r1, [r4, #32]
 8014c7e:	4628      	mov	r0, r5
 8014c80:	47b0      	blx	r6
 8014c82:	1c43      	adds	r3, r0, #1
 8014c84:	89a3      	ldrh	r3, [r4, #12]
 8014c86:	d106      	bne.n	8014c96 <__sflush_r+0x62>
 8014c88:	6829      	ldr	r1, [r5, #0]
 8014c8a:	291d      	cmp	r1, #29
 8014c8c:	d82b      	bhi.n	8014ce6 <__sflush_r+0xb2>
 8014c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8014d38 <__sflush_r+0x104>)
 8014c90:	410a      	asrs	r2, r1
 8014c92:	07d6      	lsls	r6, r2, #31
 8014c94:	d427      	bmi.n	8014ce6 <__sflush_r+0xb2>
 8014c96:	2200      	movs	r2, #0
 8014c98:	6062      	str	r2, [r4, #4]
 8014c9a:	04d9      	lsls	r1, r3, #19
 8014c9c:	6922      	ldr	r2, [r4, #16]
 8014c9e:	6022      	str	r2, [r4, #0]
 8014ca0:	d504      	bpl.n	8014cac <__sflush_r+0x78>
 8014ca2:	1c42      	adds	r2, r0, #1
 8014ca4:	d101      	bne.n	8014caa <__sflush_r+0x76>
 8014ca6:	682b      	ldr	r3, [r5, #0]
 8014ca8:	b903      	cbnz	r3, 8014cac <__sflush_r+0x78>
 8014caa:	6560      	str	r0, [r4, #84]	@ 0x54
 8014cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014cae:	602f      	str	r7, [r5, #0]
 8014cb0:	b1b9      	cbz	r1, 8014ce2 <__sflush_r+0xae>
 8014cb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014cb6:	4299      	cmp	r1, r3
 8014cb8:	d002      	beq.n	8014cc0 <__sflush_r+0x8c>
 8014cba:	4628      	mov	r0, r5
 8014cbc:	f7fe f9ea 	bl	8013094 <_free_r>
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8014cc4:	e00d      	b.n	8014ce2 <__sflush_r+0xae>
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	4628      	mov	r0, r5
 8014cca:	47b0      	blx	r6
 8014ccc:	4602      	mov	r2, r0
 8014cce:	1c50      	adds	r0, r2, #1
 8014cd0:	d1c9      	bne.n	8014c66 <__sflush_r+0x32>
 8014cd2:	682b      	ldr	r3, [r5, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d0c6      	beq.n	8014c66 <__sflush_r+0x32>
 8014cd8:	2b1d      	cmp	r3, #29
 8014cda:	d001      	beq.n	8014ce0 <__sflush_r+0xac>
 8014cdc:	2b16      	cmp	r3, #22
 8014cde:	d11e      	bne.n	8014d1e <__sflush_r+0xea>
 8014ce0:	602f      	str	r7, [r5, #0]
 8014ce2:	2000      	movs	r0, #0
 8014ce4:	e022      	b.n	8014d2c <__sflush_r+0xf8>
 8014ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cea:	b21b      	sxth	r3, r3
 8014cec:	e01b      	b.n	8014d26 <__sflush_r+0xf2>
 8014cee:	690f      	ldr	r7, [r1, #16]
 8014cf0:	2f00      	cmp	r7, #0
 8014cf2:	d0f6      	beq.n	8014ce2 <__sflush_r+0xae>
 8014cf4:	0793      	lsls	r3, r2, #30
 8014cf6:	680e      	ldr	r6, [r1, #0]
 8014cf8:	bf08      	it	eq
 8014cfa:	694b      	ldreq	r3, [r1, #20]
 8014cfc:	600f      	str	r7, [r1, #0]
 8014cfe:	bf18      	it	ne
 8014d00:	2300      	movne	r3, #0
 8014d02:	eba6 0807 	sub.w	r8, r6, r7
 8014d06:	608b      	str	r3, [r1, #8]
 8014d08:	f1b8 0f00 	cmp.w	r8, #0
 8014d0c:	dde9      	ble.n	8014ce2 <__sflush_r+0xae>
 8014d0e:	6a21      	ldr	r1, [r4, #32]
 8014d10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014d12:	4643      	mov	r3, r8
 8014d14:	463a      	mov	r2, r7
 8014d16:	4628      	mov	r0, r5
 8014d18:	47b0      	blx	r6
 8014d1a:	2800      	cmp	r0, #0
 8014d1c:	dc08      	bgt.n	8014d30 <__sflush_r+0xfc>
 8014d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d26:	81a3      	strh	r3, [r4, #12]
 8014d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d30:	4407      	add	r7, r0
 8014d32:	eba8 0800 	sub.w	r8, r8, r0
 8014d36:	e7e7      	b.n	8014d08 <__sflush_r+0xd4>
 8014d38:	dfbffffe 	.word	0xdfbffffe

08014d3c <_fflush_r>:
 8014d3c:	b538      	push	{r3, r4, r5, lr}
 8014d3e:	690b      	ldr	r3, [r1, #16]
 8014d40:	4605      	mov	r5, r0
 8014d42:	460c      	mov	r4, r1
 8014d44:	b913      	cbnz	r3, 8014d4c <_fflush_r+0x10>
 8014d46:	2500      	movs	r5, #0
 8014d48:	4628      	mov	r0, r5
 8014d4a:	bd38      	pop	{r3, r4, r5, pc}
 8014d4c:	b118      	cbz	r0, 8014d56 <_fflush_r+0x1a>
 8014d4e:	6a03      	ldr	r3, [r0, #32]
 8014d50:	b90b      	cbnz	r3, 8014d56 <_fflush_r+0x1a>
 8014d52:	f7fd f99d 	bl	8012090 <__sinit>
 8014d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d0f3      	beq.n	8014d46 <_fflush_r+0xa>
 8014d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014d60:	07d0      	lsls	r0, r2, #31
 8014d62:	d404      	bmi.n	8014d6e <_fflush_r+0x32>
 8014d64:	0599      	lsls	r1, r3, #22
 8014d66:	d402      	bmi.n	8014d6e <_fflush_r+0x32>
 8014d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d6a:	f7fd fb6c 	bl	8012446 <__retarget_lock_acquire_recursive>
 8014d6e:	4628      	mov	r0, r5
 8014d70:	4621      	mov	r1, r4
 8014d72:	f7ff ff5f 	bl	8014c34 <__sflush_r>
 8014d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014d78:	07da      	lsls	r2, r3, #31
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	d4e4      	bmi.n	8014d48 <_fflush_r+0xc>
 8014d7e:	89a3      	ldrh	r3, [r4, #12]
 8014d80:	059b      	lsls	r3, r3, #22
 8014d82:	d4e1      	bmi.n	8014d48 <_fflush_r+0xc>
 8014d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d86:	f7fd fb5f 	bl	8012448 <__retarget_lock_release_recursive>
 8014d8a:	e7dd      	b.n	8014d48 <_fflush_r+0xc>

08014d8c <fiprintf>:
 8014d8c:	b40e      	push	{r1, r2, r3}
 8014d8e:	b503      	push	{r0, r1, lr}
 8014d90:	4601      	mov	r1, r0
 8014d92:	ab03      	add	r3, sp, #12
 8014d94:	4805      	ldr	r0, [pc, #20]	@ (8014dac <fiprintf+0x20>)
 8014d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d9a:	6800      	ldr	r0, [r0, #0]
 8014d9c:	9301      	str	r3, [sp, #4]
 8014d9e:	f7ff fe31 	bl	8014a04 <_vfiprintf_r>
 8014da2:	b002      	add	sp, #8
 8014da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014da8:	b003      	add	sp, #12
 8014daa:	4770      	bx	lr
 8014dac:	20000078 	.word	0x20000078

08014db0 <__swbuf_r>:
 8014db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db2:	460e      	mov	r6, r1
 8014db4:	4614      	mov	r4, r2
 8014db6:	4605      	mov	r5, r0
 8014db8:	b118      	cbz	r0, 8014dc2 <__swbuf_r+0x12>
 8014dba:	6a03      	ldr	r3, [r0, #32]
 8014dbc:	b90b      	cbnz	r3, 8014dc2 <__swbuf_r+0x12>
 8014dbe:	f7fd f967 	bl	8012090 <__sinit>
 8014dc2:	69a3      	ldr	r3, [r4, #24]
 8014dc4:	60a3      	str	r3, [r4, #8]
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	071a      	lsls	r2, r3, #28
 8014dca:	d501      	bpl.n	8014dd0 <__swbuf_r+0x20>
 8014dcc:	6923      	ldr	r3, [r4, #16]
 8014dce:	b943      	cbnz	r3, 8014de2 <__swbuf_r+0x32>
 8014dd0:	4621      	mov	r1, r4
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	f000 f82a 	bl	8014e2c <__swsetup_r>
 8014dd8:	b118      	cbz	r0, 8014de2 <__swbuf_r+0x32>
 8014dda:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014dde:	4638      	mov	r0, r7
 8014de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de2:	6823      	ldr	r3, [r4, #0]
 8014de4:	6922      	ldr	r2, [r4, #16]
 8014de6:	1a98      	subs	r0, r3, r2
 8014de8:	6963      	ldr	r3, [r4, #20]
 8014dea:	b2f6      	uxtb	r6, r6
 8014dec:	4283      	cmp	r3, r0
 8014dee:	4637      	mov	r7, r6
 8014df0:	dc05      	bgt.n	8014dfe <__swbuf_r+0x4e>
 8014df2:	4621      	mov	r1, r4
 8014df4:	4628      	mov	r0, r5
 8014df6:	f7ff ffa1 	bl	8014d3c <_fflush_r>
 8014dfa:	2800      	cmp	r0, #0
 8014dfc:	d1ed      	bne.n	8014dda <__swbuf_r+0x2a>
 8014dfe:	68a3      	ldr	r3, [r4, #8]
 8014e00:	3b01      	subs	r3, #1
 8014e02:	60a3      	str	r3, [r4, #8]
 8014e04:	6823      	ldr	r3, [r4, #0]
 8014e06:	1c5a      	adds	r2, r3, #1
 8014e08:	6022      	str	r2, [r4, #0]
 8014e0a:	701e      	strb	r6, [r3, #0]
 8014e0c:	6962      	ldr	r2, [r4, #20]
 8014e0e:	1c43      	adds	r3, r0, #1
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d004      	beq.n	8014e1e <__swbuf_r+0x6e>
 8014e14:	89a3      	ldrh	r3, [r4, #12]
 8014e16:	07db      	lsls	r3, r3, #31
 8014e18:	d5e1      	bpl.n	8014dde <__swbuf_r+0x2e>
 8014e1a:	2e0a      	cmp	r6, #10
 8014e1c:	d1df      	bne.n	8014dde <__swbuf_r+0x2e>
 8014e1e:	4621      	mov	r1, r4
 8014e20:	4628      	mov	r0, r5
 8014e22:	f7ff ff8b 	bl	8014d3c <_fflush_r>
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d0d9      	beq.n	8014dde <__swbuf_r+0x2e>
 8014e2a:	e7d6      	b.n	8014dda <__swbuf_r+0x2a>

08014e2c <__swsetup_r>:
 8014e2c:	b538      	push	{r3, r4, r5, lr}
 8014e2e:	4b29      	ldr	r3, [pc, #164]	@ (8014ed4 <__swsetup_r+0xa8>)
 8014e30:	4605      	mov	r5, r0
 8014e32:	6818      	ldr	r0, [r3, #0]
 8014e34:	460c      	mov	r4, r1
 8014e36:	b118      	cbz	r0, 8014e40 <__swsetup_r+0x14>
 8014e38:	6a03      	ldr	r3, [r0, #32]
 8014e3a:	b90b      	cbnz	r3, 8014e40 <__swsetup_r+0x14>
 8014e3c:	f7fd f928 	bl	8012090 <__sinit>
 8014e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e44:	0719      	lsls	r1, r3, #28
 8014e46:	d422      	bmi.n	8014e8e <__swsetup_r+0x62>
 8014e48:	06da      	lsls	r2, r3, #27
 8014e4a:	d407      	bmi.n	8014e5c <__swsetup_r+0x30>
 8014e4c:	2209      	movs	r2, #9
 8014e4e:	602a      	str	r2, [r5, #0]
 8014e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e54:	81a3      	strh	r3, [r4, #12]
 8014e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e5a:	e033      	b.n	8014ec4 <__swsetup_r+0x98>
 8014e5c:	0758      	lsls	r0, r3, #29
 8014e5e:	d512      	bpl.n	8014e86 <__swsetup_r+0x5a>
 8014e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e62:	b141      	cbz	r1, 8014e76 <__swsetup_r+0x4a>
 8014e64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e68:	4299      	cmp	r1, r3
 8014e6a:	d002      	beq.n	8014e72 <__swsetup_r+0x46>
 8014e6c:	4628      	mov	r0, r5
 8014e6e:	f7fe f911 	bl	8013094 <_free_r>
 8014e72:	2300      	movs	r3, #0
 8014e74:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e76:	89a3      	ldrh	r3, [r4, #12]
 8014e78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014e7c:	81a3      	strh	r3, [r4, #12]
 8014e7e:	2300      	movs	r3, #0
 8014e80:	6063      	str	r3, [r4, #4]
 8014e82:	6923      	ldr	r3, [r4, #16]
 8014e84:	6023      	str	r3, [r4, #0]
 8014e86:	89a3      	ldrh	r3, [r4, #12]
 8014e88:	f043 0308 	orr.w	r3, r3, #8
 8014e8c:	81a3      	strh	r3, [r4, #12]
 8014e8e:	6923      	ldr	r3, [r4, #16]
 8014e90:	b94b      	cbnz	r3, 8014ea6 <__swsetup_r+0x7a>
 8014e92:	89a3      	ldrh	r3, [r4, #12]
 8014e94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e9c:	d003      	beq.n	8014ea6 <__swsetup_r+0x7a>
 8014e9e:	4621      	mov	r1, r4
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f000 fbc1 	bl	8015628 <__smakebuf_r>
 8014ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eaa:	f013 0201 	ands.w	r2, r3, #1
 8014eae:	d00a      	beq.n	8014ec6 <__swsetup_r+0x9a>
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	60a2      	str	r2, [r4, #8]
 8014eb4:	6962      	ldr	r2, [r4, #20]
 8014eb6:	4252      	negs	r2, r2
 8014eb8:	61a2      	str	r2, [r4, #24]
 8014eba:	6922      	ldr	r2, [r4, #16]
 8014ebc:	b942      	cbnz	r2, 8014ed0 <__swsetup_r+0xa4>
 8014ebe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014ec2:	d1c5      	bne.n	8014e50 <__swsetup_r+0x24>
 8014ec4:	bd38      	pop	{r3, r4, r5, pc}
 8014ec6:	0799      	lsls	r1, r3, #30
 8014ec8:	bf58      	it	pl
 8014eca:	6962      	ldrpl	r2, [r4, #20]
 8014ecc:	60a2      	str	r2, [r4, #8]
 8014ece:	e7f4      	b.n	8014eba <__swsetup_r+0x8e>
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	e7f7      	b.n	8014ec4 <__swsetup_r+0x98>
 8014ed4:	20000078 	.word	0x20000078

08014ed8 <memmove>:
 8014ed8:	4288      	cmp	r0, r1
 8014eda:	b510      	push	{r4, lr}
 8014edc:	eb01 0402 	add.w	r4, r1, r2
 8014ee0:	d902      	bls.n	8014ee8 <memmove+0x10>
 8014ee2:	4284      	cmp	r4, r0
 8014ee4:	4623      	mov	r3, r4
 8014ee6:	d807      	bhi.n	8014ef8 <memmove+0x20>
 8014ee8:	1e43      	subs	r3, r0, #1
 8014eea:	42a1      	cmp	r1, r4
 8014eec:	d008      	beq.n	8014f00 <memmove+0x28>
 8014eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ef6:	e7f8      	b.n	8014eea <memmove+0x12>
 8014ef8:	4402      	add	r2, r0
 8014efa:	4601      	mov	r1, r0
 8014efc:	428a      	cmp	r2, r1
 8014efe:	d100      	bne.n	8014f02 <memmove+0x2a>
 8014f00:	bd10      	pop	{r4, pc}
 8014f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f0a:	e7f7      	b.n	8014efc <memmove+0x24>
 8014f0c:	0000      	movs	r0, r0
	...

08014f10 <nan>:
 8014f10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014f18 <nan+0x8>
 8014f14:	4770      	bx	lr
 8014f16:	bf00      	nop
 8014f18:	00000000 	.word	0x00000000
 8014f1c:	7ff80000 	.word	0x7ff80000

08014f20 <abort>:
 8014f20:	b508      	push	{r3, lr}
 8014f22:	2006      	movs	r0, #6
 8014f24:	f000 fbe4 	bl	80156f0 <raise>
 8014f28:	2001      	movs	r0, #1
 8014f2a:	f7ec fc95 	bl	8001858 <_exit>

08014f2e <rshift>:
 8014f2e:	6903      	ldr	r3, [r0, #16]
 8014f30:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f38:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014f3c:	f100 0414 	add.w	r4, r0, #20
 8014f40:	dd45      	ble.n	8014fce <rshift+0xa0>
 8014f42:	f011 011f 	ands.w	r1, r1, #31
 8014f46:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014f4a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014f4e:	d10c      	bne.n	8014f6a <rshift+0x3c>
 8014f50:	f100 0710 	add.w	r7, r0, #16
 8014f54:	4629      	mov	r1, r5
 8014f56:	42b1      	cmp	r1, r6
 8014f58:	d334      	bcc.n	8014fc4 <rshift+0x96>
 8014f5a:	1a9b      	subs	r3, r3, r2
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	1eea      	subs	r2, r5, #3
 8014f60:	4296      	cmp	r6, r2
 8014f62:	bf38      	it	cc
 8014f64:	2300      	movcc	r3, #0
 8014f66:	4423      	add	r3, r4
 8014f68:	e015      	b.n	8014f96 <rshift+0x68>
 8014f6a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014f6e:	f1c1 0820 	rsb	r8, r1, #32
 8014f72:	40cf      	lsrs	r7, r1
 8014f74:	f105 0e04 	add.w	lr, r5, #4
 8014f78:	46a1      	mov	r9, r4
 8014f7a:	4576      	cmp	r6, lr
 8014f7c:	46f4      	mov	ip, lr
 8014f7e:	d815      	bhi.n	8014fac <rshift+0x7e>
 8014f80:	1a9a      	subs	r2, r3, r2
 8014f82:	0092      	lsls	r2, r2, #2
 8014f84:	3a04      	subs	r2, #4
 8014f86:	3501      	adds	r5, #1
 8014f88:	42ae      	cmp	r6, r5
 8014f8a:	bf38      	it	cc
 8014f8c:	2200      	movcc	r2, #0
 8014f8e:	18a3      	adds	r3, r4, r2
 8014f90:	50a7      	str	r7, [r4, r2]
 8014f92:	b107      	cbz	r7, 8014f96 <rshift+0x68>
 8014f94:	3304      	adds	r3, #4
 8014f96:	1b1a      	subs	r2, r3, r4
 8014f98:	42a3      	cmp	r3, r4
 8014f9a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014f9e:	bf08      	it	eq
 8014fa0:	2300      	moveq	r3, #0
 8014fa2:	6102      	str	r2, [r0, #16]
 8014fa4:	bf08      	it	eq
 8014fa6:	6143      	streq	r3, [r0, #20]
 8014fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fac:	f8dc c000 	ldr.w	ip, [ip]
 8014fb0:	fa0c fc08 	lsl.w	ip, ip, r8
 8014fb4:	ea4c 0707 	orr.w	r7, ip, r7
 8014fb8:	f849 7b04 	str.w	r7, [r9], #4
 8014fbc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014fc0:	40cf      	lsrs	r7, r1
 8014fc2:	e7da      	b.n	8014f7a <rshift+0x4c>
 8014fc4:	f851 cb04 	ldr.w	ip, [r1], #4
 8014fc8:	f847 cf04 	str.w	ip, [r7, #4]!
 8014fcc:	e7c3      	b.n	8014f56 <rshift+0x28>
 8014fce:	4623      	mov	r3, r4
 8014fd0:	e7e1      	b.n	8014f96 <rshift+0x68>

08014fd2 <__hexdig_fun>:
 8014fd2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014fd6:	2b09      	cmp	r3, #9
 8014fd8:	d802      	bhi.n	8014fe0 <__hexdig_fun+0xe>
 8014fda:	3820      	subs	r0, #32
 8014fdc:	b2c0      	uxtb	r0, r0
 8014fde:	4770      	bx	lr
 8014fe0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014fe4:	2b05      	cmp	r3, #5
 8014fe6:	d801      	bhi.n	8014fec <__hexdig_fun+0x1a>
 8014fe8:	3847      	subs	r0, #71	@ 0x47
 8014fea:	e7f7      	b.n	8014fdc <__hexdig_fun+0xa>
 8014fec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014ff0:	2b05      	cmp	r3, #5
 8014ff2:	d801      	bhi.n	8014ff8 <__hexdig_fun+0x26>
 8014ff4:	3827      	subs	r0, #39	@ 0x27
 8014ff6:	e7f1      	b.n	8014fdc <__hexdig_fun+0xa>
 8014ff8:	2000      	movs	r0, #0
 8014ffa:	4770      	bx	lr

08014ffc <__gethex>:
 8014ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015000:	b085      	sub	sp, #20
 8015002:	468a      	mov	sl, r1
 8015004:	9302      	str	r3, [sp, #8]
 8015006:	680b      	ldr	r3, [r1, #0]
 8015008:	9001      	str	r0, [sp, #4]
 801500a:	4690      	mov	r8, r2
 801500c:	1c9c      	adds	r4, r3, #2
 801500e:	46a1      	mov	r9, r4
 8015010:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015014:	2830      	cmp	r0, #48	@ 0x30
 8015016:	d0fa      	beq.n	801500e <__gethex+0x12>
 8015018:	eba9 0303 	sub.w	r3, r9, r3
 801501c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015020:	f7ff ffd7 	bl	8014fd2 <__hexdig_fun>
 8015024:	4605      	mov	r5, r0
 8015026:	2800      	cmp	r0, #0
 8015028:	d168      	bne.n	80150fc <__gethex+0x100>
 801502a:	49a0      	ldr	r1, [pc, #640]	@ (80152ac <__gethex+0x2b0>)
 801502c:	2201      	movs	r2, #1
 801502e:	4648      	mov	r0, r9
 8015030:	f7fd f95b 	bl	80122ea <strncmp>
 8015034:	4607      	mov	r7, r0
 8015036:	2800      	cmp	r0, #0
 8015038:	d167      	bne.n	801510a <__gethex+0x10e>
 801503a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801503e:	4626      	mov	r6, r4
 8015040:	f7ff ffc7 	bl	8014fd2 <__hexdig_fun>
 8015044:	2800      	cmp	r0, #0
 8015046:	d062      	beq.n	801510e <__gethex+0x112>
 8015048:	4623      	mov	r3, r4
 801504a:	7818      	ldrb	r0, [r3, #0]
 801504c:	2830      	cmp	r0, #48	@ 0x30
 801504e:	4699      	mov	r9, r3
 8015050:	f103 0301 	add.w	r3, r3, #1
 8015054:	d0f9      	beq.n	801504a <__gethex+0x4e>
 8015056:	f7ff ffbc 	bl	8014fd2 <__hexdig_fun>
 801505a:	fab0 f580 	clz	r5, r0
 801505e:	096d      	lsrs	r5, r5, #5
 8015060:	f04f 0b01 	mov.w	fp, #1
 8015064:	464a      	mov	r2, r9
 8015066:	4616      	mov	r6, r2
 8015068:	3201      	adds	r2, #1
 801506a:	7830      	ldrb	r0, [r6, #0]
 801506c:	f7ff ffb1 	bl	8014fd2 <__hexdig_fun>
 8015070:	2800      	cmp	r0, #0
 8015072:	d1f8      	bne.n	8015066 <__gethex+0x6a>
 8015074:	498d      	ldr	r1, [pc, #564]	@ (80152ac <__gethex+0x2b0>)
 8015076:	2201      	movs	r2, #1
 8015078:	4630      	mov	r0, r6
 801507a:	f7fd f936 	bl	80122ea <strncmp>
 801507e:	2800      	cmp	r0, #0
 8015080:	d13f      	bne.n	8015102 <__gethex+0x106>
 8015082:	b944      	cbnz	r4, 8015096 <__gethex+0x9a>
 8015084:	1c74      	adds	r4, r6, #1
 8015086:	4622      	mov	r2, r4
 8015088:	4616      	mov	r6, r2
 801508a:	3201      	adds	r2, #1
 801508c:	7830      	ldrb	r0, [r6, #0]
 801508e:	f7ff ffa0 	bl	8014fd2 <__hexdig_fun>
 8015092:	2800      	cmp	r0, #0
 8015094:	d1f8      	bne.n	8015088 <__gethex+0x8c>
 8015096:	1ba4      	subs	r4, r4, r6
 8015098:	00a7      	lsls	r7, r4, #2
 801509a:	7833      	ldrb	r3, [r6, #0]
 801509c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80150a0:	2b50      	cmp	r3, #80	@ 0x50
 80150a2:	d13e      	bne.n	8015122 <__gethex+0x126>
 80150a4:	7873      	ldrb	r3, [r6, #1]
 80150a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80150a8:	d033      	beq.n	8015112 <__gethex+0x116>
 80150aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80150ac:	d034      	beq.n	8015118 <__gethex+0x11c>
 80150ae:	1c71      	adds	r1, r6, #1
 80150b0:	2400      	movs	r4, #0
 80150b2:	7808      	ldrb	r0, [r1, #0]
 80150b4:	f7ff ff8d 	bl	8014fd2 <__hexdig_fun>
 80150b8:	1e43      	subs	r3, r0, #1
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b18      	cmp	r3, #24
 80150be:	d830      	bhi.n	8015122 <__gethex+0x126>
 80150c0:	f1a0 0210 	sub.w	r2, r0, #16
 80150c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80150c8:	f7ff ff83 	bl	8014fd2 <__hexdig_fun>
 80150cc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80150d0:	fa5f fc8c 	uxtb.w	ip, ip
 80150d4:	f1bc 0f18 	cmp.w	ip, #24
 80150d8:	f04f 030a 	mov.w	r3, #10
 80150dc:	d91e      	bls.n	801511c <__gethex+0x120>
 80150de:	b104      	cbz	r4, 80150e2 <__gethex+0xe6>
 80150e0:	4252      	negs	r2, r2
 80150e2:	4417      	add	r7, r2
 80150e4:	f8ca 1000 	str.w	r1, [sl]
 80150e8:	b1ed      	cbz	r5, 8015126 <__gethex+0x12a>
 80150ea:	f1bb 0f00 	cmp.w	fp, #0
 80150ee:	bf0c      	ite	eq
 80150f0:	2506      	moveq	r5, #6
 80150f2:	2500      	movne	r5, #0
 80150f4:	4628      	mov	r0, r5
 80150f6:	b005      	add	sp, #20
 80150f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150fc:	2500      	movs	r5, #0
 80150fe:	462c      	mov	r4, r5
 8015100:	e7b0      	b.n	8015064 <__gethex+0x68>
 8015102:	2c00      	cmp	r4, #0
 8015104:	d1c7      	bne.n	8015096 <__gethex+0x9a>
 8015106:	4627      	mov	r7, r4
 8015108:	e7c7      	b.n	801509a <__gethex+0x9e>
 801510a:	464e      	mov	r6, r9
 801510c:	462f      	mov	r7, r5
 801510e:	2501      	movs	r5, #1
 8015110:	e7c3      	b.n	801509a <__gethex+0x9e>
 8015112:	2400      	movs	r4, #0
 8015114:	1cb1      	adds	r1, r6, #2
 8015116:	e7cc      	b.n	80150b2 <__gethex+0xb6>
 8015118:	2401      	movs	r4, #1
 801511a:	e7fb      	b.n	8015114 <__gethex+0x118>
 801511c:	fb03 0002 	mla	r0, r3, r2, r0
 8015120:	e7ce      	b.n	80150c0 <__gethex+0xc4>
 8015122:	4631      	mov	r1, r6
 8015124:	e7de      	b.n	80150e4 <__gethex+0xe8>
 8015126:	eba6 0309 	sub.w	r3, r6, r9
 801512a:	3b01      	subs	r3, #1
 801512c:	4629      	mov	r1, r5
 801512e:	2b07      	cmp	r3, #7
 8015130:	dc0a      	bgt.n	8015148 <__gethex+0x14c>
 8015132:	9801      	ldr	r0, [sp, #4]
 8015134:	f7fd fff8 	bl	8013128 <_Balloc>
 8015138:	4604      	mov	r4, r0
 801513a:	b940      	cbnz	r0, 801514e <__gethex+0x152>
 801513c:	4b5c      	ldr	r3, [pc, #368]	@ (80152b0 <__gethex+0x2b4>)
 801513e:	4602      	mov	r2, r0
 8015140:	21e4      	movs	r1, #228	@ 0xe4
 8015142:	485c      	ldr	r0, [pc, #368]	@ (80152b4 <__gethex+0x2b8>)
 8015144:	f7fd f99e 	bl	8012484 <__assert_func>
 8015148:	3101      	adds	r1, #1
 801514a:	105b      	asrs	r3, r3, #1
 801514c:	e7ef      	b.n	801512e <__gethex+0x132>
 801514e:	f100 0a14 	add.w	sl, r0, #20
 8015152:	2300      	movs	r3, #0
 8015154:	4655      	mov	r5, sl
 8015156:	469b      	mov	fp, r3
 8015158:	45b1      	cmp	r9, r6
 801515a:	d337      	bcc.n	80151cc <__gethex+0x1d0>
 801515c:	f845 bb04 	str.w	fp, [r5], #4
 8015160:	eba5 050a 	sub.w	r5, r5, sl
 8015164:	10ad      	asrs	r5, r5, #2
 8015166:	6125      	str	r5, [r4, #16]
 8015168:	4658      	mov	r0, fp
 801516a:	f7fe f8cf 	bl	801330c <__hi0bits>
 801516e:	016d      	lsls	r5, r5, #5
 8015170:	f8d8 6000 	ldr.w	r6, [r8]
 8015174:	1a2d      	subs	r5, r5, r0
 8015176:	42b5      	cmp	r5, r6
 8015178:	dd54      	ble.n	8015224 <__gethex+0x228>
 801517a:	1bad      	subs	r5, r5, r6
 801517c:	4629      	mov	r1, r5
 801517e:	4620      	mov	r0, r4
 8015180:	f7fe fc60 	bl	8013a44 <__any_on>
 8015184:	4681      	mov	r9, r0
 8015186:	b178      	cbz	r0, 80151a8 <__gethex+0x1ac>
 8015188:	1e6b      	subs	r3, r5, #1
 801518a:	1159      	asrs	r1, r3, #5
 801518c:	f003 021f 	and.w	r2, r3, #31
 8015190:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015194:	f04f 0901 	mov.w	r9, #1
 8015198:	fa09 f202 	lsl.w	r2, r9, r2
 801519c:	420a      	tst	r2, r1
 801519e:	d003      	beq.n	80151a8 <__gethex+0x1ac>
 80151a0:	454b      	cmp	r3, r9
 80151a2:	dc36      	bgt.n	8015212 <__gethex+0x216>
 80151a4:	f04f 0902 	mov.w	r9, #2
 80151a8:	4629      	mov	r1, r5
 80151aa:	4620      	mov	r0, r4
 80151ac:	f7ff febf 	bl	8014f2e <rshift>
 80151b0:	442f      	add	r7, r5
 80151b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80151b6:	42bb      	cmp	r3, r7
 80151b8:	da42      	bge.n	8015240 <__gethex+0x244>
 80151ba:	9801      	ldr	r0, [sp, #4]
 80151bc:	4621      	mov	r1, r4
 80151be:	f7fd fff3 	bl	80131a8 <_Bfree>
 80151c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80151c4:	2300      	movs	r3, #0
 80151c6:	6013      	str	r3, [r2, #0]
 80151c8:	25a3      	movs	r5, #163	@ 0xa3
 80151ca:	e793      	b.n	80150f4 <__gethex+0xf8>
 80151cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80151d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80151d2:	d012      	beq.n	80151fa <__gethex+0x1fe>
 80151d4:	2b20      	cmp	r3, #32
 80151d6:	d104      	bne.n	80151e2 <__gethex+0x1e6>
 80151d8:	f845 bb04 	str.w	fp, [r5], #4
 80151dc:	f04f 0b00 	mov.w	fp, #0
 80151e0:	465b      	mov	r3, fp
 80151e2:	7830      	ldrb	r0, [r6, #0]
 80151e4:	9303      	str	r3, [sp, #12]
 80151e6:	f7ff fef4 	bl	8014fd2 <__hexdig_fun>
 80151ea:	9b03      	ldr	r3, [sp, #12]
 80151ec:	f000 000f 	and.w	r0, r0, #15
 80151f0:	4098      	lsls	r0, r3
 80151f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80151f6:	3304      	adds	r3, #4
 80151f8:	e7ae      	b.n	8015158 <__gethex+0x15c>
 80151fa:	45b1      	cmp	r9, r6
 80151fc:	d8ea      	bhi.n	80151d4 <__gethex+0x1d8>
 80151fe:	492b      	ldr	r1, [pc, #172]	@ (80152ac <__gethex+0x2b0>)
 8015200:	9303      	str	r3, [sp, #12]
 8015202:	2201      	movs	r2, #1
 8015204:	4630      	mov	r0, r6
 8015206:	f7fd f870 	bl	80122ea <strncmp>
 801520a:	9b03      	ldr	r3, [sp, #12]
 801520c:	2800      	cmp	r0, #0
 801520e:	d1e1      	bne.n	80151d4 <__gethex+0x1d8>
 8015210:	e7a2      	b.n	8015158 <__gethex+0x15c>
 8015212:	1ea9      	subs	r1, r5, #2
 8015214:	4620      	mov	r0, r4
 8015216:	f7fe fc15 	bl	8013a44 <__any_on>
 801521a:	2800      	cmp	r0, #0
 801521c:	d0c2      	beq.n	80151a4 <__gethex+0x1a8>
 801521e:	f04f 0903 	mov.w	r9, #3
 8015222:	e7c1      	b.n	80151a8 <__gethex+0x1ac>
 8015224:	da09      	bge.n	801523a <__gethex+0x23e>
 8015226:	1b75      	subs	r5, r6, r5
 8015228:	4621      	mov	r1, r4
 801522a:	9801      	ldr	r0, [sp, #4]
 801522c:	462a      	mov	r2, r5
 801522e:	f7fe f9d3 	bl	80135d8 <__lshift>
 8015232:	1b7f      	subs	r7, r7, r5
 8015234:	4604      	mov	r4, r0
 8015236:	f100 0a14 	add.w	sl, r0, #20
 801523a:	f04f 0900 	mov.w	r9, #0
 801523e:	e7b8      	b.n	80151b2 <__gethex+0x1b6>
 8015240:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015244:	42bd      	cmp	r5, r7
 8015246:	dd6f      	ble.n	8015328 <__gethex+0x32c>
 8015248:	1bed      	subs	r5, r5, r7
 801524a:	42ae      	cmp	r6, r5
 801524c:	dc34      	bgt.n	80152b8 <__gethex+0x2bc>
 801524e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015252:	2b02      	cmp	r3, #2
 8015254:	d022      	beq.n	801529c <__gethex+0x2a0>
 8015256:	2b03      	cmp	r3, #3
 8015258:	d024      	beq.n	80152a4 <__gethex+0x2a8>
 801525a:	2b01      	cmp	r3, #1
 801525c:	d115      	bne.n	801528a <__gethex+0x28e>
 801525e:	42ae      	cmp	r6, r5
 8015260:	d113      	bne.n	801528a <__gethex+0x28e>
 8015262:	2e01      	cmp	r6, #1
 8015264:	d10b      	bne.n	801527e <__gethex+0x282>
 8015266:	9a02      	ldr	r2, [sp, #8]
 8015268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801526c:	6013      	str	r3, [r2, #0]
 801526e:	2301      	movs	r3, #1
 8015270:	6123      	str	r3, [r4, #16]
 8015272:	f8ca 3000 	str.w	r3, [sl]
 8015276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015278:	2562      	movs	r5, #98	@ 0x62
 801527a:	601c      	str	r4, [r3, #0]
 801527c:	e73a      	b.n	80150f4 <__gethex+0xf8>
 801527e:	1e71      	subs	r1, r6, #1
 8015280:	4620      	mov	r0, r4
 8015282:	f7fe fbdf 	bl	8013a44 <__any_on>
 8015286:	2800      	cmp	r0, #0
 8015288:	d1ed      	bne.n	8015266 <__gethex+0x26a>
 801528a:	9801      	ldr	r0, [sp, #4]
 801528c:	4621      	mov	r1, r4
 801528e:	f7fd ff8b 	bl	80131a8 <_Bfree>
 8015292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015294:	2300      	movs	r3, #0
 8015296:	6013      	str	r3, [r2, #0]
 8015298:	2550      	movs	r5, #80	@ 0x50
 801529a:	e72b      	b.n	80150f4 <__gethex+0xf8>
 801529c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d1f3      	bne.n	801528a <__gethex+0x28e>
 80152a2:	e7e0      	b.n	8015266 <__gethex+0x26a>
 80152a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d1dd      	bne.n	8015266 <__gethex+0x26a>
 80152aa:	e7ee      	b.n	801528a <__gethex+0x28e>
 80152ac:	080163f0 	.word	0x080163f0
 80152b0:	08016286 	.word	0x08016286
 80152b4:	08016461 	.word	0x08016461
 80152b8:	1e6f      	subs	r7, r5, #1
 80152ba:	f1b9 0f00 	cmp.w	r9, #0
 80152be:	d130      	bne.n	8015322 <__gethex+0x326>
 80152c0:	b127      	cbz	r7, 80152cc <__gethex+0x2d0>
 80152c2:	4639      	mov	r1, r7
 80152c4:	4620      	mov	r0, r4
 80152c6:	f7fe fbbd 	bl	8013a44 <__any_on>
 80152ca:	4681      	mov	r9, r0
 80152cc:	117a      	asrs	r2, r7, #5
 80152ce:	2301      	movs	r3, #1
 80152d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80152d4:	f007 071f 	and.w	r7, r7, #31
 80152d8:	40bb      	lsls	r3, r7
 80152da:	4213      	tst	r3, r2
 80152dc:	4629      	mov	r1, r5
 80152de:	4620      	mov	r0, r4
 80152e0:	bf18      	it	ne
 80152e2:	f049 0902 	orrne.w	r9, r9, #2
 80152e6:	f7ff fe22 	bl	8014f2e <rshift>
 80152ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80152ee:	1b76      	subs	r6, r6, r5
 80152f0:	2502      	movs	r5, #2
 80152f2:	f1b9 0f00 	cmp.w	r9, #0
 80152f6:	d047      	beq.n	8015388 <__gethex+0x38c>
 80152f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d015      	beq.n	801532c <__gethex+0x330>
 8015300:	2b03      	cmp	r3, #3
 8015302:	d017      	beq.n	8015334 <__gethex+0x338>
 8015304:	2b01      	cmp	r3, #1
 8015306:	d109      	bne.n	801531c <__gethex+0x320>
 8015308:	f019 0f02 	tst.w	r9, #2
 801530c:	d006      	beq.n	801531c <__gethex+0x320>
 801530e:	f8da 3000 	ldr.w	r3, [sl]
 8015312:	ea49 0903 	orr.w	r9, r9, r3
 8015316:	f019 0f01 	tst.w	r9, #1
 801531a:	d10e      	bne.n	801533a <__gethex+0x33e>
 801531c:	f045 0510 	orr.w	r5, r5, #16
 8015320:	e032      	b.n	8015388 <__gethex+0x38c>
 8015322:	f04f 0901 	mov.w	r9, #1
 8015326:	e7d1      	b.n	80152cc <__gethex+0x2d0>
 8015328:	2501      	movs	r5, #1
 801532a:	e7e2      	b.n	80152f2 <__gethex+0x2f6>
 801532c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801532e:	f1c3 0301 	rsb	r3, r3, #1
 8015332:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015336:	2b00      	cmp	r3, #0
 8015338:	d0f0      	beq.n	801531c <__gethex+0x320>
 801533a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801533e:	f104 0314 	add.w	r3, r4, #20
 8015342:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015346:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801534a:	f04f 0c00 	mov.w	ip, #0
 801534e:	4618      	mov	r0, r3
 8015350:	f853 2b04 	ldr.w	r2, [r3], #4
 8015354:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015358:	d01b      	beq.n	8015392 <__gethex+0x396>
 801535a:	3201      	adds	r2, #1
 801535c:	6002      	str	r2, [r0, #0]
 801535e:	2d02      	cmp	r5, #2
 8015360:	f104 0314 	add.w	r3, r4, #20
 8015364:	d13c      	bne.n	80153e0 <__gethex+0x3e4>
 8015366:	f8d8 2000 	ldr.w	r2, [r8]
 801536a:	3a01      	subs	r2, #1
 801536c:	42b2      	cmp	r2, r6
 801536e:	d109      	bne.n	8015384 <__gethex+0x388>
 8015370:	1171      	asrs	r1, r6, #5
 8015372:	2201      	movs	r2, #1
 8015374:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015378:	f006 061f 	and.w	r6, r6, #31
 801537c:	fa02 f606 	lsl.w	r6, r2, r6
 8015380:	421e      	tst	r6, r3
 8015382:	d13a      	bne.n	80153fa <__gethex+0x3fe>
 8015384:	f045 0520 	orr.w	r5, r5, #32
 8015388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801538a:	601c      	str	r4, [r3, #0]
 801538c:	9b02      	ldr	r3, [sp, #8]
 801538e:	601f      	str	r7, [r3, #0]
 8015390:	e6b0      	b.n	80150f4 <__gethex+0xf8>
 8015392:	4299      	cmp	r1, r3
 8015394:	f843 cc04 	str.w	ip, [r3, #-4]
 8015398:	d8d9      	bhi.n	801534e <__gethex+0x352>
 801539a:	68a3      	ldr	r3, [r4, #8]
 801539c:	459b      	cmp	fp, r3
 801539e:	db17      	blt.n	80153d0 <__gethex+0x3d4>
 80153a0:	6861      	ldr	r1, [r4, #4]
 80153a2:	9801      	ldr	r0, [sp, #4]
 80153a4:	3101      	adds	r1, #1
 80153a6:	f7fd febf 	bl	8013128 <_Balloc>
 80153aa:	4681      	mov	r9, r0
 80153ac:	b918      	cbnz	r0, 80153b6 <__gethex+0x3ba>
 80153ae:	4b1a      	ldr	r3, [pc, #104]	@ (8015418 <__gethex+0x41c>)
 80153b0:	4602      	mov	r2, r0
 80153b2:	2184      	movs	r1, #132	@ 0x84
 80153b4:	e6c5      	b.n	8015142 <__gethex+0x146>
 80153b6:	6922      	ldr	r2, [r4, #16]
 80153b8:	3202      	adds	r2, #2
 80153ba:	f104 010c 	add.w	r1, r4, #12
 80153be:	0092      	lsls	r2, r2, #2
 80153c0:	300c      	adds	r0, #12
 80153c2:	f7fd f84a 	bl	801245a <memcpy>
 80153c6:	4621      	mov	r1, r4
 80153c8:	9801      	ldr	r0, [sp, #4]
 80153ca:	f7fd feed 	bl	80131a8 <_Bfree>
 80153ce:	464c      	mov	r4, r9
 80153d0:	6923      	ldr	r3, [r4, #16]
 80153d2:	1c5a      	adds	r2, r3, #1
 80153d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80153d8:	6122      	str	r2, [r4, #16]
 80153da:	2201      	movs	r2, #1
 80153dc:	615a      	str	r2, [r3, #20]
 80153de:	e7be      	b.n	801535e <__gethex+0x362>
 80153e0:	6922      	ldr	r2, [r4, #16]
 80153e2:	455a      	cmp	r2, fp
 80153e4:	dd0b      	ble.n	80153fe <__gethex+0x402>
 80153e6:	2101      	movs	r1, #1
 80153e8:	4620      	mov	r0, r4
 80153ea:	f7ff fda0 	bl	8014f2e <rshift>
 80153ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153f2:	3701      	adds	r7, #1
 80153f4:	42bb      	cmp	r3, r7
 80153f6:	f6ff aee0 	blt.w	80151ba <__gethex+0x1be>
 80153fa:	2501      	movs	r5, #1
 80153fc:	e7c2      	b.n	8015384 <__gethex+0x388>
 80153fe:	f016 061f 	ands.w	r6, r6, #31
 8015402:	d0fa      	beq.n	80153fa <__gethex+0x3fe>
 8015404:	4453      	add	r3, sl
 8015406:	f1c6 0620 	rsb	r6, r6, #32
 801540a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801540e:	f7fd ff7d 	bl	801330c <__hi0bits>
 8015412:	42b0      	cmp	r0, r6
 8015414:	dbe7      	blt.n	80153e6 <__gethex+0x3ea>
 8015416:	e7f0      	b.n	80153fa <__gethex+0x3fe>
 8015418:	08016286 	.word	0x08016286

0801541c <L_shift>:
 801541c:	f1c2 0208 	rsb	r2, r2, #8
 8015420:	0092      	lsls	r2, r2, #2
 8015422:	b570      	push	{r4, r5, r6, lr}
 8015424:	f1c2 0620 	rsb	r6, r2, #32
 8015428:	6843      	ldr	r3, [r0, #4]
 801542a:	6804      	ldr	r4, [r0, #0]
 801542c:	fa03 f506 	lsl.w	r5, r3, r6
 8015430:	432c      	orrs	r4, r5
 8015432:	40d3      	lsrs	r3, r2
 8015434:	6004      	str	r4, [r0, #0]
 8015436:	f840 3f04 	str.w	r3, [r0, #4]!
 801543a:	4288      	cmp	r0, r1
 801543c:	d3f4      	bcc.n	8015428 <L_shift+0xc>
 801543e:	bd70      	pop	{r4, r5, r6, pc}

08015440 <__match>:
 8015440:	b530      	push	{r4, r5, lr}
 8015442:	6803      	ldr	r3, [r0, #0]
 8015444:	3301      	adds	r3, #1
 8015446:	f811 4b01 	ldrb.w	r4, [r1], #1
 801544a:	b914      	cbnz	r4, 8015452 <__match+0x12>
 801544c:	6003      	str	r3, [r0, #0]
 801544e:	2001      	movs	r0, #1
 8015450:	bd30      	pop	{r4, r5, pc}
 8015452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015456:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801545a:	2d19      	cmp	r5, #25
 801545c:	bf98      	it	ls
 801545e:	3220      	addls	r2, #32
 8015460:	42a2      	cmp	r2, r4
 8015462:	d0f0      	beq.n	8015446 <__match+0x6>
 8015464:	2000      	movs	r0, #0
 8015466:	e7f3      	b.n	8015450 <__match+0x10>

08015468 <__hexnan>:
 8015468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	680b      	ldr	r3, [r1, #0]
 801546e:	6801      	ldr	r1, [r0, #0]
 8015470:	115e      	asrs	r6, r3, #5
 8015472:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015476:	f013 031f 	ands.w	r3, r3, #31
 801547a:	b087      	sub	sp, #28
 801547c:	bf18      	it	ne
 801547e:	3604      	addne	r6, #4
 8015480:	2500      	movs	r5, #0
 8015482:	1f37      	subs	r7, r6, #4
 8015484:	4682      	mov	sl, r0
 8015486:	4690      	mov	r8, r2
 8015488:	9301      	str	r3, [sp, #4]
 801548a:	f846 5c04 	str.w	r5, [r6, #-4]
 801548e:	46b9      	mov	r9, r7
 8015490:	463c      	mov	r4, r7
 8015492:	9502      	str	r5, [sp, #8]
 8015494:	46ab      	mov	fp, r5
 8015496:	784a      	ldrb	r2, [r1, #1]
 8015498:	1c4b      	adds	r3, r1, #1
 801549a:	9303      	str	r3, [sp, #12]
 801549c:	b342      	cbz	r2, 80154f0 <__hexnan+0x88>
 801549e:	4610      	mov	r0, r2
 80154a0:	9105      	str	r1, [sp, #20]
 80154a2:	9204      	str	r2, [sp, #16]
 80154a4:	f7ff fd95 	bl	8014fd2 <__hexdig_fun>
 80154a8:	2800      	cmp	r0, #0
 80154aa:	d151      	bne.n	8015550 <__hexnan+0xe8>
 80154ac:	9a04      	ldr	r2, [sp, #16]
 80154ae:	9905      	ldr	r1, [sp, #20]
 80154b0:	2a20      	cmp	r2, #32
 80154b2:	d818      	bhi.n	80154e6 <__hexnan+0x7e>
 80154b4:	9b02      	ldr	r3, [sp, #8]
 80154b6:	459b      	cmp	fp, r3
 80154b8:	dd13      	ble.n	80154e2 <__hexnan+0x7a>
 80154ba:	454c      	cmp	r4, r9
 80154bc:	d206      	bcs.n	80154cc <__hexnan+0x64>
 80154be:	2d07      	cmp	r5, #7
 80154c0:	dc04      	bgt.n	80154cc <__hexnan+0x64>
 80154c2:	462a      	mov	r2, r5
 80154c4:	4649      	mov	r1, r9
 80154c6:	4620      	mov	r0, r4
 80154c8:	f7ff ffa8 	bl	801541c <L_shift>
 80154cc:	4544      	cmp	r4, r8
 80154ce:	d952      	bls.n	8015576 <__hexnan+0x10e>
 80154d0:	2300      	movs	r3, #0
 80154d2:	f1a4 0904 	sub.w	r9, r4, #4
 80154d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80154da:	f8cd b008 	str.w	fp, [sp, #8]
 80154de:	464c      	mov	r4, r9
 80154e0:	461d      	mov	r5, r3
 80154e2:	9903      	ldr	r1, [sp, #12]
 80154e4:	e7d7      	b.n	8015496 <__hexnan+0x2e>
 80154e6:	2a29      	cmp	r2, #41	@ 0x29
 80154e8:	d157      	bne.n	801559a <__hexnan+0x132>
 80154ea:	3102      	adds	r1, #2
 80154ec:	f8ca 1000 	str.w	r1, [sl]
 80154f0:	f1bb 0f00 	cmp.w	fp, #0
 80154f4:	d051      	beq.n	801559a <__hexnan+0x132>
 80154f6:	454c      	cmp	r4, r9
 80154f8:	d206      	bcs.n	8015508 <__hexnan+0xa0>
 80154fa:	2d07      	cmp	r5, #7
 80154fc:	dc04      	bgt.n	8015508 <__hexnan+0xa0>
 80154fe:	462a      	mov	r2, r5
 8015500:	4649      	mov	r1, r9
 8015502:	4620      	mov	r0, r4
 8015504:	f7ff ff8a 	bl	801541c <L_shift>
 8015508:	4544      	cmp	r4, r8
 801550a:	d936      	bls.n	801557a <__hexnan+0x112>
 801550c:	f1a8 0204 	sub.w	r2, r8, #4
 8015510:	4623      	mov	r3, r4
 8015512:	f853 1b04 	ldr.w	r1, [r3], #4
 8015516:	f842 1f04 	str.w	r1, [r2, #4]!
 801551a:	429f      	cmp	r7, r3
 801551c:	d2f9      	bcs.n	8015512 <__hexnan+0xaa>
 801551e:	1b3b      	subs	r3, r7, r4
 8015520:	f023 0303 	bic.w	r3, r3, #3
 8015524:	3304      	adds	r3, #4
 8015526:	3401      	adds	r4, #1
 8015528:	3e03      	subs	r6, #3
 801552a:	42b4      	cmp	r4, r6
 801552c:	bf88      	it	hi
 801552e:	2304      	movhi	r3, #4
 8015530:	4443      	add	r3, r8
 8015532:	2200      	movs	r2, #0
 8015534:	f843 2b04 	str.w	r2, [r3], #4
 8015538:	429f      	cmp	r7, r3
 801553a:	d2fb      	bcs.n	8015534 <__hexnan+0xcc>
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	b91b      	cbnz	r3, 8015548 <__hexnan+0xe0>
 8015540:	4547      	cmp	r7, r8
 8015542:	d128      	bne.n	8015596 <__hexnan+0x12e>
 8015544:	2301      	movs	r3, #1
 8015546:	603b      	str	r3, [r7, #0]
 8015548:	2005      	movs	r0, #5
 801554a:	b007      	add	sp, #28
 801554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015550:	3501      	adds	r5, #1
 8015552:	2d08      	cmp	r5, #8
 8015554:	f10b 0b01 	add.w	fp, fp, #1
 8015558:	dd06      	ble.n	8015568 <__hexnan+0x100>
 801555a:	4544      	cmp	r4, r8
 801555c:	d9c1      	bls.n	80154e2 <__hexnan+0x7a>
 801555e:	2300      	movs	r3, #0
 8015560:	f844 3c04 	str.w	r3, [r4, #-4]
 8015564:	2501      	movs	r5, #1
 8015566:	3c04      	subs	r4, #4
 8015568:	6822      	ldr	r2, [r4, #0]
 801556a:	f000 000f 	and.w	r0, r0, #15
 801556e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015572:	6020      	str	r0, [r4, #0]
 8015574:	e7b5      	b.n	80154e2 <__hexnan+0x7a>
 8015576:	2508      	movs	r5, #8
 8015578:	e7b3      	b.n	80154e2 <__hexnan+0x7a>
 801557a:	9b01      	ldr	r3, [sp, #4]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d0dd      	beq.n	801553c <__hexnan+0xd4>
 8015580:	f1c3 0320 	rsb	r3, r3, #32
 8015584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015588:	40da      	lsrs	r2, r3
 801558a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801558e:	4013      	ands	r3, r2
 8015590:	f846 3c04 	str.w	r3, [r6, #-4]
 8015594:	e7d2      	b.n	801553c <__hexnan+0xd4>
 8015596:	3f04      	subs	r7, #4
 8015598:	e7d0      	b.n	801553c <__hexnan+0xd4>
 801559a:	2004      	movs	r0, #4
 801559c:	e7d5      	b.n	801554a <__hexnan+0xe2>

0801559e <__ascii_mbtowc>:
 801559e:	b082      	sub	sp, #8
 80155a0:	b901      	cbnz	r1, 80155a4 <__ascii_mbtowc+0x6>
 80155a2:	a901      	add	r1, sp, #4
 80155a4:	b142      	cbz	r2, 80155b8 <__ascii_mbtowc+0x1a>
 80155a6:	b14b      	cbz	r3, 80155bc <__ascii_mbtowc+0x1e>
 80155a8:	7813      	ldrb	r3, [r2, #0]
 80155aa:	600b      	str	r3, [r1, #0]
 80155ac:	7812      	ldrb	r2, [r2, #0]
 80155ae:	1e10      	subs	r0, r2, #0
 80155b0:	bf18      	it	ne
 80155b2:	2001      	movne	r0, #1
 80155b4:	b002      	add	sp, #8
 80155b6:	4770      	bx	lr
 80155b8:	4610      	mov	r0, r2
 80155ba:	e7fb      	b.n	80155b4 <__ascii_mbtowc+0x16>
 80155bc:	f06f 0001 	mvn.w	r0, #1
 80155c0:	e7f8      	b.n	80155b4 <__ascii_mbtowc+0x16>

080155c2 <__ascii_wctomb>:
 80155c2:	4603      	mov	r3, r0
 80155c4:	4608      	mov	r0, r1
 80155c6:	b141      	cbz	r1, 80155da <__ascii_wctomb+0x18>
 80155c8:	2aff      	cmp	r2, #255	@ 0xff
 80155ca:	d904      	bls.n	80155d6 <__ascii_wctomb+0x14>
 80155cc:	228a      	movs	r2, #138	@ 0x8a
 80155ce:	601a      	str	r2, [r3, #0]
 80155d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155d4:	4770      	bx	lr
 80155d6:	700a      	strb	r2, [r1, #0]
 80155d8:	2001      	movs	r0, #1
 80155da:	4770      	bx	lr

080155dc <__swhatbuf_r>:
 80155dc:	b570      	push	{r4, r5, r6, lr}
 80155de:	460c      	mov	r4, r1
 80155e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155e4:	2900      	cmp	r1, #0
 80155e6:	b096      	sub	sp, #88	@ 0x58
 80155e8:	4615      	mov	r5, r2
 80155ea:	461e      	mov	r6, r3
 80155ec:	da0d      	bge.n	801560a <__swhatbuf_r+0x2e>
 80155ee:	89a3      	ldrh	r3, [r4, #12]
 80155f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80155f4:	f04f 0100 	mov.w	r1, #0
 80155f8:	bf14      	ite	ne
 80155fa:	2340      	movne	r3, #64	@ 0x40
 80155fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015600:	2000      	movs	r0, #0
 8015602:	6031      	str	r1, [r6, #0]
 8015604:	602b      	str	r3, [r5, #0]
 8015606:	b016      	add	sp, #88	@ 0x58
 8015608:	bd70      	pop	{r4, r5, r6, pc}
 801560a:	466a      	mov	r2, sp
 801560c:	f000 f878 	bl	8015700 <_fstat_r>
 8015610:	2800      	cmp	r0, #0
 8015612:	dbec      	blt.n	80155ee <__swhatbuf_r+0x12>
 8015614:	9901      	ldr	r1, [sp, #4]
 8015616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801561a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801561e:	4259      	negs	r1, r3
 8015620:	4159      	adcs	r1, r3
 8015622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015626:	e7eb      	b.n	8015600 <__swhatbuf_r+0x24>

08015628 <__smakebuf_r>:
 8015628:	898b      	ldrh	r3, [r1, #12]
 801562a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801562c:	079d      	lsls	r5, r3, #30
 801562e:	4606      	mov	r6, r0
 8015630:	460c      	mov	r4, r1
 8015632:	d507      	bpl.n	8015644 <__smakebuf_r+0x1c>
 8015634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015638:	6023      	str	r3, [r4, #0]
 801563a:	6123      	str	r3, [r4, #16]
 801563c:	2301      	movs	r3, #1
 801563e:	6163      	str	r3, [r4, #20]
 8015640:	b003      	add	sp, #12
 8015642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015644:	ab01      	add	r3, sp, #4
 8015646:	466a      	mov	r2, sp
 8015648:	f7ff ffc8 	bl	80155dc <__swhatbuf_r>
 801564c:	9f00      	ldr	r7, [sp, #0]
 801564e:	4605      	mov	r5, r0
 8015650:	4639      	mov	r1, r7
 8015652:	4630      	mov	r0, r6
 8015654:	f7fb fca8 	bl	8010fa8 <_malloc_r>
 8015658:	b948      	cbnz	r0, 801566e <__smakebuf_r+0x46>
 801565a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801565e:	059a      	lsls	r2, r3, #22
 8015660:	d4ee      	bmi.n	8015640 <__smakebuf_r+0x18>
 8015662:	f023 0303 	bic.w	r3, r3, #3
 8015666:	f043 0302 	orr.w	r3, r3, #2
 801566a:	81a3      	strh	r3, [r4, #12]
 801566c:	e7e2      	b.n	8015634 <__smakebuf_r+0xc>
 801566e:	89a3      	ldrh	r3, [r4, #12]
 8015670:	6020      	str	r0, [r4, #0]
 8015672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015676:	81a3      	strh	r3, [r4, #12]
 8015678:	9b01      	ldr	r3, [sp, #4]
 801567a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801567e:	b15b      	cbz	r3, 8015698 <__smakebuf_r+0x70>
 8015680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015684:	4630      	mov	r0, r6
 8015686:	f000 f84d 	bl	8015724 <_isatty_r>
 801568a:	b128      	cbz	r0, 8015698 <__smakebuf_r+0x70>
 801568c:	89a3      	ldrh	r3, [r4, #12]
 801568e:	f023 0303 	bic.w	r3, r3, #3
 8015692:	f043 0301 	orr.w	r3, r3, #1
 8015696:	81a3      	strh	r3, [r4, #12]
 8015698:	89a3      	ldrh	r3, [r4, #12]
 801569a:	431d      	orrs	r5, r3
 801569c:	81a5      	strh	r5, [r4, #12]
 801569e:	e7cf      	b.n	8015640 <__smakebuf_r+0x18>

080156a0 <_raise_r>:
 80156a0:	291f      	cmp	r1, #31
 80156a2:	b538      	push	{r3, r4, r5, lr}
 80156a4:	4605      	mov	r5, r0
 80156a6:	460c      	mov	r4, r1
 80156a8:	d904      	bls.n	80156b4 <_raise_r+0x14>
 80156aa:	2316      	movs	r3, #22
 80156ac:	6003      	str	r3, [r0, #0]
 80156ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80156b2:	bd38      	pop	{r3, r4, r5, pc}
 80156b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80156b6:	b112      	cbz	r2, 80156be <_raise_r+0x1e>
 80156b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80156bc:	b94b      	cbnz	r3, 80156d2 <_raise_r+0x32>
 80156be:	4628      	mov	r0, r5
 80156c0:	f000 f852 	bl	8015768 <_getpid_r>
 80156c4:	4622      	mov	r2, r4
 80156c6:	4601      	mov	r1, r0
 80156c8:	4628      	mov	r0, r5
 80156ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156ce:	f000 b839 	b.w	8015744 <_kill_r>
 80156d2:	2b01      	cmp	r3, #1
 80156d4:	d00a      	beq.n	80156ec <_raise_r+0x4c>
 80156d6:	1c59      	adds	r1, r3, #1
 80156d8:	d103      	bne.n	80156e2 <_raise_r+0x42>
 80156da:	2316      	movs	r3, #22
 80156dc:	6003      	str	r3, [r0, #0]
 80156de:	2001      	movs	r0, #1
 80156e0:	e7e7      	b.n	80156b2 <_raise_r+0x12>
 80156e2:	2100      	movs	r1, #0
 80156e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80156e8:	4620      	mov	r0, r4
 80156ea:	4798      	blx	r3
 80156ec:	2000      	movs	r0, #0
 80156ee:	e7e0      	b.n	80156b2 <_raise_r+0x12>

080156f0 <raise>:
 80156f0:	4b02      	ldr	r3, [pc, #8]	@ (80156fc <raise+0xc>)
 80156f2:	4601      	mov	r1, r0
 80156f4:	6818      	ldr	r0, [r3, #0]
 80156f6:	f7ff bfd3 	b.w	80156a0 <_raise_r>
 80156fa:	bf00      	nop
 80156fc:	20000078 	.word	0x20000078

08015700 <_fstat_r>:
 8015700:	b538      	push	{r3, r4, r5, lr}
 8015702:	4d07      	ldr	r5, [pc, #28]	@ (8015720 <_fstat_r+0x20>)
 8015704:	2300      	movs	r3, #0
 8015706:	4604      	mov	r4, r0
 8015708:	4608      	mov	r0, r1
 801570a:	4611      	mov	r1, r2
 801570c:	602b      	str	r3, [r5, #0]
 801570e:	f7ec f8f3 	bl	80018f8 <_fstat>
 8015712:	1c43      	adds	r3, r0, #1
 8015714:	d102      	bne.n	801571c <_fstat_r+0x1c>
 8015716:	682b      	ldr	r3, [r5, #0]
 8015718:	b103      	cbz	r3, 801571c <_fstat_r+0x1c>
 801571a:	6023      	str	r3, [r4, #0]
 801571c:	bd38      	pop	{r3, r4, r5, pc}
 801571e:	bf00      	nop
 8015720:	2000c2ac 	.word	0x2000c2ac

08015724 <_isatty_r>:
 8015724:	b538      	push	{r3, r4, r5, lr}
 8015726:	4d06      	ldr	r5, [pc, #24]	@ (8015740 <_isatty_r+0x1c>)
 8015728:	2300      	movs	r3, #0
 801572a:	4604      	mov	r4, r0
 801572c:	4608      	mov	r0, r1
 801572e:	602b      	str	r3, [r5, #0]
 8015730:	f7ec f8f2 	bl	8001918 <_isatty>
 8015734:	1c43      	adds	r3, r0, #1
 8015736:	d102      	bne.n	801573e <_isatty_r+0x1a>
 8015738:	682b      	ldr	r3, [r5, #0]
 801573a:	b103      	cbz	r3, 801573e <_isatty_r+0x1a>
 801573c:	6023      	str	r3, [r4, #0]
 801573e:	bd38      	pop	{r3, r4, r5, pc}
 8015740:	2000c2ac 	.word	0x2000c2ac

08015744 <_kill_r>:
 8015744:	b538      	push	{r3, r4, r5, lr}
 8015746:	4d07      	ldr	r5, [pc, #28]	@ (8015764 <_kill_r+0x20>)
 8015748:	2300      	movs	r3, #0
 801574a:	4604      	mov	r4, r0
 801574c:	4608      	mov	r0, r1
 801574e:	4611      	mov	r1, r2
 8015750:	602b      	str	r3, [r5, #0]
 8015752:	f7ec f871 	bl	8001838 <_kill>
 8015756:	1c43      	adds	r3, r0, #1
 8015758:	d102      	bne.n	8015760 <_kill_r+0x1c>
 801575a:	682b      	ldr	r3, [r5, #0]
 801575c:	b103      	cbz	r3, 8015760 <_kill_r+0x1c>
 801575e:	6023      	str	r3, [r4, #0]
 8015760:	bd38      	pop	{r3, r4, r5, pc}
 8015762:	bf00      	nop
 8015764:	2000c2ac 	.word	0x2000c2ac

08015768 <_getpid_r>:
 8015768:	f7ec b85e 	b.w	8001828 <_getpid>

0801576c <_init>:
 801576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801576e:	bf00      	nop
 8015770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015772:	bc08      	pop	{r3}
 8015774:	469e      	mov	lr, r3
 8015776:	4770      	bx	lr

08015778 <_fini>:
 8015778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801577a:	bf00      	nop
 801577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801577e:	bc08      	pop	{r3}
 8015780:	469e      	mov	lr, r3
 8015782:	4770      	bx	lr
